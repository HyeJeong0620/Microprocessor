
407_camera_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b94  08006b94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b9c  08006b9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000198  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d666  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002588  00000000  00000000  0002d70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000aa8  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003fda  00000000  00000000  00031308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc48  00000000  00000000  000352e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c94c5  00000000  00000000  00044f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e3ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036f8  00000000  00000000  0010e440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a50 	.word	0x08006a50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006a50 	.word	0x08006a50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ILI9341_Write_Command>:
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
}*/

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint16_t Command)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]
//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
//ILI9341_SPI_Send(Command);
//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	LCD_REG = Command;
 800057e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	8013      	strh	r3, [r2, #0]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint16_t Data)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
//HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
//ILI9341_SPI_Send(Data);
//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	LCD_DATA = Data;
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <ILI9341_Write_Data+0x1c>)
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	8013      	strh	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	60020000 	.word	0x60020000

080005b4 <ILI9341_Get_Draw_Address>:

inline uint16_t* ILI9341_Get_Draw_Address()
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return (uint16_t*)LCD_DATA_ADDR;
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <ILI9341_Get_Draw_Address+0x10>)
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	60020000 	.word	0x60020000

080005c8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4604      	mov	r4, r0
 80005d0:	4608      	mov	r0, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	461a      	mov	r2, r3
 80005d6:	4623      	mov	r3, r4
 80005d8:	80fb      	strh	r3, [r7, #6]
 80005da:	4603      	mov	r3, r0
 80005dc:	80bb      	strh	r3, [r7, #4]
 80005de:	460b      	mov	r3, r1
 80005e0:	807b      	strh	r3, [r7, #2]
 80005e2:	4613      	mov	r3, r2
 80005e4:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80005e6:	202a      	movs	r0, #42	; 0x2a
 80005e8:	f7ff ffc4 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffce 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffca 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	b29b      	uxth	r3, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffc4 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffc0 	bl	8000594 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000614:	202b      	movs	r0, #43	; 0x2b
 8000616:	f7ff ffad 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800061a:	88bb      	ldrh	r3, [r7, #4]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	b29b      	uxth	r3, r3
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffb7 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffb3 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800062e:	883b      	ldrh	r3, [r7, #0]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	b29b      	uxth	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffad 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800063a:	883b      	ldrh	r3, [r7, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffa9 	bl	8000594 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000642:	202c      	movs	r0, #44	; 0x2c
 8000644:	f7ff ff96 	bl	8000574 <ILI9341_Write_Command>
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}

08000650 <ILI9341_Set_Rotation>:
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
}

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800065e:	2036      	movs	r0, #54	; 0x36
 8000660:	f7ff ff88 	bl	8000574 <ILI9341_Write_Command>
HAL_Delay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 ffe3 	bl	8001630 <HAL_Delay>
	
switch(screen_rotation) 
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d837      	bhi.n	80006e0 <ILI9341_Set_Rotation+0x90>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <ILI9341_Set_Rotation+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000689 	.word	0x08000689
 800067c:	0800069f 	.word	0x0800069f
 8000680:	080006b5 	.word	0x080006b5
 8000684:	080006cb 	.word	0x080006cb
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000688:	2048      	movs	r0, #72	; 0x48
 800068a:	f7ff ff83 	bl	8000594 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <ILI9341_Set_Rotation+0x9c>)
 8000690:	22f0      	movs	r2, #240	; 0xf0
 8000692:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <ILI9341_Set_Rotation+0xa0>)
 8000696:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800069a:	801a      	strh	r2, [r3, #0]
			break;
 800069c:	e021      	b.n	80006e2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800069e:	2028      	movs	r0, #40	; 0x28
 80006a0:	f7ff ff78 	bl	8000594 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <ILI9341_Set_Rotation+0x9c>)
 80006a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80006aa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <ILI9341_Set_Rotation+0xa0>)
 80006ae:	22f0      	movs	r2, #240	; 0xf0
 80006b0:	801a      	strh	r2, [r3, #0]
			break;
 80006b2:	e016      	b.n	80006e2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80006b4:	2088      	movs	r0, #136	; 0x88
 80006b6:	f7ff ff6d 	bl	8000594 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <ILI9341_Set_Rotation+0x9c>)
 80006bc:	22f0      	movs	r2, #240	; 0xf0
 80006be:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <ILI9341_Set_Rotation+0xa0>)
 80006c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80006c6:	801a      	strh	r2, [r3, #0]
			break;
 80006c8:	e00b      	b.n	80006e2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80006ca:	20e8      	movs	r0, #232	; 0xe8
 80006cc:	f7ff ff62 	bl	8000594 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <ILI9341_Set_Rotation+0x9c>)
 80006d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80006d6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <ILI9341_Set_Rotation+0xa0>)
 80006da:	22f0      	movs	r2, #240	; 0xf0
 80006dc:	801a      	strh	r2, [r3, #0]
			break;
 80006de:	e000      	b.n	80006e2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80006e0:	bf00      	nop
	}
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000002 	.word	0x20000002
 80006f0:	20000000 	.word	0x20000000

080006f4 <ILI9341_Lcd_Clear>:
{
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
}

void ILI9341_Lcd_Clear(uint16_t color)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]

	ILI9341_Set_Address(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <ILI9341_Lcd_Clear+0x50>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	b29b      	uxth	r3, r3
 8000708:	3b01      	subs	r3, #1
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <ILI9341_Lcd_Clear+0x54>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	b29b      	uxth	r3, r3
 8000712:	3b01      	subs	r3, #1
 8000714:	b29b      	uxth	r3, r3
 8000716:	2100      	movs	r1, #0
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff55 	bl	80005c8 <ILI9341_Set_Address>

	  for(index=0;index < 76800;index++)
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e006      	b.n	8000732 <ILI9341_Lcd_Clear+0x3e>
	  {
		  ILI9341_Write_Data(color);
 8000724:	88fb      	ldrh	r3, [r7, #6]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff34 	bl	8000594 <ILI9341_Write_Data>
	  for(index=0;index < 76800;index++)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000738:	d3f4      	bcc.n	8000724 <ILI9341_Lcd_Clear+0x30>
	  }
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000002 	.word	0x20000002
 8000748:	20000000 	.word	0x20000000

0800074c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
//ILI9341_Enable();
//ILI9341_SPI_Init();
//ILI9341_Reset();

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff0f 	bl	8000574 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075a:	f000 ff69 	bl	8001630 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800075e:	20cb      	movs	r0, #203	; 0xcb
 8000760:	f7ff ff08 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000764:	2039      	movs	r0, #57	; 0x39
 8000766:	f7ff ff15 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800076a:	202c      	movs	r0, #44	; 0x2c
 800076c:	f7ff ff12 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ff0f 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000776:	2034      	movs	r0, #52	; 0x34
 8000778:	f7ff ff0c 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff ff09 	bl	8000594 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000782:	20cf      	movs	r0, #207	; 0xcf
 8000784:	f7ff fef6 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff ff03 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800078e:	20c1      	movs	r0, #193	; 0xc1
 8000790:	f7ff ff00 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000794:	2030      	movs	r0, #48	; 0x30
 8000796:	f7ff fefd 	bl	8000594 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800079a:	20e8      	movs	r0, #232	; 0xe8
 800079c:	f7ff feea 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80007a0:	2085      	movs	r0, #133	; 0x85
 80007a2:	f7ff fef7 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fef4 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80007ac:	2078      	movs	r0, #120	; 0x78
 80007ae:	f7ff fef1 	bl	8000594 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80007b2:	20ea      	movs	r0, #234	; 0xea
 80007b4:	f7ff fede 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff feeb 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fee8 	bl	8000594 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80007c4:	20ed      	movs	r0, #237	; 0xed
 80007c6:	f7ff fed5 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80007ca:	2064      	movs	r0, #100	; 0x64
 80007cc:	f7ff fee2 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f7ff fedf 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80007d6:	2012      	movs	r0, #18
 80007d8:	f7ff fedc 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80007dc:	2081      	movs	r0, #129	; 0x81
 80007de:	f7ff fed9 	bl	8000594 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80007e2:	20f7      	movs	r0, #247	; 0xf7
 80007e4:	f7ff fec6 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80007e8:	2020      	movs	r0, #32
 80007ea:	f7ff fed3 	bl	8000594 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80007ee:	20c0      	movs	r0, #192	; 0xc0
 80007f0:	f7ff fec0 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80007f4:	2023      	movs	r0, #35	; 0x23
 80007f6:	f7ff fecd 	bl	8000594 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80007fa:	20c1      	movs	r0, #193	; 0xc1
 80007fc:	f7ff feba 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000800:	2010      	movs	r0, #16
 8000802:	f7ff fec7 	bl	8000594 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000806:	20c5      	movs	r0, #197	; 0xc5
 8000808:	f7ff feb4 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800080c:	203e      	movs	r0, #62	; 0x3e
 800080e:	f7ff fec1 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000812:	2028      	movs	r0, #40	; 0x28
 8000814:	f7ff febe 	bl	8000594 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000818:	20c7      	movs	r0, #199	; 0xc7
 800081a:	f7ff feab 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800081e:	2086      	movs	r0, #134	; 0x86
 8000820:	f7ff feb8 	bl	8000594 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000824:	2036      	movs	r0, #54	; 0x36
 8000826:	f7ff fea5 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x68);
 800082a:	2068      	movs	r0, #104	; 0x68
 800082c:	f7ff feb2 	bl	8000594 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000830:	203a      	movs	r0, #58	; 0x3a
 8000832:	f7ff fe9f 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000836:	2055      	movs	r0, #85	; 0x55
 8000838:	f7ff feac 	bl	8000594 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800083c:	20b1      	movs	r0, #177	; 0xb1
 800083e:	f7ff fe99 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fea6 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000848:	2018      	movs	r0, #24
 800084a:	f7ff fea3 	bl	8000594 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800084e:	20b6      	movs	r0, #182	; 0xb6
 8000850:	f7ff fe90 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000854:	2008      	movs	r0, #8
 8000856:	f7ff fe9d 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800085a:	2082      	movs	r0, #130	; 0x82
 800085c:	f7ff fe9a 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000860:	2027      	movs	r0, #39	; 0x27
 8000862:	f7ff fe97 	bl	8000594 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000866:	20f2      	movs	r0, #242	; 0xf2
 8000868:	f7ff fe84 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff fe91 	bl	8000594 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000872:	2026      	movs	r0, #38	; 0x26
 8000874:	f7ff fe7e 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000878:	2001      	movs	r0, #1
 800087a:	f7ff fe8b 	bl	8000594 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800087e:	20e0      	movs	r0, #224	; 0xe0
 8000880:	f7ff fe78 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000884:	200f      	movs	r0, #15
 8000886:	f7ff fe85 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800088a:	2031      	movs	r0, #49	; 0x31
 800088c:	f7ff fe82 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000890:	202b      	movs	r0, #43	; 0x2b
 8000892:	f7ff fe7f 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000896:	200c      	movs	r0, #12
 8000898:	f7ff fe7c 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800089c:	200e      	movs	r0, #14
 800089e:	f7ff fe79 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80008a2:	2008      	movs	r0, #8
 80008a4:	f7ff fe76 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80008a8:	204e      	movs	r0, #78	; 0x4e
 80008aa:	f7ff fe73 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80008ae:	20f1      	movs	r0, #241	; 0xf1
 80008b0:	f7ff fe70 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80008b4:	2037      	movs	r0, #55	; 0x37
 80008b6:	f7ff fe6d 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80008ba:	2007      	movs	r0, #7
 80008bc:	f7ff fe6a 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80008c0:	2010      	movs	r0, #16
 80008c2:	f7ff fe67 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80008c6:	2003      	movs	r0, #3
 80008c8:	f7ff fe64 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80008cc:	200e      	movs	r0, #14
 80008ce:	f7ff fe61 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80008d2:	2009      	movs	r0, #9
 80008d4:	f7ff fe5e 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fe5b 	bl	8000594 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80008de:	20e1      	movs	r0, #225	; 0xe1
 80008e0:	f7ff fe48 	bl	8000574 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff fe55 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80008ea:	200e      	movs	r0, #14
 80008ec:	f7ff fe52 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80008f0:	2014      	movs	r0, #20
 80008f2:	f7ff fe4f 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80008f6:	2003      	movs	r0, #3
 80008f8:	f7ff fe4c 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80008fc:	2011      	movs	r0, #17
 80008fe:	f7ff fe49 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000902:	2007      	movs	r0, #7
 8000904:	f7ff fe46 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000908:	2031      	movs	r0, #49	; 0x31
 800090a:	f7ff fe43 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800090e:	20c1      	movs	r0, #193	; 0xc1
 8000910:	f7ff fe40 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000914:	2048      	movs	r0, #72	; 0x48
 8000916:	f7ff fe3d 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800091a:	2008      	movs	r0, #8
 800091c:	f7ff fe3a 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000920:	200f      	movs	r0, #15
 8000922:	f7ff fe37 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000926:	200c      	movs	r0, #12
 8000928:	f7ff fe34 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800092c:	2031      	movs	r0, #49	; 0x31
 800092e:	f7ff fe31 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000932:	2036      	movs	r0, #54	; 0x36
 8000934:	f7ff fe2e 	bl	8000594 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000938:	200f      	movs	r0, #15
 800093a:	f7ff fe2b 	bl	8000594 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800093e:	2011      	movs	r0, #17
 8000940:	f7ff fe18 	bl	8000574 <ILI9341_Write_Command>
HAL_Delay(120);
 8000944:	2078      	movs	r0, #120	; 0x78
 8000946:	f000 fe73 	bl	8001630 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800094a:	2029      	movs	r0, #41	; 0x29
 800094c:	f7ff fe12 	bl	8000574 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff fe7d 	bl	8000650 <ILI9341_Set_Rotation>

ILI9341_Lcd_Clear(WHITE);
 8000956:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800095a:	f7ff fecb 	bl	80006f4 <ILI9341_Lcd_Clear>

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fdef 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f821 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 f907 	bl	8000b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000976:	f000 f8e5 	bl	8000b44 <MX_DMA_Init>
  MX_DCMI_Init();
 800097a:	f000 f88d 	bl	8000a98 <MX_DCMI_Init>
  MX_FSMC_Init();
 800097e:	f000 f9a3 	bl	8000cc8 <MX_FSMC_Init>
  MX_I2C2_Init();
 8000982:	f000 f8b1 	bl	8000ae8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8000986:	f7ff fee1 	bl	800074c <ILI9341_Init>
  //Init_SSD1289();
#if (TEST_TFT_LCD == 0)
  uint16_t* p_lcdData;
  p_lcdData = ILI9341_Get_Draw_Address();
 800098a:	f7ff fe13 	bl	80005b4 <ILI9341_Get_Draw_Address>
 800098e:	6078      	str	r0, [r7, #4]
  ov7670_init(&hdcmi, &hdcmi, &hi2c2);
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <main+0x48>)
 8000992:	4907      	ldr	r1, [pc, #28]	; (80009b0 <main+0x4c>)
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <main+0x4c>)
 8000996:	f000 f9fd 	bl	8000d94 <ov7670_init>
  ov7670_config(OV7670_MODE_QVGA_RGB565);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fa40 	bl	8000e20 <ov7670_config>
  ov7670_startCap(OV7670_CAP_CONTINUOUS, p_lcdData);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4619      	mov	r1, r3
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 fa6b 	bl	8000e80 <ov7670_startCap>
#if (TEST_TFT_LCD == 1)
  uint32_t i = 0;
  extern uint32_t lcd_colors[19];
#endif

  while (1)
 80009aa:	e7fe      	b.n	80009aa <main+0x46>
 80009ac:	20000130 	.word	0x20000130
 80009b0:	20000090 	.word	0x20000090

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	; 0x50
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f005 f8ae 	bl	8005b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <SystemClock_Config+0xdc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <SystemClock_Config+0xdc>)
 80009e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <SystemClock_Config+0xdc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <SystemClock_Config+0xe0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a25      	ldr	r2, [pc, #148]	; (8000a94 <SystemClock_Config+0xe0>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <SystemClock_Config+0xe0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a24:	2308      	movs	r3, #8
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f004 fa3c 	bl	8004eb8 <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a46:	f000 f99f 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	2105      	movs	r1, #5
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fc9d 	bl	80053a8 <HAL_RCC_ClockConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a74:	f000 f988 	bl	8000d88 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000a78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a7c:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000a80:	2000      	movs	r0, #0
 8000a82:	f004 fd77 	bl	8005574 <HAL_RCC_MCOConfig>
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000a9e:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <MX_DCMI_Init+0x4c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000aaa:	2220      	movs	r2, #32
 8000aac:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_DCMI_Init+0x48>)
 8000ace:	f001 f91f 	bl	8001d10 <HAL_DCMI_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000ad8:	f000 f956 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000090 	.word	0x20000090
 8000ae4:	50050000 	.word	0x50050000

08000ae8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <MX_I2C2_Init+0x54>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000af4:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_I2C2_Init+0x58>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_I2C2_Init+0x50>)
 8000b26:	f003 f8a1 	bl	8003c6c <HAL_I2C_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b30:	f000 f92a 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000130 	.word	0x20000130
 8000b3c:	40005800 	.word	0x40005800
 8000b40:	000186a0 	.word	0x000186a0

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_DMA_Init+0x3c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2039      	movs	r0, #57	; 0x39
 8000b6c:	f000 fe5f 	bl	800182e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b70:	2039      	movs	r0, #57	; 0x39
 8000b72:	f000 fe78 	bl	8001866 <HAL_NVIC_EnableIRQ>

}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	4b46      	ldr	r3, [pc, #280]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a45      	ldr	r2, [pc, #276]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000ba4:	f043 0310 	orr.w	r3, r3, #16
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a3e      	ldr	r2, [pc, #248]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a37      	ldr	r2, [pc, #220]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a30      	ldr	r2, [pc, #192]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a29      	ldr	r2, [pc, #164]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_GPIO_Init+0x134>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2108      	movs	r1, #8
 8000c46:	481d      	ldr	r0, [pc, #116]	; (8000cbc <MX_GPIO_Init+0x138>)
 8000c48:	f002 fff6 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2120      	movs	r1, #32
 8000c50:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <MX_GPIO_Init+0x13c>)
 8000c52:	f002 fff1 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TFT_RESET_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin;
 8000c56:	2308      	movs	r3, #8
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TFT_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <MX_GPIO_Init+0x138>)
 8000c6e:	f002 fe47 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000c72:	2320      	movs	r3, #32
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_GPIO_Init+0x13c>)
 8000c8a:	f002 fe39 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <MX_GPIO_Init+0x140>)
 8000cac:	f002 fe28 	bl	8003900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3730      	adds	r7, #48	; 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000ce2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ce6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000cea:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <MX_FSMC_Init+0xbc>)
 8000cec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d02:	2210      	movs	r2, #16
 8000d04:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8000d44:	2304      	movs	r3, #4
 8000d46:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 8;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d54:	2310      	movs	r3, #16
 8000d56:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d58:	2311      	movs	r3, #17
 8000d5a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_FSMC_Init+0xb8>)
 8000d68:	f004 fd92 	bl	8005890 <HAL_SRAM_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000d72:	f000 f809 	bl	8000d88 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d76:	bf00      	nop
 8000d78:	3720      	adds	r7, #32
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000184 	.word	0x20000184
 8000d84:	a0000104 	.word	0xa0000104

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <ov7670_init+0x74>)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <ov7670_init+0x78>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <ov7670_init+0x7c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <ov7670_init+0x80>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2120      	movs	r1, #32
 8000dbc:	4816      	ldr	r0, [pc, #88]	; (8000e18 <ov7670_init+0x84>)
 8000dbe:	f002 ff3b 	bl	8003c38 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f000 fc34 	bl	8001630 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2120      	movs	r1, #32
 8000dcc:	4812      	ldr	r0, [pc, #72]	; (8000e18 <ov7670_init+0x84>)
 8000dce:	f002 ff33 	bl	8003c38 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000dd2:	2064      	movs	r0, #100	; 0x64
 8000dd4:	f000 fc2c 	bl	8001630 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	2012      	movs	r0, #18
 8000ddc:	f000 f8c6 	bl	8000f6c <ov7670_write>
  HAL_Delay(30);
 8000de0:	201e      	movs	r0, #30
 8000de2:	f000 fc25 	bl	8001630 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	200b      	movs	r0, #11
 8000dee:	f000 f8dd 	bl	8000fac <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8000df2:	7d3b      	ldrb	r3, [r7, #20]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4809      	ldr	r0, [pc, #36]	; (8000e1c <ov7670_init+0x88>)
 8000df8:	f004 fe9c 	bl	8005b34 <iprintf>


  return RET_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200001d4 	.word	0x200001d4
 8000e0c:	200001d8 	.word	0x200001d8
 8000e10:	200001dc 	.word	0x200001dc
 8000e14:	200001e0 	.word	0x200001e0
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	08006a68 	.word	0x08006a68

08000e20 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8000e28:	f000 f858 	bl	8000edc <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	2012      	movs	r0, #18
 8000e30:	f000 f89c 	bl	8000f6c <ov7670_write>
  HAL_Delay(30);
 8000e34:	201e      	movs	r0, #30
 8000e36:	f000 fbfb 	bl	8001630 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	e012      	b.n	8000e66 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <ov7670_config+0x5c>)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <ov7670_config+0x5c>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	440b      	add	r3, r1
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	4619      	mov	r1, r3
 8000e54:	4610      	mov	r0, r2
 8000e56:	f000 f889 	bl	8000f6c <ov7670_write>
    HAL_Delay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 fbe8 	bl	8001630 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <ov7670_config+0x5c>)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e6e:	2bff      	cmp	r3, #255	; 0xff
 8000e70:	d1e6      	bne.n	8000e40 <ov7670_config+0x20>
  }
  return RET_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	08006a80 	.word	0x08006a80

08000e80 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 8000e8a:	f000 f827 	bl	8000edc <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10b      	bne.n	8000eac <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <ov7670_startCap+0x54>)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <ov7670_startCap+0x58>)
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	f000 fcf9 	bl	800189c <HAL_DCMI_Start_DMA>
 8000eaa:	e00d      	b.n	8000ec8 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10a      	bne.n	8000ec8 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <ov7670_startCap+0x54>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <ov7670_startCap+0x58>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	f000 fcea 	bl	800189c <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200001e0 	.word	0x200001e0
 8000ed8:	200001d4 	.word	0x200001d4

08000edc <ov7670_stopCap>:

RET ov7670_stopCap()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <ov7670_stopCap+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fd79 	bl	80019dc <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200001d4 	.word	0x200001d4

08000ef4 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_DCMI_FrameEventCallback+0x54>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d005      	beq.n	8000f10 <HAL_DCMI_FrameEventCallback+0x1c>
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_DCMI_FrameEventCallback+0x54>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_DCMI_FrameEventCallback+0x58>)
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_DCMI_FrameEventCallback+0x5c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00b      	beq.n	8000f30 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3328      	adds	r3, #40	; 0x28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_DCMI_FrameEventCallback+0x5c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000f2c:	f001 f80c 	bl	8001f48 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_DCMI_FrameEventCallback+0x58>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <HAL_DCMI_FrameEventCallback+0x58>)
 8000f38:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_DCMI_FrameEventCallback+0x60>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200001e4 	.word	0x200001e4
 8000f4c:	200001ec 	.word	0x200001ec
 8000f50:	200001e0 	.word	0x200001e0
 8000f54:	200001e8 	.word	0x200001e8

08000f58 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <ov7670_write+0x3c>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2142      	movs	r1, #66	; 0x42
 8000f94:	f003 fad2 	bl	800453c <HAL_I2C_Mem_Write>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001dc 	.word	0x200001dc

08000fac <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <ov7670_read+0x48>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	1dfa      	adds	r2, r7, #7
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2142      	movs	r1, #66	; 0x42
 8000fc6:	f002 ff95 	bl	8003ef4 <HAL_I2C_Master_Transmit>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <ov7670_read+0x48>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	2142      	movs	r1, #66	; 0x42
 8000fdc:	f003 f888 	bl	80040f0 <HAL_I2C_Master_Receive>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200001dc 	.word	0x200001dc

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_MspInit+0x4c>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_MspInit+0x4c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_MspInit+0x4c>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001036:	2007      	movs	r0, #7
 8001038:	f000 fbee 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a54      	ldr	r2, [pc, #336]	; (80011b8 <HAL_DCMI_MspInit+0x170>)
 8001066:	4293      	cmp	r3, r2
 8001068:	f040 80a1 	bne.w	80011ae <HAL_DCMI_MspInit+0x166>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	4b52      	ldr	r3, [pc, #328]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 8001072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6353      	str	r3, [r2, #52]	; 0x34
 800107c:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 800107e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	4b4b      	ldr	r3, [pc, #300]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a4a      	ldr	r2, [pc, #296]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b48      	ldr	r3, [pc, #288]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	4b44      	ldr	r3, [pc, #272]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a43      	ldr	r2, [pc, #268]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b41      	ldr	r3, [pc, #260]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	6313      	str	r3, [r2, #48]	; 0x30
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <HAL_DCMI_MspInit+0x174>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80010dc:	2350      	movs	r3, #80	; 0x50
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010e4:	2302      	movs	r3, #2
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010ec:	230d      	movs	r3, #13
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4832      	ldr	r0, [pc, #200]	; (80011c0 <HAL_DCMI_MspInit+0x178>)
 80010f8:	f002 fc02 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80010fc:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8001100:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001106:	2302      	movs	r3, #2
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800110e:	230d      	movs	r3, #13
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	482a      	ldr	r0, [pc, #168]	; (80011c4 <HAL_DCMI_MspInit+0x17c>)
 800111a:	f002 fbf1 	bl	8003900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800111e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001128:	2302      	movs	r3, #2
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001130:	230d      	movs	r3, #13
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4823      	ldr	r0, [pc, #140]	; (80011c8 <HAL_DCMI_MspInit+0x180>)
 800113c:	f002 fbe0 	bl	8003900 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001142:	4a23      	ldr	r2, [pc, #140]	; (80011d0 <HAL_DCMI_MspInit+0x188>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800114c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001162:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001166:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 800116a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001184:	f000 fe32 	bl	8001dec <HAL_DMA_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_DCMI_MspInit+0x14a>
    {
      Error_Handler();
 800118e:	f7ff fdfb 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 8001196:	639a      	str	r2, [r3, #56]	; 0x38
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <HAL_DCMI_MspInit+0x184>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	204e      	movs	r0, #78	; 0x4e
 80011a4:	f000 fb43 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80011a8:	204e      	movs	r0, #78	; 0x4e
 80011aa:	f000 fb5c 	bl	8001866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3730      	adds	r7, #48	; 0x30
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	50050000 	.word	0x50050000
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	200000d0 	.word	0x200000d0
 80011d0:	40026428 	.word	0x40026428

080011d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_I2C_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12c      	bne.n	8001250 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_I2C_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001212:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001218:	2312      	movs	r3, #18
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121c:	2301      	movs	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001224:	2304      	movs	r3, #4
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <HAL_I2C_MspInit+0x8c>)
 8001230:	f002 fb66 	bl	8003900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_I2C_MspInit+0x88>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_I2C_MspInit+0x88>)
 800123e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_I2C_MspInit+0x88>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40005800 	.word	0x40005800
 800125c:	40023800 	.word	0x40023800
 8001260:	40020400 	.word	0x40020400

08001264 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <HAL_FSMC_MspInit+0x88>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d131      	bne.n	80012e4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <HAL_FSMC_MspInit+0x88>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_FSMC_MspInit+0x8c>)
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <HAL_FSMC_MspInit+0x8c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6393      	str	r3, [r2, #56]	; 0x38
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_FSMC_MspInit+0x8c>)
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80012a2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80012a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012b4:	230c      	movs	r3, #12
 80012b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <HAL_FSMC_MspInit+0x90>)
 80012be:	f002 fb1f 	bl	8003900 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012c2:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80012c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012d4:	230c      	movs	r3, #12
 80012d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <HAL_FSMC_MspInit+0x94>)
 80012de:	f002 fb0f 	bl	8003900 <HAL_GPIO_Init>
 80012e2:	e000      	b.n	80012e6 <HAL_FSMC_MspInit+0x82>
    return;
 80012e4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001f0 	.word	0x200001f0
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40020c00 	.word	0x40020c00

080012fc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001304:	f7ff ffae 	bl	8001264 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135c:	f000 f948 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <DMA2_Stream1_IRQHandler+0x10>)
 800136a:	f000 fed7 	bl	800211c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000d0 	.word	0x200000d0

08001378 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <DCMI_IRQHandler+0x10>)
 800137e:	f000 fb89 	bl	8001a94 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000090 	.word	0x20000090

0800138c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e00a      	b.n	80013b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800139e:	f3af 8000 	nop.w
 80013a2:	4601      	mov	r1, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	b2ca      	uxtb	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf0      	blt.n	800139e <_read+0x12>
	}

return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e009      	b.n	80013ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf1      	blt.n	80013d8 <_write+0x12>
	}
	return len;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_close>:

int _close(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001426:	605a      	str	r2, [r3, #4]
	return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_isatty>:

int _isatty(int file)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
	return 1;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
	return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f004 fb1a 	bl	8005ad0 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20020000 	.word	0x20020000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	200001f4 	.word	0x200001f4
 80014d0:	20000210 	.word	0x20000210

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SystemInit+0x20>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <SystemInit+0x20>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014fe:	490e      	ldr	r1, [pc, #56]	; (8001538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001514:	4c0b      	ldr	r4, [pc, #44]	; (8001544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001522:	f7ff ffd7 	bl	80014d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f004 fad9 	bl	8005adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7ff fa1b 	bl	8000964 <main>
  bx  lr    
 800152e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800153c:	08006ba4 	.word	0x08006ba4
  ldr r2, =_sbss
 8001540:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001544:	2000020c 	.word	0x2000020c

08001548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_Init+0x40>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_Init+0x40>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x40>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f94f 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fd3a 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f967 	bl	8001882 <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f92f 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000004 	.word	0x20000004
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	2000000c 	.word	0x2000000c
 8001614:	200001f8 	.word	0x200001f8

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200001f8 	.word	0x200001f8

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000000c 	.word	0x2000000c

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff3e 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff31 	bl	80016dc <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_DCMI_Start_DMA+0x20>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e086      	b.n	80019ca <HAL_DCMI_Start_DMA+0x12e>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018da:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0202 	bic.w	r2, r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <HAL_DCMI_Start_DMA+0x138>)
 8001902:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	4a33      	ldr	r2, [pc, #204]	; (80019d8 <HAL_DCMI_Start_DMA+0x13c>)
 800190a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	2200      	movs	r2, #0
 8001912:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d20a      	bcs.n	800193e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3328      	adds	r3, #40	; 0x28
 8001932:	4619      	mov	r1, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	f000 fb06 	bl	8001f48 <HAL_DMA_Start_IT>
 800193c:	e038      	b.n	80019b0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <HAL_DCMI_Start_DMA+0x138>)
 8001944:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001958:	e009      	b.n	800196e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	085a      	lsrs	r2, r3, #1
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	005a      	lsls	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d2f0      	bcs.n	800195a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	1e9a      	subs	r2, r3, #2
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3328      	adds	r3, #40	; 0x28
 80019a0:	4619      	mov	r1, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	f000 fe20 	bl	80025f0 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08001bb9 	.word	0x08001bb9
 80019d8:	08001ce3 	.word	0x08001ce3

080019dc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 80019e4:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <HAL_DCMI_Stop+0xb0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <HAL_DCMI_Stop+0xb4>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_DCMI_Stop+0x2a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e03e      	b.n	8001a84 <HAL_DCMI_Stop+0xa8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2202      	movs	r2, #2
 8001a12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	60ba      	str	r2, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d108      	bne.n	8001a42 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	f043 0220 	orr.w	r2, r3, #32
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a40:	e006      	b.n	8001a50 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ea      	bne.n	8001a26 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fac7 	bl	8001ff8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	92492493 	.word	0x92492493

08001a94 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d016      	beq.n	8001adc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aba:	f043 0202 	orr.w	r2, r3, #2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <HAL_DCMI_IRQHandler+0xf8>)
 8001ad0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fafe 	bl	80020d8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d016      	beq.n	8001b14 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2202      	movs	r2, #2
 8001aec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <HAL_DCMI_IRQHandler+0xf8>)
 8001b08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fae2 	bl	80020d8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2210      	movs	r2, #16
 8001b24:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f83c 	bl	8001ba4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fa0a 	bl	8000f58 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d019      	beq.n	8001b82 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d107      	bne.n	8001b6c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 021e 	bic.w	r2, r2, #30
 8001b6a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff f9b9 	bl	8000ef4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08001ce3 	.word	0x08001ce3

08001b90 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d043      	beq.n	8001c5a <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bde:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d118      	bne.n	8001c1e <DCMI_DMAXferCplt+0x66>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	00da      	lsls	r2, r3, #3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f001 fe37 	bl	8003880 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c1c:	e044      	b.n	8001ca8 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d13c      	bne.n	8001ca8 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	00da      	lsls	r2, r3, #3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	2201      	movs	r2, #1
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f001 fe19 	bl	8003880 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
 8001c58:	e026      	b.n	8001ca8 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	e017      	b.n	8001ca8 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10f      	bne.n	8001ca8 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	440a      	add	r2, r1
 8001c9e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d112      	bne.n	8001cda <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d103      	bne.n	8001cda <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cee:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d003      	beq.n	8001d02 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff ff44 	bl	8001b90 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e05f      	b.n	8001de2 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff f986 	bl	8001048 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff f983 	bl	8001048 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001d58:	f023 0308 	bic.w	r3, r3, #8
 8001d5c:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001d72:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001d7e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001d8a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d112      	bne.n	8001dc2 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7f1b      	ldrb	r3, [r3, #28]
 8001da0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7f5b      	ldrb	r3, [r3, #29]
 8001da6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001da8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7f9b      	ldrb	r3, [r3, #30]
 8001dae:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001db0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7fdb      	ldrb	r3, [r3, #31]
 8001db8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001dbe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001dc0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 021e 	orr.w	r2, r2, #30
 8001dd0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff fc0e 	bl	8001618 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e099      	b.n	8001f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	e00f      	b.n	8001e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e2a:	f7ff fbf5 	bl	8001618 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d908      	bls.n	8001e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e078      	b.n	8001f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e8      	bne.n	8001e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_DMA_Init+0x158>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4313      	orrs	r3, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 0307 	bic.w	r3, r3, #7
 8001eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d117      	bne.n	8001f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb01 	bl	80024f8 <DMA_CheckFifoParam>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fab8 	bl	800248c <DMA_CalcBaseAndBitshift>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	f010803f 	.word	0xf010803f

08001f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_DMA_Start_IT+0x26>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e040      	b.n	8001ff0 <HAL_DMA_Start_IT+0xa8>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d12f      	bne.n	8001fe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fa4a 	bl	8002430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	223f      	movs	r2, #63	; 0x3f
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0216 	orr.w	r2, r2, #22
 8001fb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0208 	orr.w	r2, r2, #8
 8001fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e005      	b.n	8001fee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
 8001fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002006:	f7ff fb07 	bl	8001618 <HAL_GetTick>
 800200a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d008      	beq.n	800202a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e052      	b.n	80020d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0216 	bic.w	r2, r2, #22
 8002038:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002048:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <HAL_DMA_Abort+0x62>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0208 	bic.w	r2, r2, #8
 8002068:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207a:	e013      	b.n	80020a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207c:	f7ff facc 	bl	8001618 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b05      	cmp	r3, #5
 8002088:	d90c      	bls.n	80020a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2203      	movs	r2, #3
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e015      	b.n	80020d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1e4      	bne.n	800207c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	223f      	movs	r2, #63	; 0x3f
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d004      	beq.n	80020f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00c      	b.n	8002110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002128:	4b8e      	ldr	r3, [pc, #568]	; (8002364 <HAL_DMA_IRQHandler+0x248>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a8e      	ldr	r2, [pc, #568]	; (8002368 <HAL_DMA_IRQHandler+0x24c>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0a9b      	lsrs	r3, r3, #10
 8002134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2208      	movs	r2, #8
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01a      	beq.n	8002188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d013      	beq.n	8002188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0204 	bic.w	r2, r2, #4
 800216e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2208      	movs	r2, #8
 8002176:	409a      	lsls	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2201      	movs	r2, #1
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d012      	beq.n	80021be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2201      	movs	r2, #1
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	2204      	movs	r2, #4
 80021c4:	409a      	lsls	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2204      	movs	r2, #4
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2210      	movs	r2, #16
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d043      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03c      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2210      	movs	r2, #16
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d018      	beq.n	800225e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d024      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	e01f      	b.n	800228c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e016      	b.n	800228c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0208 	bic.w	r2, r2, #8
 800227a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2220      	movs	r2, #32
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 808f 	beq.w	80023bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8087 	beq.w	80023bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	2220      	movs	r2, #32
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d136      	bne.n	8002334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0216 	bic.w	r2, r2, #22
 80022d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <HAL_DMA_IRQHandler+0x1da>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0208 	bic.w	r2, r2, #8
 8002304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	223f      	movs	r2, #63	; 0x3f
 800230c:	409a      	lsls	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	2b00      	cmp	r3, #0
 8002328:	d07e      	beq.n	8002428 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	4798      	blx	r3
        }
        return;
 8002332:	e079      	b.n	8002428 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01d      	beq.n	800237e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	2b00      	cmp	r3, #0
 8002356:	d031      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
 8002360:	e02c      	b.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
 8002362:	bf00      	nop
 8002364:	20000004 	.word	0x20000004
 8002368:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
 800237c:	e01e      	b.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0210 	bic.w	r2, r2, #16
 800239a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d032      	beq.n	800242a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2205      	movs	r2, #5
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d307      	bcc.n	8002404 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f2      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x2cc>
 8002402:	e000      	b.n	8002406 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002404:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
 8002426:	e000      	b.n	800242a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002428:	bf00      	nop
    }
  }
}
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800244c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d108      	bne.n	8002470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800246e:	e007      	b.n	8002480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3b10      	subs	r3, #16
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <DMA_CalcBaseAndBitshift+0x64>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024a6:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <DMA_CalcBaseAndBitshift+0x68>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d909      	bls.n	80024ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	1d1a      	adds	r2, r3, #4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58
 80024cc:	e007      	b.n	80024de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	aaaaaaab 	.word	0xaaaaaaab
 80024f4:	08006af4 	.word	0x08006af4

080024f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11f      	bne.n	8002552 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d856      	bhi.n	80025c6 <DMA_CheckFifoParam+0xce>
 8002518:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <DMA_CheckFifoParam+0x28>)
 800251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251e:	bf00      	nop
 8002520:	08002531 	.word	0x08002531
 8002524:	08002543 	.word	0x08002543
 8002528:	08002531 	.word	0x08002531
 800252c:	080025c7 	.word	0x080025c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d046      	beq.n	80025ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002540:	e043      	b.n	80025ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800254a:	d140      	bne.n	80025ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e03d      	b.n	80025ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255a:	d121      	bne.n	80025a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d837      	bhi.n	80025d2 <DMA_CheckFifoParam+0xda>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <DMA_CheckFifoParam+0x70>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002579 	.word	0x08002579
 800256c:	0800257f 	.word	0x0800257f
 8002570:	08002579 	.word	0x08002579
 8002574:	08002591 	.word	0x08002591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      break;
 800257c:	e030      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d025      	beq.n	80025d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258e:	e022      	b.n	80025d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002598:	d11f      	bne.n	80025da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800259e:	e01c      	b.n	80025da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d903      	bls.n	80025ae <DMA_CheckFifoParam+0xb6>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d003      	beq.n	80025b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025ac:	e018      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      break;
 80025b2:	e015      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00e      	beq.n	80025de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e00b      	b.n	80025de <DMA_CheckFifoParam+0xe6>
      break;
 80025c6:	bf00      	nop
 80025c8:	e00a      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ca:	bf00      	nop
 80025cc:	e008      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ce:	bf00      	nop
 80025d0:	e006      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025d2:	bf00      	nop
 80025d4:	e004      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025d6:	bf00      	nop
 80025d8:	e002      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
    }
  } 
  
  return status; 
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b80      	cmp	r3, #128	; 0x80
 8002608:	d106      	bne.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	f001 b911 	b.w	800383a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2240      	movs	r2, #64	; 0x40
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f001 b8ff 	b.w	800383a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002646:	2302      	movs	r3, #2
 8002648:	f001 b8f7 	b.w	800383a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	f041 80e5 	bne.w	800382c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800267e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f001 f910 	bl	80038b4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b8d      	ldr	r3, [pc, #564]	; (80028d0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800269c:	429a      	cmp	r2, r3
 800269e:	d960      	bls.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a8b      	ldr	r2, [pc, #556]	; (80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d057      	beq.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a8a      	ldr	r2, [pc, #552]	; (80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d050      	beq.n	8002756 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a88      	ldr	r2, [pc, #544]	; (80028dc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d049      	beq.n	8002752 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a87      	ldr	r2, [pc, #540]	; (80028e0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d042      	beq.n	800274e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a85      	ldr	r2, [pc, #532]	; (80028e4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d03a      	beq.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a84      	ldr	r2, [pc, #528]	; (80028e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d032      	beq.n	8002742 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a82      	ldr	r2, [pc, #520]	; (80028ec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02a      	beq.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a81      	ldr	r2, [pc, #516]	; (80028f0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a7f      	ldr	r2, [pc, #508]	; (80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01a      	beq.n	8002730 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a7e      	ldr	r2, [pc, #504]	; (80028f8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d012      	beq.n	800272a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a7c      	ldr	r2, [pc, #496]	; (80028fc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00a      	beq.n	8002724 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7b      	ldr	r2, [pc, #492]	; (8002900 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d102      	bne.n	800271e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800271c:	e01e      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800271e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002722:	e01b      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002728:	e018      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800272a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800272e:	e015      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002734:	e012      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800273a:	e00f      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800273c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002740:	e00c      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002746:	e009      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274c:	e006      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800274e:	2320      	movs	r3, #32
 8002750:	e004      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002752:	2320      	movs	r3, #32
 8002754:	e002      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002756:	2320      	movs	r3, #32
 8002758:	e000      	b.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800275a:	2320      	movs	r3, #32
 800275c:	4a69      	ldr	r2, [pc, #420]	; (8002904 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800275e:	60d3      	str	r3, [r2, #12]
 8002760:	e14f      	b.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	4b67      	ldr	r3, [pc, #412]	; (8002908 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800276a:	429a      	cmp	r2, r3
 800276c:	d960      	bls.n	8002830 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d057      	beq.n	8002828 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a56      	ldr	r2, [pc, #344]	; (80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d050      	beq.n	8002824 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a55      	ldr	r2, [pc, #340]	; (80028dc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d049      	beq.n	8002820 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a53      	ldr	r2, [pc, #332]	; (80028e0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d042      	beq.n	800281c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d03a      	beq.n	8002816 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a50      	ldr	r2, [pc, #320]	; (80028e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d032      	beq.n	8002810 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4f      	ldr	r2, [pc, #316]	; (80028ec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02a      	beq.n	800280a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a4d      	ldr	r2, [pc, #308]	; (80028f0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d022      	beq.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4c      	ldr	r2, [pc, #304]	; (80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d01a      	beq.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a4a      	ldr	r2, [pc, #296]	; (80028f8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d012      	beq.n	80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a49      	ldr	r2, [pc, #292]	; (80028fc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00a      	beq.n	80027f2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d102      	bne.n	80027ec <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80027e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027ea:	e01e      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80027ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027f0:	e01b      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80027f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027f6:	e018      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80027f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027fc:	e015      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80027fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002802:	e012      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002808:	e00f      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800280a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800280e:	e00c      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002814:	e009      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800281a:	e006      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800281c:	2320      	movs	r3, #32
 800281e:	e004      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002820:	2320      	movs	r3, #32
 8002822:	e002      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002824:	2320      	movs	r3, #32
 8002826:	e000      	b.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002828:	2320      	movs	r3, #32
 800282a:	4a36      	ldr	r2, [pc, #216]	; (8002904 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800282c:	6093      	str	r3, [r2, #8]
 800282e:	e0e8      	b.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b35      	ldr	r3, [pc, #212]	; (800290c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002838:	429a      	cmp	r2, r3
 800283a:	f240 8082 	bls.w	8002942 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d078      	beq.n	800293a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d071      	beq.n	8002936 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d06a      	beq.n	8002932 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d063      	beq.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05b      	beq.n	8002928 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d053      	beq.n	8002922 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04b      	beq.n	800291c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d043      	beq.n	8002916 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d03b      	beq.n	8002910 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a16      	ldr	r2, [pc, #88]	; (80028f8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d012      	beq.n	80028c8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a15      	ldr	r2, [pc, #84]	; (80028fc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00a      	beq.n	80028c2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d102      	bne.n	80028bc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80028b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028ba:	e03f      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80028bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80028c0:	e03c      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80028c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028c6:	e039      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80028c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028cc:	e036      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80028ce:	bf00      	nop
 80028d0:	40026458 	.word	0x40026458
 80028d4:	40026010 	.word	0x40026010
 80028d8:	40026410 	.word	0x40026410
 80028dc:	40026070 	.word	0x40026070
 80028e0:	40026470 	.word	0x40026470
 80028e4:	40026028 	.word	0x40026028
 80028e8:	40026428 	.word	0x40026428
 80028ec:	40026088 	.word	0x40026088
 80028f0:	40026488 	.word	0x40026488
 80028f4:	40026040 	.word	0x40026040
 80028f8:	40026440 	.word	0x40026440
 80028fc:	400260a0 	.word	0x400260a0
 8002900:	400264a0 	.word	0x400264a0
 8002904:	40026400 	.word	0x40026400
 8002908:	400260b8 	.word	0x400260b8
 800290c:	40026058 	.word	0x40026058
 8002910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002914:	e012      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800291a:	e00f      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800291c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002920:	e00c      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002926:	e009      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800292c:	e006      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800292e:	2320      	movs	r3, #32
 8002930:	e004      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002932:	2320      	movs	r3, #32
 8002934:	e002      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002936:	2320      	movs	r3, #32
 8002938:	e000      	b.n	800293c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800293a:	2320      	movs	r3, #32
 800293c:	4a8c      	ldr	r2, [pc, #560]	; (8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800293e:	60d3      	str	r3, [r2, #12]
 8002940:	e05f      	b.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a8b      	ldr	r2, [pc, #556]	; (8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d057      	beq.n	80029fc <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a89      	ldr	r2, [pc, #548]	; (8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d050      	beq.n	80029f8 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a88      	ldr	r2, [pc, #544]	; (8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d049      	beq.n	80029f4 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a86      	ldr	r2, [pc, #536]	; (8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d042      	beq.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a85      	ldr	r2, [pc, #532]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d03a      	beq.n	80029ea <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a83      	ldr	r2, [pc, #524]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d032      	beq.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a82      	ldr	r2, [pc, #520]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d02a      	beq.n	80029de <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a80      	ldr	r2, [pc, #512]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d022      	beq.n	80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7f      	ldr	r2, [pc, #508]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d01a      	beq.n	80029d2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a7d      	ldr	r2, [pc, #500]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d012      	beq.n	80029cc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7c      	ldr	r2, [pc, #496]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00a      	beq.n	80029c6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d102      	bne.n	80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80029ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029be:	e01e      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029c4:	e01b      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029ca:	e018      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029d0:	e015      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029d6:	e012      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029dc:	e00f      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029e2:	e00c      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029e8:	e009      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ee:	e006      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029f0:	2320      	movs	r3, #32
 80029f2:	e004      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029f4:	2320      	movs	r3, #32
 80029f6:	e002      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029f8:	2320      	movs	r3, #32
 80029fa:	e000      	b.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80029fc:	2320      	movs	r3, #32
 80029fe:	4a5c      	ldr	r2, [pc, #368]	; (8002b70 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002a00:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b66      	ldr	r3, [pc, #408]	; (8002ba4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d960      	bls.n	8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d057      	beq.n	8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a56      	ldr	r2, [pc, #344]	; (8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d050      	beq.n	8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a55      	ldr	r2, [pc, #340]	; (8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d049      	beq.n	8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a53      	ldr	r2, [pc, #332]	; (8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d042      	beq.n	8002abc <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a52      	ldr	r2, [pc, #328]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d03a      	beq.n	8002ab6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a50      	ldr	r2, [pc, #320]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d032      	beq.n	8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a4f      	ldr	r2, [pc, #316]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d02a      	beq.n	8002aaa <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d01a      	beq.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d012      	beq.n	8002a98 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00a      	beq.n	8002a92 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d102      	bne.n	8002a8c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8002a86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a8a:	e01e      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002a8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a90:	e01b      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002a92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a96:	e018      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002a98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a9c:	e015      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002a9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa2:	e012      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa8:	e00f      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aae:	e00c      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab4:	e009      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aba:	e006      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002abc:	2310      	movs	r3, #16
 8002abe:	e004      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	e002      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	e000      	b.n	8002aca <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002ac8:	2310      	movs	r3, #16
 8002aca:	4a37      	ldr	r2, [pc, #220]	; (8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002acc:	60d3      	str	r3, [r2, #12]
 8002ace:	e14f      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4b35      	ldr	r3, [pc, #212]	; (8002bac <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	f240 8082 	bls.w	8002be2 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d078      	beq.n	8002bda <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d071      	beq.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d06a      	beq.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d063      	beq.n	8002bce <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d053      	beq.n	8002bc2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04b      	beq.n	8002bbc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d043      	beq.n	8002bb6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03b      	beq.n	8002bb0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d012      	beq.n	8002b68 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00a      	beq.n	8002b62 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d102      	bne.n	8002b5c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8002b56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b5a:	e03f      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002b5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b60:	e03c      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002b62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b66:	e039      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002b68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b6c:	e036      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002b6e:	bf00      	nop
 8002b70:	40026000 	.word	0x40026000
 8002b74:	40026010 	.word	0x40026010
 8002b78:	40026410 	.word	0x40026410
 8002b7c:	40026070 	.word	0x40026070
 8002b80:	40026470 	.word	0x40026470
 8002b84:	40026028 	.word	0x40026028
 8002b88:	40026428 	.word	0x40026428
 8002b8c:	40026088 	.word	0x40026088
 8002b90:	40026488 	.word	0x40026488
 8002b94:	40026040 	.word	0x40026040
 8002b98:	40026440 	.word	0x40026440
 8002b9c:	400260a0 	.word	0x400260a0
 8002ba0:	400264a0 	.word	0x400264a0
 8002ba4:	40026458 	.word	0x40026458
 8002ba8:	40026400 	.word	0x40026400
 8002bac:	400260b8 	.word	0x400260b8
 8002bb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bb4:	e012      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bba:	e00f      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc0:	e00c      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc6:	e009      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bcc:	e006      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bce:	2310      	movs	r3, #16
 8002bd0:	e004      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	e002      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bd6:	2310      	movs	r3, #16
 8002bd8:	e000      	b.n	8002bdc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002bda:	2310      	movs	r3, #16
 8002bdc:	4a8c      	ldr	r2, [pc, #560]	; (8002e10 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	e0c6      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b8a      	ldr	r3, [pc, #552]	; (8002e14 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d960      	bls.n	8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a89      	ldr	r2, [pc, #548]	; (8002e18 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d057      	beq.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a87      	ldr	r2, [pc, #540]	; (8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d050      	beq.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a86      	ldr	r2, [pc, #536]	; (8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d049      	beq.n	8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a84      	ldr	r2, [pc, #528]	; (8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d042      	beq.n	8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a83      	ldr	r2, [pc, #524]	; (8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d03a      	beq.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a81      	ldr	r2, [pc, #516]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d032      	beq.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d02a      	beq.n	8002c8a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7e      	ldr	r2, [pc, #504]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d022      	beq.n	8002c84 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7d      	ldr	r2, [pc, #500]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d01a      	beq.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7b      	ldr	r2, [pc, #492]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d012      	beq.n	8002c78 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7a      	ldr	r2, [pc, #488]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00a      	beq.n	8002c72 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a78      	ldr	r2, [pc, #480]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d102      	bne.n	8002c6c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8002c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c6a:	e01e      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c70:	e01b      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c76:	e018      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c7c:	e015      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c82:	e012      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c88:	e00f      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8e:	e00c      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c94:	e009      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9a:	e006      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	e004      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	e002      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	e000      	b.n	8002caa <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002ca8:	2310      	movs	r3, #16
 8002caa:	4a67      	ldr	r2, [pc, #412]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002cac:	60d3      	str	r3, [r2, #12]
 8002cae:	e05f      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d057      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a57      	ldr	r2, [pc, #348]	; (8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d050      	beq.n	8002d66 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a55      	ldr	r2, [pc, #340]	; (8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d049      	beq.n	8002d62 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a54      	ldr	r2, [pc, #336]	; (8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d042      	beq.n	8002d5e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d03a      	beq.n	8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a51      	ldr	r2, [pc, #324]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d032      	beq.n	8002d52 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a4f      	ldr	r2, [pc, #316]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02a      	beq.n	8002d4c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a4e      	ldr	r2, [pc, #312]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a4c      	ldr	r2, [pc, #304]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4b      	ldr	r2, [pc, #300]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d012      	beq.n	8002d3a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a49      	ldr	r2, [pc, #292]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00a      	beq.n	8002d34 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a48      	ldr	r2, [pc, #288]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d102      	bne.n	8002d2e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002d28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d2c:	e01e      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d32:	e01b      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d38:	e018      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d3e:	e015      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d44:	e012      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4a:	e00f      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d50:	e00c      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d56:	e009      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d5c:	e006      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d5e:	2310      	movs	r3, #16
 8002d60:	e004      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d62:	2310      	movs	r3, #16
 8002d64:	e002      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d66:	2310      	movs	r3, #16
 8002d68:	e000      	b.n	8002d6c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	4a36      	ldr	r2, [pc, #216]	; (8002e48 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002d6e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f240 8082 	bls.w	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d078      	beq.n	8002e7a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d071      	beq.n	8002e76 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d06a      	beq.n	8002e72 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d063      	beq.n	8002e6e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d05b      	beq.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d053      	beq.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d04b      	beq.n	8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d043      	beq.n	8002e56 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d03b      	beq.n	8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d012      	beq.n	8002e08 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00a      	beq.n	8002e02 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d102      	bne.n	8002dfc <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8002df6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dfa:	e03f      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e00:	e03c      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e06:	e039      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e0c:	e036      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e0e:	bf00      	nop
 8002e10:	40026400 	.word	0x40026400
 8002e14:	40026058 	.word	0x40026058
 8002e18:	40026010 	.word	0x40026010
 8002e1c:	40026410 	.word	0x40026410
 8002e20:	40026070 	.word	0x40026070
 8002e24:	40026470 	.word	0x40026470
 8002e28:	40026028 	.word	0x40026028
 8002e2c:	40026428 	.word	0x40026428
 8002e30:	40026088 	.word	0x40026088
 8002e34:	40026488 	.word	0x40026488
 8002e38:	40026040 	.word	0x40026040
 8002e3c:	40026440 	.word	0x40026440
 8002e40:	400260a0 	.word	0x400260a0
 8002e44:	400264a0 	.word	0x400264a0
 8002e48:	40026000 	.word	0x40026000
 8002e4c:	40026458 	.word	0x40026458
 8002e50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e54:	e012      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e5a:	e00f      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e60:	e00c      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e66:	e009      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6c:	e006      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	e004      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e72:	2308      	movs	r3, #8
 8002e74:	e002      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e76:	2308      	movs	r3, #8
 8002e78:	e000      	b.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	4a8c      	ldr	r2, [pc, #560]	; (80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002e7e:	60d3      	str	r3, [r2, #12]
 8002e80:	e14e      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b8a      	ldr	r3, [pc, #552]	; (80030b4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d960      	bls.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a89      	ldr	r2, [pc, #548]	; (80030b8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d057      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a87      	ldr	r2, [pc, #540]	; (80030bc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d050      	beq.n	8002f44 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a86      	ldr	r2, [pc, #536]	; (80030c0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d049      	beq.n	8002f40 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a84      	ldr	r2, [pc, #528]	; (80030c4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d042      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a83      	ldr	r2, [pc, #524]	; (80030c8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d03a      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a81      	ldr	r2, [pc, #516]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d032      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a80      	ldr	r2, [pc, #512]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d02a      	beq.n	8002f2a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7e      	ldr	r2, [pc, #504]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d022      	beq.n	8002f24 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7d      	ldr	r2, [pc, #500]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d01a      	beq.n	8002f1e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7b      	ldr	r2, [pc, #492]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d012      	beq.n	8002f18 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7a      	ldr	r2, [pc, #488]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00a      	beq.n	8002f12 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a78      	ldr	r2, [pc, #480]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d102      	bne.n	8002f0c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002f06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f0a:	e01e      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f10:	e01b      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f16:	e018      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f1c:	e015      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f22:	e012      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f28:	e00f      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2e:	e00c      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f34:	e009      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3a:	e006      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	e004      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f40:	2308      	movs	r3, #8
 8002f42:	e002      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f44:	2308      	movs	r3, #8
 8002f46:	e000      	b.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002f48:	2308      	movs	r3, #8
 8002f4a:	4a59      	ldr	r2, [pc, #356]	; (80030b0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002f4c:	6093      	str	r3, [r2, #8]
 8002f4e:	e0e7      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b64      	ldr	r3, [pc, #400]	; (80030e8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d960      	bls.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a55      	ldr	r2, [pc, #340]	; (80030b8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d057      	beq.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a54      	ldr	r2, [pc, #336]	; (80030bc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d050      	beq.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d049      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a51      	ldr	r2, [pc, #324]	; (80030c4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d042      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a4f      	ldr	r2, [pc, #316]	; (80030c8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d03a      	beq.n	8003004 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4e      	ldr	r2, [pc, #312]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d032      	beq.n	8002ffe <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02a      	beq.n	8002ff8 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a4b      	ldr	r2, [pc, #300]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d022      	beq.n	8002ff2 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a49      	ldr	r2, [pc, #292]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01a      	beq.n	8002fec <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a48      	ldr	r2, [pc, #288]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d012      	beq.n	8002fe6 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a46      	ldr	r2, [pc, #280]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a45      	ldr	r2, [pc, #276]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d102      	bne.n	8002fda <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002fd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002fd8:	e01e      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fde:	e01b      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002fe0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002fe4:	e018      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002fe6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002fea:	e015      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002fec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ff0:	e012      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ff6:	e00f      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ffc:	e00c      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003002:	e009      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003008:	e006      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800300a:	2308      	movs	r3, #8
 800300c:	e004      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800300e:	2308      	movs	r3, #8
 8003010:	e002      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003012:	2308      	movs	r3, #8
 8003014:	e000      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003016:	2308      	movs	r3, #8
 8003018:	4a34      	ldr	r2, [pc, #208]	; (80030ec <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800301a:	60d3      	str	r3, [r2, #12]
 800301c:	e080      	b.n	8003120 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d078      	beq.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a23      	ldr	r2, [pc, #140]	; (80030bc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d071      	beq.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d06a      	beq.n	8003112 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d063      	beq.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d05b      	beq.n	8003108 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d053      	beq.n	8003102 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d04b      	beq.n	80030fc <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d043      	beq.n	80030f6 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d03b      	beq.n	80030f0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d012      	beq.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00a      	beq.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d102      	bne.n	800309c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003096:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800309a:	e03f      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800309c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a0:	e03c      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80030a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030a6:	e039      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80030a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030ac:	e036      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80030ae:	bf00      	nop
 80030b0:	40026400 	.word	0x40026400
 80030b4:	400260b8 	.word	0x400260b8
 80030b8:	40026010 	.word	0x40026010
 80030bc:	40026410 	.word	0x40026410
 80030c0:	40026070 	.word	0x40026070
 80030c4:	40026470 	.word	0x40026470
 80030c8:	40026028 	.word	0x40026028
 80030cc:	40026428 	.word	0x40026428
 80030d0:	40026088 	.word	0x40026088
 80030d4:	40026488 	.word	0x40026488
 80030d8:	40026040 	.word	0x40026040
 80030dc:	40026440 	.word	0x40026440
 80030e0:	400260a0 	.word	0x400260a0
 80030e4:	400264a0 	.word	0x400264a0
 80030e8:	40026058 	.word	0x40026058
 80030ec:	40026000 	.word	0x40026000
 80030f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030f4:	e012      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80030f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030fa:	e00f      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80030fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003100:	e00c      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003106:	e009      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800310c:	e006      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800310e:	2308      	movs	r3, #8
 8003110:	e004      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003112:	2308      	movs	r3, #8
 8003114:	e002      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003116:	2308      	movs	r3, #8
 8003118:	e000      	b.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800311a:	2308      	movs	r3, #8
 800311c:	4a8a      	ldr	r2, [pc, #552]	; (8003348 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800311e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b89      	ldr	r3, [pc, #548]	; (800334c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003128:	429a      	cmp	r2, r3
 800312a:	d960      	bls.n	80031ee <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a87      	ldr	r2, [pc, #540]	; (8003350 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d057      	beq.n	80031e6 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a86      	ldr	r2, [pc, #536]	; (8003354 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d050      	beq.n	80031e2 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a84      	ldr	r2, [pc, #528]	; (8003358 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d049      	beq.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a83      	ldr	r2, [pc, #524]	; (800335c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d042      	beq.n	80031da <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a81      	ldr	r2, [pc, #516]	; (8003360 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d03a      	beq.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a80      	ldr	r2, [pc, #512]	; (8003364 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d032      	beq.n	80031ce <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a7e      	ldr	r2, [pc, #504]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d02a      	beq.n	80031c8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7d      	ldr	r2, [pc, #500]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a7b      	ldr	r2, [pc, #492]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01a      	beq.n	80031bc <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7a      	ldr	r2, [pc, #488]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d012      	beq.n	80031b6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a78      	ldr	r2, [pc, #480]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00a      	beq.n	80031b0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a77      	ldr	r2, [pc, #476]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d102      	bne.n	80031aa <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80031a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031a8:	e01e      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ae:	e01b      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031b4:	e018      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031ba:	e015      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031c0:	e012      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c6:	e00f      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031cc:	e00c      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d2:	e009      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d8:	e006      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031da:	2304      	movs	r3, #4
 80031dc:	e004      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031de:	2304      	movs	r3, #4
 80031e0:	e002      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e000      	b.n	80031e8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80031e6:	2304      	movs	r3, #4
 80031e8:	4a65      	ldr	r2, [pc, #404]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80031ea:	60d3      	str	r3, [r2, #12]
 80031ec:	e150      	b.n	8003490 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d960      	bls.n	80032bc <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a54      	ldr	r2, [pc, #336]	; (8003350 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d057      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d050      	beq.n	80032b0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a51      	ldr	r2, [pc, #324]	; (8003358 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d049      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a4f      	ldr	r2, [pc, #316]	; (800335c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d042      	beq.n	80032a8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a4e      	ldr	r2, [pc, #312]	; (8003360 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d03a      	beq.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a4c      	ldr	r2, [pc, #304]	; (8003364 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d032      	beq.n	800329c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a4b      	ldr	r2, [pc, #300]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d02a      	beq.n	8003296 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a49      	ldr	r2, [pc, #292]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d022      	beq.n	8003290 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a48      	ldr	r2, [pc, #288]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d01a      	beq.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a46      	ldr	r2, [pc, #280]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d012      	beq.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a45      	ldr	r2, [pc, #276]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00a      	beq.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a43      	ldr	r2, [pc, #268]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d102      	bne.n	8003278 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003272:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003276:	e01e      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800327c:	e01b      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800327e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003282:	e018      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003288:	e015      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800328a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800328e:	e012      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003294:	e00f      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800329a:	e00c      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800329c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a0:	e009      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a6:	e006      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032a8:	2304      	movs	r3, #4
 80032aa:	e004      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032ac:	2304      	movs	r3, #4
 80032ae:	e002      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032b0:	2304      	movs	r3, #4
 80032b2:	e000      	b.n	80032b6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80032b4:	2304      	movs	r3, #4
 80032b6:	4a32      	ldr	r2, [pc, #200]	; (8003380 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80032b8:	6093      	str	r3, [r2, #8]
 80032ba:	e0e9      	b.n	8003490 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b31      	ldr	r3, [pc, #196]	; (8003388 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f240 8083 	bls.w	80033d0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a20      	ldr	r2, [pc, #128]	; (8003350 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d079      	beq.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d072      	beq.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1d      	ldr	r2, [pc, #116]	; (8003358 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d06b      	beq.n	80033c0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d064      	beq.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1a      	ldr	r2, [pc, #104]	; (8003360 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d05c      	beq.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d054      	beq.n	80033b0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a17      	ldr	r2, [pc, #92]	; (8003368 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04c      	beq.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d044      	beq.n	80033a4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a14      	ldr	r2, [pc, #80]	; (8003370 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d03c      	beq.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d034      	beq.n	8003398 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a11      	ldr	r2, [pc, #68]	; (8003378 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02c      	beq.n	8003392 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0f      	ldr	r2, [pc, #60]	; (800337c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d124      	bne.n	800338c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003346:	e040      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003348:	40026000 	.word	0x40026000
 800334c:	40026458 	.word	0x40026458
 8003350:	40026010 	.word	0x40026010
 8003354:	40026410 	.word	0x40026410
 8003358:	40026070 	.word	0x40026070
 800335c:	40026470 	.word	0x40026470
 8003360:	40026028 	.word	0x40026028
 8003364:	40026428 	.word	0x40026428
 8003368:	40026088 	.word	0x40026088
 800336c:	40026488 	.word	0x40026488
 8003370:	40026040 	.word	0x40026040
 8003374:	40026440 	.word	0x40026440
 8003378:	400260a0 	.word	0x400260a0
 800337c:	400264a0 	.word	0x400264a0
 8003380:	40026400 	.word	0x40026400
 8003384:	400260b8 	.word	0x400260b8
 8003388:	40026058 	.word	0x40026058
 800338c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003390:	e01b      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003392:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003396:	e018      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003398:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800339c:	e015      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800339e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033a2:	e012      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033a8:	e00f      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ae:	e00c      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033b4:	e009      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ba:	e006      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033bc:	2304      	movs	r3, #4
 80033be:	e004      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e002      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e000      	b.n	80033ca <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80033c8:	2304      	movs	r3, #4
 80033ca:	4a8b      	ldr	r2, [pc, #556]	; (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80033cc:	60d3      	str	r3, [r2, #12]
 80033ce:	e05f      	b.n	8003490 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a89      	ldr	r2, [pc, #548]	; (80035fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d057      	beq.n	800348a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a88      	ldr	r2, [pc, #544]	; (8003600 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d050      	beq.n	8003486 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a86      	ldr	r2, [pc, #536]	; (8003604 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d049      	beq.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a85      	ldr	r2, [pc, #532]	; (8003608 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d042      	beq.n	800347e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a83      	ldr	r2, [pc, #524]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d03a      	beq.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a82      	ldr	r2, [pc, #520]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d032      	beq.n	8003472 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a80      	ldr	r2, [pc, #512]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02a      	beq.n	800346c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a7f      	ldr	r2, [pc, #508]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7d      	ldr	r2, [pc, #500]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01a      	beq.n	8003460 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7c      	ldr	r2, [pc, #496]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d012      	beq.n	800345a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a7a      	ldr	r2, [pc, #488]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00a      	beq.n	8003454 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a79      	ldr	r2, [pc, #484]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d102      	bne.n	800344e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800344c:	e01e      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800344e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003452:	e01b      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003454:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003458:	e018      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800345a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800345e:	e015      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003460:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003464:	e012      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800346a:	e00f      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800346c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003470:	e00c      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003476:	e009      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347c:	e006      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800347e:	2304      	movs	r3, #4
 8003480:	e004      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003482:	2304      	movs	r3, #4
 8003484:	e002      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003486:	2304      	movs	r3, #4
 8003488:	e000      	b.n	800348c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800348a:	2304      	movs	r3, #4
 800348c:	4a5a      	ldr	r2, [pc, #360]	; (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800348e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003498:	429a      	cmp	r2, r3
 800349a:	d95c      	bls.n	8003556 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a56      	ldr	r2, [pc, #344]	; (80035fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d053      	beq.n	800354e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a55      	ldr	r2, [pc, #340]	; (8003600 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d04c      	beq.n	800354a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a53      	ldr	r2, [pc, #332]	; (8003604 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d045      	beq.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a52      	ldr	r2, [pc, #328]	; (8003608 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d03e      	beq.n	8003542 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a50      	ldr	r2, [pc, #320]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d037      	beq.n	800353e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4f      	ldr	r2, [pc, #316]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d030      	beq.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d029      	beq.n	8003536 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a4c      	ldr	r2, [pc, #304]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a4a      	ldr	r2, [pc, #296]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01a      	beq.n	800352c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a49      	ldr	r2, [pc, #292]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d012      	beq.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a47      	ldr	r2, [pc, #284]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00a      	beq.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a46      	ldr	r2, [pc, #280]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d102      	bne.n	800351a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003518:	e01a      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800351a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800351e:	e017      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003524:	e014      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800352a:	e011      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800352c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003530:	e00e      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	e00c      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003536:	2340      	movs	r3, #64	; 0x40
 8003538:	e00a      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800353a:	2340      	movs	r3, #64	; 0x40
 800353c:	e008      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800353e:	2340      	movs	r3, #64	; 0x40
 8003540:	e006      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003542:	2301      	movs	r3, #1
 8003544:	e004      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003546:	2301      	movs	r3, #1
 8003548:	e002      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800354e:	2301      	movs	r3, #1
 8003550:	4a37      	ldr	r2, [pc, #220]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003552:	60d3      	str	r3, [r2, #12]
 8003554:	e141      	b.n	80037da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800355e:	429a      	cmp	r2, r3
 8003560:	d97c      	bls.n	800365c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a25      	ldr	r2, [pc, #148]	; (80035fc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d073      	beq.n	8003654 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d06c      	beq.n	8003650 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a22      	ldr	r2, [pc, #136]	; (8003604 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d065      	beq.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a20      	ldr	r2, [pc, #128]	; (8003608 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d05e      	beq.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d057      	beq.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d050      	beq.n	8003640 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d049      	beq.n	800363c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d042      	beq.n	8003638 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01a      	beq.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a17      	ldr	r2, [pc, #92]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d012      	beq.n	80035ec <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00a      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d102      	bne.n	80035e0 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80035da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035de:	e03a      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80035e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035e4:	e037      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80035e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ea:	e034      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80035ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035f0:	e031      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80035f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035f6:	e02e      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80035f8:	40026000 	.word	0x40026000
 80035fc:	40026010 	.word	0x40026010
 8003600:	40026410 	.word	0x40026410
 8003604:	40026070 	.word	0x40026070
 8003608:	40026470 	.word	0x40026470
 800360c:	40026028 	.word	0x40026028
 8003610:	40026428 	.word	0x40026428
 8003614:	40026088 	.word	0x40026088
 8003618:	40026488 	.word	0x40026488
 800361c:	40026040 	.word	0x40026040
 8003620:	40026440 	.word	0x40026440
 8003624:	400260a0 	.word	0x400260a0
 8003628:	400264a0 	.word	0x400264a0
 800362c:	40026458 	.word	0x40026458
 8003630:	40026400 	.word	0x40026400
 8003634:	400260b8 	.word	0x400260b8
 8003638:	2340      	movs	r3, #64	; 0x40
 800363a:	e00c      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800363c:	2340      	movs	r3, #64	; 0x40
 800363e:	e00a      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003640:	2340      	movs	r3, #64	; 0x40
 8003642:	e008      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003644:	2340      	movs	r3, #64	; 0x40
 8003646:	e006      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003648:	2301      	movs	r3, #1
 800364a:	e004      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800364c:	2301      	movs	r3, #1
 800364e:	e002      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003654:	2301      	movs	r3, #1
 8003656:	4a7b      	ldr	r2, [pc, #492]	; (8003844 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003658:	6093      	str	r3, [r2, #8]
 800365a:	e0be      	b.n	80037da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b79      	ldr	r3, [pc, #484]	; (8003848 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003664:	429a      	cmp	r2, r3
 8003666:	d95c      	bls.n	8003722 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a77      	ldr	r2, [pc, #476]	; (800384c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d053      	beq.n	800371a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a76      	ldr	r2, [pc, #472]	; (8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d04c      	beq.n	8003716 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a74      	ldr	r2, [pc, #464]	; (8003854 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d045      	beq.n	8003712 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a73      	ldr	r2, [pc, #460]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03e      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a71      	ldr	r2, [pc, #452]	; (800385c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d037      	beq.n	800370a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a70      	ldr	r2, [pc, #448]	; (8003860 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d030      	beq.n	8003706 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6e      	ldr	r2, [pc, #440]	; (8003864 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d029      	beq.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6d      	ldr	r2, [pc, #436]	; (8003868 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6b      	ldr	r2, [pc, #428]	; (800386c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01a      	beq.n	80036f8 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6a      	ldr	r2, [pc, #424]	; (8003870 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d012      	beq.n	80036f2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a68      	ldr	r2, [pc, #416]	; (8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00a      	beq.n	80036ec <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a67      	ldr	r2, [pc, #412]	; (8003878 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d102      	bne.n	80036e6 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80036e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e4:	e01a      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80036e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036ea:	e017      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80036ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036f0:	e014      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80036f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036f6:	e011      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80036f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036fc:	e00e      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80036fe:	2340      	movs	r3, #64	; 0x40
 8003700:	e00c      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003702:	2340      	movs	r3, #64	; 0x40
 8003704:	e00a      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003706:	2340      	movs	r3, #64	; 0x40
 8003708:	e008      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	e006      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800370e:	2301      	movs	r3, #1
 8003710:	e004      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003712:	2301      	movs	r3, #1
 8003714:	e002      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800371a:	2301      	movs	r3, #1
 800371c:	4a57      	ldr	r2, [pc, #348]	; (800387c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800371e:	60d3      	str	r3, [r2, #12]
 8003720:	e05b      	b.n	80037da <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a49      	ldr	r2, [pc, #292]	; (800384c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d053      	beq.n	80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a47      	ldr	r2, [pc, #284]	; (8003850 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d04c      	beq.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a46      	ldr	r2, [pc, #280]	; (8003854 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d045      	beq.n	80037cc <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a44      	ldr	r2, [pc, #272]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d03e      	beq.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a43      	ldr	r2, [pc, #268]	; (800385c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d037      	beq.n	80037c4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a41      	ldr	r2, [pc, #260]	; (8003860 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d030      	beq.n	80037c0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a40      	ldr	r2, [pc, #256]	; (8003864 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d029      	beq.n	80037bc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3e      	ldr	r2, [pc, #248]	; (8003868 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a3d      	ldr	r2, [pc, #244]	; (800386c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d01a      	beq.n	80037b2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3b      	ldr	r2, [pc, #236]	; (8003870 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d012      	beq.n	80037ac <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00a      	beq.n	80037a6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d102      	bne.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800379a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800379e:	e01a      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037a4:	e017      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037aa:	e014      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b0:	e011      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b6:	e00e      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037b8:	2340      	movs	r3, #64	; 0x40
 80037ba:	e00c      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037bc:	2340      	movs	r3, #64	; 0x40
 80037be:	e00a      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037c0:	2340      	movs	r3, #64	; 0x40
 80037c2:	e008      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037c4:	2340      	movs	r3, #64	; 0x40
 80037c6:	e006      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e004      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e002      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80037d4:	2301      	movs	r3, #1
 80037d6:	4a29      	ldr	r2, [pc, #164]	; (800387c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80037d8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0216 	orr.w	r2, r2, #22
 80037e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0208 	orr.w	r2, r2, #8
 8003818:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e005      	b.n	8003838 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003834:	2302      	movs	r3, #2
 8003836:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003838:	7dfb      	ldrb	r3, [r7, #23]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40026400 	.word	0x40026400
 8003848:	40026058 	.word	0x40026058
 800384c:	40026010 	.word	0x40026010
 8003850:	40026410 	.word	0x40026410
 8003854:	40026070 	.word	0x40026070
 8003858:	40026470 	.word	0x40026470
 800385c:	40026028 	.word	0x40026028
 8003860:	40026428 	.word	0x40026428
 8003864:	40026088 	.word	0x40026088
 8003868:	40026488 	.word	0x40026488
 800386c:	40026040 	.word	0x40026040
 8003870:	40026440 	.word	0x40026440
 8003874:	400260a0 	.word	0x400260a0
 8003878:	400264a0 	.word	0x400264a0
 800387c:	40026000 	.word	0x40026000

08003880 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e003      	b.n	80038a6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d108      	bne.n	80038e4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038e2:	e007      	b.n	80038f4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e16b      	b.n	8003bf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800391c:	2201      	movs	r2, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	429a      	cmp	r2, r3
 8003936:	f040 815a 	bne.w	8003bee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d005      	beq.n	8003952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394e:	2b02      	cmp	r3, #2
 8003950:	d130      	bne.n	80039b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	2203      	movs	r2, #3
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003988:	2201      	movs	r2, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 0201 	and.w	r2, r3, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d017      	beq.n	80039f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d123      	bne.n	8003a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	08da      	lsrs	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3208      	adds	r2, #8
 8003a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	220f      	movs	r2, #15
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	08da      	lsrs	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3208      	adds	r2, #8
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0203 	and.w	r2, r3, #3
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80b4 	beq.w	8003bee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b60      	ldr	r3, [pc, #384]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4a5f      	ldr	r2, [pc, #380]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44
 8003a96:	4b5d      	ldr	r3, [pc, #372]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa2:	4a5b      	ldr	r2, [pc, #364]	; (8003c10 <HAL_GPIO_Init+0x310>)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	220f      	movs	r2, #15
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_GPIO_Init+0x314>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d02b      	beq.n	8003b26 <HAL_GPIO_Init+0x226>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a51      	ldr	r2, [pc, #324]	; (8003c18 <HAL_GPIO_Init+0x318>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d025      	beq.n	8003b22 <HAL_GPIO_Init+0x222>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a50      	ldr	r2, [pc, #320]	; (8003c1c <HAL_GPIO_Init+0x31c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01f      	beq.n	8003b1e <HAL_GPIO_Init+0x21e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4f      	ldr	r2, [pc, #316]	; (8003c20 <HAL_GPIO_Init+0x320>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d019      	beq.n	8003b1a <HAL_GPIO_Init+0x21a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4e      	ldr	r2, [pc, #312]	; (8003c24 <HAL_GPIO_Init+0x324>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_GPIO_Init+0x216>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4d      	ldr	r2, [pc, #308]	; (8003c28 <HAL_GPIO_Init+0x328>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00d      	beq.n	8003b12 <HAL_GPIO_Init+0x212>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4c      	ldr	r2, [pc, #304]	; (8003c2c <HAL_GPIO_Init+0x32c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <HAL_GPIO_Init+0x20e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4b      	ldr	r2, [pc, #300]	; (8003c30 <HAL_GPIO_Init+0x330>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_GPIO_Init+0x20a>
 8003b06:	2307      	movs	r3, #7
 8003b08:	e00e      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	e00c      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b0e:	2306      	movs	r3, #6
 8003b10:	e00a      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b12:	2305      	movs	r3, #5
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b26:	2300      	movs	r3, #0
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b38:	4935      	ldr	r1, [pc, #212]	; (8003c10 <HAL_GPIO_Init+0x310>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b46:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b6a:	4a32      	ldr	r2, [pc, #200]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b94:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	f67f ae90 	bls.w	800391c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40021c00 	.word	0x40021c00
 8003c34:	40013c00 	.word	0x40013c00

08003c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	807b      	strh	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c48:	787b      	ldrb	r3, [r7, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c54:	e003      	b.n	8003c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c56:	887b      	ldrh	r3, [r7, #2]
 8003c58:	041a      	lsls	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	619a      	str	r2, [r3, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e12b      	b.n	8003ed6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd fa9e 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2224      	movs	r2, #36	; 0x24
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f001 fdca 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a81      	ldr	r2, [pc, #516]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d807      	bhi.n	8003cf0 <HAL_I2C_Init+0x84>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a80      	ldr	r2, [pc, #512]	; (8003ee4 <HAL_I2C_Init+0x278>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	bf94      	ite	ls
 8003ce8:	2301      	movls	r3, #1
 8003cea:	2300      	movhi	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e006      	b.n	8003cfe <HAL_I2C_Init+0x92>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a7d      	ldr	r2, [pc, #500]	; (8003ee8 <HAL_I2C_Init+0x27c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bf94      	ite	ls
 8003cf8:	2301      	movls	r3, #1
 8003cfa:	2300      	movhi	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0e7      	b.n	8003ed6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a78      	ldr	r2, [pc, #480]	; (8003eec <HAL_I2C_Init+0x280>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0c9b      	lsrs	r3, r3, #18
 8003d10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4a6a      	ldr	r2, [pc, #424]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d802      	bhi.n	8003d40 <HAL_I2C_Init+0xd4>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	e009      	b.n	8003d54 <HAL_I2C_Init+0xe8>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_I2C_Init+0x284>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	3301      	adds	r3, #1
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	495c      	ldr	r1, [pc, #368]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003d70:	428b      	cmp	r3, r1
 8003d72:	d819      	bhi.n	8003da8 <HAL_I2C_Init+0x13c>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e59      	subs	r1, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d82:	1c59      	adds	r1, r3, #1
 8003d84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d88:	400b      	ands	r3, r1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_I2C_Init+0x138>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1e59      	subs	r1, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da2:	e051      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003da4:	2304      	movs	r3, #4
 8003da6:	e04f      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <HAL_I2C_Init+0x168>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e58      	subs	r0, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	440b      	add	r3, r1
 8003dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e012      	b.n	8003dfa <HAL_I2C_Init+0x18e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1e58      	subs	r0, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	0099      	lsls	r1, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_I2C_Init+0x196>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e022      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10e      	bne.n	8003e28 <HAL_I2C_Init+0x1bc>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1e58      	subs	r0, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6859      	ldr	r1, [r3, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	440b      	add	r3, r1
 8003e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e26:	e00f      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1e58      	subs	r0, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	0099      	lsls	r1, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	6809      	ldr	r1, [r1, #0]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6911      	ldr	r1, [r2, #16]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68d2      	ldr	r2, [r2, #12]
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	000186a0 	.word	0x000186a0
 8003ee4:	001e847f 	.word	0x001e847f
 8003ee8:	003d08ff 	.word	0x003d08ff
 8003eec:	431bde83 	.word	0x431bde83
 8003ef0:	10624dd3 	.word	0x10624dd3

08003ef4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	461a      	mov	r2, r3
 8003f00:	460b      	mov	r3, r1
 8003f02:	817b      	strh	r3, [r7, #10]
 8003f04:	4613      	mov	r3, r2
 8003f06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f08:	f7fd fb86 	bl	8001618 <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	f040 80e0 	bne.w	80040dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2319      	movs	r3, #25
 8003f22:	2201      	movs	r2, #1
 8003f24:	4970      	ldr	r1, [pc, #448]	; (80040e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fde8 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	e0d3      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2C_Master_Transmit+0x50>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e0cc      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d007      	beq.n	8003f6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2221      	movs	r2, #33	; 0x21
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2210      	movs	r2, #16
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a50      	ldr	r2, [pc, #320]	; (80040ec <HAL_I2C_Master_Transmit+0x1f8>)
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fac:	8979      	ldrh	r1, [r7, #10]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fbbc 	bl	8004730 <I2C_MasterRequestWrite>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e08d      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fd8:	e066      	b.n	80040a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fe62 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e06b      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	781a      	ldrb	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d11b      	bne.n	800407c <HAL_I2C_Master_Transmit+0x188>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d017      	beq.n	800407c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	6a39      	ldr	r1, [r7, #32]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fe52 	bl	8004d2a <I2C_WaitOnBTFFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	2b04      	cmp	r3, #4
 8004092:	d107      	bne.n	80040a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e01a      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d194      	bne.n	8003fda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	00100002 	.word	0x00100002
 80040ec:	ffff0000 	.word	0xffff0000

080040f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	; 0x30
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	461a      	mov	r2, r3
 80040fc:	460b      	mov	r3, r1
 80040fe:	817b      	strh	r3, [r7, #10]
 8004100:	4613      	mov	r3, r2
 8004102:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004104:	f7fd fa88 	bl	8001618 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b20      	cmp	r3, #32
 8004114:	f040 820b 	bne.w	800452e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2319      	movs	r3, #25
 800411e:	2201      	movs	r2, #1
 8004120:	497c      	ldr	r1, [pc, #496]	; (8004314 <HAL_I2C_Master_Receive+0x224>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fcea 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
 8004130:	e1fe      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_I2C_Master_Receive+0x50>
 800413c:	2302      	movs	r3, #2
 800413e:	e1f7      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d007      	beq.n	8004166 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004174:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2222      	movs	r2, #34	; 0x22
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2210      	movs	r2, #16
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	893a      	ldrh	r2, [r7, #8]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a5c      	ldr	r2, [pc, #368]	; (8004318 <HAL_I2C_Master_Receive+0x228>)
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041a8:	8979      	ldrh	r1, [r7, #10]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fb40 	bl	8004834 <I2C_MasterRequestRead>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e1b8      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d113      	bne.n	80041ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	623b      	str	r3, [r7, #32]
 80041da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e18c      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d11b      	bne.n	800422e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e16c      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	2b02      	cmp	r3, #2
 8004234:	d11b      	bne.n	800426e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004244:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	e14c      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800427c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004294:	e138      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	2b03      	cmp	r3, #3
 800429c:	f200 80f1 	bhi.w	8004482 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d123      	bne.n	80042f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fd7d 	bl	8004dac <I2C_WaitOnRXNEFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e139      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042ee:	e10b      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d14e      	bne.n	8004396 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	2200      	movs	r2, #0
 8004300:	4906      	ldr	r1, [pc, #24]	; (800431c <HAL_I2C_Master_Receive+0x22c>)
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fbfa 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e10e      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
 8004312:	bf00      	nop
 8004314:	00100002 	.word	0x00100002
 8004318:	ffff0000 	.word	0xffff0000
 800431c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004394:	e0b8      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	2200      	movs	r2, #0
 800439e:	4966      	ldr	r1, [pc, #408]	; (8004538 <HAL_I2C_Master_Receive+0x448>)
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fbab 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0bf      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	2200      	movs	r2, #0
 80043fa:	494f      	ldr	r1, [pc, #316]	; (8004538 <HAL_I2C_Master_Receive+0x448>)
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fb7d 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e091      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004480:	e042      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fc90 	bl	8004dac <I2C_WaitOnRXNEFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e04c      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d118      	bne.n	8004508 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f aec2 	bne.w	8004296 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3728      	adds	r7, #40	; 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	00010004 	.word	0x00010004

0800453c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	461a      	mov	r2, r3
 800454a:	4603      	mov	r3, r0
 800454c:	817b      	strh	r3, [r7, #10]
 800454e:	460b      	mov	r3, r1
 8004550:	813b      	strh	r3, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004556:	f7fd f85f 	bl	8001618 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b20      	cmp	r3, #32
 8004566:	f040 80d9 	bne.w	800471c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	2319      	movs	r3, #25
 8004570:	2201      	movs	r2, #1
 8004572:	496d      	ldr	r1, [pc, #436]	; (8004728 <HAL_I2C_Mem_Write+0x1ec>)
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fac1 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
 8004582:	e0cc      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_I2C_Mem_Write+0x56>
 800458e:	2302      	movs	r3, #2
 8004590:	e0c5      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d007      	beq.n	80045b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2221      	movs	r2, #33	; 0x21
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2240      	movs	r2, #64	; 0x40
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a4d      	ldr	r2, [pc, #308]	; (800472c <HAL_I2C_Mem_Write+0x1f0>)
 80045f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045fa:	88f8      	ldrh	r0, [r7, #6]
 80045fc:	893a      	ldrh	r2, [r7, #8]
 80045fe:	8979      	ldrh	r1, [r7, #10]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4603      	mov	r3, r0
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f9e0 	bl	80049d0 <I2C_RequestMemoryWrite>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d052      	beq.n	80046bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e081      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fb42 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00d      	beq.n	8004646 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2b04      	cmp	r3, #4
 8004630:	d107      	bne.n	8004642 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e06b      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b04      	cmp	r3, #4
 8004682:	d11b      	bne.n	80046bc <HAL_I2C_Mem_Write+0x180>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	2b00      	cmp	r3, #0
 800468a:	d017      	beq.n	80046bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1aa      	bne.n	800461a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fb2e 	bl	8004d2a <I2C_WaitOnBTFFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00d      	beq.n	80046f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d107      	bne.n	80046ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e016      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	e000      	b.n	800471e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	00100002 	.word	0x00100002
 800472c:	ffff0000 	.word	0xffff0000

08004730 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	460b      	mov	r3, r1
 800473e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d006      	beq.n	800475a <I2C_MasterRequestWrite+0x2a>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d003      	beq.n	800475a <I2C_MasterRequestWrite+0x2a>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004758:	d108      	bne.n	800476c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e00b      	b.n	8004784 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	2b12      	cmp	r3, #18
 8004772:	d107      	bne.n	8004784 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004782:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f9b3 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047aa:	d103      	bne.n	80047b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e035      	b.n	8004824 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c0:	d108      	bne.n	80047d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047c2:	897b      	ldrh	r3, [r7, #10]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	461a      	mov	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047d0:	611a      	str	r2, [r3, #16]
 80047d2:	e01b      	b.n	800480c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047d4:	897b      	ldrh	r3, [r7, #10]
 80047d6:	11db      	asrs	r3, r3, #7
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	f003 0306 	and.w	r3, r3, #6
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f063 030f 	orn	r3, r3, #15
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	490e      	ldr	r1, [pc, #56]	; (800482c <I2C_MasterRequestWrite+0xfc>)
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f9d9 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e010      	b.n	8004824 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004802:	897b      	ldrh	r3, [r7, #10]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4907      	ldr	r1, [pc, #28]	; (8004830 <I2C_MasterRequestWrite+0x100>)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f9c9 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	00010008 	.word	0x00010008
 8004830:	00010002 	.word	0x00010002

08004834 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	460b      	mov	r3, r1
 8004842:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004858:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b08      	cmp	r3, #8
 800485e:	d006      	beq.n	800486e <I2C_MasterRequestRead+0x3a>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d003      	beq.n	800486e <I2C_MasterRequestRead+0x3a>
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800486c:	d108      	bne.n	8004880 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e00b      	b.n	8004898 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	2b11      	cmp	r3, #17
 8004886:	d107      	bne.n	8004898 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f929 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048be:	d103      	bne.n	80048c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e079      	b.n	80049c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d4:	d108      	bne.n	80048e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048d6:	897b      	ldrh	r3, [r7, #10]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	611a      	str	r2, [r3, #16]
 80048e6:	e05f      	b.n	80049a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048e8:	897b      	ldrh	r3, [r7, #10]
 80048ea:	11db      	asrs	r3, r3, #7
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0306 	and.w	r3, r3, #6
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f063 030f 	orn	r3, r3, #15
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4930      	ldr	r1, [pc, #192]	; (80049c8 <I2C_MasterRequestRead+0x194>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f94f 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e054      	b.n	80049c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4929      	ldr	r1, [pc, #164]	; (80049cc <I2C_MasterRequestRead+0x198>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f93f 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e044      	b.n	80049c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f8c7 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d103      	bne.n	800498c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e017      	b.n	80049c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004990:	897b      	ldrh	r3, [r7, #10]
 8004992:	11db      	asrs	r3, r3, #7
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0306 	and.w	r3, r3, #6
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f063 030e 	orn	r3, r3, #14
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4907      	ldr	r1, [pc, #28]	; (80049cc <I2C_MasterRequestRead+0x198>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f8fb 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	00010008 	.word	0x00010008
 80049cc:	00010002 	.word	0x00010002

080049d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	817b      	strh	r3, [r7, #10]
 80049e2:	460b      	mov	r3, r1
 80049e4:	813b      	strh	r3, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f878 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a20:	d103      	bne.n	8004a2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e05f      	b.n	8004aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	492d      	ldr	r1, [pc, #180]	; (8004af8 <I2C_RequestMemoryWrite+0x128>)
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f8b0 	bl	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e04c      	b.n	8004aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	6a39      	ldr	r1, [r7, #32]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f91a 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d107      	bne.n	8004a92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e02b      	b.n	8004aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9c:	893b      	ldrh	r3, [r7, #8]
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	611a      	str	r2, [r3, #16]
 8004aa6:	e021      	b.n	8004aec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aa8:	893b      	ldrh	r3, [r7, #8]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	6a39      	ldr	r1, [r7, #32]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f8f4 	bl	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d107      	bne.n	8004ade <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004adc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e005      	b.n	8004aee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae2:	893b      	ldrh	r3, [r7, #8]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	00010002 	.word	0x00010002

08004afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b0c:	e025      	b.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d021      	beq.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b16:	f7fc fd7f 	bl	8001618 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d302      	bcc.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e023      	b.n	8004ba2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10d      	bne.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	e00c      	b.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	43da      	mvns	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bf0c      	ite	eq
 8004b92:	2301      	moveq	r3, #1
 8004b94:	2300      	movne	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d0b6      	beq.n	8004b0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb8:	e051      	b.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc8:	d123      	bne.n	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004be2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f043 0204 	orr.w	r2, r3, #4
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e046      	b.n	8004ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d021      	beq.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fc fcfd 	bl	8001618 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e020      	b.n	8004ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d10c      	bne.n	8004c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf14      	ite	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	2300      	moveq	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e00b      	b.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	43da      	mvns	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d18d      	bne.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb4:	e02d      	b.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f8ce 	bl	8004e58 <I2C_IsAcknowledgeFailed>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e02d      	b.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d021      	beq.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fc fca3 	bl	8001618 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e007      	b.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	d1ca      	bne.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d36:	e02d      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f88d 	bl	8004e58 <I2C_IsAcknowledgeFailed>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e02d      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d021      	beq.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d50:	f7fc fc62 	bl	8001618 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e007      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d1ca      	bne.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db8:	e042      	b.n	8004e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d119      	bne.n	8004dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0210 	mvn.w	r2, #16
 8004dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e029      	b.n	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfc:	f7fc fc0c 	bl	8001618 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d116      	bne.n	8004e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e007      	b.n	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d1b5      	bne.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d11b      	bne.n	8004ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	f043 0204 	orr.w	r2, r3, #4
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e267      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d075      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ed6:	4b88      	ldr	r3, [pc, #544]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d00c      	beq.n	8004efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ee2:	4b85      	ldr	r3, [pc, #532]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d112      	bne.n	8004f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eee:	4b82      	ldr	r3, [pc, #520]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efa:	d10b      	bne.n	8004f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	4b7e      	ldr	r3, [pc, #504]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d05b      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x108>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d157      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e242      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d106      	bne.n	8004f2c <HAL_RCC_OscConfig+0x74>
 8004f1e:	4b76      	ldr	r3, [pc, #472]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a75      	ldr	r2, [pc, #468]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e01d      	b.n	8004f68 <HAL_RCC_OscConfig+0xb0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x98>
 8004f36:	4b70      	ldr	r3, [pc, #448]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6f      	ldr	r2, [pc, #444]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b6d      	ldr	r3, [pc, #436]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6c      	ldr	r2, [pc, #432]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e00b      	b.n	8004f68 <HAL_RCC_OscConfig+0xb0>
 8004f50:	4b69      	ldr	r3, [pc, #420]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a68      	ldr	r2, [pc, #416]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a65      	ldr	r2, [pc, #404]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d013      	beq.n	8004f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fc fb52 	bl	8001618 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fc fb4e 	bl	8001618 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	; 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e207      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8a:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f0      	beq.n	8004f78 <HAL_RCC_OscConfig+0xc0>
 8004f96:	e014      	b.n	8004fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fc fb3e 	bl	8001618 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa0:	f7fc fb3a 	bl	8001618 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	; 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e1f3      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb2:	4b51      	ldr	r3, [pc, #324]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0xe8>
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d063      	beq.n	8005096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fce:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fda:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d11c      	bne.n	8005020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe6:	4b44      	ldr	r3, [pc, #272]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d116      	bne.n	8005020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff2:	4b41      	ldr	r3, [pc, #260]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_RCC_OscConfig+0x152>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d001      	beq.n	800500a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e1c7      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500a:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4937      	ldr	r1, [pc, #220]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800501e:	e03a      	b.n	8005096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d020      	beq.n	800506a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005028:	4b34      	ldr	r3, [pc, #208]	; (80050fc <HAL_RCC_OscConfig+0x244>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502e:	f7fc faf3 	bl	8001618 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005036:	f7fc faef 	bl	8001618 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e1a8      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005048:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005054:	4b28      	ldr	r3, [pc, #160]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4925      	ldr	r1, [pc, #148]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 8005064:	4313      	orrs	r3, r2
 8005066:	600b      	str	r3, [r1, #0]
 8005068:	e015      	b.n	8005096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HAL_RCC_OscConfig+0x244>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fc fad2 	bl	8001618 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005078:	f7fc face 	bl	8001618 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e187      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d036      	beq.n	8005110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d016      	beq.n	80050d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <HAL_RCC_OscConfig+0x248>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fc fab2 	bl	8001618 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b8:	f7fc faae 	bl	8001618 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e167      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_OscConfig+0x240>)
 80050cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x200>
 80050d6:	e01b      	b.n	8005110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <HAL_RCC_OscConfig+0x248>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050de:	f7fc fa9b 	bl	8001618 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e4:	e00e      	b.n	8005104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e6:	f7fc fa97 	bl	8001618 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d907      	bls.n	8005104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e150      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
 80050f8:	40023800 	.word	0x40023800
 80050fc:	42470000 	.word	0x42470000
 8005100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005104:	4b88      	ldr	r3, [pc, #544]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ea      	bne.n	80050e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8097 	beq.w	800524c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005122:	4b81      	ldr	r3, [pc, #516]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	4b7d      	ldr	r3, [pc, #500]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	4a7c      	ldr	r2, [pc, #496]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513c:	6413      	str	r3, [r2, #64]	; 0x40
 800513e:	4b7a      	ldr	r3, [pc, #488]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514e:	4b77      	ldr	r3, [pc, #476]	; (800532c <HAL_RCC_OscConfig+0x474>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	2b00      	cmp	r3, #0
 8005158:	d118      	bne.n	800518c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800515a:	4b74      	ldr	r3, [pc, #464]	; (800532c <HAL_RCC_OscConfig+0x474>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a73      	ldr	r2, [pc, #460]	; (800532c <HAL_RCC_OscConfig+0x474>)
 8005160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005166:	f7fc fa57 	bl	8001618 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516e:	f7fc fa53 	bl	8001618 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e10c      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005180:	4b6a      	ldr	r3, [pc, #424]	; (800532c <HAL_RCC_OscConfig+0x474>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d106      	bne.n	80051a2 <HAL_RCC_OscConfig+0x2ea>
 8005194:	4b64      	ldr	r3, [pc, #400]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	4a63      	ldr	r2, [pc, #396]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6713      	str	r3, [r2, #112]	; 0x70
 80051a0:	e01c      	b.n	80051dc <HAL_RCC_OscConfig+0x324>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x30c>
 80051aa:	4b5f      	ldr	r3, [pc, #380]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	4a5e      	ldr	r2, [pc, #376]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051b0:	f043 0304 	orr.w	r3, r3, #4
 80051b4:	6713      	str	r3, [r2, #112]	; 0x70
 80051b6:	4b5c      	ldr	r3, [pc, #368]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	4a5b      	ldr	r2, [pc, #364]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
 80051c2:	e00b      	b.n	80051dc <HAL_RCC_OscConfig+0x324>
 80051c4:	4b58      	ldr	r3, [pc, #352]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	4a57      	ldr	r2, [pc, #348]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	6713      	str	r3, [r2, #112]	; 0x70
 80051d0:	4b55      	ldr	r3, [pc, #340]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	4a54      	ldr	r2, [pc, #336]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80051d6:	f023 0304 	bic.w	r3, r3, #4
 80051da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d015      	beq.n	8005210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e4:	f7fc fa18 	bl	8001618 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ec:	f7fc fa14 	bl	8001618 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0cb      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005202:	4b49      	ldr	r3, [pc, #292]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0ee      	beq.n	80051ec <HAL_RCC_OscConfig+0x334>
 800520e:	e014      	b.n	800523a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005210:	f7fc fa02 	bl	8001618 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005216:	e00a      	b.n	800522e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005218:	f7fc f9fe 	bl	8001618 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e0b5      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522e:	4b3e      	ldr	r3, [pc, #248]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1ee      	bne.n	8005218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d105      	bne.n	800524c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005240:	4b39      	ldr	r3, [pc, #228]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	4a38      	ldr	r2, [pc, #224]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800524a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80a1 	beq.w	8005398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005256:	4b34      	ldr	r3, [pc, #208]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b08      	cmp	r3, #8
 8005260:	d05c      	beq.n	800531c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d141      	bne.n	80052ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526a:	4b31      	ldr	r3, [pc, #196]	; (8005330 <HAL_RCC_OscConfig+0x478>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fc f9d2 	bl	8001618 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005278:	f7fc f9ce 	bl	8001618 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e087      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	019b      	lsls	r3, r3, #6
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	085b      	lsrs	r3, r3, #1
 80052ae:	3b01      	subs	r3, #1
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	491b      	ldr	r1, [pc, #108]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c0:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <HAL_RCC_OscConfig+0x478>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c6:	f7fc f9a7 	bl	8001618 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ce:	f7fc f9a3 	bl	8001618 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e05c      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e0:	4b11      	ldr	r3, [pc, #68]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x416>
 80052ec:	e054      	b.n	8005398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <HAL_RCC_OscConfig+0x478>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fc f990 	bl	8001618 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fc f98c 	bl	8001618 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e045      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_RCC_OscConfig+0x470>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x444>
 800531a:	e03d      	b.n	8005398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d107      	bne.n	8005334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e038      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
 8005328:	40023800 	.word	0x40023800
 800532c:	40007000 	.word	0x40007000
 8005330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005334:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <HAL_RCC_OscConfig+0x4ec>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d028      	beq.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d121      	bne.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d11a      	bne.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800536a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800536c:	4293      	cmp	r3, r2
 800536e:	d111      	bne.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	3b01      	subs	r3, #1
 800537e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005380:	429a      	cmp	r2, r3
 8005382:	d107      	bne.n	8005394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800

080053a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0cc      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053bc:	4b68      	ldr	r3, [pc, #416]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d90c      	bls.n	80053e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b65      	ldr	r3, [pc, #404]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d2:	4b63      	ldr	r3, [pc, #396]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0b8      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d020      	beq.n	8005432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053fc:	4b59      	ldr	r3, [pc, #356]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a58      	ldr	r2, [pc, #352]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005414:	4b53      	ldr	r3, [pc, #332]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4a52      	ldr	r2, [pc, #328]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800541e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005420:	4b50      	ldr	r3, [pc, #320]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	494d      	ldr	r1, [pc, #308]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d044      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d107      	bne.n	8005456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005446:	4b47      	ldr	r3, [pc, #284]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d119      	bne.n	8005486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e07f      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d003      	beq.n	8005466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005462:	2b03      	cmp	r3, #3
 8005464:	d107      	bne.n	8005476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005466:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e06f      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005476:	4b3b      	ldr	r3, [pc, #236]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e067      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f023 0203 	bic.w	r2, r3, #3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4934      	ldr	r1, [pc, #208]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005498:	f7fc f8be 	bl	8001618 <HAL_GetTick>
 800549c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549e:	e00a      	b.n	80054b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a0:	f7fc f8ba 	bl	8001618 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e04f      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b6:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 020c 	and.w	r2, r3, #12
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d1eb      	bne.n	80054a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054c8:	4b25      	ldr	r3, [pc, #148]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d20c      	bcs.n	80054f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d6:	4b22      	ldr	r3, [pc, #136]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b20      	ldr	r3, [pc, #128]	; (8005560 <HAL_RCC_ClockConfig+0x1b8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e032      	b.n	8005556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4916      	ldr	r1, [pc, #88]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800551a:	4b12      	ldr	r3, [pc, #72]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	490e      	ldr	r1, [pc, #56]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800552e:	f000 f889 	bl	8005644 <HAL_RCC_GetSysClockFreq>
 8005532:	4602      	mov	r2, r0
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	490a      	ldr	r1, [pc, #40]	; (8005568 <HAL_RCC_ClockConfig+0x1c0>)
 8005540:	5ccb      	ldrb	r3, [r1, r3]
 8005542:	fa22 f303 	lsr.w	r3, r2, r3
 8005546:	4a09      	ldr	r2, [pc, #36]	; (800556c <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800554a:	4b09      	ldr	r3, [pc, #36]	; (8005570 <HAL_RCC_ClockConfig+0x1c8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fc f81e 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40023c00 	.word	0x40023c00
 8005564:	40023800 	.word	0x40023800
 8005568:	08006adc 	.word	0x08006adc
 800556c:	20000004 	.word	0x20000004
 8005570:	20000008 	.word	0x20000008

08005574 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08c      	sub	sp, #48	; 0x30
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d129      	bne.n	80055da <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	6313      	str	r3, [r2, #48]	; 0x30
 8005596:	4b28      	ldr	r3, [pc, #160]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80055a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a8:	2302      	movs	r3, #2
 80055aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ac:	2303      	movs	r3, #3
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80055b8:	f107 031c 	add.w	r3, r7, #28
 80055bc:	4619      	mov	r1, r3
 80055be:	481f      	ldr	r0, [pc, #124]	; (800563c <HAL_RCC_MCOConfig+0xc8>)
 80055c0:	f7fe f99e 	bl	8003900 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80055c4:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	4919      	ldr	r1, [pc, #100]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80055d8:	e029      	b.n	800562e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	4b16      	ldr	r3, [pc, #88]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 80055e4:	f043 0304 	orr.w	r3, r3, #4
 80055e8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80055f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055fc:	2302      	movs	r3, #2
 80055fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005600:	2303      	movs	r3, #3
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005608:	2300      	movs	r3, #0
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800560c:	f107 031c 	add.w	r3, r7, #28
 8005610:	4619      	mov	r1, r3
 8005612:	480b      	ldr	r0, [pc, #44]	; (8005640 <HAL_RCC_MCOConfig+0xcc>)
 8005614:	f7fe f974 	bl	8003900 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005618:	4b07      	ldr	r3, [pc, #28]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	00d9      	lsls	r1, r3, #3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	430b      	orrs	r3, r1
 8005628:	4903      	ldr	r1, [pc, #12]	; (8005638 <HAL_RCC_MCOConfig+0xc4>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
}
 800562e:	bf00      	nop
 8005630:	3730      	adds	r7, #48	; 0x30
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800
 800563c:	40020000 	.word	0x40020000
 8005640:	40020800 	.word	0x40020800

08005644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005648:	b094      	sub	sp, #80	; 0x50
 800564a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	647b      	str	r3, [r7, #68]	; 0x44
 8005650:	2300      	movs	r3, #0
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005654:	2300      	movs	r3, #0
 8005656:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800565c:	4b79      	ldr	r3, [pc, #484]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 030c 	and.w	r3, r3, #12
 8005664:	2b08      	cmp	r3, #8
 8005666:	d00d      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x40>
 8005668:	2b08      	cmp	r3, #8
 800566a:	f200 80e1 	bhi.w	8005830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x34>
 8005672:	2b04      	cmp	r3, #4
 8005674:	d003      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0x3a>
 8005676:	e0db      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005678:	4b73      	ldr	r3, [pc, #460]	; (8005848 <HAL_RCC_GetSysClockFreq+0x204>)
 800567a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800567c:	e0db      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800567e:	4b73      	ldr	r3, [pc, #460]	; (800584c <HAL_RCC_GetSysClockFreq+0x208>)
 8005680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005682:	e0d8      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005684:	4b6f      	ldr	r3, [pc, #444]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800568c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800568e:	4b6d      	ldr	r3, [pc, #436]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d063      	beq.n	8005762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800569a:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	099b      	lsrs	r3, r3, #6
 80056a0:	2200      	movs	r2, #0
 80056a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
 80056b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	f04f 0000 	mov.w	r0, #0
 80056be:	f04f 0100 	mov.w	r1, #0
 80056c2:	0159      	lsls	r1, r3, #5
 80056c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c8:	0150      	lsls	r0, r2, #5
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4621      	mov	r1, r4
 80056d0:	1a51      	subs	r1, r2, r1
 80056d2:	6139      	str	r1, [r7, #16]
 80056d4:	4629      	mov	r1, r5
 80056d6:	eb63 0301 	sbc.w	r3, r3, r1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e8:	4659      	mov	r1, fp
 80056ea:	018b      	lsls	r3, r1, #6
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056f2:	4651      	mov	r1, sl
 80056f4:	018a      	lsls	r2, r1, #6
 80056f6:	4651      	mov	r1, sl
 80056f8:	ebb2 0801 	subs.w	r8, r2, r1
 80056fc:	4659      	mov	r1, fp
 80056fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800570e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005716:	4690      	mov	r8, r2
 8005718:	4699      	mov	r9, r3
 800571a:	4623      	mov	r3, r4
 800571c:	eb18 0303 	adds.w	r3, r8, r3
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	462b      	mov	r3, r5
 8005724:	eb49 0303 	adc.w	r3, r9, r3
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005736:	4629      	mov	r1, r5
 8005738:	024b      	lsls	r3, r1, #9
 800573a:	4621      	mov	r1, r4
 800573c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005740:	4621      	mov	r1, r4
 8005742:	024a      	lsls	r2, r1, #9
 8005744:	4610      	mov	r0, r2
 8005746:	4619      	mov	r1, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574a:	2200      	movs	r2, #0
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
 800574e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005754:	f7fa fd8c 	bl	8000270 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4613      	mov	r3, r2
 800575e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005760:	e058      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005762:	4b38      	ldr	r3, [pc, #224]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	2200      	movs	r2, #0
 800576a:	4618      	mov	r0, r3
 800576c:	4611      	mov	r1, r2
 800576e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	2300      	movs	r3, #0
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
 8005778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	0159      	lsls	r1, r3, #5
 800578a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800578e:	0150      	lsls	r0, r2, #5
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4641      	mov	r1, r8
 8005796:	ebb2 0a01 	subs.w	sl, r2, r1
 800579a:	4649      	mov	r1, r9
 800579c:	eb63 0b01 	sbc.w	fp, r3, r1
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057b4:	ebb2 040a 	subs.w	r4, r2, sl
 80057b8:	eb63 050b 	sbc.w	r5, r3, fp
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	00eb      	lsls	r3, r5, #3
 80057c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ca:	00e2      	lsls	r2, r4, #3
 80057cc:	4614      	mov	r4, r2
 80057ce:	461d      	mov	r5, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	18e3      	adds	r3, r4, r3
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	464b      	mov	r3, r9
 80057d8:	eb45 0303 	adc.w	r3, r5, r3
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ea:	4629      	mov	r1, r5
 80057ec:	028b      	lsls	r3, r1, #10
 80057ee:	4621      	mov	r1, r4
 80057f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057f4:	4621      	mov	r1, r4
 80057f6:	028a      	lsls	r2, r1, #10
 80057f8:	4610      	mov	r0, r2
 80057fa:	4619      	mov	r1, r3
 80057fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fe:	2200      	movs	r2, #0
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	61fa      	str	r2, [r7, #28]
 8005804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005808:	f7fa fd32 	bl	8000270 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4613      	mov	r3, r2
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_RCC_GetSysClockFreq+0x200>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	3301      	adds	r3, #1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800582e:	e002      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_RCC_GetSysClockFreq+0x204>)
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005838:	4618      	mov	r0, r3
 800583a:	3750      	adds	r7, #80	; 0x50
 800583c:	46bd      	mov	sp, r7
 800583e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	00f42400 	.word	0x00f42400
 800584c:	007a1200 	.word	0x007a1200

08005850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <HAL_RCC_GetHCLKFreq+0x14>)
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000004 	.word	0x20000004

08005868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800586c:	f7ff fff0 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	0a9b      	lsrs	r3, r3, #10
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4903      	ldr	r1, [pc, #12]	; (800588c <HAL_RCC_GetPCLK1Freq+0x24>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800
 800588c:	08006aec 	.word	0x08006aec

08005890 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e038      	b.n	8005918 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7fb fd1e 	bl	80012fc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3308      	adds	r3, #8
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f000 f828 	bl	8005920 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	461a      	mov	r2, r3
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	f000 f88a 	bl	80059f4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6858      	ldr	r0, [r3, #4]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	f000 f8b7 	bl	8005a60 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	6892      	ldr	r2, [r2, #8]
 80058fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	6892      	ldr	r2, [r2, #8]
 8005906:	f041 0101 	orr.w	r1, r1, #1
 800590a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	f023 0101 	bic.w	r1, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b08      	cmp	r3, #8
 8005948:	d102      	bne.n	8005950 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800594a:	2340      	movs	r3, #64	; 0x40
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	e001      	b.n	8005954 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005960:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005966:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800596c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005972:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005978:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800597e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005984:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800598a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005990:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80059ae:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <FSMC_NORSRAM_Init+0xd0>)
 80059b0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059b8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80059c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	ea02 0103 	and.w	r1, r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4319      	orrs	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	0008fb7f 	.word	0x0008fb7f

080059f4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	051b      	lsls	r3, r3, #20
 8005a32:	431a      	orrs	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	3b02      	subs	r3, #2
 8005a3a:	061b      	lsls	r3, r3, #24
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	3201      	adds	r2, #1
 8005a48:	4319      	orrs	r1, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a74:	d11d      	bne.n	8005ab2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	6852      	ldr	r2, [r2, #4]
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	4311      	orrs	r1, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	6892      	ldr	r2, [r2, #8]
 8005a92:	0212      	lsls	r2, r2, #8
 8005a94:	4311      	orrs	r1, r2
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	6992      	ldr	r2, [r2, #24]
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	68d2      	ldr	r2, [r2, #12]
 8005aa0:	0412      	lsls	r2, r2, #16
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	ea43 0102 	orr.w	r1, r3, r2
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005ab0:	e005      	b.n	8005abe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	cff00000 	.word	0xcff00000

08005ad0 <__errno>:
 8005ad0:	4b01      	ldr	r3, [pc, #4]	; (8005ad8 <__errno+0x8>)
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000010 	.word	0x20000010

08005adc <__libc_init_array>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	4d0d      	ldr	r5, [pc, #52]	; (8005b14 <__libc_init_array+0x38>)
 8005ae0:	4c0d      	ldr	r4, [pc, #52]	; (8005b18 <__libc_init_array+0x3c>)
 8005ae2:	1b64      	subs	r4, r4, r5
 8005ae4:	10a4      	asrs	r4, r4, #2
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	42a6      	cmp	r6, r4
 8005aea:	d109      	bne.n	8005b00 <__libc_init_array+0x24>
 8005aec:	4d0b      	ldr	r5, [pc, #44]	; (8005b1c <__libc_init_array+0x40>)
 8005aee:	4c0c      	ldr	r4, [pc, #48]	; (8005b20 <__libc_init_array+0x44>)
 8005af0:	f000 ffae 	bl	8006a50 <_init>
 8005af4:	1b64      	subs	r4, r4, r5
 8005af6:	10a4      	asrs	r4, r4, #2
 8005af8:	2600      	movs	r6, #0
 8005afa:	42a6      	cmp	r6, r4
 8005afc:	d105      	bne.n	8005b0a <__libc_init_array+0x2e>
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b04:	4798      	blx	r3
 8005b06:	3601      	adds	r6, #1
 8005b08:	e7ee      	b.n	8005ae8 <__libc_init_array+0xc>
 8005b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0e:	4798      	blx	r3
 8005b10:	3601      	adds	r6, #1
 8005b12:	e7f2      	b.n	8005afa <__libc_init_array+0x1e>
 8005b14:	08006b9c 	.word	0x08006b9c
 8005b18:	08006b9c 	.word	0x08006b9c
 8005b1c:	08006b9c 	.word	0x08006b9c
 8005b20:	08006ba0 	.word	0x08006ba0

08005b24 <memset>:
 8005b24:	4402      	add	r2, r0
 8005b26:	4603      	mov	r3, r0
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d100      	bne.n	8005b2e <memset+0xa>
 8005b2c:	4770      	bx	lr
 8005b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b32:	e7f9      	b.n	8005b28 <memset+0x4>

08005b34 <iprintf>:
 8005b34:	b40f      	push	{r0, r1, r2, r3}
 8005b36:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <iprintf+0x2c>)
 8005b38:	b513      	push	{r0, r1, r4, lr}
 8005b3a:	681c      	ldr	r4, [r3, #0]
 8005b3c:	b124      	cbz	r4, 8005b48 <iprintf+0x14>
 8005b3e:	69a3      	ldr	r3, [r4, #24]
 8005b40:	b913      	cbnz	r3, 8005b48 <iprintf+0x14>
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 f866 	bl	8005c14 <__sinit>
 8005b48:	ab05      	add	r3, sp, #20
 8005b4a:	9a04      	ldr	r2, [sp, #16]
 8005b4c:	68a1      	ldr	r1, [r4, #8]
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 f9bd 	bl	8005ed0 <_vfiprintf_r>
 8005b56:	b002      	add	sp, #8
 8005b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b5c:	b004      	add	sp, #16
 8005b5e:	4770      	bx	lr
 8005b60:	20000010 	.word	0x20000010

08005b64 <std>:
 8005b64:	2300      	movs	r3, #0
 8005b66:	b510      	push	{r4, lr}
 8005b68:	4604      	mov	r4, r0
 8005b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b72:	6083      	str	r3, [r0, #8]
 8005b74:	8181      	strh	r1, [r0, #12]
 8005b76:	6643      	str	r3, [r0, #100]	; 0x64
 8005b78:	81c2      	strh	r2, [r0, #14]
 8005b7a:	6183      	str	r3, [r0, #24]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	2208      	movs	r2, #8
 8005b80:	305c      	adds	r0, #92	; 0x5c
 8005b82:	f7ff ffcf 	bl	8005b24 <memset>
 8005b86:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <std+0x38>)
 8005b88:	6263      	str	r3, [r4, #36]	; 0x24
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x3c>)
 8005b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x40>)
 8005b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x44>)
 8005b94:	6224      	str	r4, [r4, #32]
 8005b96:	6323      	str	r3, [r4, #48]	; 0x30
 8005b98:	bd10      	pop	{r4, pc}
 8005b9a:	bf00      	nop
 8005b9c:	08006479 	.word	0x08006479
 8005ba0:	0800649b 	.word	0x0800649b
 8005ba4:	080064d3 	.word	0x080064d3
 8005ba8:	080064f7 	.word	0x080064f7

08005bac <_cleanup_r>:
 8005bac:	4901      	ldr	r1, [pc, #4]	; (8005bb4 <_cleanup_r+0x8>)
 8005bae:	f000 b8af 	b.w	8005d10 <_fwalk_reent>
 8005bb2:	bf00      	nop
 8005bb4:	080067d1 	.word	0x080067d1

08005bb8 <__sfmoreglue>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	2268      	movs	r2, #104	; 0x68
 8005bbc:	1e4d      	subs	r5, r1, #1
 8005bbe:	4355      	muls	r5, r2
 8005bc0:	460e      	mov	r6, r1
 8005bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bc6:	f000 f8e5 	bl	8005d94 <_malloc_r>
 8005bca:	4604      	mov	r4, r0
 8005bcc:	b140      	cbz	r0, 8005be0 <__sfmoreglue+0x28>
 8005bce:	2100      	movs	r1, #0
 8005bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8005bd4:	300c      	adds	r0, #12
 8005bd6:	60a0      	str	r0, [r4, #8]
 8005bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bdc:	f7ff ffa2 	bl	8005b24 <memset>
 8005be0:	4620      	mov	r0, r4
 8005be2:	bd70      	pop	{r4, r5, r6, pc}

08005be4 <__sfp_lock_acquire>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__sfp_lock_acquire+0x8>)
 8005be6:	f000 b8b3 	b.w	8005d50 <__retarget_lock_acquire_recursive>
 8005bea:	bf00      	nop
 8005bec:	200001fd 	.word	0x200001fd

08005bf0 <__sfp_lock_release>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__sfp_lock_release+0x8>)
 8005bf2:	f000 b8ae 	b.w	8005d52 <__retarget_lock_release_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	200001fd 	.word	0x200001fd

08005bfc <__sinit_lock_acquire>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__sinit_lock_acquire+0x8>)
 8005bfe:	f000 b8a7 	b.w	8005d50 <__retarget_lock_acquire_recursive>
 8005c02:	bf00      	nop
 8005c04:	200001fe 	.word	0x200001fe

08005c08 <__sinit_lock_release>:
 8005c08:	4801      	ldr	r0, [pc, #4]	; (8005c10 <__sinit_lock_release+0x8>)
 8005c0a:	f000 b8a2 	b.w	8005d52 <__retarget_lock_release_recursive>
 8005c0e:	bf00      	nop
 8005c10:	200001fe 	.word	0x200001fe

08005c14 <__sinit>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	4604      	mov	r4, r0
 8005c18:	f7ff fff0 	bl	8005bfc <__sinit_lock_acquire>
 8005c1c:	69a3      	ldr	r3, [r4, #24]
 8005c1e:	b11b      	cbz	r3, 8005c28 <__sinit+0x14>
 8005c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c24:	f7ff bff0 	b.w	8005c08 <__sinit_lock_release>
 8005c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005c2e:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <__sinit+0x68>)
 8005c30:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <__sinit+0x6c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	bf04      	itt	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	61a3      	streq	r3, [r4, #24]
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 f820 	bl	8005c84 <__sfp>
 8005c44:	6060      	str	r0, [r4, #4]
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 f81c 	bl	8005c84 <__sfp>
 8005c4c:	60a0      	str	r0, [r4, #8]
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 f818 	bl	8005c84 <__sfp>
 8005c54:	2200      	movs	r2, #0
 8005c56:	60e0      	str	r0, [r4, #12]
 8005c58:	2104      	movs	r1, #4
 8005c5a:	6860      	ldr	r0, [r4, #4]
 8005c5c:	f7ff ff82 	bl	8005b64 <std>
 8005c60:	68a0      	ldr	r0, [r4, #8]
 8005c62:	2201      	movs	r2, #1
 8005c64:	2109      	movs	r1, #9
 8005c66:	f7ff ff7d 	bl	8005b64 <std>
 8005c6a:	68e0      	ldr	r0, [r4, #12]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	2112      	movs	r1, #18
 8005c70:	f7ff ff78 	bl	8005b64 <std>
 8005c74:	2301      	movs	r3, #1
 8005c76:	61a3      	str	r3, [r4, #24]
 8005c78:	e7d2      	b.n	8005c20 <__sinit+0xc>
 8005c7a:	bf00      	nop
 8005c7c:	08006afc 	.word	0x08006afc
 8005c80:	08005bad 	.word	0x08005bad

08005c84 <__sfp>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	4607      	mov	r7, r0
 8005c88:	f7ff ffac 	bl	8005be4 <__sfp_lock_acquire>
 8005c8c:	4b1e      	ldr	r3, [pc, #120]	; (8005d08 <__sfp+0x84>)
 8005c8e:	681e      	ldr	r6, [r3, #0]
 8005c90:	69b3      	ldr	r3, [r6, #24]
 8005c92:	b913      	cbnz	r3, 8005c9a <__sfp+0x16>
 8005c94:	4630      	mov	r0, r6
 8005c96:	f7ff ffbd 	bl	8005c14 <__sinit>
 8005c9a:	3648      	adds	r6, #72	; 0x48
 8005c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	d503      	bpl.n	8005cac <__sfp+0x28>
 8005ca4:	6833      	ldr	r3, [r6, #0]
 8005ca6:	b30b      	cbz	r3, 8005cec <__sfp+0x68>
 8005ca8:	6836      	ldr	r6, [r6, #0]
 8005caa:	e7f7      	b.n	8005c9c <__sfp+0x18>
 8005cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cb0:	b9d5      	cbnz	r5, 8005ce8 <__sfp+0x64>
 8005cb2:	4b16      	ldr	r3, [pc, #88]	; (8005d0c <__sfp+0x88>)
 8005cb4:	60e3      	str	r3, [r4, #12]
 8005cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cba:	6665      	str	r5, [r4, #100]	; 0x64
 8005cbc:	f000 f847 	bl	8005d4e <__retarget_lock_init_recursive>
 8005cc0:	f7ff ff96 	bl	8005bf0 <__sfp_lock_release>
 8005cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ccc:	6025      	str	r5, [r4, #0]
 8005cce:	61a5      	str	r5, [r4, #24]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cd8:	f7ff ff24 	bl	8005b24 <memset>
 8005cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce8:	3468      	adds	r4, #104	; 0x68
 8005cea:	e7d9      	b.n	8005ca0 <__sfp+0x1c>
 8005cec:	2104      	movs	r1, #4
 8005cee:	4638      	mov	r0, r7
 8005cf0:	f7ff ff62 	bl	8005bb8 <__sfmoreglue>
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	6030      	str	r0, [r6, #0]
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d1d5      	bne.n	8005ca8 <__sfp+0x24>
 8005cfc:	f7ff ff78 	bl	8005bf0 <__sfp_lock_release>
 8005d00:	230c      	movs	r3, #12
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	e7ee      	b.n	8005ce4 <__sfp+0x60>
 8005d06:	bf00      	nop
 8005d08:	08006afc 	.word	0x08006afc
 8005d0c:	ffff0001 	.word	0xffff0001

08005d10 <_fwalk_reent>:
 8005d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d14:	4606      	mov	r6, r0
 8005d16:	4688      	mov	r8, r1
 8005d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d1c:	2700      	movs	r7, #0
 8005d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d22:	f1b9 0901 	subs.w	r9, r9, #1
 8005d26:	d505      	bpl.n	8005d34 <_fwalk_reent+0x24>
 8005d28:	6824      	ldr	r4, [r4, #0]
 8005d2a:	2c00      	cmp	r4, #0
 8005d2c:	d1f7      	bne.n	8005d1e <_fwalk_reent+0xe>
 8005d2e:	4638      	mov	r0, r7
 8005d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d34:	89ab      	ldrh	r3, [r5, #12]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d907      	bls.n	8005d4a <_fwalk_reent+0x3a>
 8005d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	d003      	beq.n	8005d4a <_fwalk_reent+0x3a>
 8005d42:	4629      	mov	r1, r5
 8005d44:	4630      	mov	r0, r6
 8005d46:	47c0      	blx	r8
 8005d48:	4307      	orrs	r7, r0
 8005d4a:	3568      	adds	r5, #104	; 0x68
 8005d4c:	e7e9      	b.n	8005d22 <_fwalk_reent+0x12>

08005d4e <__retarget_lock_init_recursive>:
 8005d4e:	4770      	bx	lr

08005d50 <__retarget_lock_acquire_recursive>:
 8005d50:	4770      	bx	lr

08005d52 <__retarget_lock_release_recursive>:
 8005d52:	4770      	bx	lr

08005d54 <sbrk_aligned>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	4e0e      	ldr	r6, [pc, #56]	; (8005d90 <sbrk_aligned+0x3c>)
 8005d58:	460c      	mov	r4, r1
 8005d5a:	6831      	ldr	r1, [r6, #0]
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	b911      	cbnz	r1, 8005d66 <sbrk_aligned+0x12>
 8005d60:	f000 fb7a 	bl	8006458 <_sbrk_r>
 8005d64:	6030      	str	r0, [r6, #0]
 8005d66:	4621      	mov	r1, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f000 fb75 	bl	8006458 <_sbrk_r>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	d00a      	beq.n	8005d88 <sbrk_aligned+0x34>
 8005d72:	1cc4      	adds	r4, r0, #3
 8005d74:	f024 0403 	bic.w	r4, r4, #3
 8005d78:	42a0      	cmp	r0, r4
 8005d7a:	d007      	beq.n	8005d8c <sbrk_aligned+0x38>
 8005d7c:	1a21      	subs	r1, r4, r0
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 fb6a 	bl	8006458 <_sbrk_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d101      	bne.n	8005d8c <sbrk_aligned+0x38>
 8005d88:	f04f 34ff 	mov.w	r4, #4294967295
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	20000204 	.word	0x20000204

08005d94 <_malloc_r>:
 8005d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d98:	1ccd      	adds	r5, r1, #3
 8005d9a:	f025 0503 	bic.w	r5, r5, #3
 8005d9e:	3508      	adds	r5, #8
 8005da0:	2d0c      	cmp	r5, #12
 8005da2:	bf38      	it	cc
 8005da4:	250c      	movcc	r5, #12
 8005da6:	2d00      	cmp	r5, #0
 8005da8:	4607      	mov	r7, r0
 8005daa:	db01      	blt.n	8005db0 <_malloc_r+0x1c>
 8005dac:	42a9      	cmp	r1, r5
 8005dae:	d905      	bls.n	8005dbc <_malloc_r+0x28>
 8005db0:	230c      	movs	r3, #12
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	2600      	movs	r6, #0
 8005db6:	4630      	mov	r0, r6
 8005db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dbc:	4e2e      	ldr	r6, [pc, #184]	; (8005e78 <_malloc_r+0xe4>)
 8005dbe:	f000 fdbb 	bl	8006938 <__malloc_lock>
 8005dc2:	6833      	ldr	r3, [r6, #0]
 8005dc4:	461c      	mov	r4, r3
 8005dc6:	bb34      	cbnz	r4, 8005e16 <_malloc_r+0x82>
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4638      	mov	r0, r7
 8005dcc:	f7ff ffc2 	bl	8005d54 <sbrk_aligned>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	d14d      	bne.n	8005e72 <_malloc_r+0xde>
 8005dd6:	6834      	ldr	r4, [r6, #0]
 8005dd8:	4626      	mov	r6, r4
 8005dda:	2e00      	cmp	r6, #0
 8005ddc:	d140      	bne.n	8005e60 <_malloc_r+0xcc>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	4631      	mov	r1, r6
 8005de2:	4638      	mov	r0, r7
 8005de4:	eb04 0803 	add.w	r8, r4, r3
 8005de8:	f000 fb36 	bl	8006458 <_sbrk_r>
 8005dec:	4580      	cmp	r8, r0
 8005dee:	d13a      	bne.n	8005e66 <_malloc_r+0xd2>
 8005df0:	6821      	ldr	r1, [r4, #0]
 8005df2:	3503      	adds	r5, #3
 8005df4:	1a6d      	subs	r5, r5, r1
 8005df6:	f025 0503 	bic.w	r5, r5, #3
 8005dfa:	3508      	adds	r5, #8
 8005dfc:	2d0c      	cmp	r5, #12
 8005dfe:	bf38      	it	cc
 8005e00:	250c      	movcc	r5, #12
 8005e02:	4629      	mov	r1, r5
 8005e04:	4638      	mov	r0, r7
 8005e06:	f7ff ffa5 	bl	8005d54 <sbrk_aligned>
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d02b      	beq.n	8005e66 <_malloc_r+0xd2>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	442b      	add	r3, r5
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	e00e      	b.n	8005e34 <_malloc_r+0xa0>
 8005e16:	6822      	ldr	r2, [r4, #0]
 8005e18:	1b52      	subs	r2, r2, r5
 8005e1a:	d41e      	bmi.n	8005e5a <_malloc_r+0xc6>
 8005e1c:	2a0b      	cmp	r2, #11
 8005e1e:	d916      	bls.n	8005e4e <_malloc_r+0xba>
 8005e20:	1961      	adds	r1, r4, r5
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	6025      	str	r5, [r4, #0]
 8005e26:	bf18      	it	ne
 8005e28:	6059      	strne	r1, [r3, #4]
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	bf08      	it	eq
 8005e2e:	6031      	streq	r1, [r6, #0]
 8005e30:	5162      	str	r2, [r4, r5]
 8005e32:	604b      	str	r3, [r1, #4]
 8005e34:	4638      	mov	r0, r7
 8005e36:	f104 060b 	add.w	r6, r4, #11
 8005e3a:	f000 fd83 	bl	8006944 <__malloc_unlock>
 8005e3e:	f026 0607 	bic.w	r6, r6, #7
 8005e42:	1d23      	adds	r3, r4, #4
 8005e44:	1af2      	subs	r2, r6, r3
 8005e46:	d0b6      	beq.n	8005db6 <_malloc_r+0x22>
 8005e48:	1b9b      	subs	r3, r3, r6
 8005e4a:	50a3      	str	r3, [r4, r2]
 8005e4c:	e7b3      	b.n	8005db6 <_malloc_r+0x22>
 8005e4e:	6862      	ldr	r2, [r4, #4]
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	bf0c      	ite	eq
 8005e54:	6032      	streq	r2, [r6, #0]
 8005e56:	605a      	strne	r2, [r3, #4]
 8005e58:	e7ec      	b.n	8005e34 <_malloc_r+0xa0>
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	6864      	ldr	r4, [r4, #4]
 8005e5e:	e7b2      	b.n	8005dc6 <_malloc_r+0x32>
 8005e60:	4634      	mov	r4, r6
 8005e62:	6876      	ldr	r6, [r6, #4]
 8005e64:	e7b9      	b.n	8005dda <_malloc_r+0x46>
 8005e66:	230c      	movs	r3, #12
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	f000 fd6a 	bl	8006944 <__malloc_unlock>
 8005e70:	e7a1      	b.n	8005db6 <_malloc_r+0x22>
 8005e72:	6025      	str	r5, [r4, #0]
 8005e74:	e7de      	b.n	8005e34 <_malloc_r+0xa0>
 8005e76:	bf00      	nop
 8005e78:	20000200 	.word	0x20000200

08005e7c <__sfputc_r>:
 8005e7c:	6893      	ldr	r3, [r2, #8]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	b410      	push	{r4}
 8005e84:	6093      	str	r3, [r2, #8]
 8005e86:	da08      	bge.n	8005e9a <__sfputc_r+0x1e>
 8005e88:	6994      	ldr	r4, [r2, #24]
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	db01      	blt.n	8005e92 <__sfputc_r+0x16>
 8005e8e:	290a      	cmp	r1, #10
 8005e90:	d103      	bne.n	8005e9a <__sfputc_r+0x1e>
 8005e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e96:	f000 bb33 	b.w	8006500 <__swbuf_r>
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	1c58      	adds	r0, r3, #1
 8005e9e:	6010      	str	r0, [r2, #0]
 8005ea0:	7019      	strb	r1, [r3, #0]
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <__sfputs_r>:
 8005eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eac:	4606      	mov	r6, r0
 8005eae:	460f      	mov	r7, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	18d5      	adds	r5, r2, r3
 8005eb4:	42ac      	cmp	r4, r5
 8005eb6:	d101      	bne.n	8005ebc <__sfputs_r+0x12>
 8005eb8:	2000      	movs	r0, #0
 8005eba:	e007      	b.n	8005ecc <__sfputs_r+0x22>
 8005ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec0:	463a      	mov	r2, r7
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7ff ffda 	bl	8005e7c <__sfputc_r>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d1f3      	bne.n	8005eb4 <__sfputs_r+0xa>
 8005ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ed0 <_vfiprintf_r>:
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	b09d      	sub	sp, #116	; 0x74
 8005ed8:	4614      	mov	r4, r2
 8005eda:	4698      	mov	r8, r3
 8005edc:	4606      	mov	r6, r0
 8005ede:	b118      	cbz	r0, 8005ee8 <_vfiprintf_r+0x18>
 8005ee0:	6983      	ldr	r3, [r0, #24]
 8005ee2:	b90b      	cbnz	r3, 8005ee8 <_vfiprintf_r+0x18>
 8005ee4:	f7ff fe96 	bl	8005c14 <__sinit>
 8005ee8:	4b89      	ldr	r3, [pc, #548]	; (8006110 <_vfiprintf_r+0x240>)
 8005eea:	429d      	cmp	r5, r3
 8005eec:	d11b      	bne.n	8005f26 <_vfiprintf_r+0x56>
 8005eee:	6875      	ldr	r5, [r6, #4]
 8005ef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ef2:	07d9      	lsls	r1, r3, #31
 8005ef4:	d405      	bmi.n	8005f02 <_vfiprintf_r+0x32>
 8005ef6:	89ab      	ldrh	r3, [r5, #12]
 8005ef8:	059a      	lsls	r2, r3, #22
 8005efa:	d402      	bmi.n	8005f02 <_vfiprintf_r+0x32>
 8005efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005efe:	f7ff ff27 	bl	8005d50 <__retarget_lock_acquire_recursive>
 8005f02:	89ab      	ldrh	r3, [r5, #12]
 8005f04:	071b      	lsls	r3, r3, #28
 8005f06:	d501      	bpl.n	8005f0c <_vfiprintf_r+0x3c>
 8005f08:	692b      	ldr	r3, [r5, #16]
 8005f0a:	b9eb      	cbnz	r3, 8005f48 <_vfiprintf_r+0x78>
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f000 fb5a 	bl	80065c8 <__swsetup_r>
 8005f14:	b1c0      	cbz	r0, 8005f48 <_vfiprintf_r+0x78>
 8005f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f18:	07dc      	lsls	r4, r3, #31
 8005f1a:	d50e      	bpl.n	8005f3a <_vfiprintf_r+0x6a>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	b01d      	add	sp, #116	; 0x74
 8005f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f26:	4b7b      	ldr	r3, [pc, #492]	; (8006114 <_vfiprintf_r+0x244>)
 8005f28:	429d      	cmp	r5, r3
 8005f2a:	d101      	bne.n	8005f30 <_vfiprintf_r+0x60>
 8005f2c:	68b5      	ldr	r5, [r6, #8]
 8005f2e:	e7df      	b.n	8005ef0 <_vfiprintf_r+0x20>
 8005f30:	4b79      	ldr	r3, [pc, #484]	; (8006118 <_vfiprintf_r+0x248>)
 8005f32:	429d      	cmp	r5, r3
 8005f34:	bf08      	it	eq
 8005f36:	68f5      	ldreq	r5, [r6, #12]
 8005f38:	e7da      	b.n	8005ef0 <_vfiprintf_r+0x20>
 8005f3a:	89ab      	ldrh	r3, [r5, #12]
 8005f3c:	0598      	lsls	r0, r3, #22
 8005f3e:	d4ed      	bmi.n	8005f1c <_vfiprintf_r+0x4c>
 8005f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f42:	f7ff ff06 	bl	8005d52 <__retarget_lock_release_recursive>
 8005f46:	e7e9      	b.n	8005f1c <_vfiprintf_r+0x4c>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f56:	2330      	movs	r3, #48	; 0x30
 8005f58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800611c <_vfiprintf_r+0x24c>
 8005f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f60:	f04f 0901 	mov.w	r9, #1
 8005f64:	4623      	mov	r3, r4
 8005f66:	469a      	mov	sl, r3
 8005f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f6c:	b10a      	cbz	r2, 8005f72 <_vfiprintf_r+0xa2>
 8005f6e:	2a25      	cmp	r2, #37	; 0x25
 8005f70:	d1f9      	bne.n	8005f66 <_vfiprintf_r+0x96>
 8005f72:	ebba 0b04 	subs.w	fp, sl, r4
 8005f76:	d00b      	beq.n	8005f90 <_vfiprintf_r+0xc0>
 8005f78:	465b      	mov	r3, fp
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f7ff ff93 	bl	8005eaa <__sfputs_r>
 8005f84:	3001      	adds	r0, #1
 8005f86:	f000 80aa 	beq.w	80060de <_vfiprintf_r+0x20e>
 8005f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f8c:	445a      	add	r2, fp
 8005f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f90:	f89a 3000 	ldrb.w	r3, [sl]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80a2 	beq.w	80060de <_vfiprintf_r+0x20e>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa4:	f10a 0a01 	add.w	sl, sl, #1
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	9307      	str	r3, [sp, #28]
 8005fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8005fb2:	4654      	mov	r4, sl
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fba:	4858      	ldr	r0, [pc, #352]	; (800611c <_vfiprintf_r+0x24c>)
 8005fbc:	f7fa f908 	bl	80001d0 <memchr>
 8005fc0:	9a04      	ldr	r2, [sp, #16]
 8005fc2:	b9d8      	cbnz	r0, 8005ffc <_vfiprintf_r+0x12c>
 8005fc4:	06d1      	lsls	r1, r2, #27
 8005fc6:	bf44      	itt	mi
 8005fc8:	2320      	movmi	r3, #32
 8005fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fce:	0713      	lsls	r3, r2, #28
 8005fd0:	bf44      	itt	mi
 8005fd2:	232b      	movmi	r3, #43	; 0x2b
 8005fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8005fde:	d015      	beq.n	800600c <_vfiprintf_r+0x13c>
 8005fe0:	9a07      	ldr	r2, [sp, #28]
 8005fe2:	4654      	mov	r4, sl
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f04f 0c0a 	mov.w	ip, #10
 8005fea:	4621      	mov	r1, r4
 8005fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff0:	3b30      	subs	r3, #48	; 0x30
 8005ff2:	2b09      	cmp	r3, #9
 8005ff4:	d94e      	bls.n	8006094 <_vfiprintf_r+0x1c4>
 8005ff6:	b1b0      	cbz	r0, 8006026 <_vfiprintf_r+0x156>
 8005ff8:	9207      	str	r2, [sp, #28]
 8005ffa:	e014      	b.n	8006026 <_vfiprintf_r+0x156>
 8005ffc:	eba0 0308 	sub.w	r3, r0, r8
 8006000:	fa09 f303 	lsl.w	r3, r9, r3
 8006004:	4313      	orrs	r3, r2
 8006006:	9304      	str	r3, [sp, #16]
 8006008:	46a2      	mov	sl, r4
 800600a:	e7d2      	b.n	8005fb2 <_vfiprintf_r+0xe2>
 800600c:	9b03      	ldr	r3, [sp, #12]
 800600e:	1d19      	adds	r1, r3, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	9103      	str	r1, [sp, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	bfbb      	ittet	lt
 8006018:	425b      	neglt	r3, r3
 800601a:	f042 0202 	orrlt.w	r2, r2, #2
 800601e:	9307      	strge	r3, [sp, #28]
 8006020:	9307      	strlt	r3, [sp, #28]
 8006022:	bfb8      	it	lt
 8006024:	9204      	strlt	r2, [sp, #16]
 8006026:	7823      	ldrb	r3, [r4, #0]
 8006028:	2b2e      	cmp	r3, #46	; 0x2e
 800602a:	d10c      	bne.n	8006046 <_vfiprintf_r+0x176>
 800602c:	7863      	ldrb	r3, [r4, #1]
 800602e:	2b2a      	cmp	r3, #42	; 0x2a
 8006030:	d135      	bne.n	800609e <_vfiprintf_r+0x1ce>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	1d1a      	adds	r2, r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	9203      	str	r2, [sp, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	bfb8      	it	lt
 800603e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006042:	3402      	adds	r4, #2
 8006044:	9305      	str	r3, [sp, #20]
 8006046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800612c <_vfiprintf_r+0x25c>
 800604a:	7821      	ldrb	r1, [r4, #0]
 800604c:	2203      	movs	r2, #3
 800604e:	4650      	mov	r0, sl
 8006050:	f7fa f8be 	bl	80001d0 <memchr>
 8006054:	b140      	cbz	r0, 8006068 <_vfiprintf_r+0x198>
 8006056:	2340      	movs	r3, #64	; 0x40
 8006058:	eba0 000a 	sub.w	r0, r0, sl
 800605c:	fa03 f000 	lsl.w	r0, r3, r0
 8006060:	9b04      	ldr	r3, [sp, #16]
 8006062:	4303      	orrs	r3, r0
 8006064:	3401      	adds	r4, #1
 8006066:	9304      	str	r3, [sp, #16]
 8006068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606c:	482c      	ldr	r0, [pc, #176]	; (8006120 <_vfiprintf_r+0x250>)
 800606e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006072:	2206      	movs	r2, #6
 8006074:	f7fa f8ac 	bl	80001d0 <memchr>
 8006078:	2800      	cmp	r0, #0
 800607a:	d03f      	beq.n	80060fc <_vfiprintf_r+0x22c>
 800607c:	4b29      	ldr	r3, [pc, #164]	; (8006124 <_vfiprintf_r+0x254>)
 800607e:	bb1b      	cbnz	r3, 80060c8 <_vfiprintf_r+0x1f8>
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	3307      	adds	r3, #7
 8006084:	f023 0307 	bic.w	r3, r3, #7
 8006088:	3308      	adds	r3, #8
 800608a:	9303      	str	r3, [sp, #12]
 800608c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800608e:	443b      	add	r3, r7
 8006090:	9309      	str	r3, [sp, #36]	; 0x24
 8006092:	e767      	b.n	8005f64 <_vfiprintf_r+0x94>
 8006094:	fb0c 3202 	mla	r2, ip, r2, r3
 8006098:	460c      	mov	r4, r1
 800609a:	2001      	movs	r0, #1
 800609c:	e7a5      	b.n	8005fea <_vfiprintf_r+0x11a>
 800609e:	2300      	movs	r3, #0
 80060a0:	3401      	adds	r4, #1
 80060a2:	9305      	str	r3, [sp, #20]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f04f 0c0a 	mov.w	ip, #10
 80060aa:	4620      	mov	r0, r4
 80060ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b0:	3a30      	subs	r2, #48	; 0x30
 80060b2:	2a09      	cmp	r2, #9
 80060b4:	d903      	bls.n	80060be <_vfiprintf_r+0x1ee>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0c5      	beq.n	8006046 <_vfiprintf_r+0x176>
 80060ba:	9105      	str	r1, [sp, #20]
 80060bc:	e7c3      	b.n	8006046 <_vfiprintf_r+0x176>
 80060be:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c2:	4604      	mov	r4, r0
 80060c4:	2301      	movs	r3, #1
 80060c6:	e7f0      	b.n	80060aa <_vfiprintf_r+0x1da>
 80060c8:	ab03      	add	r3, sp, #12
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	462a      	mov	r2, r5
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <_vfiprintf_r+0x258>)
 80060d0:	a904      	add	r1, sp, #16
 80060d2:	4630      	mov	r0, r6
 80060d4:	f3af 8000 	nop.w
 80060d8:	4607      	mov	r7, r0
 80060da:	1c78      	adds	r0, r7, #1
 80060dc:	d1d6      	bne.n	800608c <_vfiprintf_r+0x1bc>
 80060de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060e0:	07d9      	lsls	r1, r3, #31
 80060e2:	d405      	bmi.n	80060f0 <_vfiprintf_r+0x220>
 80060e4:	89ab      	ldrh	r3, [r5, #12]
 80060e6:	059a      	lsls	r2, r3, #22
 80060e8:	d402      	bmi.n	80060f0 <_vfiprintf_r+0x220>
 80060ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ec:	f7ff fe31 	bl	8005d52 <__retarget_lock_release_recursive>
 80060f0:	89ab      	ldrh	r3, [r5, #12]
 80060f2:	065b      	lsls	r3, r3, #25
 80060f4:	f53f af12 	bmi.w	8005f1c <_vfiprintf_r+0x4c>
 80060f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060fa:	e711      	b.n	8005f20 <_vfiprintf_r+0x50>
 80060fc:	ab03      	add	r3, sp, #12
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	462a      	mov	r2, r5
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <_vfiprintf_r+0x258>)
 8006104:	a904      	add	r1, sp, #16
 8006106:	4630      	mov	r0, r6
 8006108:	f000 f880 	bl	800620c <_printf_i>
 800610c:	e7e4      	b.n	80060d8 <_vfiprintf_r+0x208>
 800610e:	bf00      	nop
 8006110:	08006b20 	.word	0x08006b20
 8006114:	08006b40 	.word	0x08006b40
 8006118:	08006b00 	.word	0x08006b00
 800611c:	08006b60 	.word	0x08006b60
 8006120:	08006b6a 	.word	0x08006b6a
 8006124:	00000000 	.word	0x00000000
 8006128:	08005eab 	.word	0x08005eab
 800612c:	08006b66 	.word	0x08006b66

08006130 <_printf_common>:
 8006130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006134:	4616      	mov	r6, r2
 8006136:	4699      	mov	r9, r3
 8006138:	688a      	ldr	r2, [r1, #8]
 800613a:	690b      	ldr	r3, [r1, #16]
 800613c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006140:	4293      	cmp	r3, r2
 8006142:	bfb8      	it	lt
 8006144:	4613      	movlt	r3, r2
 8006146:	6033      	str	r3, [r6, #0]
 8006148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800614c:	4607      	mov	r7, r0
 800614e:	460c      	mov	r4, r1
 8006150:	b10a      	cbz	r2, 8006156 <_printf_common+0x26>
 8006152:	3301      	adds	r3, #1
 8006154:	6033      	str	r3, [r6, #0]
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	0699      	lsls	r1, r3, #26
 800615a:	bf42      	ittt	mi
 800615c:	6833      	ldrmi	r3, [r6, #0]
 800615e:	3302      	addmi	r3, #2
 8006160:	6033      	strmi	r3, [r6, #0]
 8006162:	6825      	ldr	r5, [r4, #0]
 8006164:	f015 0506 	ands.w	r5, r5, #6
 8006168:	d106      	bne.n	8006178 <_printf_common+0x48>
 800616a:	f104 0a19 	add.w	sl, r4, #25
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	6832      	ldr	r2, [r6, #0]
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	42ab      	cmp	r3, r5
 8006176:	dc26      	bgt.n	80061c6 <_printf_common+0x96>
 8006178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800617c:	1e13      	subs	r3, r2, #0
 800617e:	6822      	ldr	r2, [r4, #0]
 8006180:	bf18      	it	ne
 8006182:	2301      	movne	r3, #1
 8006184:	0692      	lsls	r2, r2, #26
 8006186:	d42b      	bmi.n	80061e0 <_printf_common+0xb0>
 8006188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800618c:	4649      	mov	r1, r9
 800618e:	4638      	mov	r0, r7
 8006190:	47c0      	blx	r8
 8006192:	3001      	adds	r0, #1
 8006194:	d01e      	beq.n	80061d4 <_printf_common+0xa4>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	68e5      	ldr	r5, [r4, #12]
 800619a:	6832      	ldr	r2, [r6, #0]
 800619c:	f003 0306 	and.w	r3, r3, #6
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	bf08      	it	eq
 80061a4:	1aad      	subeq	r5, r5, r2
 80061a6:	68a3      	ldr	r3, [r4, #8]
 80061a8:	6922      	ldr	r2, [r4, #16]
 80061aa:	bf0c      	ite	eq
 80061ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b0:	2500      	movne	r5, #0
 80061b2:	4293      	cmp	r3, r2
 80061b4:	bfc4      	itt	gt
 80061b6:	1a9b      	subgt	r3, r3, r2
 80061b8:	18ed      	addgt	r5, r5, r3
 80061ba:	2600      	movs	r6, #0
 80061bc:	341a      	adds	r4, #26
 80061be:	42b5      	cmp	r5, r6
 80061c0:	d11a      	bne.n	80061f8 <_printf_common+0xc8>
 80061c2:	2000      	movs	r0, #0
 80061c4:	e008      	b.n	80061d8 <_printf_common+0xa8>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4652      	mov	r2, sl
 80061ca:	4649      	mov	r1, r9
 80061cc:	4638      	mov	r0, r7
 80061ce:	47c0      	blx	r8
 80061d0:	3001      	adds	r0, #1
 80061d2:	d103      	bne.n	80061dc <_printf_common+0xac>
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061dc:	3501      	adds	r5, #1
 80061de:	e7c6      	b.n	800616e <_printf_common+0x3e>
 80061e0:	18e1      	adds	r1, r4, r3
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	2030      	movs	r0, #48	; 0x30
 80061e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ea:	4422      	add	r2, r4
 80061ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061f4:	3302      	adds	r3, #2
 80061f6:	e7c7      	b.n	8006188 <_printf_common+0x58>
 80061f8:	2301      	movs	r3, #1
 80061fa:	4622      	mov	r2, r4
 80061fc:	4649      	mov	r1, r9
 80061fe:	4638      	mov	r0, r7
 8006200:	47c0      	blx	r8
 8006202:	3001      	adds	r0, #1
 8006204:	d0e6      	beq.n	80061d4 <_printf_common+0xa4>
 8006206:	3601      	adds	r6, #1
 8006208:	e7d9      	b.n	80061be <_printf_common+0x8e>
	...

0800620c <_printf_i>:
 800620c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	7e0f      	ldrb	r7, [r1, #24]
 8006212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006214:	2f78      	cmp	r7, #120	; 0x78
 8006216:	4691      	mov	r9, r2
 8006218:	4680      	mov	r8, r0
 800621a:	460c      	mov	r4, r1
 800621c:	469a      	mov	sl, r3
 800621e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006222:	d807      	bhi.n	8006234 <_printf_i+0x28>
 8006224:	2f62      	cmp	r7, #98	; 0x62
 8006226:	d80a      	bhi.n	800623e <_printf_i+0x32>
 8006228:	2f00      	cmp	r7, #0
 800622a:	f000 80d8 	beq.w	80063de <_printf_i+0x1d2>
 800622e:	2f58      	cmp	r7, #88	; 0x58
 8006230:	f000 80a3 	beq.w	800637a <_printf_i+0x16e>
 8006234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800623c:	e03a      	b.n	80062b4 <_printf_i+0xa8>
 800623e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006242:	2b15      	cmp	r3, #21
 8006244:	d8f6      	bhi.n	8006234 <_printf_i+0x28>
 8006246:	a101      	add	r1, pc, #4	; (adr r1, 800624c <_printf_i+0x40>)
 8006248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800624c:	080062a5 	.word	0x080062a5
 8006250:	080062b9 	.word	0x080062b9
 8006254:	08006235 	.word	0x08006235
 8006258:	08006235 	.word	0x08006235
 800625c:	08006235 	.word	0x08006235
 8006260:	08006235 	.word	0x08006235
 8006264:	080062b9 	.word	0x080062b9
 8006268:	08006235 	.word	0x08006235
 800626c:	08006235 	.word	0x08006235
 8006270:	08006235 	.word	0x08006235
 8006274:	08006235 	.word	0x08006235
 8006278:	080063c5 	.word	0x080063c5
 800627c:	080062e9 	.word	0x080062e9
 8006280:	080063a7 	.word	0x080063a7
 8006284:	08006235 	.word	0x08006235
 8006288:	08006235 	.word	0x08006235
 800628c:	080063e7 	.word	0x080063e7
 8006290:	08006235 	.word	0x08006235
 8006294:	080062e9 	.word	0x080062e9
 8006298:	08006235 	.word	0x08006235
 800629c:	08006235 	.word	0x08006235
 80062a0:	080063af 	.word	0x080063af
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	1d1a      	adds	r2, r3, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	602a      	str	r2, [r5, #0]
 80062ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062b4:	2301      	movs	r3, #1
 80062b6:	e0a3      	b.n	8006400 <_printf_i+0x1f4>
 80062b8:	6820      	ldr	r0, [r4, #0]
 80062ba:	6829      	ldr	r1, [r5, #0]
 80062bc:	0606      	lsls	r6, r0, #24
 80062be:	f101 0304 	add.w	r3, r1, #4
 80062c2:	d50a      	bpl.n	80062da <_printf_i+0xce>
 80062c4:	680e      	ldr	r6, [r1, #0]
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	2e00      	cmp	r6, #0
 80062ca:	da03      	bge.n	80062d4 <_printf_i+0xc8>
 80062cc:	232d      	movs	r3, #45	; 0x2d
 80062ce:	4276      	negs	r6, r6
 80062d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d4:	485e      	ldr	r0, [pc, #376]	; (8006450 <_printf_i+0x244>)
 80062d6:	230a      	movs	r3, #10
 80062d8:	e019      	b.n	800630e <_printf_i+0x102>
 80062da:	680e      	ldr	r6, [r1, #0]
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062e2:	bf18      	it	ne
 80062e4:	b236      	sxthne	r6, r6
 80062e6:	e7ef      	b.n	80062c8 <_printf_i+0xbc>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	6820      	ldr	r0, [r4, #0]
 80062ec:	1d19      	adds	r1, r3, #4
 80062ee:	6029      	str	r1, [r5, #0]
 80062f0:	0601      	lsls	r1, r0, #24
 80062f2:	d501      	bpl.n	80062f8 <_printf_i+0xec>
 80062f4:	681e      	ldr	r6, [r3, #0]
 80062f6:	e002      	b.n	80062fe <_printf_i+0xf2>
 80062f8:	0646      	lsls	r6, r0, #25
 80062fa:	d5fb      	bpl.n	80062f4 <_printf_i+0xe8>
 80062fc:	881e      	ldrh	r6, [r3, #0]
 80062fe:	4854      	ldr	r0, [pc, #336]	; (8006450 <_printf_i+0x244>)
 8006300:	2f6f      	cmp	r7, #111	; 0x6f
 8006302:	bf0c      	ite	eq
 8006304:	2308      	moveq	r3, #8
 8006306:	230a      	movne	r3, #10
 8006308:	2100      	movs	r1, #0
 800630a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800630e:	6865      	ldr	r5, [r4, #4]
 8006310:	60a5      	str	r5, [r4, #8]
 8006312:	2d00      	cmp	r5, #0
 8006314:	bfa2      	ittt	ge
 8006316:	6821      	ldrge	r1, [r4, #0]
 8006318:	f021 0104 	bicge.w	r1, r1, #4
 800631c:	6021      	strge	r1, [r4, #0]
 800631e:	b90e      	cbnz	r6, 8006324 <_printf_i+0x118>
 8006320:	2d00      	cmp	r5, #0
 8006322:	d04d      	beq.n	80063c0 <_printf_i+0x1b4>
 8006324:	4615      	mov	r5, r2
 8006326:	fbb6 f1f3 	udiv	r1, r6, r3
 800632a:	fb03 6711 	mls	r7, r3, r1, r6
 800632e:	5dc7      	ldrb	r7, [r0, r7]
 8006330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006334:	4637      	mov	r7, r6
 8006336:	42bb      	cmp	r3, r7
 8006338:	460e      	mov	r6, r1
 800633a:	d9f4      	bls.n	8006326 <_printf_i+0x11a>
 800633c:	2b08      	cmp	r3, #8
 800633e:	d10b      	bne.n	8006358 <_printf_i+0x14c>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	07de      	lsls	r6, r3, #31
 8006344:	d508      	bpl.n	8006358 <_printf_i+0x14c>
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	6861      	ldr	r1, [r4, #4]
 800634a:	4299      	cmp	r1, r3
 800634c:	bfde      	ittt	le
 800634e:	2330      	movle	r3, #48	; 0x30
 8006350:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006354:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006358:	1b52      	subs	r2, r2, r5
 800635a:	6122      	str	r2, [r4, #16]
 800635c:	f8cd a000 	str.w	sl, [sp]
 8006360:	464b      	mov	r3, r9
 8006362:	aa03      	add	r2, sp, #12
 8006364:	4621      	mov	r1, r4
 8006366:	4640      	mov	r0, r8
 8006368:	f7ff fee2 	bl	8006130 <_printf_common>
 800636c:	3001      	adds	r0, #1
 800636e:	d14c      	bne.n	800640a <_printf_i+0x1fe>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	b004      	add	sp, #16
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	4835      	ldr	r0, [pc, #212]	; (8006450 <_printf_i+0x244>)
 800637c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006380:	6829      	ldr	r1, [r5, #0]
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	f851 6b04 	ldr.w	r6, [r1], #4
 8006388:	6029      	str	r1, [r5, #0]
 800638a:	061d      	lsls	r5, r3, #24
 800638c:	d514      	bpl.n	80063b8 <_printf_i+0x1ac>
 800638e:	07df      	lsls	r7, r3, #31
 8006390:	bf44      	itt	mi
 8006392:	f043 0320 	orrmi.w	r3, r3, #32
 8006396:	6023      	strmi	r3, [r4, #0]
 8006398:	b91e      	cbnz	r6, 80063a2 <_printf_i+0x196>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	f023 0320 	bic.w	r3, r3, #32
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	2310      	movs	r3, #16
 80063a4:	e7b0      	b.n	8006308 <_printf_i+0xfc>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	f043 0320 	orr.w	r3, r3, #32
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	2378      	movs	r3, #120	; 0x78
 80063b0:	4828      	ldr	r0, [pc, #160]	; (8006454 <_printf_i+0x248>)
 80063b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063b6:	e7e3      	b.n	8006380 <_printf_i+0x174>
 80063b8:	0659      	lsls	r1, r3, #25
 80063ba:	bf48      	it	mi
 80063bc:	b2b6      	uxthmi	r6, r6
 80063be:	e7e6      	b.n	800638e <_printf_i+0x182>
 80063c0:	4615      	mov	r5, r2
 80063c2:	e7bb      	b.n	800633c <_printf_i+0x130>
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	6826      	ldr	r6, [r4, #0]
 80063c8:	6961      	ldr	r1, [r4, #20]
 80063ca:	1d18      	adds	r0, r3, #4
 80063cc:	6028      	str	r0, [r5, #0]
 80063ce:	0635      	lsls	r5, r6, #24
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	d501      	bpl.n	80063d8 <_printf_i+0x1cc>
 80063d4:	6019      	str	r1, [r3, #0]
 80063d6:	e002      	b.n	80063de <_printf_i+0x1d2>
 80063d8:	0670      	lsls	r0, r6, #25
 80063da:	d5fb      	bpl.n	80063d4 <_printf_i+0x1c8>
 80063dc:	8019      	strh	r1, [r3, #0]
 80063de:	2300      	movs	r3, #0
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	4615      	mov	r5, r2
 80063e4:	e7ba      	b.n	800635c <_printf_i+0x150>
 80063e6:	682b      	ldr	r3, [r5, #0]
 80063e8:	1d1a      	adds	r2, r3, #4
 80063ea:	602a      	str	r2, [r5, #0]
 80063ec:	681d      	ldr	r5, [r3, #0]
 80063ee:	6862      	ldr	r2, [r4, #4]
 80063f0:	2100      	movs	r1, #0
 80063f2:	4628      	mov	r0, r5
 80063f4:	f7f9 feec 	bl	80001d0 <memchr>
 80063f8:	b108      	cbz	r0, 80063fe <_printf_i+0x1f2>
 80063fa:	1b40      	subs	r0, r0, r5
 80063fc:	6060      	str	r0, [r4, #4]
 80063fe:	6863      	ldr	r3, [r4, #4]
 8006400:	6123      	str	r3, [r4, #16]
 8006402:	2300      	movs	r3, #0
 8006404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006408:	e7a8      	b.n	800635c <_printf_i+0x150>
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	462a      	mov	r2, r5
 800640e:	4649      	mov	r1, r9
 8006410:	4640      	mov	r0, r8
 8006412:	47d0      	blx	sl
 8006414:	3001      	adds	r0, #1
 8006416:	d0ab      	beq.n	8006370 <_printf_i+0x164>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	079b      	lsls	r3, r3, #30
 800641c:	d413      	bmi.n	8006446 <_printf_i+0x23a>
 800641e:	68e0      	ldr	r0, [r4, #12]
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	4298      	cmp	r0, r3
 8006424:	bfb8      	it	lt
 8006426:	4618      	movlt	r0, r3
 8006428:	e7a4      	b.n	8006374 <_printf_i+0x168>
 800642a:	2301      	movs	r3, #1
 800642c:	4632      	mov	r2, r6
 800642e:	4649      	mov	r1, r9
 8006430:	4640      	mov	r0, r8
 8006432:	47d0      	blx	sl
 8006434:	3001      	adds	r0, #1
 8006436:	d09b      	beq.n	8006370 <_printf_i+0x164>
 8006438:	3501      	adds	r5, #1
 800643a:	68e3      	ldr	r3, [r4, #12]
 800643c:	9903      	ldr	r1, [sp, #12]
 800643e:	1a5b      	subs	r3, r3, r1
 8006440:	42ab      	cmp	r3, r5
 8006442:	dcf2      	bgt.n	800642a <_printf_i+0x21e>
 8006444:	e7eb      	b.n	800641e <_printf_i+0x212>
 8006446:	2500      	movs	r5, #0
 8006448:	f104 0619 	add.w	r6, r4, #25
 800644c:	e7f5      	b.n	800643a <_printf_i+0x22e>
 800644e:	bf00      	nop
 8006450:	08006b71 	.word	0x08006b71
 8006454:	08006b82 	.word	0x08006b82

08006458 <_sbrk_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d06      	ldr	r5, [pc, #24]	; (8006474 <_sbrk_r+0x1c>)
 800645c:	2300      	movs	r3, #0
 800645e:	4604      	mov	r4, r0
 8006460:	4608      	mov	r0, r1
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	f7fb f800 	bl	8001468 <_sbrk>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_sbrk_r+0x1a>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_sbrk_r+0x1a>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20000208 	.word	0x20000208

08006478 <__sread>:
 8006478:	b510      	push	{r4, lr}
 800647a:	460c      	mov	r4, r1
 800647c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006480:	f000 fab2 	bl	80069e8 <_read_r>
 8006484:	2800      	cmp	r0, #0
 8006486:	bfab      	itete	ge
 8006488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800648a:	89a3      	ldrhlt	r3, [r4, #12]
 800648c:	181b      	addge	r3, r3, r0
 800648e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006492:	bfac      	ite	ge
 8006494:	6563      	strge	r3, [r4, #84]	; 0x54
 8006496:	81a3      	strhlt	r3, [r4, #12]
 8006498:	bd10      	pop	{r4, pc}

0800649a <__swrite>:
 800649a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649e:	461f      	mov	r7, r3
 80064a0:	898b      	ldrh	r3, [r1, #12]
 80064a2:	05db      	lsls	r3, r3, #23
 80064a4:	4605      	mov	r5, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	4616      	mov	r6, r2
 80064aa:	d505      	bpl.n	80064b8 <__swrite+0x1e>
 80064ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b0:	2302      	movs	r3, #2
 80064b2:	2200      	movs	r2, #0
 80064b4:	f000 f9c8 	bl	8006848 <_lseek_r>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	4632      	mov	r2, r6
 80064c6:	463b      	mov	r3, r7
 80064c8:	4628      	mov	r0, r5
 80064ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ce:	f000 b869 	b.w	80065a4 <_write_r>

080064d2 <__sseek>:
 80064d2:	b510      	push	{r4, lr}
 80064d4:	460c      	mov	r4, r1
 80064d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064da:	f000 f9b5 	bl	8006848 <_lseek_r>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	bf15      	itete	ne
 80064e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80064e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064ee:	81a3      	strheq	r3, [r4, #12]
 80064f0:	bf18      	it	ne
 80064f2:	81a3      	strhne	r3, [r4, #12]
 80064f4:	bd10      	pop	{r4, pc}

080064f6 <__sclose>:
 80064f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fa:	f000 b8d3 	b.w	80066a4 <_close_r>
	...

08006500 <__swbuf_r>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	460e      	mov	r6, r1
 8006504:	4614      	mov	r4, r2
 8006506:	4605      	mov	r5, r0
 8006508:	b118      	cbz	r0, 8006512 <__swbuf_r+0x12>
 800650a:	6983      	ldr	r3, [r0, #24]
 800650c:	b90b      	cbnz	r3, 8006512 <__swbuf_r+0x12>
 800650e:	f7ff fb81 	bl	8005c14 <__sinit>
 8006512:	4b21      	ldr	r3, [pc, #132]	; (8006598 <__swbuf_r+0x98>)
 8006514:	429c      	cmp	r4, r3
 8006516:	d12b      	bne.n	8006570 <__swbuf_r+0x70>
 8006518:	686c      	ldr	r4, [r5, #4]
 800651a:	69a3      	ldr	r3, [r4, #24]
 800651c:	60a3      	str	r3, [r4, #8]
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	071a      	lsls	r2, r3, #28
 8006522:	d52f      	bpl.n	8006584 <__swbuf_r+0x84>
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	b36b      	cbz	r3, 8006584 <__swbuf_r+0x84>
 8006528:	6923      	ldr	r3, [r4, #16]
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	1ac0      	subs	r0, r0, r3
 800652e:	6963      	ldr	r3, [r4, #20]
 8006530:	b2f6      	uxtb	r6, r6
 8006532:	4283      	cmp	r3, r0
 8006534:	4637      	mov	r7, r6
 8006536:	dc04      	bgt.n	8006542 <__swbuf_r+0x42>
 8006538:	4621      	mov	r1, r4
 800653a:	4628      	mov	r0, r5
 800653c:	f000 f948 	bl	80067d0 <_fflush_r>
 8006540:	bb30      	cbnz	r0, 8006590 <__swbuf_r+0x90>
 8006542:	68a3      	ldr	r3, [r4, #8]
 8006544:	3b01      	subs	r3, #1
 8006546:	60a3      	str	r3, [r4, #8]
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	701e      	strb	r6, [r3, #0]
 8006550:	6963      	ldr	r3, [r4, #20]
 8006552:	3001      	adds	r0, #1
 8006554:	4283      	cmp	r3, r0
 8006556:	d004      	beq.n	8006562 <__swbuf_r+0x62>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	07db      	lsls	r3, r3, #31
 800655c:	d506      	bpl.n	800656c <__swbuf_r+0x6c>
 800655e:	2e0a      	cmp	r6, #10
 8006560:	d104      	bne.n	800656c <__swbuf_r+0x6c>
 8006562:	4621      	mov	r1, r4
 8006564:	4628      	mov	r0, r5
 8006566:	f000 f933 	bl	80067d0 <_fflush_r>
 800656a:	b988      	cbnz	r0, 8006590 <__swbuf_r+0x90>
 800656c:	4638      	mov	r0, r7
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <__swbuf_r+0x9c>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d101      	bne.n	800657a <__swbuf_r+0x7a>
 8006576:	68ac      	ldr	r4, [r5, #8]
 8006578:	e7cf      	b.n	800651a <__swbuf_r+0x1a>
 800657a:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <__swbuf_r+0xa0>)
 800657c:	429c      	cmp	r4, r3
 800657e:	bf08      	it	eq
 8006580:	68ec      	ldreq	r4, [r5, #12]
 8006582:	e7ca      	b.n	800651a <__swbuf_r+0x1a>
 8006584:	4621      	mov	r1, r4
 8006586:	4628      	mov	r0, r5
 8006588:	f000 f81e 	bl	80065c8 <__swsetup_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	d0cb      	beq.n	8006528 <__swbuf_r+0x28>
 8006590:	f04f 37ff 	mov.w	r7, #4294967295
 8006594:	e7ea      	b.n	800656c <__swbuf_r+0x6c>
 8006596:	bf00      	nop
 8006598:	08006b20 	.word	0x08006b20
 800659c:	08006b40 	.word	0x08006b40
 80065a0:	08006b00 	.word	0x08006b00

080065a4 <_write_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d07      	ldr	r5, [pc, #28]	; (80065c4 <_write_r+0x20>)
 80065a8:	4604      	mov	r4, r0
 80065aa:	4608      	mov	r0, r1
 80065ac:	4611      	mov	r1, r2
 80065ae:	2200      	movs	r2, #0
 80065b0:	602a      	str	r2, [r5, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f7fa ff07 	bl	80013c6 <_write>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_write_r+0x1e>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_write_r+0x1e>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	20000208 	.word	0x20000208

080065c8 <__swsetup_r>:
 80065c8:	4b32      	ldr	r3, [pc, #200]	; (8006694 <__swsetup_r+0xcc>)
 80065ca:	b570      	push	{r4, r5, r6, lr}
 80065cc:	681d      	ldr	r5, [r3, #0]
 80065ce:	4606      	mov	r6, r0
 80065d0:	460c      	mov	r4, r1
 80065d2:	b125      	cbz	r5, 80065de <__swsetup_r+0x16>
 80065d4:	69ab      	ldr	r3, [r5, #24]
 80065d6:	b913      	cbnz	r3, 80065de <__swsetup_r+0x16>
 80065d8:	4628      	mov	r0, r5
 80065da:	f7ff fb1b 	bl	8005c14 <__sinit>
 80065de:	4b2e      	ldr	r3, [pc, #184]	; (8006698 <__swsetup_r+0xd0>)
 80065e0:	429c      	cmp	r4, r3
 80065e2:	d10f      	bne.n	8006604 <__swsetup_r+0x3c>
 80065e4:	686c      	ldr	r4, [r5, #4]
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065ec:	0719      	lsls	r1, r3, #28
 80065ee:	d42c      	bmi.n	800664a <__swsetup_r+0x82>
 80065f0:	06dd      	lsls	r5, r3, #27
 80065f2:	d411      	bmi.n	8006618 <__swsetup_r+0x50>
 80065f4:	2309      	movs	r3, #9
 80065f6:	6033      	str	r3, [r6, #0]
 80065f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006602:	e03e      	b.n	8006682 <__swsetup_r+0xba>
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <__swsetup_r+0xd4>)
 8006606:	429c      	cmp	r4, r3
 8006608:	d101      	bne.n	800660e <__swsetup_r+0x46>
 800660a:	68ac      	ldr	r4, [r5, #8]
 800660c:	e7eb      	b.n	80065e6 <__swsetup_r+0x1e>
 800660e:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <__swsetup_r+0xd8>)
 8006610:	429c      	cmp	r4, r3
 8006612:	bf08      	it	eq
 8006614:	68ec      	ldreq	r4, [r5, #12]
 8006616:	e7e6      	b.n	80065e6 <__swsetup_r+0x1e>
 8006618:	0758      	lsls	r0, r3, #29
 800661a:	d512      	bpl.n	8006642 <__swsetup_r+0x7a>
 800661c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800661e:	b141      	cbz	r1, 8006632 <__swsetup_r+0x6a>
 8006620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006624:	4299      	cmp	r1, r3
 8006626:	d002      	beq.n	800662e <__swsetup_r+0x66>
 8006628:	4630      	mov	r0, r6
 800662a:	f000 f991 	bl	8006950 <_free_r>
 800662e:	2300      	movs	r3, #0
 8006630:	6363      	str	r3, [r4, #52]	; 0x34
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	2300      	movs	r3, #0
 800663c:	6063      	str	r3, [r4, #4]
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f043 0308 	orr.w	r3, r3, #8
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	b94b      	cbnz	r3, 8006662 <__swsetup_r+0x9a>
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006658:	d003      	beq.n	8006662 <__swsetup_r+0x9a>
 800665a:	4621      	mov	r1, r4
 800665c:	4630      	mov	r0, r6
 800665e:	f000 f92b 	bl	80068b8 <__smakebuf_r>
 8006662:	89a0      	ldrh	r0, [r4, #12]
 8006664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006668:	f010 0301 	ands.w	r3, r0, #1
 800666c:	d00a      	beq.n	8006684 <__swsetup_r+0xbc>
 800666e:	2300      	movs	r3, #0
 8006670:	60a3      	str	r3, [r4, #8]
 8006672:	6963      	ldr	r3, [r4, #20]
 8006674:	425b      	negs	r3, r3
 8006676:	61a3      	str	r3, [r4, #24]
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	b943      	cbnz	r3, 800668e <__swsetup_r+0xc6>
 800667c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006680:	d1ba      	bne.n	80065f8 <__swsetup_r+0x30>
 8006682:	bd70      	pop	{r4, r5, r6, pc}
 8006684:	0781      	lsls	r1, r0, #30
 8006686:	bf58      	it	pl
 8006688:	6963      	ldrpl	r3, [r4, #20]
 800668a:	60a3      	str	r3, [r4, #8]
 800668c:	e7f4      	b.n	8006678 <__swsetup_r+0xb0>
 800668e:	2000      	movs	r0, #0
 8006690:	e7f7      	b.n	8006682 <__swsetup_r+0xba>
 8006692:	bf00      	nop
 8006694:	20000010 	.word	0x20000010
 8006698:	08006b20 	.word	0x08006b20
 800669c:	08006b40 	.word	0x08006b40
 80066a0:	08006b00 	.word	0x08006b00

080066a4 <_close_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4d06      	ldr	r5, [pc, #24]	; (80066c0 <_close_r+0x1c>)
 80066a8:	2300      	movs	r3, #0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	602b      	str	r3, [r5, #0]
 80066b0:	f7fa fea5 	bl	80013fe <_close>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d102      	bne.n	80066be <_close_r+0x1a>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	b103      	cbz	r3, 80066be <_close_r+0x1a>
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	20000208 	.word	0x20000208

080066c4 <__sflush_r>:
 80066c4:	898a      	ldrh	r2, [r1, #12]
 80066c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	4605      	mov	r5, r0
 80066cc:	0710      	lsls	r0, r2, #28
 80066ce:	460c      	mov	r4, r1
 80066d0:	d458      	bmi.n	8006784 <__sflush_r+0xc0>
 80066d2:	684b      	ldr	r3, [r1, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dc05      	bgt.n	80066e4 <__sflush_r+0x20>
 80066d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dc02      	bgt.n	80066e4 <__sflush_r+0x20>
 80066de:	2000      	movs	r0, #0
 80066e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066e6:	2e00      	cmp	r6, #0
 80066e8:	d0f9      	beq.n	80066de <__sflush_r+0x1a>
 80066ea:	2300      	movs	r3, #0
 80066ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066f0:	682f      	ldr	r7, [r5, #0]
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	d032      	beq.n	800675c <__sflush_r+0x98>
 80066f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	075a      	lsls	r2, r3, #29
 80066fc:	d505      	bpl.n	800670a <__sflush_r+0x46>
 80066fe:	6863      	ldr	r3, [r4, #4]
 8006700:	1ac0      	subs	r0, r0, r3
 8006702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006704:	b10b      	cbz	r3, 800670a <__sflush_r+0x46>
 8006706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006708:	1ac0      	subs	r0, r0, r3
 800670a:	2300      	movs	r3, #0
 800670c:	4602      	mov	r2, r0
 800670e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006710:	6a21      	ldr	r1, [r4, #32]
 8006712:	4628      	mov	r0, r5
 8006714:	47b0      	blx	r6
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	d106      	bne.n	800672a <__sflush_r+0x66>
 800671c:	6829      	ldr	r1, [r5, #0]
 800671e:	291d      	cmp	r1, #29
 8006720:	d82c      	bhi.n	800677c <__sflush_r+0xb8>
 8006722:	4a2a      	ldr	r2, [pc, #168]	; (80067cc <__sflush_r+0x108>)
 8006724:	40ca      	lsrs	r2, r1
 8006726:	07d6      	lsls	r6, r2, #31
 8006728:	d528      	bpl.n	800677c <__sflush_r+0xb8>
 800672a:	2200      	movs	r2, #0
 800672c:	6062      	str	r2, [r4, #4]
 800672e:	04d9      	lsls	r1, r3, #19
 8006730:	6922      	ldr	r2, [r4, #16]
 8006732:	6022      	str	r2, [r4, #0]
 8006734:	d504      	bpl.n	8006740 <__sflush_r+0x7c>
 8006736:	1c42      	adds	r2, r0, #1
 8006738:	d101      	bne.n	800673e <__sflush_r+0x7a>
 800673a:	682b      	ldr	r3, [r5, #0]
 800673c:	b903      	cbnz	r3, 8006740 <__sflush_r+0x7c>
 800673e:	6560      	str	r0, [r4, #84]	; 0x54
 8006740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006742:	602f      	str	r7, [r5, #0]
 8006744:	2900      	cmp	r1, #0
 8006746:	d0ca      	beq.n	80066de <__sflush_r+0x1a>
 8006748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800674c:	4299      	cmp	r1, r3
 800674e:	d002      	beq.n	8006756 <__sflush_r+0x92>
 8006750:	4628      	mov	r0, r5
 8006752:	f000 f8fd 	bl	8006950 <_free_r>
 8006756:	2000      	movs	r0, #0
 8006758:	6360      	str	r0, [r4, #52]	; 0x34
 800675a:	e7c1      	b.n	80066e0 <__sflush_r+0x1c>
 800675c:	6a21      	ldr	r1, [r4, #32]
 800675e:	2301      	movs	r3, #1
 8006760:	4628      	mov	r0, r5
 8006762:	47b0      	blx	r6
 8006764:	1c41      	adds	r1, r0, #1
 8006766:	d1c7      	bne.n	80066f8 <__sflush_r+0x34>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0c4      	beq.n	80066f8 <__sflush_r+0x34>
 800676e:	2b1d      	cmp	r3, #29
 8006770:	d001      	beq.n	8006776 <__sflush_r+0xb2>
 8006772:	2b16      	cmp	r3, #22
 8006774:	d101      	bne.n	800677a <__sflush_r+0xb6>
 8006776:	602f      	str	r7, [r5, #0]
 8006778:	e7b1      	b.n	80066de <__sflush_r+0x1a>
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006780:	81a3      	strh	r3, [r4, #12]
 8006782:	e7ad      	b.n	80066e0 <__sflush_r+0x1c>
 8006784:	690f      	ldr	r7, [r1, #16]
 8006786:	2f00      	cmp	r7, #0
 8006788:	d0a9      	beq.n	80066de <__sflush_r+0x1a>
 800678a:	0793      	lsls	r3, r2, #30
 800678c:	680e      	ldr	r6, [r1, #0]
 800678e:	bf08      	it	eq
 8006790:	694b      	ldreq	r3, [r1, #20]
 8006792:	600f      	str	r7, [r1, #0]
 8006794:	bf18      	it	ne
 8006796:	2300      	movne	r3, #0
 8006798:	eba6 0807 	sub.w	r8, r6, r7
 800679c:	608b      	str	r3, [r1, #8]
 800679e:	f1b8 0f00 	cmp.w	r8, #0
 80067a2:	dd9c      	ble.n	80066de <__sflush_r+0x1a>
 80067a4:	6a21      	ldr	r1, [r4, #32]
 80067a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067a8:	4643      	mov	r3, r8
 80067aa:	463a      	mov	r2, r7
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b0      	blx	r6
 80067b0:	2800      	cmp	r0, #0
 80067b2:	dc06      	bgt.n	80067c2 <__sflush_r+0xfe>
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	e78e      	b.n	80066e0 <__sflush_r+0x1c>
 80067c2:	4407      	add	r7, r0
 80067c4:	eba8 0800 	sub.w	r8, r8, r0
 80067c8:	e7e9      	b.n	800679e <__sflush_r+0xda>
 80067ca:	bf00      	nop
 80067cc:	20400001 	.word	0x20400001

080067d0 <_fflush_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	690b      	ldr	r3, [r1, #16]
 80067d4:	4605      	mov	r5, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	b913      	cbnz	r3, 80067e0 <_fflush_r+0x10>
 80067da:	2500      	movs	r5, #0
 80067dc:	4628      	mov	r0, r5
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	b118      	cbz	r0, 80067ea <_fflush_r+0x1a>
 80067e2:	6983      	ldr	r3, [r0, #24]
 80067e4:	b90b      	cbnz	r3, 80067ea <_fflush_r+0x1a>
 80067e6:	f7ff fa15 	bl	8005c14 <__sinit>
 80067ea:	4b14      	ldr	r3, [pc, #80]	; (800683c <_fflush_r+0x6c>)
 80067ec:	429c      	cmp	r4, r3
 80067ee:	d11b      	bne.n	8006828 <_fflush_r+0x58>
 80067f0:	686c      	ldr	r4, [r5, #4]
 80067f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0ef      	beq.n	80067da <_fflush_r+0xa>
 80067fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067fc:	07d0      	lsls	r0, r2, #31
 80067fe:	d404      	bmi.n	800680a <_fflush_r+0x3a>
 8006800:	0599      	lsls	r1, r3, #22
 8006802:	d402      	bmi.n	800680a <_fflush_r+0x3a>
 8006804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006806:	f7ff faa3 	bl	8005d50 <__retarget_lock_acquire_recursive>
 800680a:	4628      	mov	r0, r5
 800680c:	4621      	mov	r1, r4
 800680e:	f7ff ff59 	bl	80066c4 <__sflush_r>
 8006812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006814:	07da      	lsls	r2, r3, #31
 8006816:	4605      	mov	r5, r0
 8006818:	d4e0      	bmi.n	80067dc <_fflush_r+0xc>
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	059b      	lsls	r3, r3, #22
 800681e:	d4dd      	bmi.n	80067dc <_fflush_r+0xc>
 8006820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006822:	f7ff fa96 	bl	8005d52 <__retarget_lock_release_recursive>
 8006826:	e7d9      	b.n	80067dc <_fflush_r+0xc>
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <_fflush_r+0x70>)
 800682a:	429c      	cmp	r4, r3
 800682c:	d101      	bne.n	8006832 <_fflush_r+0x62>
 800682e:	68ac      	ldr	r4, [r5, #8]
 8006830:	e7df      	b.n	80067f2 <_fflush_r+0x22>
 8006832:	4b04      	ldr	r3, [pc, #16]	; (8006844 <_fflush_r+0x74>)
 8006834:	429c      	cmp	r4, r3
 8006836:	bf08      	it	eq
 8006838:	68ec      	ldreq	r4, [r5, #12]
 800683a:	e7da      	b.n	80067f2 <_fflush_r+0x22>
 800683c:	08006b20 	.word	0x08006b20
 8006840:	08006b40 	.word	0x08006b40
 8006844:	08006b00 	.word	0x08006b00

08006848 <_lseek_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d07      	ldr	r5, [pc, #28]	; (8006868 <_lseek_r+0x20>)
 800684c:	4604      	mov	r4, r0
 800684e:	4608      	mov	r0, r1
 8006850:	4611      	mov	r1, r2
 8006852:	2200      	movs	r2, #0
 8006854:	602a      	str	r2, [r5, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	f7fa fdf8 	bl	800144c <_lseek>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_lseek_r+0x1e>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_lseek_r+0x1e>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	20000208 	.word	0x20000208

0800686c <__swhatbuf_r>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	460e      	mov	r6, r1
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	2900      	cmp	r1, #0
 8006876:	b096      	sub	sp, #88	; 0x58
 8006878:	4614      	mov	r4, r2
 800687a:	461d      	mov	r5, r3
 800687c:	da08      	bge.n	8006890 <__swhatbuf_r+0x24>
 800687e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	602a      	str	r2, [r5, #0]
 8006886:	061a      	lsls	r2, r3, #24
 8006888:	d410      	bmi.n	80068ac <__swhatbuf_r+0x40>
 800688a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688e:	e00e      	b.n	80068ae <__swhatbuf_r+0x42>
 8006890:	466a      	mov	r2, sp
 8006892:	f000 f8bb 	bl	8006a0c <_fstat_r>
 8006896:	2800      	cmp	r0, #0
 8006898:	dbf1      	blt.n	800687e <__swhatbuf_r+0x12>
 800689a:	9a01      	ldr	r2, [sp, #4]
 800689c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068a4:	425a      	negs	r2, r3
 80068a6:	415a      	adcs	r2, r3
 80068a8:	602a      	str	r2, [r5, #0]
 80068aa:	e7ee      	b.n	800688a <__swhatbuf_r+0x1e>
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	2000      	movs	r0, #0
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	b016      	add	sp, #88	; 0x58
 80068b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080068b8 <__smakebuf_r>:
 80068b8:	898b      	ldrh	r3, [r1, #12]
 80068ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068bc:	079d      	lsls	r5, r3, #30
 80068be:	4606      	mov	r6, r0
 80068c0:	460c      	mov	r4, r1
 80068c2:	d507      	bpl.n	80068d4 <__smakebuf_r+0x1c>
 80068c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	2301      	movs	r3, #1
 80068ce:	6163      	str	r3, [r4, #20]
 80068d0:	b002      	add	sp, #8
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	ab01      	add	r3, sp, #4
 80068d6:	466a      	mov	r2, sp
 80068d8:	f7ff ffc8 	bl	800686c <__swhatbuf_r>
 80068dc:	9900      	ldr	r1, [sp, #0]
 80068de:	4605      	mov	r5, r0
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7ff fa57 	bl	8005d94 <_malloc_r>
 80068e6:	b948      	cbnz	r0, 80068fc <__smakebuf_r+0x44>
 80068e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ec:	059a      	lsls	r2, r3, #22
 80068ee:	d4ef      	bmi.n	80068d0 <__smakebuf_r+0x18>
 80068f0:	f023 0303 	bic.w	r3, r3, #3
 80068f4:	f043 0302 	orr.w	r3, r3, #2
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	e7e3      	b.n	80068c4 <__smakebuf_r+0xc>
 80068fc:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <__smakebuf_r+0x7c>)
 80068fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	6020      	str	r0, [r4, #0]
 8006904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006908:	81a3      	strh	r3, [r4, #12]
 800690a:	9b00      	ldr	r3, [sp, #0]
 800690c:	6163      	str	r3, [r4, #20]
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	6120      	str	r0, [r4, #16]
 8006912:	b15b      	cbz	r3, 800692c <__smakebuf_r+0x74>
 8006914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006918:	4630      	mov	r0, r6
 800691a:	f000 f889 	bl	8006a30 <_isatty_r>
 800691e:	b128      	cbz	r0, 800692c <__smakebuf_r+0x74>
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	81a3      	strh	r3, [r4, #12]
 800692c:	89a0      	ldrh	r0, [r4, #12]
 800692e:	4305      	orrs	r5, r0
 8006930:	81a5      	strh	r5, [r4, #12]
 8006932:	e7cd      	b.n	80068d0 <__smakebuf_r+0x18>
 8006934:	08005bad 	.word	0x08005bad

08006938 <__malloc_lock>:
 8006938:	4801      	ldr	r0, [pc, #4]	; (8006940 <__malloc_lock+0x8>)
 800693a:	f7ff ba09 	b.w	8005d50 <__retarget_lock_acquire_recursive>
 800693e:	bf00      	nop
 8006940:	200001fc 	.word	0x200001fc

08006944 <__malloc_unlock>:
 8006944:	4801      	ldr	r0, [pc, #4]	; (800694c <__malloc_unlock+0x8>)
 8006946:	f7ff ba04 	b.w	8005d52 <__retarget_lock_release_recursive>
 800694a:	bf00      	nop
 800694c:	200001fc 	.word	0x200001fc

08006950 <_free_r>:
 8006950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006952:	2900      	cmp	r1, #0
 8006954:	d044      	beq.n	80069e0 <_free_r+0x90>
 8006956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800695a:	9001      	str	r0, [sp, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f1a1 0404 	sub.w	r4, r1, #4
 8006962:	bfb8      	it	lt
 8006964:	18e4      	addlt	r4, r4, r3
 8006966:	f7ff ffe7 	bl	8006938 <__malloc_lock>
 800696a:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <_free_r+0x94>)
 800696c:	9801      	ldr	r0, [sp, #4]
 800696e:	6813      	ldr	r3, [r2, #0]
 8006970:	b933      	cbnz	r3, 8006980 <_free_r+0x30>
 8006972:	6063      	str	r3, [r4, #4]
 8006974:	6014      	str	r4, [r2, #0]
 8006976:	b003      	add	sp, #12
 8006978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800697c:	f7ff bfe2 	b.w	8006944 <__malloc_unlock>
 8006980:	42a3      	cmp	r3, r4
 8006982:	d908      	bls.n	8006996 <_free_r+0x46>
 8006984:	6825      	ldr	r5, [r4, #0]
 8006986:	1961      	adds	r1, r4, r5
 8006988:	428b      	cmp	r3, r1
 800698a:	bf01      	itttt	eq
 800698c:	6819      	ldreq	r1, [r3, #0]
 800698e:	685b      	ldreq	r3, [r3, #4]
 8006990:	1949      	addeq	r1, r1, r5
 8006992:	6021      	streq	r1, [r4, #0]
 8006994:	e7ed      	b.n	8006972 <_free_r+0x22>
 8006996:	461a      	mov	r2, r3
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	b10b      	cbz	r3, 80069a0 <_free_r+0x50>
 800699c:	42a3      	cmp	r3, r4
 800699e:	d9fa      	bls.n	8006996 <_free_r+0x46>
 80069a0:	6811      	ldr	r1, [r2, #0]
 80069a2:	1855      	adds	r5, r2, r1
 80069a4:	42a5      	cmp	r5, r4
 80069a6:	d10b      	bne.n	80069c0 <_free_r+0x70>
 80069a8:	6824      	ldr	r4, [r4, #0]
 80069aa:	4421      	add	r1, r4
 80069ac:	1854      	adds	r4, r2, r1
 80069ae:	42a3      	cmp	r3, r4
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	d1e0      	bne.n	8006976 <_free_r+0x26>
 80069b4:	681c      	ldr	r4, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	6053      	str	r3, [r2, #4]
 80069ba:	4421      	add	r1, r4
 80069bc:	6011      	str	r1, [r2, #0]
 80069be:	e7da      	b.n	8006976 <_free_r+0x26>
 80069c0:	d902      	bls.n	80069c8 <_free_r+0x78>
 80069c2:	230c      	movs	r3, #12
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	e7d6      	b.n	8006976 <_free_r+0x26>
 80069c8:	6825      	ldr	r5, [r4, #0]
 80069ca:	1961      	adds	r1, r4, r5
 80069cc:	428b      	cmp	r3, r1
 80069ce:	bf04      	itt	eq
 80069d0:	6819      	ldreq	r1, [r3, #0]
 80069d2:	685b      	ldreq	r3, [r3, #4]
 80069d4:	6063      	str	r3, [r4, #4]
 80069d6:	bf04      	itt	eq
 80069d8:	1949      	addeq	r1, r1, r5
 80069da:	6021      	streq	r1, [r4, #0]
 80069dc:	6054      	str	r4, [r2, #4]
 80069de:	e7ca      	b.n	8006976 <_free_r+0x26>
 80069e0:	b003      	add	sp, #12
 80069e2:	bd30      	pop	{r4, r5, pc}
 80069e4:	20000200 	.word	0x20000200

080069e8 <_read_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d07      	ldr	r5, [pc, #28]	; (8006a08 <_read_r+0x20>)
 80069ec:	4604      	mov	r4, r0
 80069ee:	4608      	mov	r0, r1
 80069f0:	4611      	mov	r1, r2
 80069f2:	2200      	movs	r2, #0
 80069f4:	602a      	str	r2, [r5, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f7fa fcc8 	bl	800138c <_read>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_read_r+0x1e>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_read_r+0x1e>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	20000208 	.word	0x20000208

08006a0c <_fstat_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	; (8006a2c <_fstat_r+0x20>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	f7fa fcfc 	bl	8001416 <_fstat>
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	d102      	bne.n	8006a28 <_fstat_r+0x1c>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	b103      	cbz	r3, 8006a28 <_fstat_r+0x1c>
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	bd38      	pop	{r3, r4, r5, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000208 	.word	0x20000208

08006a30 <_isatty_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d06      	ldr	r5, [pc, #24]	; (8006a4c <_isatty_r+0x1c>)
 8006a34:	2300      	movs	r3, #0
 8006a36:	4604      	mov	r4, r0
 8006a38:	4608      	mov	r0, r1
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	f7fa fcfb 	bl	8001436 <_isatty>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_isatty_r+0x1a>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_isatty_r+0x1a>
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	20000208 	.word	0x20000208

08006a50 <_init>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr

08006a5c <_fini>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr
