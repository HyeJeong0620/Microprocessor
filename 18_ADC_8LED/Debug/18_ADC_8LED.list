
18_ADC_8LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fdc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080041d4  080041d4  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041d4  080041d4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080041dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  200000b0  0800428c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800428c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3e8  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e10  00000000  00000000  0002a4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002c2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002cc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001830e  00000000  00000000  0002d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1b8  00000000  00000000  0004576e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d5e  00000000  00000000  00050926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  000d96d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080040d0 	.word	0x080040d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080040d0 	.word	0x080040d0

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	2364      	movs	r3, #100	; 0x64
 8000158:	2201      	movs	r2, #1
 800015a:	4809      	ldr	r0, [pc, #36]	; (8000180 <__io_putchar+0x34>)
 800015c:	f002 fa1e 	bl	800259c <HAL_UART_Transmit>
	if(ch =='\n') {
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b0a      	cmp	r3, #10
 8000164:	d106      	bne.n	8000174 <__io_putchar+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t *)'/r', 1, 100);
 8000166:	2364      	movs	r3, #100	; 0x64
 8000168:	2201      	movs	r2, #1
 800016a:	f642 7172 	movw	r1, #12146	; 0x2f72
 800016e:	4804      	ldr	r0, [pc, #16]	; (8000180 <__io_putchar+0x34>)
 8000170:	f002 fa14 	bl	800259c <HAL_UART_Transmit>
	}
	return ch;
 8000174:	687b      	ldr	r3, [r7, #4]
}
 8000176:	4618      	mov	r0, r3
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	200000fc 	.word	0x200000fc

08000184 <led_on>:
		{GPIOC, GPIO_PIN_1}, {GPIOC, GPIO_PIN_0},
		{GPIOB, GPIO_PIN_15}, {GPIOB, GPIO_PIN_14},
		{GPIOB, GPIO_PIN_13}, {GPIOB, GPIO_PIN_12}
};

void led_on(uint8_t count){
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < count; i++){
 800018e:	2300      	movs	r3, #0
 8000190:	73fb      	strb	r3, [r7, #15]
 8000192:	e00f      	b.n	80001b4 <led_on+0x30>
		HAL_GPIO_WritePin(led[i].port, led[i].pin, 1);
 8000194:	7bfb      	ldrb	r3, [r7, #15]
 8000196:	4a0c      	ldr	r2, [pc, #48]	; (80001c8 <led_on+0x44>)
 8000198:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800019c:	7bfb      	ldrb	r3, [r7, #15]
 800019e:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <led_on+0x44>)
 80001a0:	00db      	lsls	r3, r3, #3
 80001a2:	4413      	add	r3, r2
 80001a4:	889b      	ldrh	r3, [r3, #4]
 80001a6:	2201      	movs	r2, #1
 80001a8:	4619      	mov	r1, r3
 80001aa:	f001 fc13 	bl	80019d4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < count; i++){
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	3301      	adds	r3, #1
 80001b2:	73fb      	strb	r3, [r7, #15]
 80001b4:	7bfa      	ldrb	r2, [r7, #15]
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d3eb      	bcc.n	8000194 <led_on+0x10>
	}
}
 80001bc:	bf00      	nop
 80001be:	bf00      	nop
 80001c0:	3710      	adds	r7, #16
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	20000000 	.word	0x20000000

080001cc <led_off>:

void led_off(){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 8; i++){
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	e00f      	b.n	80001f8 <led_off+0x2c>
		HAL_GPIO_WritePin(led[i].port, led[i].pin, 0);
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a0b      	ldr	r2, [pc, #44]	; (8000208 <led_off+0x3c>)
 80001dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a09      	ldr	r2, [pc, #36]	; (8000208 <led_off+0x3c>)
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	4413      	add	r3, r2
 80001e8:	889b      	ldrh	r3, [r3, #4]
 80001ea:	2200      	movs	r2, #0
 80001ec:	4619      	mov	r1, r3
 80001ee:	f001 fbf1 	bl	80019d4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 8; i++){
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	3301      	adds	r3, #1
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	2b07      	cmp	r3, #7
 80001fc:	d9ec      	bls.n	80001d8 <led_off+0xc>
	}
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20000000 	.word	0x20000000

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 fb8c 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f810 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f000 f8d0 	bl	80003bc <MX_GPIO_Init>
  MX_ADC1_Init();
 800021c:	f000 f866 	bl	80002ec <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000220:	f000 f8a2 	bl	8000368 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <main+0x28>)
 8000226:	f000 ffd9 	bl	80011dc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 800022a:	4802      	ldr	r0, [pc, #8]	; (8000234 <main+0x28>)
 800022c:	f000 fcb8 	bl	8000ba0 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	e7fe      	b.n	8000230 <main+0x24>
 8000232:	bf00      	nop
 8000234:	200000cc 	.word	0x200000cc

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 ffa6 	bl	8003198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800026c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000284:	2300      	movs	r3, #0
 8000286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028c:	4618      	mov	r0, r3
 800028e:	f001 fbb9 	bl	8001a04 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000298:	f000 f974 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fe25 	bl	8001f08 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002c4:	f000 f95e 	bl	8000584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002c8:	2302      	movs	r3, #2
 80002ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 ffa6 	bl	8002224 <HAL_RCCEx_PeriphCLKConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002de:	f000 f951 	bl	8000584 <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3750      	adds	r7, #80	; 0x50
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_ADC1_Init+0x74>)
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <MX_ADC1_Init+0x78>)
 8000300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <MX_ADC1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_ADC1_Init+0x74>)
 800030a:	2201      	movs	r2, #1
 800030c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MX_ADC1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_ADC1_Init+0x74>)
 8000316:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800031a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_ADC1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_ADC1_Init+0x74>)
 8000324:	2201      	movs	r2, #1
 8000326:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <MX_ADC1_Init+0x74>)
 800032a:	f000 fb61 	bl	80009f0 <HAL_ADC_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000334:	f000 f926 	bl	8000584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000338:	2300      	movs	r3, #0
 800033a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800033c:	2301      	movs	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000340:	2302      	movs	r3, #2
 8000342:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_ADC1_Init+0x74>)
 800034a:	f000 fdb3 	bl	8000eb4 <HAL_ADC_ConfigChannel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000354:	f000 f916 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	200000cc 	.word	0x200000cc
 8000364:	40012400 	.word	0x40012400

08000368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 800036e:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <MX_USART2_UART_Init+0x50>)
 8000370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 800038e:	220c      	movs	r2, #12
 8000390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_USART2_UART_Init+0x4c>)
 80003a0:	f002 f8ac 	bl	80024fc <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003aa:	f000 f8eb 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000fc 	.word	0x200000fc
 80003b8:	40004400 	.word	0x40004400

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a2c      	ldr	r2, [pc, #176]	; (8000488 <MX_GPIO_Init+0xcc>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <MX_GPIO_Init+0xcc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a26      	ldr	r2, [pc, #152]	; (8000488 <MX_GPIO_Init+0xcc>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0320 	and.w	r3, r3, #32
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <MX_GPIO_Init+0xcc>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_GPIO_Init+0xcc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <MX_GPIO_Init+0xcc>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_GPIO_Init+0xcc>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	210f      	movs	r1, #15
 8000434:	4815      	ldr	r0, [pc, #84]	; (800048c <MX_GPIO_Init+0xd0>)
 8000436:	f001 facd 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000440:	4813      	ldr	r0, [pc, #76]	; (8000490 <MX_GPIO_Init+0xd4>)
 8000442:	f001 fac7 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000446:	230f      	movs	r3, #15
 8000448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2302      	movs	r3, #2
 8000454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	4619      	mov	r1, r3
 800045c:	480b      	ldr	r0, [pc, #44]	; (800048c <MX_GPIO_Init+0xd0>)
 800045e:	f001 f935 	bl	80016cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000462:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2302      	movs	r3, #2
 8000472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	4619      	mov	r1, r3
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_GPIO_Init+0xd4>)
 800047c:	f001 f926 	bl	80016cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000480:	bf00      	nop
 8000482:	3720      	adds	r7, #32
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000
 8000490:	40010c00 	.word	0x40010c00

08000494 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a35      	ldr	r2, [pc, #212]	; (8000574 <HAL_ADC_ConvCpltCallback+0xe0>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d162      	bne.n	800056a <HAL_ADC_ConvCpltCallback+0xd6>
		adc_value = HAL_ADC_GetValue(&hadc1);
 80004a4:	4833      	ldr	r0, [pc, #204]	; (8000574 <HAL_ADC_ConvCpltCallback+0xe0>)
 80004a6:	f000 fc31 	bl	8000d0c <HAL_ADC_GetValue>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b32      	ldr	r3, [pc, #200]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 80004b0:	601a      	str	r2, [r3, #0]
		if(adc_value > ADC_10LX){
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f640 628b 	movw	r2, #3723	; 0xe8b
 80004ba:	4293      	cmp	r3, r2
 80004bc:	dd03      	ble.n	80004c6 <HAL_ADC_ConvCpltCallback+0x32>
		  count = 0;
 80004be:	4b2f      	ldr	r3, [pc, #188]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	e044      	b.n	8000550 <HAL_ADC_ConvCpltCallback+0xbc>
		}
		else if(adc_value > ADC_3LX){
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f640 521d 	movw	r2, #3357	; 0xd1d
 80004ce:	4293      	cmp	r3, r2
 80004d0:	dd03      	ble.n	80004da <HAL_ADC_ConvCpltCallback+0x46>
		  count = 1;
 80004d2:	4b2a      	ldr	r3, [pc, #168]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
 80004d8:	e03a      	b.n	8000550 <HAL_ADC_ConvCpltCallback+0xbc>
		}
		else if(adc_value > ADC_1LX){
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f640 22c8 	movw	r2, #2760	; 0xac8
 80004e2:	4293      	cmp	r3, r2
 80004e4:	dd03      	ble.n	80004ee <HAL_ADC_ConvCpltCallback+0x5a>
		  count = 2;
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 80004e8:	2202      	movs	r2, #2
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	e030      	b.n	8000550 <HAL_ADC_ConvCpltCallback+0xbc>
		}
		else if(adc_value > ADC_0_3LX){
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 80004f6:	db03      	blt.n	8000500 <HAL_ADC_ConvCpltCallback+0x6c>
		  count = 3;
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	701a      	strb	r2, [r3, #0]
 80004fe:	e027      	b.n	8000550 <HAL_ADC_ConvCpltCallback+0xbc>
		}
		else if(adc_value > ADC_0_1LX){
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f240 42c9 	movw	r2, #1225	; 0x4c9
 8000508:	4293      	cmp	r3, r2
 800050a:	dd03      	ble.n	8000514 <HAL_ADC_ConvCpltCallback+0x80>
		  count = 4;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 800050e:	2204      	movs	r2, #4
 8000510:	701a      	strb	r2, [r3, #0]
 8000512:	e01d      	b.n	8000550 <HAL_ADC_ConvCpltCallback+0xbc>
		}
		else if(adc_value > ADC_0_03LX){
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f240 2299 	movw	r2, #665	; 0x299
 800051c:	4293      	cmp	r3, r2
 800051e:	dd03      	ble.n	8000528 <HAL_ADC_ConvCpltCallback+0x94>
		  count = 5;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 8000522:	2205      	movs	r2, #5
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e013      	b.n	8000550 <HAL_ADC_ConvCpltCallback+0xbc>
		}
		else if(adc_value > ADC_0_01LX){
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8000530:	db03      	blt.n	800053a <HAL_ADC_ConvCpltCallback+0xa6>
		  count = 6;
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 8000534:	2206      	movs	r2, #6
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	e00a      	b.n	8000550 <HAL_ADC_ConvCpltCallback+0xbc>
		}
		else if(adc_value > ADC_0_003LX){
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b9d      	cmp	r3, #157	; 0x9d
 8000540:	dd03      	ble.n	800054a <HAL_ADC_ConvCpltCallback+0xb6>
		  count = 7;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 8000544:	2207      	movs	r2, #7
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e002      	b.n	8000550 <HAL_ADC_ConvCpltCallback+0xbc>
		}
		else {
		  count = 8;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 800054c:	2208      	movs	r2, #8
 800054e:	701a      	strb	r2, [r3, #0]
		}

		led_on(count);
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_ADC_ConvCpltCallback+0xe8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fe15 	bl	8000184 <led_on>
		printf("ADC_VALUE = %d\n\n", adc_value);
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <HAL_ADC_ConvCpltCallback+0xe4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4619      	mov	r1, r3
 8000560:	4807      	ldr	r0, [pc, #28]	; (8000580 <HAL_ADC_ConvCpltCallback+0xec>)
 8000562:	f002 fe21 	bl	80031a8 <iprintf>
		led_off();
 8000566:	f7ff fe31 	bl	80001cc <led_off>
		// 인터럽트 안 딜레이는 조심
	}
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000cc 	.word	0x200000cc
 8000578:	20000144 	.word	0x20000144
 800057c:	20000148 	.word	0x20000148
 8000580:	080040e8 	.word	0x080040e8

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>
	...

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_MspInit+0x50>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <HAL_MspInit+0x50>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x50>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_MspInit+0x50>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_MspInit+0x50>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <HAL_MspInit+0x50>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2005      	movs	r0, #5
 80005cc:	f000 ff95 	bl	80014fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f000 ffae 	bl	8001532 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <HAL_ADC_MspInit+0x7c>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d129      	bne.n	8000658 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_ADC_MspInit+0x80>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a16      	ldr	r2, [pc, #88]	; (8000664 <HAL_ADC_MspInit+0x80>)
 800060a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_ADC_MspInit+0x80>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_ADC_MspInit+0x80>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a10      	ldr	r2, [pc, #64]	; (8000664 <HAL_ADC_MspInit+0x80>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_ADC_MspInit+0x80>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000634:	2301      	movs	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000638:	2303      	movs	r3, #3
 800063a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_ADC_MspInit+0x84>)
 8000644:	f001 f842 	bl	80016cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2012      	movs	r0, #18
 800064e:	f000 ff54 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000652:	2012      	movs	r0, #18
 8000654:	f000 ff6d 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40012400 	.word	0x40012400
 8000664:	40021000 	.word	0x40021000
 8000668:	40010800 	.word	0x40010800

0800066c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1f      	ldr	r2, [pc, #124]	; (8000704 <HAL_UART_MspInit+0x98>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d137      	bne.n	80006fc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <HAL_UART_MspInit+0x9c>)
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <HAL_UART_MspInit+0x9c>)
 8000692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000696:	61d3      	str	r3, [r2, #28]
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_UART_MspInit+0x9c>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_UART_MspInit+0x9c>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a17      	ldr	r2, [pc, #92]	; (8000708 <HAL_UART_MspInit+0x9c>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_UART_MspInit+0x9c>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006bc:	2304      	movs	r3, #4
 80006be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	480f      	ldr	r0, [pc, #60]	; (800070c <HAL_UART_MspInit+0xa0>)
 80006d0:	f000 fffc 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006d4:	2308      	movs	r3, #8
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4809      	ldr	r0, [pc, #36]	; (800070c <HAL_UART_MspInit+0xa0>)
 80006e8:	f000 fff0 	bl	80016cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2026      	movs	r0, #38	; 0x26
 80006f2:	f000 ff02 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006f6:	2026      	movs	r0, #38	; 0x26
 80006f8:	f000 ff1b 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40004400 	.word	0x40004400
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000756:	f000 f92f 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
	...

0800076c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <ADC1_2_IRQHandler+0x10>)
 8000772:	f000 fad7 	bl	8000d24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000cc 	.word	0x200000cc

08000780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USART2_IRQHandler+0x10>)
 8000786:	f001 ff8d 	bl	80026a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000fc 	.word	0x200000fc

08000794 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e00a      	b.n	80007bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007a6:	f3af 8000 	nop.w
 80007aa:	4601      	mov	r1, r0
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf0      	blt.n	80007a6 <_read+0x12>
  }

  return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	e009      	b.n	80007f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fcaf 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf1      	blt.n	80007e0 <_write+0x12>
  }
  return len;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <_close>:

int _close(int file)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800082c:	605a      	str	r2, [r3, #4]
  return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <_isatty>:

int _isatty(int file)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800085a:	2300      	movs	r3, #0
}
 800085c:	4618      	mov	r0, r3
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
	...

08000868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <_sbrk+0x5c>)
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <_sbrk+0x60>)
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <_sbrk+0x64>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <_sbrk+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000898:	f002 fc54 	bl	8003144 <__errno>
 800089c:	4603      	mov	r3, r0
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e009      	b.n	80008bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <_sbrk+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20005000 	.word	0x20005000
 80008c8:	00000400 	.word	0x00000400
 80008cc:	2000014c 	.word	0x2000014c
 80008d0:	20000168 	.word	0x20000168

080008d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff fff8 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008e6:	490c      	ldr	r1, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008fc:	4c09      	ldr	r4, [pc, #36]	; (8000924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 fc21 	bl	8003150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff fc7d 	bl	800020c <main>
  bx lr
 8000912:	4770      	bx	lr
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800091c:	080041dc 	.word	0x080041dc
  ldr r2, =_sbss
 8000920:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000924:	20000164 	.word	0x20000164

08000928 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <CAN1_RX1_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 fdd1 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff fe22 	bl	8000590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fde9 	bl	800154e <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 fdb1 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000040 	.word	0x20000040
 80009b0:	20000048 	.word	0x20000048
 80009b4:	20000044 	.word	0x20000044

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a03      	ldr	r2, [pc, #12]	; (80009d8 <HAL_IncTick+0x20>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	20000048 	.word	0x20000048
 80009d8:	20000150 	.word	0x20000150

080009dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	; (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000150 	.word	0x20000150

080009f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0be      	b.n	8000b90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fdd8 	bl	80005e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fb8f 	bl	8001158 <ADC_ConversionStop_Disable>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8099 	bne.w	8000b7e <HAL_ADC_Init+0x18e>
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8095 	bne.w	8000b7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a5c:	f023 0302 	bic.w	r3, r3, #2
 8000a60:	f043 0202 	orr.w	r2, r3, #2
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7b1b      	ldrb	r3, [r3, #12]
 8000a76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a88:	d003      	beq.n	8000a92 <HAL_ADC_Init+0xa2>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d102      	bne.n	8000a98 <HAL_ADC_Init+0xa8>
 8000a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a96:	e000      	b.n	8000a9a <HAL_ADC_Init+0xaa>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7d1b      	ldrb	r3, [r3, #20]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d119      	bne.n	8000adc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7b1b      	ldrb	r3, [r3, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d109      	bne.n	8000ac4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	035a      	lsls	r2, r3, #13
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	e00b      	b.n	8000adc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	f043 0220 	orr.w	r2, r3, #32
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	f043 0201 	orr.w	r2, r3, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <HAL_ADC_Init+0x1a8>)
 8000af8:	4013      	ands	r3, r2
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	68b9      	ldr	r1, [r7, #8]
 8000b00:	430b      	orrs	r3, r1
 8000b02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b0c:	d003      	beq.n	8000b16 <HAL_ADC_Init+0x126>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d104      	bne.n	8000b20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	691b      	ldr	r3, [r3, #16]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	051b      	lsls	r3, r3, #20
 8000b1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_ADC_Init+0x1ac>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d10b      	bne.n	8000b5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4e:	f023 0303 	bic.w	r3, r3, #3
 8000b52:	f043 0201 	orr.w	r2, r3, #1
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b5a:	e018      	b.n	8000b8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	f023 0312 	bic.w	r3, r3, #18
 8000b64:	f043 0210 	orr.w	r2, r3, #16
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	f043 0201 	orr.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b7c:	e007      	b.n	8000b8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	f043 0210 	orr.w	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	ffe1f7fd 	.word	0xffe1f7fd
 8000b9c:	ff1f0efe 	.word	0xff1f0efe

08000ba0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Start_IT+0x1a>
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	e0a0      	b.n	8000cfc <HAL_ADC_Start_IT+0x15c>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 fa6e 	bl	80010a4 <ADC_Enable>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 808f 	bne.w	8000cf2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a45      	ldr	r2, [pc, #276]	; (8000d04 <HAL_ADC_Start_IT+0x164>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d105      	bne.n	8000bfe <HAL_ADC_Start_IT+0x5e>
 8000bf2:	4b45      	ldr	r3, [pc, #276]	; (8000d08 <HAL_ADC_Start_IT+0x168>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d115      	bne.n	8000c2a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d026      	beq.n	8000c66 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c28:	e01d      	b.n	8000c66 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a33      	ldr	r2, [pc, #204]	; (8000d08 <HAL_ADC_Start_IT+0x168>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d004      	beq.n	8000c4a <HAL_ADC_Start_IT+0xaa>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a2f      	ldr	r2, [pc, #188]	; (8000d04 <HAL_ADC_Start_IT+0x164>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d10d      	bne.n	8000c66 <HAL_ADC_Start_IT+0xc6>
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <HAL_ADC_Start_IT+0x168>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d007      	beq.n	8000c66 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	f023 0206 	bic.w	r2, r3, #6
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c7e:	e002      	b.n	8000c86 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f06f 0202 	mvn.w	r2, #2
 8000c96:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0220 	orr.w	r2, r2, #32
 8000ca6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cb2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cb6:	d113      	bne.n	8000ce0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cbc:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_ADC_Start_IT+0x164>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d105      	bne.n	8000cce <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_ADC_Start_IT+0x168>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d108      	bne.n	8000ce0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	e00c      	b.n	8000cfa <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	e003      	b.n	8000cfa <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40012800 	.word	0x40012800
 8000d08:	40012400 	.word	0x40012400

08000d0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d03e      	beq.n	8000dc4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d039      	beq.n	8000dc4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d105      	bne.n	8000d68 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d76:	d11d      	bne.n	8000db4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d119      	bne.n	8000db4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0220 	bic.w	r2, r2, #32
 8000d8e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d105      	bne.n	8000db4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f043 0201 	orr.w	r2, r3, #1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fb6d 	bl	8000494 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f06f 0212 	mvn.w	r2, #18
 8000dc2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d04d      	beq.n	8000e6a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d048      	beq.n	8000e6a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d105      	bne.n	8000df0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000dfa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000dfe:	d012      	beq.n	8000e26 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d125      	bne.n	8000e5a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e1c:	d11d      	bne.n	8000e5a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d119      	bne.n	8000e5a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e34:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 fa6c 	bl	8001338 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f06f 020c 	mvn.w	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d012      	beq.n	8000e9a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00d      	beq.n	8000e9a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f809 	bl	8000ea2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f06f 0201 	mvn.w	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d101      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x20>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e0dc      	b.n	800108e <HAL_ADC_ConfigChannel+0x1da>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b06      	cmp	r3, #6
 8000ee2:	d81c      	bhi.n	8000f1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b05      	subs	r3, #5
 8000ef6:	221f      	movs	r2, #31
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4019      	ands	r1, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3b05      	subs	r3, #5
 8000f10:	fa00 f203 	lsl.w	r2, r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f1c:	e03c      	b.n	8000f98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b0c      	cmp	r3, #12
 8000f24:	d81c      	bhi.n	8000f60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	3b23      	subs	r3, #35	; 0x23
 8000f38:	221f      	movs	r2, #31
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4019      	ands	r1, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b23      	subs	r3, #35	; 0x23
 8000f52:	fa00 f203 	lsl.w	r2, r0, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5e:	e01b      	b.n	8000f98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	3b41      	subs	r3, #65	; 0x41
 8000f72:	221f      	movs	r2, #31
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4019      	ands	r1, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	3b41      	subs	r3, #65	; 0x41
 8000f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b09      	cmp	r3, #9
 8000f9e:	d91c      	bls.n	8000fda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68d9      	ldr	r1, [r3, #12]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b1e      	subs	r3, #30
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4019      	ands	r1, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6898      	ldr	r0, [r3, #8]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b1e      	subs	r3, #30
 8000fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	e019      	b.n	800100e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6919      	ldr	r1, [r3, #16]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	2207      	movs	r2, #7
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4019      	ands	r1, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6898      	ldr	r0, [r3, #8]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	fa00 f203 	lsl.w	r2, r0, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b10      	cmp	r3, #16
 8001014:	d003      	beq.n	800101e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800101a:	2b11      	cmp	r3, #17
 800101c:	d132      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_ADC_ConfigChannel+0x1e4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d125      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d126      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001044:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b10      	cmp	r3, #16
 800104c:	d11a      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_ADC_ConfigChannel+0x1e8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	0c9a      	lsrs	r2, r3, #18
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001064:	e002      	b.n	800106c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3b01      	subs	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f9      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x1b2>
 8001072:	e007      	b.n	8001084 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f043 0220 	orr.w	r2, r3, #32
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	40012400 	.word	0x40012400
 800109c:	20000040 	.word	0x20000040
 80010a0:	431bde83 	.word	0x431bde83

080010a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d040      	beq.n	8001144 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0201 	orr.w	r2, r2, #1
 80010d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <ADC_Enable+0xac>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <ADC_Enable+0xb0>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	0c9b      	lsrs	r3, r3, #18
 80010de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010e0:	e002      	b.n	80010e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f9      	bne.n	80010e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010ee:	f7ff fc75 	bl	80009dc <HAL_GetTick>
 80010f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010f4:	e01f      	b.n	8001136 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010f6:	f7ff fc71 	bl	80009dc <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d918      	bls.n	8001136 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b01      	cmp	r3, #1
 8001110:	d011      	beq.n	8001136 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001116:	f043 0210 	orr.w	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e007      	b.n	8001146 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d1d8      	bne.n	80010f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000040 	.word	0x20000040
 8001154:	431bde83 	.word	0x431bde83

08001158 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d12e      	bne.n	80011d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001182:	f7ff fc2b 	bl	80009dc <HAL_GetTick>
 8001186:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001188:	e01b      	b.n	80011c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800118a:	f7ff fc27 	bl	80009dc <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d914      	bls.n	80011c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10d      	bne.n	80011c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	f043 0210 	orr.w	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	f043 0201 	orr.w	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e007      	b.n	80011d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d0dc      	beq.n	800118a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADCEx_Calibration_Start+0x1e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e097      	b.n	800132a <HAL_ADCEx_Calibration_Start+0x14e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa8 	bl	8001158 <ADC_ConversionStop_Disable>
 8001208:	4603      	mov	r3, r0
 800120a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff49 	bl	80010a4 <ADC_Enable>
 8001212:	4603      	mov	r3, r0
 8001214:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 8081 	bne.w	8001320 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001226:	f023 0302 	bic.w	r3, r3, #2
 800122a:	f043 0202 	orr.w	r2, r3, #2
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001232:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_ADCEx_Calibration_Start+0x158>)
 8001234:	681c      	ldr	r4, [r3, #0]
 8001236:	2002      	movs	r0, #2
 8001238:	f001 f8aa 	bl	8002390 <HAL_RCCEx_GetPeriphCLKFreq>
 800123c:	4603      	mov	r3, r0
 800123e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001242:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001244:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001246:	e002      	b.n	800124e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3b01      	subs	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f9      	bne.n	8001248 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0208 	orr.w	r2, r2, #8
 8001262:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001264:	f7ff fbba 	bl	80009dc <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800126a:	e01b      	b.n	80012a4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800126c:	f7ff fbb6 	bl	80009dc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b0a      	cmp	r3, #10
 8001278:	d914      	bls.n	80012a4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00d      	beq.n	80012a4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	f023 0312 	bic.w	r3, r3, #18
 8001290:	f043 0210 	orr.w	r2, r3, #16
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e042      	b.n	800132a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1dc      	bne.n	800126c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0204 	orr.w	r2, r2, #4
 80012c0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80012c2:	f7ff fb8b 	bl	80009dc <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80012c8:	e01b      	b.n	8001302 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012ca:	f7ff fb87 	bl	80009dc <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b0a      	cmp	r3, #10
 80012d6:	d914      	bls.n	8001302 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00d      	beq.n	8001302 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	f023 0312 	bic.w	r3, r3, #18
 80012ee:	f043 0210 	orr.w	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e013      	b.n	800132a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1dc      	bne.n	80012ca <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f023 0303 	bic.w	r3, r3, #3
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001328:	7dfb      	ldrb	r3, [r7, #23]
}
 800132a:	4618      	mov	r0, r3
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop
 8001334:	20000040 	.word	0x20000040

08001338 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4906      	ldr	r1, [pc, #24]	; (80013e4 <__NVIC_EnableIRQ+0x34>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff90 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff2d 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff42 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff90 	bl	800143c <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5f 	bl	80013e8 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff35 	bl	80013b0 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d008      	beq.n	8001590 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2204      	movs	r2, #4
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e020      	b.n	80015d2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020e 	bic.w	r2, r2, #14
 800159e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	2101      	movs	r1, #1
 80015ba:	fa01 f202 	lsl.w	r2, r1, r2
 80015be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d005      	beq.n	8001600 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2204      	movs	r2, #4
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e051      	b.n	80016a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 020e 	bic.w	r2, r2, #14
 800160e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0201 	bic.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <HAL_DMA_Abort_IT+0xd4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d029      	beq.n	800167e <HAL_DMA_Abort_IT+0xa2>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <HAL_DMA_Abort_IT+0xd8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d022      	beq.n	800167a <HAL_DMA_Abort_IT+0x9e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <HAL_DMA_Abort_IT+0xdc>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01a      	beq.n	8001674 <HAL_DMA_Abort_IT+0x98>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_DMA_Abort_IT+0xe0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d012      	beq.n	800166e <HAL_DMA_Abort_IT+0x92>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_DMA_Abort_IT+0xe4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00a      	beq.n	8001668 <HAL_DMA_Abort_IT+0x8c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_DMA_Abort_IT+0xe8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d102      	bne.n	8001662 <HAL_DMA_Abort_IT+0x86>
 800165c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001660:	e00e      	b.n	8001680 <HAL_DMA_Abort_IT+0xa4>
 8001662:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001666:	e00b      	b.n	8001680 <HAL_DMA_Abort_IT+0xa4>
 8001668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166c:	e008      	b.n	8001680 <HAL_DMA_Abort_IT+0xa4>
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	e005      	b.n	8001680 <HAL_DMA_Abort_IT+0xa4>
 8001674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001678:	e002      	b.n	8001680 <HAL_DMA_Abort_IT+0xa4>
 800167a:	2310      	movs	r3, #16
 800167c:	e000      	b.n	8001680 <HAL_DMA_Abort_IT+0xa4>
 800167e:	2301      	movs	r3, #1
 8001680:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_DMA_Abort_IT+0xec>)
 8001682:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
    } 
  }
  return status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40020008 	.word	0x40020008
 80016b4:	4002001c 	.word	0x4002001c
 80016b8:	40020030 	.word	0x40020030
 80016bc:	40020044 	.word	0x40020044
 80016c0:	40020058 	.word	0x40020058
 80016c4:	4002006c 	.word	0x4002006c
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b08b      	sub	sp, #44	; 0x2c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e169      	b.n	80019b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e0:	2201      	movs	r2, #1
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8158 	bne.w	80019ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a9a      	ldr	r2, [pc, #616]	; (800196c <HAL_GPIO_Init+0x2a0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d05e      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001708:	4a98      	ldr	r2, [pc, #608]	; (800196c <HAL_GPIO_Init+0x2a0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d875      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800170e:	4a98      	ldr	r2, [pc, #608]	; (8001970 <HAL_GPIO_Init+0x2a4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d058      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001714:	4a96      	ldr	r2, [pc, #600]	; (8001970 <HAL_GPIO_Init+0x2a4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d86f      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800171a:	4a96      	ldr	r2, [pc, #600]	; (8001974 <HAL_GPIO_Init+0x2a8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d052      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001720:	4a94      	ldr	r2, [pc, #592]	; (8001974 <HAL_GPIO_Init+0x2a8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d869      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001726:	4a94      	ldr	r2, [pc, #592]	; (8001978 <HAL_GPIO_Init+0x2ac>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04c      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 800172c:	4a92      	ldr	r2, [pc, #584]	; (8001978 <HAL_GPIO_Init+0x2ac>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d863      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001732:	4a92      	ldr	r2, [pc, #584]	; (800197c <HAL_GPIO_Init+0x2b0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d046      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
 8001738:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_GPIO_Init+0x2b0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d85d      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 800173e:	2b12      	cmp	r3, #18
 8001740:	d82a      	bhi.n	8001798 <HAL_GPIO_Init+0xcc>
 8001742:	2b12      	cmp	r3, #18
 8001744:	d859      	bhi.n	80017fa <HAL_GPIO_Init+0x12e>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <HAL_GPIO_Init+0x80>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	080017c7 	.word	0x080017c7
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017b3 	.word	0x080017b3
 8001758:	080017f5 	.word	0x080017f5
 800175c:	080017fb 	.word	0x080017fb
 8001760:	080017fb 	.word	0x080017fb
 8001764:	080017fb 	.word	0x080017fb
 8001768:	080017fb 	.word	0x080017fb
 800176c:	080017fb 	.word	0x080017fb
 8001770:	080017fb 	.word	0x080017fb
 8001774:	080017fb 	.word	0x080017fb
 8001778:	080017fb 	.word	0x080017fb
 800177c:	080017fb 	.word	0x080017fb
 8001780:	080017fb 	.word	0x080017fb
 8001784:	080017fb 	.word	0x080017fb
 8001788:	080017fb 	.word	0x080017fb
 800178c:	080017fb 	.word	0x080017fb
 8001790:	080017a9 	.word	0x080017a9
 8001794:	080017bd 	.word	0x080017bd
 8001798:	4a79      	ldr	r2, [pc, #484]	; (8001980 <HAL_GPIO_Init+0x2b4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800179e:	e02c      	b.n	80017fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e029      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	3304      	adds	r3, #4
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e024      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	3308      	adds	r3, #8
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e01f      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	330c      	adds	r3, #12
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e01a      	b.n	80017fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ce:	2304      	movs	r3, #4
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e013      	b.n	80017fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	611a      	str	r2, [r3, #16]
          break;
 80017e6:	e009      	b.n	80017fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2308      	movs	r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	615a      	str	r2, [r3, #20]
          break;
 80017f2:	e003      	b.n	80017fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
          break;
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x130>
          break;
 80017fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d801      	bhi.n	8001806 <HAL_GPIO_Init+0x13a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	e001      	b.n	800180a <HAL_GPIO_Init+0x13e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3304      	adds	r3, #4
 800180a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d802      	bhi.n	8001818 <HAL_GPIO_Init+0x14c>
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x152>
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	3b08      	subs	r3, #8
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	210f      	movs	r1, #15
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	401a      	ands	r2, r3
 8001830:	6a39      	ldr	r1, [r7, #32]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	431a      	orrs	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80b1 	beq.w	80019ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a4c      	ldr	r2, [pc, #304]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2b8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001864:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_GPIO_Init+0x2bc>)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a40      	ldr	r2, [pc, #256]	; (800198c <HAL_GPIO_Init+0x2c0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1ec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3f      	ldr	r2, [pc, #252]	; (8001990 <HAL_GPIO_Init+0x2c4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1e8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <HAL_GPIO_Init+0x2c8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1e4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <HAL_GPIO_Init+0x2cc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1e0>
 80018a8:	2303      	movs	r3, #3
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018ac:	2304      	movs	r3, #4
 80018ae:	e004      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_GPIO_Init+0x1ee>
 80018b8:	2300      	movs	r3, #0
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	f002 0203 	and.w	r2, r2, #3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ca:	492f      	ldr	r1, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x2bc>)
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	492c      	ldr	r1, [pc, #176]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4928      	ldr	r1, [pc, #160]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	4922      	ldr	r1, [pc, #136]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	491e      	ldr	r1, [pc, #120]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001924:	4013      	ands	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4918      	ldr	r1, [pc, #96]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4914      	ldr	r1, [pc, #80]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800194c:	4013      	ands	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d021      	beq.n	80019a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e021      	b.n	80019ae <HAL_GPIO_Init+0x2e2>
 800196a:	bf00      	nop
 800196c:	10320000 	.word	0x10320000
 8001970:	10310000 	.word	0x10310000
 8001974:	10220000 	.word	0x10220000
 8001978:	10210000 	.word	0x10210000
 800197c:	10120000 	.word	0x10120000
 8001980:	10110000 	.word	0x10110000
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	40010800 	.word	0x40010800
 8001990:	40010c00 	.word	0x40010c00
 8001994:	40011000 	.word	0x40011000
 8001998:	40011400 	.word	0x40011400
 800199c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4909      	ldr	r1, [pc, #36]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	3301      	adds	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f47f ae8e 	bne.w	80016e0 <HAL_GPIO_Init+0x14>
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	372c      	adds	r7, #44	; 0x2c
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f0:	e003      	b.n	80019fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e272      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8087 	beq.w	8001b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a24:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d00c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a30:	4b8f      	ldr	r3, [pc, #572]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d112      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e>
 8001a3c:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d10b      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d06c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x12c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d168      	bne.n	8001b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e24c      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x76>
 8001a6c:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a7f      	ldr	r2, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e02e      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x98>
 8001a82:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7a      	ldr	r2, [pc, #488]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a77      	ldr	r2, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xbc>
 8001aa6:	4b72      	ldr	r3, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a71      	ldr	r2, [pc, #452]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6e      	ldr	r2, [pc, #440]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001ac0:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a67      	ldr	r2, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7fe ff7c 	bl	80009dc <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7fe ff78 	bl	80009dc <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e200      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe4>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7fe ff68 	bl	80009dc <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7fe ff64 	bl	80009dc <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1ec      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x10c>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x18c>
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x176>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1c0      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4939      	ldr	r1, [pc, #228]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7fe ff1d 	bl	80009dc <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7fe ff19 	bl	80009dc <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1a1      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7fe fefc 	bl	80009dc <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be8:	f7fe fef8 	bl	80009dc <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e180      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d03a      	beq.n	8001c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d019      	beq.n	8001c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7fe fedc 	bl	80009dc <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7fe fed8 	bl	80009dc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e160      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f000 face 	bl	80021e8 <RCC_Delay>
 8001c4c:	e01c      	b.n	8001c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c54:	f7fe fec2 	bl	80009dc <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7fe febe 	bl	80009dc <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d908      	bls.n	8001c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e146      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	42420000 	.word	0x42420000
 8001c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e9      	bne.n	8001c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a6 	beq.w	8001de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9a:	4b8b      	ldr	r3, [pc, #556]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a87      	ldr	r2, [pc, #540]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b85      	ldr	r3, [pc, #532]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b82      	ldr	r3, [pc, #520]	; (8001ecc <HAL_RCC_OscConfig+0x4c8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cce:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <HAL_RCC_OscConfig+0x4c8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a7e      	ldr	r2, [pc, #504]	; (8001ecc <HAL_RCC_OscConfig+0x4c8>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7fe fe7f 	bl	80009dc <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7fe fe7b 	bl	80009dc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b64      	cmp	r3, #100	; 0x64
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e103      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x4c8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x312>
 8001d08:	4b6f      	ldr	r3, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a6e      	ldr	r2, [pc, #440]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	e02d      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x334>
 8001d1e:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a69      	ldr	r2, [pc, #420]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a66      	ldr	r2, [pc, #408]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	e01c      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d10c      	bne.n	8001d5a <HAL_RCC_OscConfig+0x356>
 8001d40:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a60      	ldr	r2, [pc, #384]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	4b5e      	ldr	r3, [pc, #376]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a5d      	ldr	r2, [pc, #372]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e00b      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a5a      	ldr	r2, [pc, #360]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a57      	ldr	r2, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d015      	beq.n	8001da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7fe fe2f 	bl	80009dc <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7fe fe2b 	bl	80009dc <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0b1      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0ee      	beq.n	8001d82 <HAL_RCC_OscConfig+0x37e>
 8001da4:	e014      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7fe fe19 	bl	80009dc <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7fe fe15 	bl	80009dc <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e09b      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ee      	bne.n	8001dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a3b      	ldr	r2, [pc, #236]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8087 	beq.w	8001efa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d061      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d146      	bne.n	8001e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7fe fde9 	bl	80009dc <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe fde5 	bl	80009dc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e06d      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e34:	d108      	bne.n	8001e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	4921      	ldr	r1, [pc, #132]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a19      	ldr	r1, [r3, #32]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	491b      	ldr	r1, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe fdb9 	bl	80009dc <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe fdb5 	bl	80009dc <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e03d      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x46a>
 8001e8c:	e035      	b.n	8001efa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_RCC_OscConfig+0x4cc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7fe fda2 	bl	80009dc <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7fe fd9e 	bl	80009dc <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e026      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x498>
 8001eba:	e01e      	b.n	8001efa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e019      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x500>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0d0      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
 8001f32:	4965      	ldr	r1, [pc, #404]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0b8      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f64:	4b59      	ldr	r3, [pc, #356]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a58      	ldr	r2, [pc, #352]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a52      	ldr	r2, [pc, #328]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f88:	4b50      	ldr	r3, [pc, #320]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	494d      	ldr	r1, [pc, #308]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d040      	beq.n	8002028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d115      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e07f      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e073      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06b      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe6:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f023 0203 	bic.w	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4936      	ldr	r1, [pc, #216]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff8:	f7fe fcf0 	bl	80009dc <HAL_GetTick>
 8001ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7fe fcec 	bl	80009dc <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e053      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 020c 	and.w	r2, r3, #12
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d1eb      	bne.n	8002000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d210      	bcs.n	8002058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 0207 	bic.w	r2, r3, #7
 800203e:	4922      	ldr	r1, [pc, #136]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e032      	b.n	80020be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4916      	ldr	r1, [pc, #88]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	490e      	ldr	r1, [pc, #56]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002096:	f000 f821 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 800209a:	4602      	mov	r2, r0
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	490a      	ldr	r1, [pc, #40]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	5ccb      	ldrb	r3, [r1, r3]
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1cc>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1d0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fc4e 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	080040fc 	.word	0x080040fc
 80020d4:	20000040 	.word	0x20000040
 80020d8:	20000044 	.word	0x20000044

080020dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_GetSysClockFreq+0x94>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d002      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x30>
 8002106:	2b08      	cmp	r3, #8
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x36>
 800210a:	e027      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_GetSysClockFreq+0x98>)
 800210e:	613b      	str	r3, [r7, #16]
      break;
 8002110:	e027      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_RCC_GetSysClockFreq+0x9c>)
 800211c:	5cd3      	ldrb	r3, [r2, r3]
 800211e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_GetSysClockFreq+0x94>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	0c5b      	lsrs	r3, r3, #17
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_RCC_GetSysClockFreq+0x98>)
 800213e:	fb03 f202 	mul.w	r2, r3, r2
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e004      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	613b      	str	r3, [r7, #16]
      break;
 800215a:	e002      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetSysClockFreq+0x98>)
 800215e:	613b      	str	r3, [r7, #16]
      break;
 8002160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002162:	693b      	ldr	r3, [r7, #16]
}
 8002164:	4618      	mov	r0, r3
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	007a1200 	.word	0x007a1200
 8002178:	08004114 	.word	0x08004114
 800217c:	08004124 	.word	0x08004124
 8002180:	003d0900 	.word	0x003d0900

08002184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <HAL_RCC_GetHCLKFreq+0x10>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	20000040 	.word	0x20000040

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800219c:	f7ff fff2 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4903      	ldr	r1, [pc, #12]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	0800410c 	.word	0x0800410c

080021c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c4:	f7ff ffde 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0adb      	lsrs	r3, r3, #11
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	0800410c 	.word	0x0800410c

080021e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <RCC_Delay+0x34>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <RCC_Delay+0x38>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002204:	bf00      	nop
  }
  while (Delay --);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	60fa      	str	r2, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <RCC_Delay+0x1c>
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000040 	.word	0x20000040
 8002220:	10624dd3 	.word	0x10624dd3

08002224 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d07d      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002244:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10d      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225a:	61d3      	str	r3, [r2, #28]
 800225c:	4b49      	ldr	r3, [pc, #292]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002268:	2301      	movs	r3, #1
 800226a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d118      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002278:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a42      	ldr	r2, [pc, #264]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002284:	f7fe fbaa 	bl	80009dc <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	e008      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228c:	f7fe fba6 	bl	80009dc <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e06d      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d02e      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d027      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c8:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022de:	4a29      	ldr	r2, [pc, #164]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fb75 	bl	80009dc <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fb71 	bl	80009dc <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e036      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4917      	ldr	r1, [pc, #92]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002326:	4313      	orrs	r3, r2
 8002328:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	4a13      	ldr	r2, [pc, #76]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	490b      	ldr	r1, [pc, #44]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4904      	ldr	r1, [pc, #16]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	40007000 	.word	0x40007000
 800238c:	42420440 	.word	0x42420440

08002390 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	f200 808a 	bhi.w	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d045      	beq.n	800244c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d075      	beq.n	80024b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023c6:	e082      	b.n	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80023c8:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023ce:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d07b      	beq.n	80024d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	0c9b      	lsrs	r3, r3, #18
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
 80023e6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023f2:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	0c5b      	lsrs	r3, r3, #17
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800240c:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fbb2 f2f3 	udiv	r2, r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	e004      	b.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4a34      	ldr	r2, [pc, #208]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002434:	d102      	bne.n	800243c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	61bb      	str	r3, [r7, #24]
      break;
 800243a:	e04a      	b.n	80024d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4a2d      	ldr	r2, [pc, #180]	; (80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
      break;
 800244a:	e042      	b.n	80024d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245c:	d108      	bne.n	8002470 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e01f      	b.n	80024b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247a:	d109      	bne.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002488:	f649 4340 	movw	r3, #40000	; 0x9c40
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	e00f      	b.n	80024b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800249a:	d11c      	bne.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d016      	beq.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80024a8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024ac:	61bb      	str	r3, [r7, #24]
      break;
 80024ae:	e012      	b.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80024b0:	e011      	b.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024b2:	f7ff fe85 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	0b9b      	lsrs	r3, r3, #14
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	61bb      	str	r3, [r7, #24]
      break;
 80024cc:	e004      	b.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024ce:	bf00      	nop
 80024d0:	e002      	b.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024d2:	bf00      	nop
 80024d4:	e000      	b.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024d6:	bf00      	nop
    }
  }
  return (frequency);
 80024d8:	69bb      	ldr	r3, [r7, #24]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08004128 	.word	0x08004128
 80024ec:	08004138 	.word	0x08004138
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	003d0900 	.word	0x003d0900
 80024f8:	aaaaaaab 	.word	0xaaaaaaab

080024fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e042      	b.n	8002594 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe f8a2 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800253e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fd71 	bl	8003028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d16d      	bne.n	8002698 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_UART_Transmit+0x2c>
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e066      	b.n	800269a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2221      	movs	r2, #33	; 0x21
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025da:	f7fe f9ff 	bl	80009dc <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	88fa      	ldrh	r2, [r7, #6]
 80025e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	88fa      	ldrh	r2, [r7, #6]
 80025ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f4:	d108      	bne.n	8002608 <HAL_UART_Transmit+0x6c>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e003      	b.n	8002610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002610:	e02a      	b.n	8002668 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 faf9 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e036      	b.n	800269a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10b      	bne.n	800264a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	3302      	adds	r3, #2
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	e007      	b.n	800265a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	3301      	adds	r3, #1
 8002658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1cf      	bne.n	8002612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2200      	movs	r2, #0
 800267a:	2140      	movs	r1, #64	; 0x40
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fac9 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e006      	b.n	800269a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	e000      	b.n	800269a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002698:	2302      	movs	r3, #2
  }
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b0ba      	sub	sp, #232	; 0xe8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_UART_IRQHandler+0x66>
 80026f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fbd1 	bl	8002eaa <UART_Receive_IT>
      return;
 8002708:	e25b      	b.n	8002bc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800270a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80de 	beq.w	80028d0 <HAL_UART_IRQHandler+0x22c>
 8002714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002724:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80d1 	beq.w	80028d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800272e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_UART_IRQHandler+0xae>
 800273a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_UART_IRQHandler+0xd2>
 800275e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_UART_IRQHandler+0xf6>
 8002782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800279a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d011      	beq.n	80027ca <HAL_UART_IRQHandler+0x126>
 80027a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f043 0208 	orr.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 81f2 	beq.w	8002bb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_UART_IRQHandler+0x14e>
 80027e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fb5c 	bl	8002eaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <HAL_UART_IRQHandler+0x17a>
 8002816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d04f      	beq.n	80028be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa66 	bl	8002cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d041      	beq.n	80028b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3314      	adds	r3, #20
 8002838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800284c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800285e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800286a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1d9      	bne.n	8002832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d013      	beq.n	80028ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	4a7e      	ldr	r2, [pc, #504]	; (8002a84 <HAL_UART_IRQHandler+0x3e0>)
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fea2 	bl	80015dc <HAL_DMA_Abort_IT>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028a8:	4610      	mov	r0, r2
 80028aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ac:	e00e      	b.n	80028cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f99c 	bl	8002bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b4:	e00a      	b.n	80028cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f998 	bl	8002bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	e006      	b.n	80028cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f994 	bl	8002bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80028ca:	e175      	b.n	8002bb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	bf00      	nop
    return;
 80028ce:	e173      	b.n	8002bb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 814f 	bne.w	8002b78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8148 	beq.w	8002b78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8141 	beq.w	8002b78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80b6 	beq.w	8002a88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8145 	beq.w	8002bbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800293a:	429a      	cmp	r2, r3
 800293c:	f080 813e 	bcs.w	8002bbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002946:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b20      	cmp	r3, #32
 8002950:	f000 8088 	beq.w	8002a64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002962:	e853 3f00 	ldrex	r3, [r3]
 8002966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800296a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002980:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002988:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800298c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002990:	e841 2300 	strex	r3, r2, [r1]
 8002994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1d9      	bne.n	8002954 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3314      	adds	r3, #20
 80029a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3314      	adds	r3, #20
 80029c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029d0:	e841 2300 	strex	r3, r2, [r1]
 80029d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1e1      	bne.n	80029a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3314      	adds	r3, #20
 80029fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e3      	bne.n	80029dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2c:	e853 3f00 	ldrex	r3, [r3]
 8002a30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a34:	f023 0310 	bic.w	r3, r3, #16
 8002a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a46:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e3      	bne.n	8002a22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fd81 	bl	8001566 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8bf 	bl	8002bfe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a80:	e09c      	b.n	8002bbc <HAL_UART_IRQHandler+0x518>
 8002a82:	bf00      	nop
 8002a84:	08002db5 	.word	0x08002db5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 808e 	beq.w	8002bc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8089 	beq.w	8002bc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	330c      	adds	r3, #12
 8002ace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ad2:	647a      	str	r2, [r7, #68]	; 0x44
 8002ad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e3      	bne.n	8002aae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	623b      	str	r3, [r7, #32]
   return(result);
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3314      	adds	r3, #20
 8002b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e3      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0310 	bic.w	r3, r3, #16
 8002b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b50:	61fa      	str	r2, [r7, #28]
 8002b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	69b9      	ldr	r1, [r7, #24]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e3      	bne.n	8002b2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f844 	bl	8002bfe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b76:	e023      	b.n	8002bc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <HAL_UART_IRQHandler+0x4f4>
 8002b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f923 	bl	8002ddc <UART_Transmit_IT>
    return;
 8002b96:	e014      	b.n	8002bc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x51e>
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f962 	bl	8002e7a <UART_EndTransmit_IT>
    return;
 8002bb6:	e004      	b.n	8002bc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002bb8:	bf00      	nop
 8002bba:	e002      	b.n	8002bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002bbc:	bf00      	nop
 8002bbe:	e000      	b.n	8002bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002bc0:	bf00      	nop
  }
}
 8002bc2:	37e8      	adds	r7, #232	; 0xe8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b090      	sub	sp, #64	; 0x40
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c24:	e050      	b.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d04c      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c34:	f7fd fed2 	bl	80009dc <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d241      	bcs.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c64:	637a      	str	r2, [r7, #52]	; 0x34
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e5      	bne.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	613b      	str	r3, [r7, #16]
   return(result);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3314      	adds	r3, #20
 8002c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c98:	623a      	str	r2, [r7, #32]
 8002c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	69f9      	ldr	r1, [r7, #28]
 8002c9e:	6a3a      	ldr	r2, [r7, #32]
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e5      	bne.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e00f      	b.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d09f      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3740      	adds	r7, #64	; 0x40
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b095      	sub	sp, #84	; 0x54
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d02:	e853 3f00 	ldrex	r3, [r3]
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330c      	adds	r3, #12
 8002d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d18:	643a      	str	r2, [r7, #64]	; 0x40
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e5      	bne.n	8002cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3314      	adds	r3, #20
 8002d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e5      	bne.n	8002d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d119      	bne.n	8002d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f023 0310 	bic.w	r3, r3, #16
 8002d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d88:	61ba      	str	r2, [r7, #24]
 8002d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6979      	ldr	r1, [r7, #20]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	613b      	str	r3, [r7, #16]
   return(result);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002daa:	bf00      	nop
 8002dac:	3754      	adds	r7, #84	; 0x54
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff ff0c 	bl	8002bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b21      	cmp	r3, #33	; 0x21
 8002dee:	d13e      	bne.n	8002e6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df8:	d114      	bne.n	8002e24 <UART_Transmit_IT+0x48>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d110      	bne.n	8002e24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	621a      	str	r2, [r3, #32]
 8002e22:	e008      	b.n	8002e36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	1c59      	adds	r1, r3, #1
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6211      	str	r1, [r2, #32]
 8002e2e:	781a      	ldrb	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4619      	mov	r1, r3
 8002e44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fe94 	bl	8002bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b08c      	sub	sp, #48	; 0x30
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b22      	cmp	r3, #34	; 0x22
 8002ebc:	f040 80ae 	bne.w	800301c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec8:	d117      	bne.n	8002efa <UART_Receive_IT+0x50>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d113      	bne.n	8002efa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	1c9a      	adds	r2, r3, #2
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ef8:	e026      	b.n	8002f48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0c:	d007      	beq.n	8002f1e <UART_Receive_IT+0x74>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <UART_Receive_IT+0x82>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e008      	b.n	8002f3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4619      	mov	r1, r3
 8002f56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d15d      	bne.n	8003018 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0220 	bic.w	r2, r2, #32
 8002f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d135      	bne.n	800300e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f023 0310 	bic.w	r3, r3, #16
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	623a      	str	r2, [r7, #32]
 8002fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	69f9      	ldr	r1, [r7, #28]
 8002fce:	6a3a      	ldr	r2, [r7, #32]
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e5      	bne.n	8002fa8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d10a      	bne.n	8003000 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff fdf9 	bl	8002bfe <HAL_UARTEx_RxEventCallback>
 800300c:	e002      	b.n	8003014 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fde3 	bl	8002bda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e002      	b.n	800301e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3730      	adds	r7, #48	; 0x30
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003062:	f023 030c 	bic.w	r3, r3, #12
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	430b      	orrs	r3, r1
 800306e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2c      	ldr	r2, [pc, #176]	; (800313c <UART_SetConfig+0x114>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d103      	bne.n	8003098 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff f896 	bl	80021c0 <HAL_RCC_GetPCLK2Freq>
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	e002      	b.n	800309e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003098:	f7ff f87e 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 800309c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	4a22      	ldr	r2, [pc, #136]	; (8003140 <UART_SetConfig+0x118>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	0119      	lsls	r1, r3, #4
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <UART_SetConfig+0x118>)
 80030d6:	fba3 0302 	umull	r0, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2064      	movs	r0, #100	; 0x64
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	3332      	adds	r3, #50	; 0x32
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <UART_SetConfig+0x118>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f4:	4419      	add	r1, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <UART_SetConfig+0x118>)
 800310e:	fba3 0302 	umull	r0, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2064      	movs	r0, #100	; 0x64
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3332      	adds	r3, #50	; 0x32
 8003120:	4a07      	ldr	r2, [pc, #28]	; (8003140 <UART_SetConfig+0x118>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	440a      	add	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40013800 	.word	0x40013800
 8003140:	51eb851f 	.word	0x51eb851f

08003144 <__errno>:
 8003144:	4b01      	ldr	r3, [pc, #4]	; (800314c <__errno+0x8>)
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	2000004c 	.word	0x2000004c

08003150 <__libc_init_array>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	2600      	movs	r6, #0
 8003154:	4d0c      	ldr	r5, [pc, #48]	; (8003188 <__libc_init_array+0x38>)
 8003156:	4c0d      	ldr	r4, [pc, #52]	; (800318c <__libc_init_array+0x3c>)
 8003158:	1b64      	subs	r4, r4, r5
 800315a:	10a4      	asrs	r4, r4, #2
 800315c:	42a6      	cmp	r6, r4
 800315e:	d109      	bne.n	8003174 <__libc_init_array+0x24>
 8003160:	f000 ffb6 	bl	80040d0 <_init>
 8003164:	2600      	movs	r6, #0
 8003166:	4d0a      	ldr	r5, [pc, #40]	; (8003190 <__libc_init_array+0x40>)
 8003168:	4c0a      	ldr	r4, [pc, #40]	; (8003194 <__libc_init_array+0x44>)
 800316a:	1b64      	subs	r4, r4, r5
 800316c:	10a4      	asrs	r4, r4, #2
 800316e:	42a6      	cmp	r6, r4
 8003170:	d105      	bne.n	800317e <__libc_init_array+0x2e>
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	f855 3b04 	ldr.w	r3, [r5], #4
 8003178:	4798      	blx	r3
 800317a:	3601      	adds	r6, #1
 800317c:	e7ee      	b.n	800315c <__libc_init_array+0xc>
 800317e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003182:	4798      	blx	r3
 8003184:	3601      	adds	r6, #1
 8003186:	e7f2      	b.n	800316e <__libc_init_array+0x1e>
 8003188:	080041d4 	.word	0x080041d4
 800318c:	080041d4 	.word	0x080041d4
 8003190:	080041d4 	.word	0x080041d4
 8003194:	080041d8 	.word	0x080041d8

08003198 <memset>:
 8003198:	4603      	mov	r3, r0
 800319a:	4402      	add	r2, r0
 800319c:	4293      	cmp	r3, r2
 800319e:	d100      	bne.n	80031a2 <memset+0xa>
 80031a0:	4770      	bx	lr
 80031a2:	f803 1b01 	strb.w	r1, [r3], #1
 80031a6:	e7f9      	b.n	800319c <memset+0x4>

080031a8 <iprintf>:
 80031a8:	b40f      	push	{r0, r1, r2, r3}
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <iprintf+0x2c>)
 80031ac:	b513      	push	{r0, r1, r4, lr}
 80031ae:	681c      	ldr	r4, [r3, #0]
 80031b0:	b124      	cbz	r4, 80031bc <iprintf+0x14>
 80031b2:	69a3      	ldr	r3, [r4, #24]
 80031b4:	b913      	cbnz	r3, 80031bc <iprintf+0x14>
 80031b6:	4620      	mov	r0, r4
 80031b8:	f000 f866 	bl	8003288 <__sinit>
 80031bc:	ab05      	add	r3, sp, #20
 80031be:	4620      	mov	r0, r4
 80031c0:	9a04      	ldr	r2, [sp, #16]
 80031c2:	68a1      	ldr	r1, [r4, #8]
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	f000 f9bb 	bl	8003540 <_vfiprintf_r>
 80031ca:	b002      	add	sp, #8
 80031cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031d0:	b004      	add	sp, #16
 80031d2:	4770      	bx	lr
 80031d4:	2000004c 	.word	0x2000004c

080031d8 <std>:
 80031d8:	2300      	movs	r3, #0
 80031da:	b510      	push	{r4, lr}
 80031dc:	4604      	mov	r4, r0
 80031de:	e9c0 3300 	strd	r3, r3, [r0]
 80031e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031e6:	6083      	str	r3, [r0, #8]
 80031e8:	8181      	strh	r1, [r0, #12]
 80031ea:	6643      	str	r3, [r0, #100]	; 0x64
 80031ec:	81c2      	strh	r2, [r0, #14]
 80031ee:	6183      	str	r3, [r0, #24]
 80031f0:	4619      	mov	r1, r3
 80031f2:	2208      	movs	r2, #8
 80031f4:	305c      	adds	r0, #92	; 0x5c
 80031f6:	f7ff ffcf 	bl	8003198 <memset>
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <std+0x38>)
 80031fc:	6224      	str	r4, [r4, #32]
 80031fe:	6263      	str	r3, [r4, #36]	; 0x24
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <std+0x3c>)
 8003202:	62a3      	str	r3, [r4, #40]	; 0x28
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <std+0x40>)
 8003206:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <std+0x44>)
 800320a:	6323      	str	r3, [r4, #48]	; 0x30
 800320c:	bd10      	pop	{r4, pc}
 800320e:	bf00      	nop
 8003210:	08003aed 	.word	0x08003aed
 8003214:	08003b0f 	.word	0x08003b0f
 8003218:	08003b47 	.word	0x08003b47
 800321c:	08003b6b 	.word	0x08003b6b

08003220 <_cleanup_r>:
 8003220:	4901      	ldr	r1, [pc, #4]	; (8003228 <_cleanup_r+0x8>)
 8003222:	f000 b8af 	b.w	8003384 <_fwalk_reent>
 8003226:	bf00      	nop
 8003228:	08003e3d 	.word	0x08003e3d

0800322c <__sfmoreglue>:
 800322c:	2268      	movs	r2, #104	; 0x68
 800322e:	b570      	push	{r4, r5, r6, lr}
 8003230:	1e4d      	subs	r5, r1, #1
 8003232:	4355      	muls	r5, r2
 8003234:	460e      	mov	r6, r1
 8003236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800323a:	f000 f8e5 	bl	8003408 <_malloc_r>
 800323e:	4604      	mov	r4, r0
 8003240:	b140      	cbz	r0, 8003254 <__sfmoreglue+0x28>
 8003242:	2100      	movs	r1, #0
 8003244:	e9c0 1600 	strd	r1, r6, [r0]
 8003248:	300c      	adds	r0, #12
 800324a:	60a0      	str	r0, [r4, #8]
 800324c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003250:	f7ff ffa2 	bl	8003198 <memset>
 8003254:	4620      	mov	r0, r4
 8003256:	bd70      	pop	{r4, r5, r6, pc}

08003258 <__sfp_lock_acquire>:
 8003258:	4801      	ldr	r0, [pc, #4]	; (8003260 <__sfp_lock_acquire+0x8>)
 800325a:	f000 b8b3 	b.w	80033c4 <__retarget_lock_acquire_recursive>
 800325e:	bf00      	nop
 8003260:	20000155 	.word	0x20000155

08003264 <__sfp_lock_release>:
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <__sfp_lock_release+0x8>)
 8003266:	f000 b8ae 	b.w	80033c6 <__retarget_lock_release_recursive>
 800326a:	bf00      	nop
 800326c:	20000155 	.word	0x20000155

08003270 <__sinit_lock_acquire>:
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <__sinit_lock_acquire+0x8>)
 8003272:	f000 b8a7 	b.w	80033c4 <__retarget_lock_acquire_recursive>
 8003276:	bf00      	nop
 8003278:	20000156 	.word	0x20000156

0800327c <__sinit_lock_release>:
 800327c:	4801      	ldr	r0, [pc, #4]	; (8003284 <__sinit_lock_release+0x8>)
 800327e:	f000 b8a2 	b.w	80033c6 <__retarget_lock_release_recursive>
 8003282:	bf00      	nop
 8003284:	20000156 	.word	0x20000156

08003288 <__sinit>:
 8003288:	b510      	push	{r4, lr}
 800328a:	4604      	mov	r4, r0
 800328c:	f7ff fff0 	bl	8003270 <__sinit_lock_acquire>
 8003290:	69a3      	ldr	r3, [r4, #24]
 8003292:	b11b      	cbz	r3, 800329c <__sinit+0x14>
 8003294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003298:	f7ff bff0 	b.w	800327c <__sinit_lock_release>
 800329c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032a0:	6523      	str	r3, [r4, #80]	; 0x50
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <__sinit+0x68>)
 80032a4:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <__sinit+0x6c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80032aa:	42a3      	cmp	r3, r4
 80032ac:	bf08      	it	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	4620      	mov	r0, r4
 80032b2:	bf08      	it	eq
 80032b4:	61a3      	streq	r3, [r4, #24]
 80032b6:	f000 f81f 	bl	80032f8 <__sfp>
 80032ba:	6060      	str	r0, [r4, #4]
 80032bc:	4620      	mov	r0, r4
 80032be:	f000 f81b 	bl	80032f8 <__sfp>
 80032c2:	60a0      	str	r0, [r4, #8]
 80032c4:	4620      	mov	r0, r4
 80032c6:	f000 f817 	bl	80032f8 <__sfp>
 80032ca:	2200      	movs	r2, #0
 80032cc:	2104      	movs	r1, #4
 80032ce:	60e0      	str	r0, [r4, #12]
 80032d0:	6860      	ldr	r0, [r4, #4]
 80032d2:	f7ff ff81 	bl	80031d8 <std>
 80032d6:	2201      	movs	r2, #1
 80032d8:	2109      	movs	r1, #9
 80032da:	68a0      	ldr	r0, [r4, #8]
 80032dc:	f7ff ff7c 	bl	80031d8 <std>
 80032e0:	2202      	movs	r2, #2
 80032e2:	2112      	movs	r1, #18
 80032e4:	68e0      	ldr	r0, [r4, #12]
 80032e6:	f7ff ff77 	bl	80031d8 <std>
 80032ea:	2301      	movs	r3, #1
 80032ec:	61a3      	str	r3, [r4, #24]
 80032ee:	e7d1      	b.n	8003294 <__sinit+0xc>
 80032f0:	0800413c 	.word	0x0800413c
 80032f4:	08003221 	.word	0x08003221

080032f8 <__sfp>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	4607      	mov	r7, r0
 80032fc:	f7ff ffac 	bl	8003258 <__sfp_lock_acquire>
 8003300:	4b1e      	ldr	r3, [pc, #120]	; (800337c <__sfp+0x84>)
 8003302:	681e      	ldr	r6, [r3, #0]
 8003304:	69b3      	ldr	r3, [r6, #24]
 8003306:	b913      	cbnz	r3, 800330e <__sfp+0x16>
 8003308:	4630      	mov	r0, r6
 800330a:	f7ff ffbd 	bl	8003288 <__sinit>
 800330e:	3648      	adds	r6, #72	; 0x48
 8003310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003314:	3b01      	subs	r3, #1
 8003316:	d503      	bpl.n	8003320 <__sfp+0x28>
 8003318:	6833      	ldr	r3, [r6, #0]
 800331a:	b30b      	cbz	r3, 8003360 <__sfp+0x68>
 800331c:	6836      	ldr	r6, [r6, #0]
 800331e:	e7f7      	b.n	8003310 <__sfp+0x18>
 8003320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003324:	b9d5      	cbnz	r5, 800335c <__sfp+0x64>
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <__sfp+0x88>)
 8003328:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800332c:	60e3      	str	r3, [r4, #12]
 800332e:	6665      	str	r5, [r4, #100]	; 0x64
 8003330:	f000 f847 	bl	80033c2 <__retarget_lock_init_recursive>
 8003334:	f7ff ff96 	bl	8003264 <__sfp_lock_release>
 8003338:	2208      	movs	r2, #8
 800333a:	4629      	mov	r1, r5
 800333c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003340:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003344:	6025      	str	r5, [r4, #0]
 8003346:	61a5      	str	r5, [r4, #24]
 8003348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800334c:	f7ff ff24 	bl	8003198 <memset>
 8003350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003358:	4620      	mov	r0, r4
 800335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335c:	3468      	adds	r4, #104	; 0x68
 800335e:	e7d9      	b.n	8003314 <__sfp+0x1c>
 8003360:	2104      	movs	r1, #4
 8003362:	4638      	mov	r0, r7
 8003364:	f7ff ff62 	bl	800322c <__sfmoreglue>
 8003368:	4604      	mov	r4, r0
 800336a:	6030      	str	r0, [r6, #0]
 800336c:	2800      	cmp	r0, #0
 800336e:	d1d5      	bne.n	800331c <__sfp+0x24>
 8003370:	f7ff ff78 	bl	8003264 <__sfp_lock_release>
 8003374:	230c      	movs	r3, #12
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	e7ee      	b.n	8003358 <__sfp+0x60>
 800337a:	bf00      	nop
 800337c:	0800413c 	.word	0x0800413c
 8003380:	ffff0001 	.word	0xffff0001

08003384 <_fwalk_reent>:
 8003384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003388:	4606      	mov	r6, r0
 800338a:	4688      	mov	r8, r1
 800338c:	2700      	movs	r7, #0
 800338e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003396:	f1b9 0901 	subs.w	r9, r9, #1
 800339a:	d505      	bpl.n	80033a8 <_fwalk_reent+0x24>
 800339c:	6824      	ldr	r4, [r4, #0]
 800339e:	2c00      	cmp	r4, #0
 80033a0:	d1f7      	bne.n	8003392 <_fwalk_reent+0xe>
 80033a2:	4638      	mov	r0, r7
 80033a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033a8:	89ab      	ldrh	r3, [r5, #12]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d907      	bls.n	80033be <_fwalk_reent+0x3a>
 80033ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033b2:	3301      	adds	r3, #1
 80033b4:	d003      	beq.n	80033be <_fwalk_reent+0x3a>
 80033b6:	4629      	mov	r1, r5
 80033b8:	4630      	mov	r0, r6
 80033ba:	47c0      	blx	r8
 80033bc:	4307      	orrs	r7, r0
 80033be:	3568      	adds	r5, #104	; 0x68
 80033c0:	e7e9      	b.n	8003396 <_fwalk_reent+0x12>

080033c2 <__retarget_lock_init_recursive>:
 80033c2:	4770      	bx	lr

080033c4 <__retarget_lock_acquire_recursive>:
 80033c4:	4770      	bx	lr

080033c6 <__retarget_lock_release_recursive>:
 80033c6:	4770      	bx	lr

080033c8 <sbrk_aligned>:
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	4e0e      	ldr	r6, [pc, #56]	; (8003404 <sbrk_aligned+0x3c>)
 80033cc:	460c      	mov	r4, r1
 80033ce:	6831      	ldr	r1, [r6, #0]
 80033d0:	4605      	mov	r5, r0
 80033d2:	b911      	cbnz	r1, 80033da <sbrk_aligned+0x12>
 80033d4:	f000 fb7a 	bl	8003acc <_sbrk_r>
 80033d8:	6030      	str	r0, [r6, #0]
 80033da:	4621      	mov	r1, r4
 80033dc:	4628      	mov	r0, r5
 80033de:	f000 fb75 	bl	8003acc <_sbrk_r>
 80033e2:	1c43      	adds	r3, r0, #1
 80033e4:	d00a      	beq.n	80033fc <sbrk_aligned+0x34>
 80033e6:	1cc4      	adds	r4, r0, #3
 80033e8:	f024 0403 	bic.w	r4, r4, #3
 80033ec:	42a0      	cmp	r0, r4
 80033ee:	d007      	beq.n	8003400 <sbrk_aligned+0x38>
 80033f0:	1a21      	subs	r1, r4, r0
 80033f2:	4628      	mov	r0, r5
 80033f4:	f000 fb6a 	bl	8003acc <_sbrk_r>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d101      	bne.n	8003400 <sbrk_aligned+0x38>
 80033fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003400:	4620      	mov	r0, r4
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	2000015c 	.word	0x2000015c

08003408 <_malloc_r>:
 8003408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800340c:	1ccd      	adds	r5, r1, #3
 800340e:	f025 0503 	bic.w	r5, r5, #3
 8003412:	3508      	adds	r5, #8
 8003414:	2d0c      	cmp	r5, #12
 8003416:	bf38      	it	cc
 8003418:	250c      	movcc	r5, #12
 800341a:	2d00      	cmp	r5, #0
 800341c:	4607      	mov	r7, r0
 800341e:	db01      	blt.n	8003424 <_malloc_r+0x1c>
 8003420:	42a9      	cmp	r1, r5
 8003422:	d905      	bls.n	8003430 <_malloc_r+0x28>
 8003424:	230c      	movs	r3, #12
 8003426:	2600      	movs	r6, #0
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4630      	mov	r0, r6
 800342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003430:	4e2e      	ldr	r6, [pc, #184]	; (80034ec <_malloc_r+0xe4>)
 8003432:	f000 fdc5 	bl	8003fc0 <__malloc_lock>
 8003436:	6833      	ldr	r3, [r6, #0]
 8003438:	461c      	mov	r4, r3
 800343a:	bb34      	cbnz	r4, 800348a <_malloc_r+0x82>
 800343c:	4629      	mov	r1, r5
 800343e:	4638      	mov	r0, r7
 8003440:	f7ff ffc2 	bl	80033c8 <sbrk_aligned>
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	4604      	mov	r4, r0
 8003448:	d14d      	bne.n	80034e6 <_malloc_r+0xde>
 800344a:	6834      	ldr	r4, [r6, #0]
 800344c:	4626      	mov	r6, r4
 800344e:	2e00      	cmp	r6, #0
 8003450:	d140      	bne.n	80034d4 <_malloc_r+0xcc>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	4631      	mov	r1, r6
 8003456:	4638      	mov	r0, r7
 8003458:	eb04 0803 	add.w	r8, r4, r3
 800345c:	f000 fb36 	bl	8003acc <_sbrk_r>
 8003460:	4580      	cmp	r8, r0
 8003462:	d13a      	bne.n	80034da <_malloc_r+0xd2>
 8003464:	6821      	ldr	r1, [r4, #0]
 8003466:	3503      	adds	r5, #3
 8003468:	1a6d      	subs	r5, r5, r1
 800346a:	f025 0503 	bic.w	r5, r5, #3
 800346e:	3508      	adds	r5, #8
 8003470:	2d0c      	cmp	r5, #12
 8003472:	bf38      	it	cc
 8003474:	250c      	movcc	r5, #12
 8003476:	4638      	mov	r0, r7
 8003478:	4629      	mov	r1, r5
 800347a:	f7ff ffa5 	bl	80033c8 <sbrk_aligned>
 800347e:	3001      	adds	r0, #1
 8003480:	d02b      	beq.n	80034da <_malloc_r+0xd2>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	442b      	add	r3, r5
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	e00e      	b.n	80034a8 <_malloc_r+0xa0>
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	1b52      	subs	r2, r2, r5
 800348e:	d41e      	bmi.n	80034ce <_malloc_r+0xc6>
 8003490:	2a0b      	cmp	r2, #11
 8003492:	d916      	bls.n	80034c2 <_malloc_r+0xba>
 8003494:	1961      	adds	r1, r4, r5
 8003496:	42a3      	cmp	r3, r4
 8003498:	6025      	str	r5, [r4, #0]
 800349a:	bf18      	it	ne
 800349c:	6059      	strne	r1, [r3, #4]
 800349e:	6863      	ldr	r3, [r4, #4]
 80034a0:	bf08      	it	eq
 80034a2:	6031      	streq	r1, [r6, #0]
 80034a4:	5162      	str	r2, [r4, r5]
 80034a6:	604b      	str	r3, [r1, #4]
 80034a8:	4638      	mov	r0, r7
 80034aa:	f104 060b 	add.w	r6, r4, #11
 80034ae:	f000 fd8d 	bl	8003fcc <__malloc_unlock>
 80034b2:	f026 0607 	bic.w	r6, r6, #7
 80034b6:	1d23      	adds	r3, r4, #4
 80034b8:	1af2      	subs	r2, r6, r3
 80034ba:	d0b6      	beq.n	800342a <_malloc_r+0x22>
 80034bc:	1b9b      	subs	r3, r3, r6
 80034be:	50a3      	str	r3, [r4, r2]
 80034c0:	e7b3      	b.n	800342a <_malloc_r+0x22>
 80034c2:	6862      	ldr	r2, [r4, #4]
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	bf0c      	ite	eq
 80034c8:	6032      	streq	r2, [r6, #0]
 80034ca:	605a      	strne	r2, [r3, #4]
 80034cc:	e7ec      	b.n	80034a8 <_malloc_r+0xa0>
 80034ce:	4623      	mov	r3, r4
 80034d0:	6864      	ldr	r4, [r4, #4]
 80034d2:	e7b2      	b.n	800343a <_malloc_r+0x32>
 80034d4:	4634      	mov	r4, r6
 80034d6:	6876      	ldr	r6, [r6, #4]
 80034d8:	e7b9      	b.n	800344e <_malloc_r+0x46>
 80034da:	230c      	movs	r3, #12
 80034dc:	4638      	mov	r0, r7
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	f000 fd74 	bl	8003fcc <__malloc_unlock>
 80034e4:	e7a1      	b.n	800342a <_malloc_r+0x22>
 80034e6:	6025      	str	r5, [r4, #0]
 80034e8:	e7de      	b.n	80034a8 <_malloc_r+0xa0>
 80034ea:	bf00      	nop
 80034ec:	20000158 	.word	0x20000158

080034f0 <__sfputc_r>:
 80034f0:	6893      	ldr	r3, [r2, #8]
 80034f2:	b410      	push	{r4}
 80034f4:	3b01      	subs	r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	6093      	str	r3, [r2, #8]
 80034fa:	da07      	bge.n	800350c <__sfputc_r+0x1c>
 80034fc:	6994      	ldr	r4, [r2, #24]
 80034fe:	42a3      	cmp	r3, r4
 8003500:	db01      	blt.n	8003506 <__sfputc_r+0x16>
 8003502:	290a      	cmp	r1, #10
 8003504:	d102      	bne.n	800350c <__sfputc_r+0x1c>
 8003506:	bc10      	pop	{r4}
 8003508:	f000 bb34 	b.w	8003b74 <__swbuf_r>
 800350c:	6813      	ldr	r3, [r2, #0]
 800350e:	1c58      	adds	r0, r3, #1
 8003510:	6010      	str	r0, [r2, #0]
 8003512:	7019      	strb	r1, [r3, #0]
 8003514:	4608      	mov	r0, r1
 8003516:	bc10      	pop	{r4}
 8003518:	4770      	bx	lr

0800351a <__sfputs_r>:
 800351a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351c:	4606      	mov	r6, r0
 800351e:	460f      	mov	r7, r1
 8003520:	4614      	mov	r4, r2
 8003522:	18d5      	adds	r5, r2, r3
 8003524:	42ac      	cmp	r4, r5
 8003526:	d101      	bne.n	800352c <__sfputs_r+0x12>
 8003528:	2000      	movs	r0, #0
 800352a:	e007      	b.n	800353c <__sfputs_r+0x22>
 800352c:	463a      	mov	r2, r7
 800352e:	4630      	mov	r0, r6
 8003530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003534:	f7ff ffdc 	bl	80034f0 <__sfputc_r>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d1f3      	bne.n	8003524 <__sfputs_r+0xa>
 800353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003540 <_vfiprintf_r>:
 8003540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003544:	460d      	mov	r5, r1
 8003546:	4614      	mov	r4, r2
 8003548:	4698      	mov	r8, r3
 800354a:	4606      	mov	r6, r0
 800354c:	b09d      	sub	sp, #116	; 0x74
 800354e:	b118      	cbz	r0, 8003558 <_vfiprintf_r+0x18>
 8003550:	6983      	ldr	r3, [r0, #24]
 8003552:	b90b      	cbnz	r3, 8003558 <_vfiprintf_r+0x18>
 8003554:	f7ff fe98 	bl	8003288 <__sinit>
 8003558:	4b89      	ldr	r3, [pc, #548]	; (8003780 <_vfiprintf_r+0x240>)
 800355a:	429d      	cmp	r5, r3
 800355c:	d11b      	bne.n	8003596 <_vfiprintf_r+0x56>
 800355e:	6875      	ldr	r5, [r6, #4]
 8003560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003562:	07d9      	lsls	r1, r3, #31
 8003564:	d405      	bmi.n	8003572 <_vfiprintf_r+0x32>
 8003566:	89ab      	ldrh	r3, [r5, #12]
 8003568:	059a      	lsls	r2, r3, #22
 800356a:	d402      	bmi.n	8003572 <_vfiprintf_r+0x32>
 800356c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800356e:	f7ff ff29 	bl	80033c4 <__retarget_lock_acquire_recursive>
 8003572:	89ab      	ldrh	r3, [r5, #12]
 8003574:	071b      	lsls	r3, r3, #28
 8003576:	d501      	bpl.n	800357c <_vfiprintf_r+0x3c>
 8003578:	692b      	ldr	r3, [r5, #16]
 800357a:	b9eb      	cbnz	r3, 80035b8 <_vfiprintf_r+0x78>
 800357c:	4629      	mov	r1, r5
 800357e:	4630      	mov	r0, r6
 8003580:	f000 fb5c 	bl	8003c3c <__swsetup_r>
 8003584:	b1c0      	cbz	r0, 80035b8 <_vfiprintf_r+0x78>
 8003586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003588:	07dc      	lsls	r4, r3, #31
 800358a:	d50e      	bpl.n	80035aa <_vfiprintf_r+0x6a>
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	b01d      	add	sp, #116	; 0x74
 8003592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003596:	4b7b      	ldr	r3, [pc, #492]	; (8003784 <_vfiprintf_r+0x244>)
 8003598:	429d      	cmp	r5, r3
 800359a:	d101      	bne.n	80035a0 <_vfiprintf_r+0x60>
 800359c:	68b5      	ldr	r5, [r6, #8]
 800359e:	e7df      	b.n	8003560 <_vfiprintf_r+0x20>
 80035a0:	4b79      	ldr	r3, [pc, #484]	; (8003788 <_vfiprintf_r+0x248>)
 80035a2:	429d      	cmp	r5, r3
 80035a4:	bf08      	it	eq
 80035a6:	68f5      	ldreq	r5, [r6, #12]
 80035a8:	e7da      	b.n	8003560 <_vfiprintf_r+0x20>
 80035aa:	89ab      	ldrh	r3, [r5, #12]
 80035ac:	0598      	lsls	r0, r3, #22
 80035ae:	d4ed      	bmi.n	800358c <_vfiprintf_r+0x4c>
 80035b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035b2:	f7ff ff08 	bl	80033c6 <__retarget_lock_release_recursive>
 80035b6:	e7e9      	b.n	800358c <_vfiprintf_r+0x4c>
 80035b8:	2300      	movs	r3, #0
 80035ba:	9309      	str	r3, [sp, #36]	; 0x24
 80035bc:	2320      	movs	r3, #32
 80035be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035c2:	2330      	movs	r3, #48	; 0x30
 80035c4:	f04f 0901 	mov.w	r9, #1
 80035c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80035cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800378c <_vfiprintf_r+0x24c>
 80035d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035d4:	4623      	mov	r3, r4
 80035d6:	469a      	mov	sl, r3
 80035d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035dc:	b10a      	cbz	r2, 80035e2 <_vfiprintf_r+0xa2>
 80035de:	2a25      	cmp	r2, #37	; 0x25
 80035e0:	d1f9      	bne.n	80035d6 <_vfiprintf_r+0x96>
 80035e2:	ebba 0b04 	subs.w	fp, sl, r4
 80035e6:	d00b      	beq.n	8003600 <_vfiprintf_r+0xc0>
 80035e8:	465b      	mov	r3, fp
 80035ea:	4622      	mov	r2, r4
 80035ec:	4629      	mov	r1, r5
 80035ee:	4630      	mov	r0, r6
 80035f0:	f7ff ff93 	bl	800351a <__sfputs_r>
 80035f4:	3001      	adds	r0, #1
 80035f6:	f000 80aa 	beq.w	800374e <_vfiprintf_r+0x20e>
 80035fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035fc:	445a      	add	r2, fp
 80035fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003600:	f89a 3000 	ldrb.w	r3, [sl]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a2 	beq.w	800374e <_vfiprintf_r+0x20e>
 800360a:	2300      	movs	r3, #0
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003614:	f10a 0a01 	add.w	sl, sl, #1
 8003618:	9304      	str	r3, [sp, #16]
 800361a:	9307      	str	r3, [sp, #28]
 800361c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003620:	931a      	str	r3, [sp, #104]	; 0x68
 8003622:	4654      	mov	r4, sl
 8003624:	2205      	movs	r2, #5
 8003626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800362a:	4858      	ldr	r0, [pc, #352]	; (800378c <_vfiprintf_r+0x24c>)
 800362c:	f000 fcba 	bl	8003fa4 <memchr>
 8003630:	9a04      	ldr	r2, [sp, #16]
 8003632:	b9d8      	cbnz	r0, 800366c <_vfiprintf_r+0x12c>
 8003634:	06d1      	lsls	r1, r2, #27
 8003636:	bf44      	itt	mi
 8003638:	2320      	movmi	r3, #32
 800363a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800363e:	0713      	lsls	r3, r2, #28
 8003640:	bf44      	itt	mi
 8003642:	232b      	movmi	r3, #43	; 0x2b
 8003644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003648:	f89a 3000 	ldrb.w	r3, [sl]
 800364c:	2b2a      	cmp	r3, #42	; 0x2a
 800364e:	d015      	beq.n	800367c <_vfiprintf_r+0x13c>
 8003650:	4654      	mov	r4, sl
 8003652:	2000      	movs	r0, #0
 8003654:	f04f 0c0a 	mov.w	ip, #10
 8003658:	9a07      	ldr	r2, [sp, #28]
 800365a:	4621      	mov	r1, r4
 800365c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003660:	3b30      	subs	r3, #48	; 0x30
 8003662:	2b09      	cmp	r3, #9
 8003664:	d94e      	bls.n	8003704 <_vfiprintf_r+0x1c4>
 8003666:	b1b0      	cbz	r0, 8003696 <_vfiprintf_r+0x156>
 8003668:	9207      	str	r2, [sp, #28]
 800366a:	e014      	b.n	8003696 <_vfiprintf_r+0x156>
 800366c:	eba0 0308 	sub.w	r3, r0, r8
 8003670:	fa09 f303 	lsl.w	r3, r9, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	46a2      	mov	sl, r4
 8003678:	9304      	str	r3, [sp, #16]
 800367a:	e7d2      	b.n	8003622 <_vfiprintf_r+0xe2>
 800367c:	9b03      	ldr	r3, [sp, #12]
 800367e:	1d19      	adds	r1, r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	9103      	str	r1, [sp, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	bfbb      	ittet	lt
 8003688:	425b      	neglt	r3, r3
 800368a:	f042 0202 	orrlt.w	r2, r2, #2
 800368e:	9307      	strge	r3, [sp, #28]
 8003690:	9307      	strlt	r3, [sp, #28]
 8003692:	bfb8      	it	lt
 8003694:	9204      	strlt	r2, [sp, #16]
 8003696:	7823      	ldrb	r3, [r4, #0]
 8003698:	2b2e      	cmp	r3, #46	; 0x2e
 800369a:	d10c      	bne.n	80036b6 <_vfiprintf_r+0x176>
 800369c:	7863      	ldrb	r3, [r4, #1]
 800369e:	2b2a      	cmp	r3, #42	; 0x2a
 80036a0:	d135      	bne.n	800370e <_vfiprintf_r+0x1ce>
 80036a2:	9b03      	ldr	r3, [sp, #12]
 80036a4:	3402      	adds	r4, #2
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	9203      	str	r2, [sp, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bfb8      	it	lt
 80036b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80036b4:	9305      	str	r3, [sp, #20]
 80036b6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003790 <_vfiprintf_r+0x250>
 80036ba:	2203      	movs	r2, #3
 80036bc:	4650      	mov	r0, sl
 80036be:	7821      	ldrb	r1, [r4, #0]
 80036c0:	f000 fc70 	bl	8003fa4 <memchr>
 80036c4:	b140      	cbz	r0, 80036d8 <_vfiprintf_r+0x198>
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	eba0 000a 	sub.w	r0, r0, sl
 80036cc:	fa03 f000 	lsl.w	r0, r3, r0
 80036d0:	9b04      	ldr	r3, [sp, #16]
 80036d2:	3401      	adds	r4, #1
 80036d4:	4303      	orrs	r3, r0
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036dc:	2206      	movs	r2, #6
 80036de:	482d      	ldr	r0, [pc, #180]	; (8003794 <_vfiprintf_r+0x254>)
 80036e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036e4:	f000 fc5e 	bl	8003fa4 <memchr>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d03f      	beq.n	800376c <_vfiprintf_r+0x22c>
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <_vfiprintf_r+0x258>)
 80036ee:	bb1b      	cbnz	r3, 8003738 <_vfiprintf_r+0x1f8>
 80036f0:	9b03      	ldr	r3, [sp, #12]
 80036f2:	3307      	adds	r3, #7
 80036f4:	f023 0307 	bic.w	r3, r3, #7
 80036f8:	3308      	adds	r3, #8
 80036fa:	9303      	str	r3, [sp, #12]
 80036fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036fe:	443b      	add	r3, r7
 8003700:	9309      	str	r3, [sp, #36]	; 0x24
 8003702:	e767      	b.n	80035d4 <_vfiprintf_r+0x94>
 8003704:	460c      	mov	r4, r1
 8003706:	2001      	movs	r0, #1
 8003708:	fb0c 3202 	mla	r2, ip, r2, r3
 800370c:	e7a5      	b.n	800365a <_vfiprintf_r+0x11a>
 800370e:	2300      	movs	r3, #0
 8003710:	f04f 0c0a 	mov.w	ip, #10
 8003714:	4619      	mov	r1, r3
 8003716:	3401      	adds	r4, #1
 8003718:	9305      	str	r3, [sp, #20]
 800371a:	4620      	mov	r0, r4
 800371c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003720:	3a30      	subs	r2, #48	; 0x30
 8003722:	2a09      	cmp	r2, #9
 8003724:	d903      	bls.n	800372e <_vfiprintf_r+0x1ee>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0c5      	beq.n	80036b6 <_vfiprintf_r+0x176>
 800372a:	9105      	str	r1, [sp, #20]
 800372c:	e7c3      	b.n	80036b6 <_vfiprintf_r+0x176>
 800372e:	4604      	mov	r4, r0
 8003730:	2301      	movs	r3, #1
 8003732:	fb0c 2101 	mla	r1, ip, r1, r2
 8003736:	e7f0      	b.n	800371a <_vfiprintf_r+0x1da>
 8003738:	ab03      	add	r3, sp, #12
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	462a      	mov	r2, r5
 800373e:	4630      	mov	r0, r6
 8003740:	4b16      	ldr	r3, [pc, #88]	; (800379c <_vfiprintf_r+0x25c>)
 8003742:	a904      	add	r1, sp, #16
 8003744:	f3af 8000 	nop.w
 8003748:	4607      	mov	r7, r0
 800374a:	1c78      	adds	r0, r7, #1
 800374c:	d1d6      	bne.n	80036fc <_vfiprintf_r+0x1bc>
 800374e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003750:	07d9      	lsls	r1, r3, #31
 8003752:	d405      	bmi.n	8003760 <_vfiprintf_r+0x220>
 8003754:	89ab      	ldrh	r3, [r5, #12]
 8003756:	059a      	lsls	r2, r3, #22
 8003758:	d402      	bmi.n	8003760 <_vfiprintf_r+0x220>
 800375a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800375c:	f7ff fe33 	bl	80033c6 <__retarget_lock_release_recursive>
 8003760:	89ab      	ldrh	r3, [r5, #12]
 8003762:	065b      	lsls	r3, r3, #25
 8003764:	f53f af12 	bmi.w	800358c <_vfiprintf_r+0x4c>
 8003768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800376a:	e711      	b.n	8003590 <_vfiprintf_r+0x50>
 800376c:	ab03      	add	r3, sp, #12
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	462a      	mov	r2, r5
 8003772:	4630      	mov	r0, r6
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <_vfiprintf_r+0x25c>)
 8003776:	a904      	add	r1, sp, #16
 8003778:	f000 f882 	bl	8003880 <_printf_i>
 800377c:	e7e4      	b.n	8003748 <_vfiprintf_r+0x208>
 800377e:	bf00      	nop
 8003780:	08004160 	.word	0x08004160
 8003784:	08004180 	.word	0x08004180
 8003788:	08004140 	.word	0x08004140
 800378c:	080041a0 	.word	0x080041a0
 8003790:	080041a6 	.word	0x080041a6
 8003794:	080041aa 	.word	0x080041aa
 8003798:	00000000 	.word	0x00000000
 800379c:	0800351b 	.word	0x0800351b

080037a0 <_printf_common>:
 80037a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	4616      	mov	r6, r2
 80037a6:	4699      	mov	r9, r3
 80037a8:	688a      	ldr	r2, [r1, #8]
 80037aa:	690b      	ldr	r3, [r1, #16]
 80037ac:	4607      	mov	r7, r0
 80037ae:	4293      	cmp	r3, r2
 80037b0:	bfb8      	it	lt
 80037b2:	4613      	movlt	r3, r2
 80037b4:	6033      	str	r3, [r6, #0]
 80037b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037ba:	460c      	mov	r4, r1
 80037bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037c0:	b10a      	cbz	r2, 80037c6 <_printf_common+0x26>
 80037c2:	3301      	adds	r3, #1
 80037c4:	6033      	str	r3, [r6, #0]
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	0699      	lsls	r1, r3, #26
 80037ca:	bf42      	ittt	mi
 80037cc:	6833      	ldrmi	r3, [r6, #0]
 80037ce:	3302      	addmi	r3, #2
 80037d0:	6033      	strmi	r3, [r6, #0]
 80037d2:	6825      	ldr	r5, [r4, #0]
 80037d4:	f015 0506 	ands.w	r5, r5, #6
 80037d8:	d106      	bne.n	80037e8 <_printf_common+0x48>
 80037da:	f104 0a19 	add.w	sl, r4, #25
 80037de:	68e3      	ldr	r3, [r4, #12]
 80037e0:	6832      	ldr	r2, [r6, #0]
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	42ab      	cmp	r3, r5
 80037e6:	dc28      	bgt.n	800383a <_printf_common+0x9a>
 80037e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037ec:	1e13      	subs	r3, r2, #0
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	bf18      	it	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	0692      	lsls	r2, r2, #26
 80037f6:	d42d      	bmi.n	8003854 <_printf_common+0xb4>
 80037f8:	4649      	mov	r1, r9
 80037fa:	4638      	mov	r0, r7
 80037fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003800:	47c0      	blx	r8
 8003802:	3001      	adds	r0, #1
 8003804:	d020      	beq.n	8003848 <_printf_common+0xa8>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	68e5      	ldr	r5, [r4, #12]
 800380a:	f003 0306 	and.w	r3, r3, #6
 800380e:	2b04      	cmp	r3, #4
 8003810:	bf18      	it	ne
 8003812:	2500      	movne	r5, #0
 8003814:	6832      	ldr	r2, [r6, #0]
 8003816:	f04f 0600 	mov.w	r6, #0
 800381a:	68a3      	ldr	r3, [r4, #8]
 800381c:	bf08      	it	eq
 800381e:	1aad      	subeq	r5, r5, r2
 8003820:	6922      	ldr	r2, [r4, #16]
 8003822:	bf08      	it	eq
 8003824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003828:	4293      	cmp	r3, r2
 800382a:	bfc4      	itt	gt
 800382c:	1a9b      	subgt	r3, r3, r2
 800382e:	18ed      	addgt	r5, r5, r3
 8003830:	341a      	adds	r4, #26
 8003832:	42b5      	cmp	r5, r6
 8003834:	d11a      	bne.n	800386c <_printf_common+0xcc>
 8003836:	2000      	movs	r0, #0
 8003838:	e008      	b.n	800384c <_printf_common+0xac>
 800383a:	2301      	movs	r3, #1
 800383c:	4652      	mov	r2, sl
 800383e:	4649      	mov	r1, r9
 8003840:	4638      	mov	r0, r7
 8003842:	47c0      	blx	r8
 8003844:	3001      	adds	r0, #1
 8003846:	d103      	bne.n	8003850 <_printf_common+0xb0>
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003850:	3501      	adds	r5, #1
 8003852:	e7c4      	b.n	80037de <_printf_common+0x3e>
 8003854:	2030      	movs	r0, #48	; 0x30
 8003856:	18e1      	adds	r1, r4, r3
 8003858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003862:	4422      	add	r2, r4
 8003864:	3302      	adds	r3, #2
 8003866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800386a:	e7c5      	b.n	80037f8 <_printf_common+0x58>
 800386c:	2301      	movs	r3, #1
 800386e:	4622      	mov	r2, r4
 8003870:	4649      	mov	r1, r9
 8003872:	4638      	mov	r0, r7
 8003874:	47c0      	blx	r8
 8003876:	3001      	adds	r0, #1
 8003878:	d0e6      	beq.n	8003848 <_printf_common+0xa8>
 800387a:	3601      	adds	r6, #1
 800387c:	e7d9      	b.n	8003832 <_printf_common+0x92>
	...

08003880 <_printf_i>:
 8003880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003884:	7e0f      	ldrb	r7, [r1, #24]
 8003886:	4691      	mov	r9, r2
 8003888:	2f78      	cmp	r7, #120	; 0x78
 800388a:	4680      	mov	r8, r0
 800388c:	460c      	mov	r4, r1
 800388e:	469a      	mov	sl, r3
 8003890:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003896:	d807      	bhi.n	80038a8 <_printf_i+0x28>
 8003898:	2f62      	cmp	r7, #98	; 0x62
 800389a:	d80a      	bhi.n	80038b2 <_printf_i+0x32>
 800389c:	2f00      	cmp	r7, #0
 800389e:	f000 80d9 	beq.w	8003a54 <_printf_i+0x1d4>
 80038a2:	2f58      	cmp	r7, #88	; 0x58
 80038a4:	f000 80a4 	beq.w	80039f0 <_printf_i+0x170>
 80038a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038b0:	e03a      	b.n	8003928 <_printf_i+0xa8>
 80038b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038b6:	2b15      	cmp	r3, #21
 80038b8:	d8f6      	bhi.n	80038a8 <_printf_i+0x28>
 80038ba:	a101      	add	r1, pc, #4	; (adr r1, 80038c0 <_printf_i+0x40>)
 80038bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038c0:	08003919 	.word	0x08003919
 80038c4:	0800392d 	.word	0x0800392d
 80038c8:	080038a9 	.word	0x080038a9
 80038cc:	080038a9 	.word	0x080038a9
 80038d0:	080038a9 	.word	0x080038a9
 80038d4:	080038a9 	.word	0x080038a9
 80038d8:	0800392d 	.word	0x0800392d
 80038dc:	080038a9 	.word	0x080038a9
 80038e0:	080038a9 	.word	0x080038a9
 80038e4:	080038a9 	.word	0x080038a9
 80038e8:	080038a9 	.word	0x080038a9
 80038ec:	08003a3b 	.word	0x08003a3b
 80038f0:	0800395d 	.word	0x0800395d
 80038f4:	08003a1d 	.word	0x08003a1d
 80038f8:	080038a9 	.word	0x080038a9
 80038fc:	080038a9 	.word	0x080038a9
 8003900:	08003a5d 	.word	0x08003a5d
 8003904:	080038a9 	.word	0x080038a9
 8003908:	0800395d 	.word	0x0800395d
 800390c:	080038a9 	.word	0x080038a9
 8003910:	080038a9 	.word	0x080038a9
 8003914:	08003a25 	.word	0x08003a25
 8003918:	682b      	ldr	r3, [r5, #0]
 800391a:	1d1a      	adds	r2, r3, #4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	602a      	str	r2, [r5, #0]
 8003920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003928:	2301      	movs	r3, #1
 800392a:	e0a4      	b.n	8003a76 <_printf_i+0x1f6>
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	6829      	ldr	r1, [r5, #0]
 8003930:	0606      	lsls	r6, r0, #24
 8003932:	f101 0304 	add.w	r3, r1, #4
 8003936:	d50a      	bpl.n	800394e <_printf_i+0xce>
 8003938:	680e      	ldr	r6, [r1, #0]
 800393a:	602b      	str	r3, [r5, #0]
 800393c:	2e00      	cmp	r6, #0
 800393e:	da03      	bge.n	8003948 <_printf_i+0xc8>
 8003940:	232d      	movs	r3, #45	; 0x2d
 8003942:	4276      	negs	r6, r6
 8003944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003948:	230a      	movs	r3, #10
 800394a:	485e      	ldr	r0, [pc, #376]	; (8003ac4 <_printf_i+0x244>)
 800394c:	e019      	b.n	8003982 <_printf_i+0x102>
 800394e:	680e      	ldr	r6, [r1, #0]
 8003950:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003954:	602b      	str	r3, [r5, #0]
 8003956:	bf18      	it	ne
 8003958:	b236      	sxthne	r6, r6
 800395a:	e7ef      	b.n	800393c <_printf_i+0xbc>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	6820      	ldr	r0, [r4, #0]
 8003960:	1d19      	adds	r1, r3, #4
 8003962:	6029      	str	r1, [r5, #0]
 8003964:	0601      	lsls	r1, r0, #24
 8003966:	d501      	bpl.n	800396c <_printf_i+0xec>
 8003968:	681e      	ldr	r6, [r3, #0]
 800396a:	e002      	b.n	8003972 <_printf_i+0xf2>
 800396c:	0646      	lsls	r6, r0, #25
 800396e:	d5fb      	bpl.n	8003968 <_printf_i+0xe8>
 8003970:	881e      	ldrh	r6, [r3, #0]
 8003972:	2f6f      	cmp	r7, #111	; 0x6f
 8003974:	bf0c      	ite	eq
 8003976:	2308      	moveq	r3, #8
 8003978:	230a      	movne	r3, #10
 800397a:	4852      	ldr	r0, [pc, #328]	; (8003ac4 <_printf_i+0x244>)
 800397c:	2100      	movs	r1, #0
 800397e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003982:	6865      	ldr	r5, [r4, #4]
 8003984:	2d00      	cmp	r5, #0
 8003986:	bfa8      	it	ge
 8003988:	6821      	ldrge	r1, [r4, #0]
 800398a:	60a5      	str	r5, [r4, #8]
 800398c:	bfa4      	itt	ge
 800398e:	f021 0104 	bicge.w	r1, r1, #4
 8003992:	6021      	strge	r1, [r4, #0]
 8003994:	b90e      	cbnz	r6, 800399a <_printf_i+0x11a>
 8003996:	2d00      	cmp	r5, #0
 8003998:	d04d      	beq.n	8003a36 <_printf_i+0x1b6>
 800399a:	4615      	mov	r5, r2
 800399c:	fbb6 f1f3 	udiv	r1, r6, r3
 80039a0:	fb03 6711 	mls	r7, r3, r1, r6
 80039a4:	5dc7      	ldrb	r7, [r0, r7]
 80039a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039aa:	4637      	mov	r7, r6
 80039ac:	42bb      	cmp	r3, r7
 80039ae:	460e      	mov	r6, r1
 80039b0:	d9f4      	bls.n	800399c <_printf_i+0x11c>
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d10b      	bne.n	80039ce <_printf_i+0x14e>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	07de      	lsls	r6, r3, #31
 80039ba:	d508      	bpl.n	80039ce <_printf_i+0x14e>
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	6861      	ldr	r1, [r4, #4]
 80039c0:	4299      	cmp	r1, r3
 80039c2:	bfde      	ittt	le
 80039c4:	2330      	movle	r3, #48	; 0x30
 80039c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039ce:	1b52      	subs	r2, r2, r5
 80039d0:	6122      	str	r2, [r4, #16]
 80039d2:	464b      	mov	r3, r9
 80039d4:	4621      	mov	r1, r4
 80039d6:	4640      	mov	r0, r8
 80039d8:	f8cd a000 	str.w	sl, [sp]
 80039dc:	aa03      	add	r2, sp, #12
 80039de:	f7ff fedf 	bl	80037a0 <_printf_common>
 80039e2:	3001      	adds	r0, #1
 80039e4:	d14c      	bne.n	8003a80 <_printf_i+0x200>
 80039e6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ea:	b004      	add	sp, #16
 80039ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f0:	4834      	ldr	r0, [pc, #208]	; (8003ac4 <_printf_i+0x244>)
 80039f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039f6:	6829      	ldr	r1, [r5, #0]
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80039fe:	6029      	str	r1, [r5, #0]
 8003a00:	061d      	lsls	r5, r3, #24
 8003a02:	d514      	bpl.n	8003a2e <_printf_i+0x1ae>
 8003a04:	07df      	lsls	r7, r3, #31
 8003a06:	bf44      	itt	mi
 8003a08:	f043 0320 	orrmi.w	r3, r3, #32
 8003a0c:	6023      	strmi	r3, [r4, #0]
 8003a0e:	b91e      	cbnz	r6, 8003a18 <_printf_i+0x198>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	f023 0320 	bic.w	r3, r3, #32
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	2310      	movs	r3, #16
 8003a1a:	e7af      	b.n	800397c <_printf_i+0xfc>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	f043 0320 	orr.w	r3, r3, #32
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	2378      	movs	r3, #120	; 0x78
 8003a26:	4828      	ldr	r0, [pc, #160]	; (8003ac8 <_printf_i+0x248>)
 8003a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a2c:	e7e3      	b.n	80039f6 <_printf_i+0x176>
 8003a2e:	0659      	lsls	r1, r3, #25
 8003a30:	bf48      	it	mi
 8003a32:	b2b6      	uxthmi	r6, r6
 8003a34:	e7e6      	b.n	8003a04 <_printf_i+0x184>
 8003a36:	4615      	mov	r5, r2
 8003a38:	e7bb      	b.n	80039b2 <_printf_i+0x132>
 8003a3a:	682b      	ldr	r3, [r5, #0]
 8003a3c:	6826      	ldr	r6, [r4, #0]
 8003a3e:	1d18      	adds	r0, r3, #4
 8003a40:	6961      	ldr	r1, [r4, #20]
 8003a42:	6028      	str	r0, [r5, #0]
 8003a44:	0635      	lsls	r5, r6, #24
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	d501      	bpl.n	8003a4e <_printf_i+0x1ce>
 8003a4a:	6019      	str	r1, [r3, #0]
 8003a4c:	e002      	b.n	8003a54 <_printf_i+0x1d4>
 8003a4e:	0670      	lsls	r0, r6, #25
 8003a50:	d5fb      	bpl.n	8003a4a <_printf_i+0x1ca>
 8003a52:	8019      	strh	r1, [r3, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	4615      	mov	r5, r2
 8003a58:	6123      	str	r3, [r4, #16]
 8003a5a:	e7ba      	b.n	80039d2 <_printf_i+0x152>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	1d1a      	adds	r2, r3, #4
 8003a62:	602a      	str	r2, [r5, #0]
 8003a64:	681d      	ldr	r5, [r3, #0]
 8003a66:	6862      	ldr	r2, [r4, #4]
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 fa9b 	bl	8003fa4 <memchr>
 8003a6e:	b108      	cbz	r0, 8003a74 <_printf_i+0x1f4>
 8003a70:	1b40      	subs	r0, r0, r5
 8003a72:	6060      	str	r0, [r4, #4]
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7e:	e7a8      	b.n	80039d2 <_printf_i+0x152>
 8003a80:	462a      	mov	r2, r5
 8003a82:	4649      	mov	r1, r9
 8003a84:	4640      	mov	r0, r8
 8003a86:	6923      	ldr	r3, [r4, #16]
 8003a88:	47d0      	blx	sl
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d0ab      	beq.n	80039e6 <_printf_i+0x166>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	079b      	lsls	r3, r3, #30
 8003a92:	d413      	bmi.n	8003abc <_printf_i+0x23c>
 8003a94:	68e0      	ldr	r0, [r4, #12]
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	bfb8      	it	lt
 8003a9c:	4618      	movlt	r0, r3
 8003a9e:	e7a4      	b.n	80039ea <_printf_i+0x16a>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	4632      	mov	r2, r6
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	47d0      	blx	sl
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d09b      	beq.n	80039e6 <_printf_i+0x166>
 8003aae:	3501      	adds	r5, #1
 8003ab0:	68e3      	ldr	r3, [r4, #12]
 8003ab2:	9903      	ldr	r1, [sp, #12]
 8003ab4:	1a5b      	subs	r3, r3, r1
 8003ab6:	42ab      	cmp	r3, r5
 8003ab8:	dcf2      	bgt.n	8003aa0 <_printf_i+0x220>
 8003aba:	e7eb      	b.n	8003a94 <_printf_i+0x214>
 8003abc:	2500      	movs	r5, #0
 8003abe:	f104 0619 	add.w	r6, r4, #25
 8003ac2:	e7f5      	b.n	8003ab0 <_printf_i+0x230>
 8003ac4:	080041b1 	.word	0x080041b1
 8003ac8:	080041c2 	.word	0x080041c2

08003acc <_sbrk_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4d05      	ldr	r5, [pc, #20]	; (8003ae8 <_sbrk_r+0x1c>)
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fc fec6 	bl	8000868 <_sbrk>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_sbrk_r+0x1a>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_sbrk_r+0x1a>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	20000160 	.word	0x20000160

08003aec <__sread>:
 8003aec:	b510      	push	{r4, lr}
 8003aee:	460c      	mov	r4, r1
 8003af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af4:	f000 fab8 	bl	8004068 <_read_r>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	bfab      	itete	ge
 8003afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003afe:	89a3      	ldrhlt	r3, [r4, #12]
 8003b00:	181b      	addge	r3, r3, r0
 8003b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b06:	bfac      	ite	ge
 8003b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b0a:	81a3      	strhlt	r3, [r4, #12]
 8003b0c:	bd10      	pop	{r4, pc}

08003b0e <__swrite>:
 8003b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b12:	461f      	mov	r7, r3
 8003b14:	898b      	ldrh	r3, [r1, #12]
 8003b16:	4605      	mov	r5, r0
 8003b18:	05db      	lsls	r3, r3, #23
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4616      	mov	r6, r2
 8003b1e:	d505      	bpl.n	8003b2c <__swrite+0x1e>
 8003b20:	2302      	movs	r3, #2
 8003b22:	2200      	movs	r2, #0
 8003b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b28:	f000 f9c4 	bl	8003eb4 <_lseek_r>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	4632      	mov	r2, r6
 8003b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	4628      	mov	r0, r5
 8003b38:	463b      	mov	r3, r7
 8003b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b42:	f000 b869 	b.w	8003c18 <_write_r>

08003b46 <__sseek>:
 8003b46:	b510      	push	{r4, lr}
 8003b48:	460c      	mov	r4, r1
 8003b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b4e:	f000 f9b1 	bl	8003eb4 <_lseek_r>
 8003b52:	1c43      	adds	r3, r0, #1
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	bf15      	itete	ne
 8003b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b62:	81a3      	strheq	r3, [r4, #12]
 8003b64:	bf18      	it	ne
 8003b66:	81a3      	strhne	r3, [r4, #12]
 8003b68:	bd10      	pop	{r4, pc}

08003b6a <__sclose>:
 8003b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b6e:	f000 b8d3 	b.w	8003d18 <_close_r>
	...

08003b74 <__swbuf_r>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	460e      	mov	r6, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	b118      	cbz	r0, 8003b86 <__swbuf_r+0x12>
 8003b7e:	6983      	ldr	r3, [r0, #24]
 8003b80:	b90b      	cbnz	r3, 8003b86 <__swbuf_r+0x12>
 8003b82:	f7ff fb81 	bl	8003288 <__sinit>
 8003b86:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <__swbuf_r+0x98>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d12b      	bne.n	8003be4 <__swbuf_r+0x70>
 8003b8c:	686c      	ldr	r4, [r5, #4]
 8003b8e:	69a3      	ldr	r3, [r4, #24]
 8003b90:	60a3      	str	r3, [r4, #8]
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	071a      	lsls	r2, r3, #28
 8003b96:	d52f      	bpl.n	8003bf8 <__swbuf_r+0x84>
 8003b98:	6923      	ldr	r3, [r4, #16]
 8003b9a:	b36b      	cbz	r3, 8003bf8 <__swbuf_r+0x84>
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	b2f6      	uxtb	r6, r6
 8003ba2:	1ac0      	subs	r0, r0, r3
 8003ba4:	6963      	ldr	r3, [r4, #20]
 8003ba6:	4637      	mov	r7, r6
 8003ba8:	4283      	cmp	r3, r0
 8003baa:	dc04      	bgt.n	8003bb6 <__swbuf_r+0x42>
 8003bac:	4621      	mov	r1, r4
 8003bae:	4628      	mov	r0, r5
 8003bb0:	f000 f944 	bl	8003e3c <_fflush_r>
 8003bb4:	bb30      	cbnz	r0, 8003c04 <__swbuf_r+0x90>
 8003bb6:	68a3      	ldr	r3, [r4, #8]
 8003bb8:	3001      	adds	r0, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60a3      	str	r3, [r4, #8]
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	6022      	str	r2, [r4, #0]
 8003bc4:	701e      	strb	r6, [r3, #0]
 8003bc6:	6963      	ldr	r3, [r4, #20]
 8003bc8:	4283      	cmp	r3, r0
 8003bca:	d004      	beq.n	8003bd6 <__swbuf_r+0x62>
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	07db      	lsls	r3, r3, #31
 8003bd0:	d506      	bpl.n	8003be0 <__swbuf_r+0x6c>
 8003bd2:	2e0a      	cmp	r6, #10
 8003bd4:	d104      	bne.n	8003be0 <__swbuf_r+0x6c>
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f000 f92f 	bl	8003e3c <_fflush_r>
 8003bde:	b988      	cbnz	r0, 8003c04 <__swbuf_r+0x90>
 8003be0:	4638      	mov	r0, r7
 8003be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <__swbuf_r+0x9c>)
 8003be6:	429c      	cmp	r4, r3
 8003be8:	d101      	bne.n	8003bee <__swbuf_r+0x7a>
 8003bea:	68ac      	ldr	r4, [r5, #8]
 8003bec:	e7cf      	b.n	8003b8e <__swbuf_r+0x1a>
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <__swbuf_r+0xa0>)
 8003bf0:	429c      	cmp	r4, r3
 8003bf2:	bf08      	it	eq
 8003bf4:	68ec      	ldreq	r4, [r5, #12]
 8003bf6:	e7ca      	b.n	8003b8e <__swbuf_r+0x1a>
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f000 f81e 	bl	8003c3c <__swsetup_r>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d0cb      	beq.n	8003b9c <__swbuf_r+0x28>
 8003c04:	f04f 37ff 	mov.w	r7, #4294967295
 8003c08:	e7ea      	b.n	8003be0 <__swbuf_r+0x6c>
 8003c0a:	bf00      	nop
 8003c0c:	08004160 	.word	0x08004160
 8003c10:	08004180 	.word	0x08004180
 8003c14:	08004140 	.word	0x08004140

08003c18 <_write_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	2200      	movs	r2, #0
 8003c22:	4d05      	ldr	r5, [pc, #20]	; (8003c38 <_write_r+0x20>)
 8003c24:	602a      	str	r2, [r5, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	f7fc fdd1 	bl	80007ce <_write>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_write_r+0x1e>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_write_r+0x1e>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	20000160 	.word	0x20000160

08003c3c <__swsetup_r>:
 8003c3c:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <__swsetup_r+0xcc>)
 8003c3e:	b570      	push	{r4, r5, r6, lr}
 8003c40:	681d      	ldr	r5, [r3, #0]
 8003c42:	4606      	mov	r6, r0
 8003c44:	460c      	mov	r4, r1
 8003c46:	b125      	cbz	r5, 8003c52 <__swsetup_r+0x16>
 8003c48:	69ab      	ldr	r3, [r5, #24]
 8003c4a:	b913      	cbnz	r3, 8003c52 <__swsetup_r+0x16>
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f7ff fb1b 	bl	8003288 <__sinit>
 8003c52:	4b2e      	ldr	r3, [pc, #184]	; (8003d0c <__swsetup_r+0xd0>)
 8003c54:	429c      	cmp	r4, r3
 8003c56:	d10f      	bne.n	8003c78 <__swsetup_r+0x3c>
 8003c58:	686c      	ldr	r4, [r5, #4]
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c60:	0719      	lsls	r1, r3, #28
 8003c62:	d42c      	bmi.n	8003cbe <__swsetup_r+0x82>
 8003c64:	06dd      	lsls	r5, r3, #27
 8003c66:	d411      	bmi.n	8003c8c <__swsetup_r+0x50>
 8003c68:	2309      	movs	r3, #9
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	81a3      	strh	r3, [r4, #12]
 8003c76:	e03e      	b.n	8003cf6 <__swsetup_r+0xba>
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <__swsetup_r+0xd4>)
 8003c7a:	429c      	cmp	r4, r3
 8003c7c:	d101      	bne.n	8003c82 <__swsetup_r+0x46>
 8003c7e:	68ac      	ldr	r4, [r5, #8]
 8003c80:	e7eb      	b.n	8003c5a <__swsetup_r+0x1e>
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <__swsetup_r+0xd8>)
 8003c84:	429c      	cmp	r4, r3
 8003c86:	bf08      	it	eq
 8003c88:	68ec      	ldreq	r4, [r5, #12]
 8003c8a:	e7e6      	b.n	8003c5a <__swsetup_r+0x1e>
 8003c8c:	0758      	lsls	r0, r3, #29
 8003c8e:	d512      	bpl.n	8003cb6 <__swsetup_r+0x7a>
 8003c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c92:	b141      	cbz	r1, 8003ca6 <__swsetup_r+0x6a>
 8003c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	d002      	beq.n	8003ca2 <__swsetup_r+0x66>
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	f000 f99b 	bl	8003fd8 <_free_r>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cac:	81a3      	strh	r3, [r4, #12]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6063      	str	r3, [r4, #4]
 8003cb2:	6923      	ldr	r3, [r4, #16]
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	f043 0308 	orr.w	r3, r3, #8
 8003cbc:	81a3      	strh	r3, [r4, #12]
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	b94b      	cbnz	r3, 8003cd6 <__swsetup_r+0x9a>
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ccc:	d003      	beq.n	8003cd6 <__swsetup_r+0x9a>
 8003cce:	4621      	mov	r1, r4
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f000 f927 	bl	8003f24 <__smakebuf_r>
 8003cd6:	89a0      	ldrh	r0, [r4, #12]
 8003cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cdc:	f010 0301 	ands.w	r3, r0, #1
 8003ce0:	d00a      	beq.n	8003cf8 <__swsetup_r+0xbc>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60a3      	str	r3, [r4, #8]
 8003ce6:	6963      	ldr	r3, [r4, #20]
 8003ce8:	425b      	negs	r3, r3
 8003cea:	61a3      	str	r3, [r4, #24]
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	b943      	cbnz	r3, 8003d02 <__swsetup_r+0xc6>
 8003cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003cf4:	d1ba      	bne.n	8003c6c <__swsetup_r+0x30>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	0781      	lsls	r1, r0, #30
 8003cfa:	bf58      	it	pl
 8003cfc:	6963      	ldrpl	r3, [r4, #20]
 8003cfe:	60a3      	str	r3, [r4, #8]
 8003d00:	e7f4      	b.n	8003cec <__swsetup_r+0xb0>
 8003d02:	2000      	movs	r0, #0
 8003d04:	e7f7      	b.n	8003cf6 <__swsetup_r+0xba>
 8003d06:	bf00      	nop
 8003d08:	2000004c 	.word	0x2000004c
 8003d0c:	08004160 	.word	0x08004160
 8003d10:	08004180 	.word	0x08004180
 8003d14:	08004140 	.word	0x08004140

08003d18 <_close_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4d05      	ldr	r5, [pc, #20]	; (8003d34 <_close_r+0x1c>)
 8003d1e:	4604      	mov	r4, r0
 8003d20:	4608      	mov	r0, r1
 8003d22:	602b      	str	r3, [r5, #0]
 8003d24:	f7fc fd6f 	bl	8000806 <_close>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	d102      	bne.n	8003d32 <_close_r+0x1a>
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	b103      	cbz	r3, 8003d32 <_close_r+0x1a>
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	bd38      	pop	{r3, r4, r5, pc}
 8003d34:	20000160 	.word	0x20000160

08003d38 <__sflush_r>:
 8003d38:	898a      	ldrh	r2, [r1, #12]
 8003d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	0710      	lsls	r0, r2, #28
 8003d40:	460c      	mov	r4, r1
 8003d42:	d457      	bmi.n	8003df4 <__sflush_r+0xbc>
 8003d44:	684b      	ldr	r3, [r1, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	dc04      	bgt.n	8003d54 <__sflush_r+0x1c>
 8003d4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	dc01      	bgt.n	8003d54 <__sflush_r+0x1c>
 8003d50:	2000      	movs	r0, #0
 8003d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d56:	2e00      	cmp	r6, #0
 8003d58:	d0fa      	beq.n	8003d50 <__sflush_r+0x18>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d60:	682f      	ldr	r7, [r5, #0]
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	d032      	beq.n	8003dcc <__sflush_r+0x94>
 8003d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	075a      	lsls	r2, r3, #29
 8003d6c:	d505      	bpl.n	8003d7a <__sflush_r+0x42>
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	1ac0      	subs	r0, r0, r3
 8003d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d74:	b10b      	cbz	r3, 8003d7a <__sflush_r+0x42>
 8003d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d78:	1ac0      	subs	r0, r0, r3
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d80:	4628      	mov	r0, r5
 8003d82:	6a21      	ldr	r1, [r4, #32]
 8003d84:	47b0      	blx	r6
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	d106      	bne.n	8003d9a <__sflush_r+0x62>
 8003d8c:	6829      	ldr	r1, [r5, #0]
 8003d8e:	291d      	cmp	r1, #29
 8003d90:	d82c      	bhi.n	8003dec <__sflush_r+0xb4>
 8003d92:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <__sflush_r+0x100>)
 8003d94:	40ca      	lsrs	r2, r1
 8003d96:	07d6      	lsls	r6, r2, #31
 8003d98:	d528      	bpl.n	8003dec <__sflush_r+0xb4>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	6062      	str	r2, [r4, #4]
 8003d9e:	6922      	ldr	r2, [r4, #16]
 8003da0:	04d9      	lsls	r1, r3, #19
 8003da2:	6022      	str	r2, [r4, #0]
 8003da4:	d504      	bpl.n	8003db0 <__sflush_r+0x78>
 8003da6:	1c42      	adds	r2, r0, #1
 8003da8:	d101      	bne.n	8003dae <__sflush_r+0x76>
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	b903      	cbnz	r3, 8003db0 <__sflush_r+0x78>
 8003dae:	6560      	str	r0, [r4, #84]	; 0x54
 8003db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003db2:	602f      	str	r7, [r5, #0]
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d0cb      	beq.n	8003d50 <__sflush_r+0x18>
 8003db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dbc:	4299      	cmp	r1, r3
 8003dbe:	d002      	beq.n	8003dc6 <__sflush_r+0x8e>
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 f909 	bl	8003fd8 <_free_r>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8003dca:	e7c2      	b.n	8003d52 <__sflush_r+0x1a>
 8003dcc:	6a21      	ldr	r1, [r4, #32]
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	47b0      	blx	r6
 8003dd4:	1c41      	adds	r1, r0, #1
 8003dd6:	d1c7      	bne.n	8003d68 <__sflush_r+0x30>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0c4      	beq.n	8003d68 <__sflush_r+0x30>
 8003dde:	2b1d      	cmp	r3, #29
 8003de0:	d001      	beq.n	8003de6 <__sflush_r+0xae>
 8003de2:	2b16      	cmp	r3, #22
 8003de4:	d101      	bne.n	8003dea <__sflush_r+0xb2>
 8003de6:	602f      	str	r7, [r5, #0]
 8003de8:	e7b2      	b.n	8003d50 <__sflush_r+0x18>
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	e7ae      	b.n	8003d52 <__sflush_r+0x1a>
 8003df4:	690f      	ldr	r7, [r1, #16]
 8003df6:	2f00      	cmp	r7, #0
 8003df8:	d0aa      	beq.n	8003d50 <__sflush_r+0x18>
 8003dfa:	0793      	lsls	r3, r2, #30
 8003dfc:	bf18      	it	ne
 8003dfe:	2300      	movne	r3, #0
 8003e00:	680e      	ldr	r6, [r1, #0]
 8003e02:	bf08      	it	eq
 8003e04:	694b      	ldreq	r3, [r1, #20]
 8003e06:	1bf6      	subs	r6, r6, r7
 8003e08:	600f      	str	r7, [r1, #0]
 8003e0a:	608b      	str	r3, [r1, #8]
 8003e0c:	2e00      	cmp	r6, #0
 8003e0e:	dd9f      	ble.n	8003d50 <__sflush_r+0x18>
 8003e10:	4633      	mov	r3, r6
 8003e12:	463a      	mov	r2, r7
 8003e14:	4628      	mov	r0, r5
 8003e16:	6a21      	ldr	r1, [r4, #32]
 8003e18:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003e1c:	47e0      	blx	ip
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	dc06      	bgt.n	8003e30 <__sflush_r+0xf8>
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e2c:	81a3      	strh	r3, [r4, #12]
 8003e2e:	e790      	b.n	8003d52 <__sflush_r+0x1a>
 8003e30:	4407      	add	r7, r0
 8003e32:	1a36      	subs	r6, r6, r0
 8003e34:	e7ea      	b.n	8003e0c <__sflush_r+0xd4>
 8003e36:	bf00      	nop
 8003e38:	20400001 	.word	0x20400001

08003e3c <_fflush_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	690b      	ldr	r3, [r1, #16]
 8003e40:	4605      	mov	r5, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	b913      	cbnz	r3, 8003e4c <_fflush_r+0x10>
 8003e46:	2500      	movs	r5, #0
 8003e48:	4628      	mov	r0, r5
 8003e4a:	bd38      	pop	{r3, r4, r5, pc}
 8003e4c:	b118      	cbz	r0, 8003e56 <_fflush_r+0x1a>
 8003e4e:	6983      	ldr	r3, [r0, #24]
 8003e50:	b90b      	cbnz	r3, 8003e56 <_fflush_r+0x1a>
 8003e52:	f7ff fa19 	bl	8003288 <__sinit>
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <_fflush_r+0x6c>)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	d11b      	bne.n	8003e94 <_fflush_r+0x58>
 8003e5c:	686c      	ldr	r4, [r5, #4]
 8003e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ef      	beq.n	8003e46 <_fflush_r+0xa>
 8003e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e68:	07d0      	lsls	r0, r2, #31
 8003e6a:	d404      	bmi.n	8003e76 <_fflush_r+0x3a>
 8003e6c:	0599      	lsls	r1, r3, #22
 8003e6e:	d402      	bmi.n	8003e76 <_fflush_r+0x3a>
 8003e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e72:	f7ff faa7 	bl	80033c4 <__retarget_lock_acquire_recursive>
 8003e76:	4628      	mov	r0, r5
 8003e78:	4621      	mov	r1, r4
 8003e7a:	f7ff ff5d 	bl	8003d38 <__sflush_r>
 8003e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e80:	4605      	mov	r5, r0
 8003e82:	07da      	lsls	r2, r3, #31
 8003e84:	d4e0      	bmi.n	8003e48 <_fflush_r+0xc>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	059b      	lsls	r3, r3, #22
 8003e8a:	d4dd      	bmi.n	8003e48 <_fflush_r+0xc>
 8003e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8e:	f7ff fa9a 	bl	80033c6 <__retarget_lock_release_recursive>
 8003e92:	e7d9      	b.n	8003e48 <_fflush_r+0xc>
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <_fflush_r+0x70>)
 8003e96:	429c      	cmp	r4, r3
 8003e98:	d101      	bne.n	8003e9e <_fflush_r+0x62>
 8003e9a:	68ac      	ldr	r4, [r5, #8]
 8003e9c:	e7df      	b.n	8003e5e <_fflush_r+0x22>
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <_fflush_r+0x74>)
 8003ea0:	429c      	cmp	r4, r3
 8003ea2:	bf08      	it	eq
 8003ea4:	68ec      	ldreq	r4, [r5, #12]
 8003ea6:	e7da      	b.n	8003e5e <_fflush_r+0x22>
 8003ea8:	08004160 	.word	0x08004160
 8003eac:	08004180 	.word	0x08004180
 8003eb0:	08004140 	.word	0x08004140

08003eb4 <_lseek_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	4d05      	ldr	r5, [pc, #20]	; (8003ed4 <_lseek_r+0x20>)
 8003ec0:	602a      	str	r2, [r5, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f7fc fcc3 	bl	800084e <_lseek>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_lseek_r+0x1e>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_lseek_r+0x1e>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	20000160 	.word	0x20000160

08003ed8 <__swhatbuf_r>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	460e      	mov	r6, r1
 8003edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	2900      	cmp	r1, #0
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	b096      	sub	sp, #88	; 0x58
 8003ee8:	da08      	bge.n	8003efc <__swhatbuf_r+0x24>
 8003eea:	2200      	movs	r2, #0
 8003eec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ef0:	602a      	str	r2, [r5, #0]
 8003ef2:	061a      	lsls	r2, r3, #24
 8003ef4:	d410      	bmi.n	8003f18 <__swhatbuf_r+0x40>
 8003ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003efa:	e00e      	b.n	8003f1a <__swhatbuf_r+0x42>
 8003efc:	466a      	mov	r2, sp
 8003efe:	f000 f8c5 	bl	800408c <_fstat_r>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	dbf1      	blt.n	8003eea <__swhatbuf_r+0x12>
 8003f06:	9a01      	ldr	r2, [sp, #4]
 8003f08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f10:	425a      	negs	r2, r3
 8003f12:	415a      	adcs	r2, r3
 8003f14:	602a      	str	r2, [r5, #0]
 8003f16:	e7ee      	b.n	8003ef6 <__swhatbuf_r+0x1e>
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	b016      	add	sp, #88	; 0x58
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f24 <__smakebuf_r>:
 8003f24:	898b      	ldrh	r3, [r1, #12]
 8003f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f28:	079d      	lsls	r5, r3, #30
 8003f2a:	4606      	mov	r6, r0
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	d507      	bpl.n	8003f40 <__smakebuf_r+0x1c>
 8003f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	6123      	str	r3, [r4, #16]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	6163      	str	r3, [r4, #20]
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	466a      	mov	r2, sp
 8003f42:	ab01      	add	r3, sp, #4
 8003f44:	f7ff ffc8 	bl	8003ed8 <__swhatbuf_r>
 8003f48:	9900      	ldr	r1, [sp, #0]
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7ff fa5b 	bl	8003408 <_malloc_r>
 8003f52:	b948      	cbnz	r0, 8003f68 <__smakebuf_r+0x44>
 8003f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f58:	059a      	lsls	r2, r3, #22
 8003f5a:	d4ef      	bmi.n	8003f3c <__smakebuf_r+0x18>
 8003f5c:	f023 0303 	bic.w	r3, r3, #3
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	e7e3      	b.n	8003f30 <__smakebuf_r+0xc>
 8003f68:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <__smakebuf_r+0x7c>)
 8003f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	6020      	str	r0, [r4, #0]
 8003f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f74:	81a3      	strh	r3, [r4, #12]
 8003f76:	9b00      	ldr	r3, [sp, #0]
 8003f78:	6120      	str	r0, [r4, #16]
 8003f7a:	6163      	str	r3, [r4, #20]
 8003f7c:	9b01      	ldr	r3, [sp, #4]
 8003f7e:	b15b      	cbz	r3, 8003f98 <__smakebuf_r+0x74>
 8003f80:	4630      	mov	r0, r6
 8003f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f86:	f000 f893 	bl	80040b0 <_isatty_r>
 8003f8a:	b128      	cbz	r0, 8003f98 <__smakebuf_r+0x74>
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	f023 0303 	bic.w	r3, r3, #3
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	81a3      	strh	r3, [r4, #12]
 8003f98:	89a0      	ldrh	r0, [r4, #12]
 8003f9a:	4305      	orrs	r5, r0
 8003f9c:	81a5      	strh	r5, [r4, #12]
 8003f9e:	e7cd      	b.n	8003f3c <__smakebuf_r+0x18>
 8003fa0:	08003221 	.word	0x08003221

08003fa4 <memchr>:
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	b510      	push	{r4, lr}
 8003fa8:	b2c9      	uxtb	r1, r1
 8003faa:	4402      	add	r2, r0
 8003fac:	4293      	cmp	r3, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	d101      	bne.n	8003fb6 <memchr+0x12>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	e003      	b.n	8003fbe <memchr+0x1a>
 8003fb6:	7804      	ldrb	r4, [r0, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	428c      	cmp	r4, r1
 8003fbc:	d1f6      	bne.n	8003fac <memchr+0x8>
 8003fbe:	bd10      	pop	{r4, pc}

08003fc0 <__malloc_lock>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	; (8003fc8 <__malloc_lock+0x8>)
 8003fc2:	f7ff b9ff 	b.w	80033c4 <__retarget_lock_acquire_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	20000154 	.word	0x20000154

08003fcc <__malloc_unlock>:
 8003fcc:	4801      	ldr	r0, [pc, #4]	; (8003fd4 <__malloc_unlock+0x8>)
 8003fce:	f7ff b9fa 	b.w	80033c6 <__retarget_lock_release_recursive>
 8003fd2:	bf00      	nop
 8003fd4:	20000154 	.word	0x20000154

08003fd8 <_free_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4605      	mov	r5, r0
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	d040      	beq.n	8004062 <_free_r+0x8a>
 8003fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fe4:	1f0c      	subs	r4, r1, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bfb8      	it	lt
 8003fea:	18e4      	addlt	r4, r4, r3
 8003fec:	f7ff ffe8 	bl	8003fc0 <__malloc_lock>
 8003ff0:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <_free_r+0x8c>)
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	b933      	cbnz	r3, 8004004 <_free_r+0x2c>
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	6014      	str	r4, [r2, #0]
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004000:	f7ff bfe4 	b.w	8003fcc <__malloc_unlock>
 8004004:	42a3      	cmp	r3, r4
 8004006:	d908      	bls.n	800401a <_free_r+0x42>
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	1821      	adds	r1, r4, r0
 800400c:	428b      	cmp	r3, r1
 800400e:	bf01      	itttt	eq
 8004010:	6819      	ldreq	r1, [r3, #0]
 8004012:	685b      	ldreq	r3, [r3, #4]
 8004014:	1809      	addeq	r1, r1, r0
 8004016:	6021      	streq	r1, [r4, #0]
 8004018:	e7ed      	b.n	8003ff6 <_free_r+0x1e>
 800401a:	461a      	mov	r2, r3
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	b10b      	cbz	r3, 8004024 <_free_r+0x4c>
 8004020:	42a3      	cmp	r3, r4
 8004022:	d9fa      	bls.n	800401a <_free_r+0x42>
 8004024:	6811      	ldr	r1, [r2, #0]
 8004026:	1850      	adds	r0, r2, r1
 8004028:	42a0      	cmp	r0, r4
 800402a:	d10b      	bne.n	8004044 <_free_r+0x6c>
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	4401      	add	r1, r0
 8004030:	1850      	adds	r0, r2, r1
 8004032:	4283      	cmp	r3, r0
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	d1e0      	bne.n	8003ffa <_free_r+0x22>
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4401      	add	r1, r0
 800403e:	6011      	str	r1, [r2, #0]
 8004040:	6053      	str	r3, [r2, #4]
 8004042:	e7da      	b.n	8003ffa <_free_r+0x22>
 8004044:	d902      	bls.n	800404c <_free_r+0x74>
 8004046:	230c      	movs	r3, #12
 8004048:	602b      	str	r3, [r5, #0]
 800404a:	e7d6      	b.n	8003ffa <_free_r+0x22>
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	1821      	adds	r1, r4, r0
 8004050:	428b      	cmp	r3, r1
 8004052:	bf01      	itttt	eq
 8004054:	6819      	ldreq	r1, [r3, #0]
 8004056:	685b      	ldreq	r3, [r3, #4]
 8004058:	1809      	addeq	r1, r1, r0
 800405a:	6021      	streq	r1, [r4, #0]
 800405c:	6063      	str	r3, [r4, #4]
 800405e:	6054      	str	r4, [r2, #4]
 8004060:	e7cb      	b.n	8003ffa <_free_r+0x22>
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	20000158 	.word	0x20000158

08004068 <_read_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	2200      	movs	r2, #0
 8004072:	4d05      	ldr	r5, [pc, #20]	; (8004088 <_read_r+0x20>)
 8004074:	602a      	str	r2, [r5, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	f7fc fb8c 	bl	8000794 <_read>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_read_r+0x1e>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_read_r+0x1e>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	20000160 	.word	0x20000160

0800408c <_fstat_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	2300      	movs	r3, #0
 8004090:	4d06      	ldr	r5, [pc, #24]	; (80040ac <_fstat_r+0x20>)
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	f7fc fbbf 	bl	800081c <_fstat>
 800409e:	1c43      	adds	r3, r0, #1
 80040a0:	d102      	bne.n	80040a8 <_fstat_r+0x1c>
 80040a2:	682b      	ldr	r3, [r5, #0]
 80040a4:	b103      	cbz	r3, 80040a8 <_fstat_r+0x1c>
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	bd38      	pop	{r3, r4, r5, pc}
 80040aa:	bf00      	nop
 80040ac:	20000160 	.word	0x20000160

080040b0 <_isatty_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	2300      	movs	r3, #0
 80040b4:	4d05      	ldr	r5, [pc, #20]	; (80040cc <_isatty_r+0x1c>)
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f7fc fbbd 	bl	800083a <_isatty>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_isatty_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_isatty_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000160 	.word	0x20000160

080040d0 <_init>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	bf00      	nop
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr

080040dc <_fini>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	bf00      	nop
 80040e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e2:	bc08      	pop	{r3}
 80040e4:	469e      	mov	lr, r3
 80040e6:	4770      	bx	lr
