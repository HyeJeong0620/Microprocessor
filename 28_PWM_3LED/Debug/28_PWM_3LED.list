
28_PWM_3LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b8  080039b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080039b8  080039b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039b8  080039b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003a30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003a30  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb8c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ee  00000000  00000000  0002bc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183fe  00000000  00000000  0002edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccfa  00000000  00000000  000471ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b966  00000000  00000000  00053ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df80e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cdc  00000000  00000000  000df860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080037f4 	.word	0x080037f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080037f4 	.word	0x080037f4

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800015a:	2201      	movs	r2, #1
 800015c:	4808      	ldr	r0, [pc, #32]	; (8000180 <__io_putchar+0x34>)
 800015e:	f002 f941 	bl	80023e4 <HAL_UART_Transmit>
   if (ch == '\n') {
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b0a      	cmp	r3, #10
 8000166:	d106      	bne.n	8000176 <__io_putchar+0x2a>
      HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 1000);
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	2201      	movs	r2, #1
 800016e:	4905      	ldr	r1, [pc, #20]	; (8000184 <__io_putchar+0x38>)
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <__io_putchar+0x34>)
 8000172:	f002 f937 	bl	80023e4 <HAL_UART_Transmit>
   }
   return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000d4 	.word	0x200000d4
 8000184:	0800380c 	.word	0x0800380c

08000188 <print123_pwm>:

void print123_pwm() {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af02      	add	r7, sp, #8
  led_arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <print123_pwm+0x5c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000194:	b29a      	uxth	r2, r3
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <print123_pwm+0x60>)
 8000198:	801a      	strh	r2, [r3, #0]
  led_ccr1 = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
 800019a:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <print123_pwm+0x5c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001a0:	b29a      	uxth	r2, r3
 80001a2:	4b12      	ldr	r3, [pc, #72]	; (80001ec <print123_pwm+0x64>)
 80001a4:	801a      	strh	r2, [r3, #0]
  led_ccr2 = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2);
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <print123_pwm+0x5c>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80001ac:	b29a      	uxth	r2, r3
 80001ae:	4b10      	ldr	r3, [pc, #64]	; (80001f0 <print123_pwm+0x68>)
 80001b0:	801a      	strh	r2, [r3, #0]
  led_ccr3 = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_3);
 80001b2:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <print123_pwm+0x5c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80001b8:	b29a      	uxth	r2, r3
 80001ba:	4b0e      	ldr	r3, [pc, #56]	; (80001f4 <print123_pwm+0x6c>)
 80001bc:	801a      	strh	r2, [r3, #0]
  printf("ARR : %d, CCR1 : %d, CCR2 : %d, CCR3 : %d\n\n", led_arr, led_ccr1, led_ccr2, led_ccr3);
 80001be:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <print123_pwm+0x60>)
 80001c0:	881b      	ldrh	r3, [r3, #0]
 80001c2:	4619      	mov	r1, r3
 80001c4:	4b09      	ldr	r3, [pc, #36]	; (80001ec <print123_pwm+0x64>)
 80001c6:	881b      	ldrh	r3, [r3, #0]
 80001c8:	461a      	mov	r2, r3
 80001ca:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <print123_pwm+0x68>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	4618      	mov	r0, r3
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <print123_pwm+0x6c>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	4603      	mov	r3, r0
 80001d8:	4807      	ldr	r0, [pc, #28]	; (80001f8 <print123_pwm+0x70>)
 80001da:	f002 fab5 	bl	8002748 <iprintf>
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	2000011c 	.word	0x2000011c
 80001ec:	2000011e 	.word	0x2000011e
 80001f0:	20000120 	.word	0x20000120
 80001f4:	20000122 	.word	0x20000122
 80001f8:	08003810 	.word	0x08003810

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fbcb 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f8b3 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f9ad 	bl	8000568 <MX_GPIO_Init>
  MX_TIM3_Init();
 800020e:	f000 f8f5 	bl	80003fc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000212:	f000 f97f 	bl	8000514 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000216:	2108      	movs	r1, #8
 8000218:	4851      	ldr	r0, [pc, #324]	; (8000360 <main+0x164>)
 800021a:	f001 fb65 	bl	80018e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800021e:	2104      	movs	r1, #4
 8000220:	484f      	ldr	r0, [pc, #316]	; (8000360 <main+0x164>)
 8000222:	f001 fb61 	bl	80018e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000226:	2100      	movs	r1, #0
 8000228:	484d      	ldr	r0, [pc, #308]	; (8000360 <main+0x164>)
 800022a:	f001 fb5d 	bl	80018e8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  led_arr = rand()%10000;
 800022e:	f002 faa3 	bl	8002778 <rand>
 8000232:	4603      	mov	r3, r0
 8000234:	4a4b      	ldr	r2, [pc, #300]	; (8000364 <main+0x168>)
 8000236:	fb82 1203 	smull	r1, r2, r2, r3
 800023a:	1311      	asrs	r1, r2, #12
 800023c:	17da      	asrs	r2, r3, #31
 800023e:	1a8a      	subs	r2, r1, r2
 8000240:	f242 7110 	movw	r1, #10000	; 0x2710
 8000244:	fb01 f202 	mul.w	r2, r1, r2
 8000248:	1a9a      	subs	r2, r3, r2
 800024a:	b292      	uxth	r2, r2
 800024c:	4b46      	ldr	r3, [pc, #280]	; (8000368 <main+0x16c>)
 800024e:	801a      	strh	r2, [r3, #0]
	     __HAL_TIM_SET_AUTORELOAD(&htim3, led_arr);
 8000250:	4b45      	ldr	r3, [pc, #276]	; (8000368 <main+0x16c>)
 8000252:	881a      	ldrh	r2, [r3, #0]
 8000254:	4b42      	ldr	r3, [pc, #264]	; (8000360 <main+0x164>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	62da      	str	r2, [r3, #44]	; 0x2c
 800025a:	4b43      	ldr	r3, [pc, #268]	; (8000368 <main+0x16c>)
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	461a      	mov	r2, r3
 8000260:	4b3f      	ldr	r3, [pc, #252]	; (8000360 <main+0x164>)
 8000262:	60da      	str	r2, [r3, #12]
	     uint16_t ch[] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};
 8000264:	4a41      	ldr	r2, [pc, #260]	; (800036c <main+0x170>)
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800026e:	6018      	str	r0, [r3, #0]
 8000270:	3304      	adds	r3, #4
 8000272:	8019      	strh	r1, [r3, #0]
	     uint16_t ccr[] = {rand()%led_arr, rand()%led_arr, rand()%led_arr};
 8000274:	f002 fa80 	bl	8002778 <rand>
 8000278:	4603      	mov	r3, r0
 800027a:	4a3b      	ldr	r2, [pc, #236]	; (8000368 <main+0x16c>)
 800027c:	8812      	ldrh	r2, [r2, #0]
 800027e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000282:	fb01 f202 	mul.w	r2, r1, r2
 8000286:	1a9b      	subs	r3, r3, r2
 8000288:	b29b      	uxth	r3, r3
 800028a:	80bb      	strh	r3, [r7, #4]
 800028c:	f002 fa74 	bl	8002778 <rand>
 8000290:	4603      	mov	r3, r0
 8000292:	4a35      	ldr	r2, [pc, #212]	; (8000368 <main+0x16c>)
 8000294:	8812      	ldrh	r2, [r2, #0]
 8000296:	fb93 f1f2 	sdiv	r1, r3, r2
 800029a:	fb01 f202 	mul.w	r2, r1, r2
 800029e:	1a9b      	subs	r3, r3, r2
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	80fb      	strh	r3, [r7, #6]
 80002a4:	f002 fa68 	bl	8002778 <rand>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4a2f      	ldr	r2, [pc, #188]	; (8000368 <main+0x16c>)
 80002ac:	8812      	ldrh	r2, [r2, #0]
 80002ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80002b2:	fb01 f202 	mul.w	r2, r1, r2
 80002b6:	1a9b      	subs	r3, r3, r2
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	813b      	strh	r3, [r7, #8]
	     for(int i = 0; i <3; i++) {
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]
 80002c0:	e044      	b.n	800034c <main+0x150>
	       __HAL_TIM_SET_COMPARE(&htim3, ch[i], ccr[i]);
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	3318      	adds	r3, #24
 80002c8:	443b      	add	r3, r7
 80002ca:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d109      	bne.n	80002e6 <main+0xea>
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	3318      	adds	r3, #24
 80002d8:	443b      	add	r3, r7
 80002da:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80002de:	4b20      	ldr	r3, [pc, #128]	; (8000360 <main+0x164>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	635a      	str	r2, [r3, #52]	; 0x34
 80002e4:	e02f      	b.n	8000346 <main+0x14a>
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	3318      	adds	r3, #24
 80002ec:	443b      	add	r3, r7
 80002ee:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80002f2:	2b04      	cmp	r3, #4
 80002f4:	d10a      	bne.n	800030c <main+0x110>
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	3318      	adds	r3, #24
 80002fc:	443b      	add	r3, r7
 80002fe:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <main+0x164>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	460b      	mov	r3, r1
 8000308:	6393      	str	r3, [r2, #56]	; 0x38
 800030a:	e01c      	b.n	8000346 <main+0x14a>
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	3318      	adds	r3, #24
 8000312:	443b      	add	r3, r7
 8000314:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000318:	2b08      	cmp	r3, #8
 800031a:	d10a      	bne.n	8000332 <main+0x136>
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	3318      	adds	r3, #24
 8000322:	443b      	add	r3, r7
 8000324:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <main+0x164>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	460b      	mov	r3, r1
 800032e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000330:	e009      	b.n	8000346 <main+0x14a>
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	3318      	adds	r3, #24
 8000338:	443b      	add	r3, r7
 800033a:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <main+0x164>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	460b      	mov	r3, r1
 8000344:	6413      	str	r3, [r2, #64]	; 0x40
	     for(int i = 0; i <3; i++) {
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	3301      	adds	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	2b02      	cmp	r3, #2
 8000350:	ddb7      	ble.n	80002c2 <main+0xc6>
	     }
	     print123_pwm();
 8000352:	f7ff ff19 	bl	8000188 <print123_pwm>
	     HAL_Delay(1000);
 8000356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035a:	f000 fb81 	bl	8000a60 <HAL_Delay>
  {
 800035e:	e766      	b.n	800022e <main+0x32>
 8000360:	2000008c 	.word	0x2000008c
 8000364:	68db8bad 	.word	0x68db8bad
 8000368:	2000011c 	.word	0x2000011c
 800036c:	0800383c 	.word	0x0800383c

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b090      	sub	sp, #64	; 0x40
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	2228      	movs	r2, #40	; 0x28
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f002 f9da 	bl	8002738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000392:	2301      	movs	r3, #1
 8000394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000396:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800039a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a0:	2301      	movs	r3, #1
 80003a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	2302      	movs	r3, #2
 80003a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fddd 	bl	8000f78 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c4:	f000 f8fe 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2302      	movs	r3, #2
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 f84a 	bl	800147c <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ee:	f000 f8e9 	bl	80005c4 <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3740      	adds	r7, #64	; 0x40
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08e      	sub	sp, #56	; 0x38
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	f107 0320 	add.w	r3, r7, #32
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
 8000428:	615a      	str	r2, [r3, #20]
 800042a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800042c:	4b37      	ldr	r3, [pc, #220]	; (800050c <MX_TIM3_Init+0x110>)
 800042e:	4a38      	ldr	r2, [pc, #224]	; (8000510 <MX_TIM3_Init+0x114>)
 8000430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000432:	4b36      	ldr	r3, [pc, #216]	; (800050c <MX_TIM3_Init+0x110>)
 8000434:	2247      	movs	r2, #71	; 0x47
 8000436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b34      	ldr	r3, [pc, #208]	; (800050c <MX_TIM3_Init+0x110>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800043e:	4b33      	ldr	r3, [pc, #204]	; (800050c <MX_TIM3_Init+0x110>)
 8000440:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <MX_TIM3_Init+0x110>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800044c:	4b2f      	ldr	r3, [pc, #188]	; (800050c <MX_TIM3_Init+0x110>)
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000452:	482e      	ldr	r0, [pc, #184]	; (800050c <MX_TIM3_Init+0x110>)
 8000454:	f001 f9a0 	bl	8001798 <HAL_TIM_Base_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800045e:	f000 f8b1 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000466:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046c:	4619      	mov	r1, r3
 800046e:	4827      	ldr	r0, [pc, #156]	; (800050c <MX_TIM3_Init+0x110>)
 8000470:	f001 fb9e 	bl	8001bb0 <HAL_TIM_ConfigClockSource>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800047a:	f000 f8a3 	bl	80005c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800047e:	4823      	ldr	r0, [pc, #140]	; (800050c <MX_TIM3_Init+0x110>)
 8000480:	f001 f9d9 	bl	8001836 <HAL_TIM_PWM_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800048a:	f000 f89b 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000496:	f107 0320 	add.w	r3, r7, #32
 800049a:	4619      	mov	r1, r3
 800049c:	481b      	ldr	r0, [pc, #108]	; (800050c <MX_TIM3_Init+0x110>)
 800049e:	f001 fef3 	bl	8002288 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80004a8:	f000 f88c 	bl	80005c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ac:	2360      	movs	r3, #96	; 0x60
 80004ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2200      	movs	r2, #0
 80004c0:	4619      	mov	r1, r3
 80004c2:	4812      	ldr	r0, [pc, #72]	; (800050c <MX_TIM3_Init+0x110>)
 80004c4:	f001 fab2 	bl	8001a2c <HAL_TIM_PWM_ConfigChannel>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80004ce:	f000 f879 	bl	80005c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2204      	movs	r2, #4
 80004d6:	4619      	mov	r1, r3
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <MX_TIM3_Init+0x110>)
 80004da:	f001 faa7 	bl	8001a2c <HAL_TIM_PWM_ConfigChannel>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80004e4:	f000 f86e 	bl	80005c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2208      	movs	r2, #8
 80004ec:	4619      	mov	r1, r3
 80004ee:	4807      	ldr	r0, [pc, #28]	; (800050c <MX_TIM3_Init+0x110>)
 80004f0:	f001 fa9c 	bl	8001a2c <HAL_TIM_PWM_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80004fa:	f000 f863 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <MX_TIM3_Init+0x110>)
 8000500:	f000 f8a6 	bl	8000650 <HAL_TIM_MspPostInit>

}
 8000504:	bf00      	nop
 8000506:	3738      	adds	r7, #56	; 0x38
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000008c 	.word	0x2000008c
 8000510:	40000400 	.word	0x40000400

08000514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <MX_USART2_UART_Init+0x50>)
 800051c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 8000520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_USART2_UART_Init+0x4c>)
 800054c:	f001 fefa 	bl	8002344 <HAL_UART_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000556:	f000 f835 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000d4 	.word	0x200000d4
 8000564:	40004400 	.word	0x40004400

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_GPIO_Init+0x58>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <MX_GPIO_Init+0x58>)
 8000574:	f043 0310 	orr.w	r3, r3, #16
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_GPIO_Init+0x58>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0310 	and.w	r3, r3, #16
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_GPIO_Init+0x58>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <MX_GPIO_Init+0x58>)
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_GPIO_Init+0x58>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_GPIO_Init+0x58>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <MX_GPIO_Init+0x58>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <MX_GPIO_Init+0x58>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_MspInit+0x40>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <HAL_MspInit+0x40>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_MspInit+0x40>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_MspInit+0x40>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_MspInit+0x40>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_MspInit+0x40>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a09      	ldr	r2, [pc, #36]	; (8000648 <HAL_TIM_Base_MspInit+0x34>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d10b      	bne.n	800063e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_TIM_Base_MspInit+0x38>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_TIM_Base_MspInit+0x38>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_TIM_Base_MspInit+0x38>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40000400 	.word	0x40000400
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <HAL_TIM_MspPostInit+0x80>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d12a      	bne.n	80006c6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_TIM_MspPostInit+0x84>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_TIM_MspPostInit+0x84>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_TIM_MspPostInit+0x84>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000688:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800068c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2302      	movs	r3, #2
 8000694:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4619      	mov	r1, r3
 800069c:	480e      	ldr	r0, [pc, #56]	; (80006d8 <HAL_TIM_MspPostInit+0x88>)
 800069e:	f000 fae7 	bl	8000c70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_TIM_MspPostInit+0x8c>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	61fb      	str	r3, [r7, #28]
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006b6:	61fb      	str	r3, [r7, #28]
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_TIM_MspPostInit+0x8c>)
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006c6:	bf00      	nop
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40000400 	.word	0x40000400
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40010000 	.word	0x40010000

080006e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <HAL_UART_MspInit+0x88>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d12f      	bne.n	8000760 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <HAL_UART_MspInit+0x8c>)
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <HAL_UART_MspInit+0x8c>)
 8000706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070a:	61d3      	str	r3, [r2, #28]
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <HAL_UART_MspInit+0x8c>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_UART_MspInit+0x8c>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a13      	ldr	r2, [pc, #76]	; (800076c <HAL_UART_MspInit+0x8c>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_UART_MspInit+0x8c>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000730:	2304      	movs	r3, #4
 8000732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <HAL_UART_MspInit+0x90>)
 8000744:	f000 fa94 	bl	8000c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000748:	2308      	movs	r3, #8
 800074a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <HAL_UART_MspInit+0x90>)
 800075c:	f000 fa88 	bl	8000c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40004400 	.word	0x40004400
 800076c:	40021000 	.word	0x40021000
 8000770:	40010800 	.word	0x40010800

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ba:	f000 f935 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  return 1;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <_kill>:

int _kill(int pid, int sig)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007da:	f001 ff83 	bl	80026e4 <__errno>
 80007de:	4603      	mov	r3, r0
 80007e0:	2216      	movs	r2, #22
 80007e2:	601a      	str	r2, [r3, #0]
  return -1;
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_exit>:

void _exit (int status)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffe7 	bl	80007d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000802:	e7fe      	b.n	8000802 <_exit+0x12>

08000804 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e00a      	b.n	800082c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000816:	f3af 8000 	nop.w
 800081a:	4601      	mov	r1, r0
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	60ba      	str	r2, [r7, #8]
 8000822:	b2ca      	uxtb	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbf0      	blt.n	8000816 <_read+0x12>
  }

  return len;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	e009      	b.n	8000864 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	60ba      	str	r2, [r7, #8]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fc77 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	429a      	cmp	r2, r3
 800086a:	dbf1      	blt.n	8000850 <_write+0x12>
  }
  return len;
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <_close>:

int _close(int file)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089c:	605a      	str	r2, [r3, #4]
  return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <_isatty>:

int _isatty(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008be:	b480      	push	{r7}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
	...

080008d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <_sbrk+0x5c>)
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <_sbrk+0x60>)
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_sbrk+0x64>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <_sbrk+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d207      	bcs.n	8000918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000908:	f001 feec 	bl	80026e4 <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	e009      	b.n	800092c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <_sbrk+0x64>)
 8000928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20005000 	.word	0x20005000
 8000938:	00000400 	.word	0x00000400
 800093c:	20000124 	.word	0x20000124
 8000940:	20000140 	.word	0x20000140

08000944 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000950:	f7ff fff8 	bl	8000944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000956:	490c      	ldr	r1, [pc, #48]	; (8000988 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000958:	4a0c      	ldr	r2, [pc, #48]	; (800098c <LoopFillZerobss+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800096c:	4c09      	ldr	r4, [pc, #36]	; (8000994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f001 feb9 	bl	80026f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc3d 	bl	80001fc <main>
  bx lr
 8000982:	4770      	bx	lr
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800098c:	080039c0 	.word	0x080039c0
  ldr r2, =_sbss
 8000990:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000994:	2000013c 	.word	0x2000013c

08000998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_2_IRQHandler>
	...

0800099c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_Init+0x28>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_Init+0x28>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f92b 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 f808 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff fe0a 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40022000 	.word	0x40022000

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f935 	bl	8000c56 <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f90b 	bl	8000c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x1c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_IncTick+0x20>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a03      	ldr	r2, [pc, #12]	; (8000a48 <HAL_IncTick+0x20>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000128 	.word	0x20000128

08000a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <HAL_GetTick+0x10>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000128 	.word	0x20000128

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff fff0 	bl	8000a4c <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d005      	beq.n	8000a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_Delay+0x44>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a86:	bf00      	nop
 8000a88:	f7ff ffe0 	bl	8000a4c <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d8f7      	bhi.n	8000a88 <HAL_Delay+0x28>
  {
  }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008

08000aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	; (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__NVIC_GetPriorityGrouping+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 0307 	and.w	r3, r3, #7
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff90 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff49 	bl	8000aa8 <__NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff5e 	bl	8000af0 <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff90 	bl	8000b60 <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff5f 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffb0 	bl	8000bc4 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b08b      	sub	sp, #44	; 0x2c
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e169      	b.n	8000f58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c84:	2201      	movs	r2, #1
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8158 	bne.w	8000f52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a9a      	ldr	r2, [pc, #616]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d05e      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cac:	4a98      	ldr	r2, [pc, #608]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d875      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cb2:	4a98      	ldr	r2, [pc, #608]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d058      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cb8:	4a96      	ldr	r2, [pc, #600]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d86f      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cbe:	4a96      	ldr	r2, [pc, #600]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d052      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cc4:	4a94      	ldr	r2, [pc, #592]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d869      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cca:	4a94      	ldr	r2, [pc, #592]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d04c      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cd0:	4a92      	ldr	r2, [pc, #584]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d863      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cd6:	4a92      	ldr	r2, [pc, #584]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d046      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cdc:	4a90      	ldr	r2, [pc, #576]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d85d      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d82a      	bhi.n	8000d3c <HAL_GPIO_Init+0xcc>
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d859      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cea:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <HAL_GPIO_Init+0x80>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d45 	.word	0x08000d45
 8000cf8:	08000d57 	.word	0x08000d57
 8000cfc:	08000d99 	.word	0x08000d99
 8000d00:	08000d9f 	.word	0x08000d9f
 8000d04:	08000d9f 	.word	0x08000d9f
 8000d08:	08000d9f 	.word	0x08000d9f
 8000d0c:	08000d9f 	.word	0x08000d9f
 8000d10:	08000d9f 	.word	0x08000d9f
 8000d14:	08000d9f 	.word	0x08000d9f
 8000d18:	08000d9f 	.word	0x08000d9f
 8000d1c:	08000d9f 	.word	0x08000d9f
 8000d20:	08000d9f 	.word	0x08000d9f
 8000d24:	08000d9f 	.word	0x08000d9f
 8000d28:	08000d9f 	.word	0x08000d9f
 8000d2c:	08000d9f 	.word	0x08000d9f
 8000d30:	08000d9f 	.word	0x08000d9f
 8000d34:	08000d4d 	.word	0x08000d4d
 8000d38:	08000d61 	.word	0x08000d61
 8000d3c:	4a79      	ldr	r2, [pc, #484]	; (8000f24 <HAL_GPIO_Init+0x2b4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d42:	e02c      	b.n	8000d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e029      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	3304      	adds	r3, #4
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e024      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e01f      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	330c      	adds	r3, #12
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e01a      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d72:	2304      	movs	r3, #4
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e013      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d105      	bne.n	8000d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d80:	2308      	movs	r3, #8
 8000d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	611a      	str	r2, [r3, #16]
          break;
 8000d8a:	e009      	b.n	8000da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	615a      	str	r2, [r3, #20]
          break;
 8000d96:	e003      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          break;
 8000d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2bff      	cmp	r3, #255	; 0xff
 8000da4:	d801      	bhi.n	8000daa <HAL_GPIO_Init+0x13a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <HAL_GPIO_Init+0x13e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3304      	adds	r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d802      	bhi.n	8000dbc <HAL_GPIO_Init+0x14c>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x152>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	3b08      	subs	r3, #8
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	210f      	movs	r1, #15
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	6a39      	ldr	r1, [r7, #32]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80b1 	beq.w	8000f52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df0:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e08:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <HAL_GPIO_Init+0x2bc>)
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d013      	beq.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <HAL_GPIO_Init+0x2c4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d00d      	beq.n	8000e58 <HAL_GPIO_Init+0x1e8>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3e      	ldr	r2, [pc, #248]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d007      	beq.n	8000e54 <HAL_GPIO_Init+0x1e4>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <HAL_GPIO_Init+0x2cc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d101      	bne.n	8000e50 <HAL_GPIO_Init+0x1e0>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e006      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e50:	2304      	movs	r3, #4
 8000e52:	e004      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e002      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e60:	f002 0203 	and.w	r2, r2, #3
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	4093      	lsls	r3, r2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e6e:	492f      	ldr	r1, [pc, #188]	; (8000f2c <HAL_GPIO_Init+0x2bc>)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	492c      	ldr	r1, [pc, #176]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	608b      	str	r3, [r1, #8]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4928      	ldr	r1, [pc, #160]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	4922      	ldr	r1, [pc, #136]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60cb      	str	r3, [r1, #12]
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	491e      	ldr	r1, [pc, #120]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	4918      	ldr	r1, [pc, #96]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4914      	ldr	r1, [pc, #80]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d021      	beq.n	8000f44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	490e      	ldr	r1, [pc, #56]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	600b      	str	r3, [r1, #0]
 8000f0c:	e021      	b.n	8000f52 <HAL_GPIO_Init+0x2e2>
 8000f0e:	bf00      	nop
 8000f10:	10320000 	.word	0x10320000
 8000f14:	10310000 	.word	0x10310000
 8000f18:	10220000 	.word	0x10220000
 8000f1c:	10210000 	.word	0x10210000
 8000f20:	10120000 	.word	0x10120000
 8000f24:	10110000 	.word	0x10110000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40010800 	.word	0x40010800
 8000f34:	40010c00 	.word	0x40010c00
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40011400 	.word	0x40011400
 8000f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4909      	ldr	r1, [pc, #36]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	3301      	adds	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f47f ae8e 	bne.w	8000c84 <HAL_GPIO_Init+0x14>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	372c      	adds	r7, #44	; 0x2c
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40010400 	.word	0x40010400

08000f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e272      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8087 	beq.w	80010a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f98:	4b92      	ldr	r3, [pc, #584]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d00c      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa4:	4b8f      	ldr	r3, [pc, #572]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d112      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x5e>
 8000fb0:	4b8c      	ldr	r3, [pc, #560]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbe:	4b89      	ldr	r3, [pc, #548]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d06c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x12c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d168      	bne.n	80010a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e24c      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fde:	d106      	bne.n	8000fee <HAL_RCC_OscConfig+0x76>
 8000fe0:	4b80      	ldr	r3, [pc, #512]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a7f      	ldr	r2, [pc, #508]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e02e      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x98>
 8000ff6:	4b7b      	ldr	r3, [pc, #492]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a7a      	ldr	r2, [pc, #488]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b78      	ldr	r3, [pc, #480]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a77      	ldr	r2, [pc, #476]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e01d      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0xbc>
 800101a:	4b72      	ldr	r3, [pc, #456]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a71      	ldr	r2, [pc, #452]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b6f      	ldr	r3, [pc, #444]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a6e      	ldr	r2, [pc, #440]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e00b      	b.n	800104c <HAL_RCC_OscConfig+0xd4>
 8001034:	4b6b      	ldr	r3, [pc, #428]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a6a      	ldr	r2, [pc, #424]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800103a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a67      	ldr	r2, [pc, #412]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fcfa 	bl	8000a4c <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fcf6 	bl	8000a4c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e200      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f0      	beq.n	800105c <HAL_RCC_OscConfig+0xe4>
 800107a:	e014      	b.n	80010a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fce6 	bl	8000a4c <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fce2 	bl	8000a4c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1ec      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x10c>
 80010a2:	e000      	b.n	80010a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d063      	beq.n	800117a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010b2:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d11c      	bne.n	8001104 <HAL_RCC_OscConfig+0x18c>
 80010ca:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d116      	bne.n	8001104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_RCC_OscConfig+0x176>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d001      	beq.n	80010ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e1c0      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4939      	ldr	r1, [pc, #228]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	e03a      	b.n	800117a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_RCC_OscConfig+0x270>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fc9b 	bl	8000a4c <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111a:	f7ff fc97 	bl	8000a4c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e1a1      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4927      	ldr	r1, [pc, #156]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_RCC_OscConfig+0x270>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc7a 	bl	8000a4c <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fc76 	bl	8000a4c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e180      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d03a      	beq.n	80011fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d019      	beq.n	80011c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_RCC_OscConfig+0x274>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fc5a 	bl	8000a4c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fc56 	bl	8000a4c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e160      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 face 	bl	800175c <RCC_Delay>
 80011c0:	e01c      	b.n	80011fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_RCC_OscConfig+0x274>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fc40 	bl	8000a4c <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ce:	e00f      	b.n	80011f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc3c 	bl	8000a4c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d908      	bls.n	80011f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e146      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	42420000 	.word	0x42420000
 80011ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	4b92      	ldr	r3, [pc, #584]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e9      	bne.n	80011d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a6 	beq.w	8001356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120e:	4b8b      	ldr	r3, [pc, #556]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10d      	bne.n	8001236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b88      	ldr	r3, [pc, #544]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a87      	ldr	r2, [pc, #540]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b85      	ldr	r3, [pc, #532]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001232:	2301      	movs	r3, #1
 8001234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x4c8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d118      	bne.n	8001274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	4b7f      	ldr	r3, [pc, #508]	; (8001440 <HAL_RCC_OscConfig+0x4c8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a7e      	ldr	r2, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x4c8>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124e:	f7ff fbfd 	bl	8000a4c <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001256:	f7ff fbf9 	bl	8000a4c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e103      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	4b75      	ldr	r3, [pc, #468]	; (8001440 <HAL_RCC_OscConfig+0x4c8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x312>
 800127c:	4b6f      	ldr	r3, [pc, #444]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4a6e      	ldr	r2, [pc, #440]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6213      	str	r3, [r2, #32]
 8001288:	e02d      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x334>
 8001292:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a69      	ldr	r2, [pc, #420]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a66      	ldr	r2, [pc, #408]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6213      	str	r3, [r2, #32]
 80012aa:	e01c      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	d10c      	bne.n	80012ce <HAL_RCC_OscConfig+0x356>
 80012b4:	4b61      	ldr	r3, [pc, #388]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a60      	ldr	r2, [pc, #384]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6213      	str	r3, [r2, #32]
 80012c0:	4b5e      	ldr	r3, [pc, #376]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4a5d      	ldr	r2, [pc, #372]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6213      	str	r3, [r2, #32]
 80012cc:	e00b      	b.n	80012e6 <HAL_RCC_OscConfig+0x36e>
 80012ce:	4b5b      	ldr	r3, [pc, #364]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a5a      	ldr	r2, [pc, #360]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6213      	str	r3, [r2, #32]
 80012da:	4b58      	ldr	r3, [pc, #352]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a57      	ldr	r2, [pc, #348]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fbad 	bl	8000a4c <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fba9 	bl	8000a4c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f241 3288 	movw	r2, #5000	; 0x1388
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0b1      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ee      	beq.n	80012f6 <HAL_RCC_OscConfig+0x37e>
 8001318:	e014      	b.n	8001344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb97 	bl	8000a4c <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fb93 	bl	8000a4c <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e09b      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	4b40      	ldr	r3, [pc, #256]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ee      	bne.n	8001322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d105      	bne.n	8001356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134a:	4b3c      	ldr	r3, [pc, #240]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a3b      	ldr	r2, [pc, #236]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8087 	beq.w	800146e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d061      	beq.n	8001430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d146      	bne.n	8001402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <HAL_RCC_OscConfig+0x4cc>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fb67 	bl	8000a4c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fb63 	bl	8000a4c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e06d      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d108      	bne.n	80013bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	4921      	ldr	r1, [pc, #132]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a19      	ldr	r1, [r3, #32]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	430b      	orrs	r3, r1
 80013ce:	491b      	ldr	r1, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x4cc>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fb37 	bl	8000a4c <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fb33 	bl	8000a4c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e03d      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x46a>
 8001400:	e035      	b.n	800146e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_RCC_OscConfig+0x4cc>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fb20 	bl	8000a4c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff fb1c 	bl	8000a4c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e026      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_RCC_OscConfig+0x4c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x498>
 800142e:	e01e      	b.n	800146e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e019      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
 800143c:	40021000 	.word	0x40021000
 8001440:	40007000 	.word	0x40007000
 8001444:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x500>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	429a      	cmp	r2, r3
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0d0      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4b6a      	ldr	r3, [pc, #424]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d910      	bls.n	80014c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b67      	ldr	r3, [pc, #412]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 0207 	bic.w	r2, r3, #7
 80014a6:	4965      	ldr	r1, [pc, #404]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b63      	ldr	r3, [pc, #396]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0b8      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d8:	4b59      	ldr	r3, [pc, #356]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	494d      	ldr	r1, [pc, #308]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d040      	beq.n	800159c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d115      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e07f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e073      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e06b      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155a:	4b39      	ldr	r3, [pc, #228]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f023 0203 	bic.w	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4936      	ldr	r1, [pc, #216]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800156c:	f7ff fa6e 	bl	8000a4c <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	e00a      	b.n	800158a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001574:	f7ff fa6a 	bl	8000a4c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e053      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 020c 	and.w	r2, r3, #12
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	429a      	cmp	r2, r3
 800159a:	d1eb      	bne.n	8001574 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d210      	bcs.n	80015cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 0207 	bic.w	r2, r3, #7
 80015b2:	4922      	ldr	r1, [pc, #136]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e032      	b.n	8001632 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4916      	ldr	r1, [pc, #88]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d009      	beq.n	800160a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	490e      	ldr	r1, [pc, #56]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800160a:	f000 f821 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 800160e:	4602      	mov	r2, r0
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	490a      	ldr	r1, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	5ccb      	ldrb	r3, [r1, r3]
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1cc>)
 8001624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_ClockConfig+0x1d0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f9cc 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000
 8001640:	40021000 	.word	0x40021000
 8001644:	08003844 	.word	0x08003844
 8001648:	20000000 	.word	0x20000000
 800164c:	20000004 	.word	0x20000004

08001650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b04      	cmp	r3, #4
 8001678:	d002      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x30>
 800167a:	2b08      	cmp	r3, #8
 800167c:	d003      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x36>
 800167e:	e027      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001682:	613b      	str	r3, [r7, #16]
      break;
 8001684:	e027      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	0c9b      	lsrs	r3, r3, #18
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001690:	5cd3      	ldrb	r3, [r2, r3]
 8001692:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d010      	beq.n	80016c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	0c5b      	lsrs	r3, r3, #17
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80016b2:	fb03 f202 	mul.w	r2, r3, r2
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e004      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	613b      	str	r3, [r7, #16]
      break;
 80016ce:	e002      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80016d2:	613b      	str	r3, [r7, #16]
      break;
 80016d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d6:	693b      	ldr	r3, [r7, #16]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	007a1200 	.word	0x007a1200
 80016ec:	0800385c 	.word	0x0800385c
 80016f0:	0800386c 	.word	0x0800386c
 80016f4:	003d0900 	.word	0x003d0900

080016f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <HAL_RCC_GetHCLKFreq+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000000 	.word	0x20000000

0800170c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001710:	f7ff fff2 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4903      	ldr	r1, [pc, #12]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001722:	5ccb      	ldrb	r3, [r1, r3]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	08003854 	.word	0x08003854

08001734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001738:	f7ff ffde 	bl	80016f8 <HAL_RCC_GetHCLKFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	0adb      	lsrs	r3, r3, #11
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	4903      	ldr	r1, [pc, #12]	; (8001758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	08003854 	.word	0x08003854

0800175c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <RCC_Delay+0x34>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <RCC_Delay+0x38>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0a5b      	lsrs	r3, r3, #9
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001778:	bf00      	nop
  }
  while (Delay --);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1e5a      	subs	r2, r3, #1
 800177e:	60fa      	str	r2, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f9      	bne.n	8001778 <RCC_Delay+0x1c>
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	20000000 	.word	0x20000000
 8001794:	10624dd3 	.word	0x10624dd3

08001798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e041      	b.n	800182e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7fe ff28 	bl	8000614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3304      	adds	r3, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f000 fab2 	bl	8001d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e041      	b.n	80018cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f839 	bl	80018d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2202      	movs	r2, #2
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3304      	adds	r3, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f000 fa63 	bl	8001d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_TIM_PWM_Start+0x24>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b01      	cmp	r3, #1
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	e022      	b.n	8001952 <HAL_TIM_PWM_Start+0x6a>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2b04      	cmp	r3, #4
 8001910:	d109      	bne.n	8001926 <HAL_TIM_PWM_Start+0x3e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	e015      	b.n	8001952 <HAL_TIM_PWM_Start+0x6a>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b08      	cmp	r3, #8
 800192a:	d109      	bne.n	8001940 <HAL_TIM_PWM_Start+0x58>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	e008      	b.n	8001952 <HAL_TIM_PWM_Start+0x6a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e05e      	b.n	8001a18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <HAL_TIM_PWM_Start+0x82>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001968:	e013      	b.n	8001992 <HAL_TIM_PWM_Start+0xaa>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d104      	bne.n	800197a <HAL_TIM_PWM_Start+0x92>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001978:	e00b      	b.n	8001992 <HAL_TIM_PWM_Start+0xaa>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d104      	bne.n	800198a <HAL_TIM_PWM_Start+0xa2>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001988:	e003      	b.n	8001992 <HAL_TIM_PWM_Start+0xaa>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	6839      	ldr	r1, [r7, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fc50 	bl	8002240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <HAL_TIM_PWM_Start+0x138>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d107      	bne.n	80019ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_TIM_PWM_Start+0x138>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00e      	beq.n	80019e2 <HAL_TIM_PWM_Start+0xfa>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019cc:	d009      	beq.n	80019e2 <HAL_TIM_PWM_Start+0xfa>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_TIM_PWM_Start+0x13c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d004      	beq.n	80019e2 <HAL_TIM_PWM_Start+0xfa>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <HAL_TIM_PWM_Start+0x140>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d111      	bne.n	8001a06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d010      	beq.n	8001a16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a04:	e007      	b.n	8001a16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40012c00 	.word	0x40012c00
 8001a24:	40000400 	.word	0x40000400
 8001a28:	40000800 	.word	0x40000800

08001a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e0ae      	b.n	8001ba8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	f200 809f 	bhi.w	8001b98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a5a:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001a95 	.word	0x08001a95
 8001a64:	08001b99 	.word	0x08001b99
 8001a68:	08001b99 	.word	0x08001b99
 8001a6c:	08001b99 	.word	0x08001b99
 8001a70:	08001ad5 	.word	0x08001ad5
 8001a74:	08001b99 	.word	0x08001b99
 8001a78:	08001b99 	.word	0x08001b99
 8001a7c:	08001b99 	.word	0x08001b99
 8001a80:	08001b17 	.word	0x08001b17
 8001a84:	08001b99 	.word	0x08001b99
 8001a88:	08001b99 	.word	0x08001b99
 8001a8c:	08001b99 	.word	0x08001b99
 8001a90:	08001b57 	.word	0x08001b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f9b2 	bl	8001e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0208 	orr.w	r2, r2, #8
 8001aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0204 	bic.w	r2, r2, #4
 8001abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6999      	ldr	r1, [r3, #24]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	619a      	str	r2, [r3, #24]
      break;
 8001ad2:	e064      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f9f8 	bl	8001ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6999      	ldr	r1, [r3, #24]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	021a      	lsls	r2, r3, #8
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	619a      	str	r2, [r3, #24]
      break;
 8001b14:	e043      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fa41 	bl	8001fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0208 	orr.w	r2, r2, #8
 8001b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0204 	bic.w	r2, r2, #4
 8001b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69d9      	ldr	r1, [r3, #28]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	61da      	str	r2, [r3, #28]
      break;
 8001b54:	e023      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fa8b 	bl	8002078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69d9      	ldr	r1, [r3, #28]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	021a      	lsls	r2, r3, #8
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	61da      	str	r2, [r3, #28]
      break;
 8001b96:	e002      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_TIM_ConfigClockSource+0x1c>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e0b4      	b.n	8001d36 <HAL_TIM_ConfigClockSource+0x186>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c04:	d03e      	beq.n	8001c84 <HAL_TIM_ConfigClockSource+0xd4>
 8001c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c0a:	f200 8087 	bhi.w	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
 8001c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c12:	f000 8086 	beq.w	8001d22 <HAL_TIM_ConfigClockSource+0x172>
 8001c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c1a:	d87f      	bhi.n	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
 8001c1c:	2b70      	cmp	r3, #112	; 0x70
 8001c1e:	d01a      	beq.n	8001c56 <HAL_TIM_ConfigClockSource+0xa6>
 8001c20:	2b70      	cmp	r3, #112	; 0x70
 8001c22:	d87b      	bhi.n	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
 8001c24:	2b60      	cmp	r3, #96	; 0x60
 8001c26:	d050      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0x11a>
 8001c28:	2b60      	cmp	r3, #96	; 0x60
 8001c2a:	d877      	bhi.n	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
 8001c2c:	2b50      	cmp	r3, #80	; 0x50
 8001c2e:	d03c      	beq.n	8001caa <HAL_TIM_ConfigClockSource+0xfa>
 8001c30:	2b50      	cmp	r3, #80	; 0x50
 8001c32:	d873      	bhi.n	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
 8001c34:	2b40      	cmp	r3, #64	; 0x40
 8001c36:	d058      	beq.n	8001cea <HAL_TIM_ConfigClockSource+0x13a>
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d86f      	bhi.n	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
 8001c3c:	2b30      	cmp	r3, #48	; 0x30
 8001c3e:	d064      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0x15a>
 8001c40:	2b30      	cmp	r3, #48	; 0x30
 8001c42:	d86b      	bhi.n	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d060      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0x15a>
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d867      	bhi.n	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05c      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0x15a>
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d05a      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0x15a>
 8001c54:	e062      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6899      	ldr	r1, [r3, #8]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f000 facc 	bl	8002202 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	609a      	str	r2, [r3, #8]
      break;
 8001c82:	e04f      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f000 fab5 	bl	8002202 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ca6:	609a      	str	r2, [r3, #8]
      break;
 8001ca8:	e03c      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6859      	ldr	r1, [r3, #4]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f000 fa2c 	bl	8002114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2150      	movs	r1, #80	; 0x50
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fa83 	bl	80021ce <TIM_ITRx_SetConfig>
      break;
 8001cc8:	e02c      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f000 fa4a 	bl	8002170 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2160      	movs	r1, #96	; 0x60
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fa73 	bl	80021ce <TIM_ITRx_SetConfig>
      break;
 8001ce8:	e01c      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f000 fa0c 	bl	8002114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2140      	movs	r1, #64	; 0x40
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fa63 	bl	80021ce <TIM_ITRx_SetConfig>
      break;
 8001d08:	e00c      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f000 fa5a 	bl	80021ce <TIM_ITRx_SetConfig>
      break;
 8001d1a:	e003      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d20:	e000      	b.n	8001d24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <TIM_Base_SetConfig+0xb8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00b      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5e:	d007      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <TIM_Base_SetConfig+0xbc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TIM_Base_SetConfig+0x30>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <TIM_Base_SetConfig+0xc0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d108      	bne.n	8001d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <TIM_Base_SetConfig+0xb8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <TIM_Base_SetConfig+0xbc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0x62>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <TIM_Base_SetConfig+0xc0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <TIM_Base_SetConfig+0xb8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d103      	bne.n	8001de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	615a      	str	r2, [r3, #20]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40000400 	.word	0x40000400
 8001e00:	40000800 	.word	0x40000800

08001e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f023 0201 	bic.w	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f023 0302 	bic.w	r3, r3, #2
 8001e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <TIM_OC1_SetConfig+0xc8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10c      	bne.n	8001e7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0308 	bic.w	r3, r3, #8
 8001e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <TIM_OC1_SetConfig+0xc8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d111      	bne.n	8001ea6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	621a      	str	r2, [r3, #32]
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40012c00 	.word	0x40012c00

08001ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f023 0210 	bic.w	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f023 0320 	bic.w	r3, r3, #32
 8001f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <TIM_OC2_SetConfig+0xd0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10d      	bne.n	8001f4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <TIM_OC2_SetConfig+0xd0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d113      	bne.n	8001f7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	621a      	str	r2, [r3, #32]
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40012c00 	.word	0x40012c00

08001fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <TIM_OC3_SetConfig+0xd0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10d      	bne.n	800201e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800201c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <TIM_OC3_SetConfig+0xd0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d113      	bne.n	800204e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800202c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	621a      	str	r2, [r3, #32]
}
 8002068:	bf00      	nop
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40012c00 	.word	0x40012c00

08002078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	031b      	lsls	r3, r3, #12
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <TIM_OC4_SetConfig+0x98>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d109      	bne.n	80020ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	621a      	str	r2, [r3, #32]
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	40012c00 	.word	0x40012c00

08002114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	f023 0201 	bic.w	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800213e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f023 030a 	bic.w	r3, r3, #10
 8002150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	621a      	str	r2, [r3, #32]
}
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f023 0210 	bic.w	r2, r3, #16
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800219a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	031b      	lsls	r3, r3, #12
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	621a      	str	r2, [r3, #32]
}
 80021c4:	bf00      	nop
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f043 0307 	orr.w	r3, r3, #7
 80021f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002202:	b480      	push	{r7}
 8002204:	b087      	sub	sp, #28
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800221c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	021a      	lsls	r2, r3, #8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	431a      	orrs	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4313      	orrs	r3, r2
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	609a      	str	r2, [r3, #8]
}
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2201      	movs	r2, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	43db      	mvns	r3, r3
 8002262:	401a      	ands	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	621a      	str	r2, [r3, #32]
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800229c:	2302      	movs	r3, #2
 800229e:	e046      	b.n	800232e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d009      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10c      	bne.n	800231c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	4313      	orrs	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40000400 	.word	0x40000400
 8002340:	40000800 	.word	0x40000800

08002344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e042      	b.n	80023dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe f9b8 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f91d 	bl	80025c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800239c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	d16d      	bne.n	80024e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_UART_Transmit+0x2c>
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e066      	b.n	80024e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2221      	movs	r2, #33	; 0x21
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002422:	f7fe fb13 	bl	8000a4c <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243c:	d108      	bne.n	8002450 <HAL_UART_Transmit+0x6c>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d104      	bne.n	8002450 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	e003      	b.n	8002458 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002458:	e02a      	b.n	80024b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2200      	movs	r2, #0
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f840 	bl	80024ea <UART_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e036      	b.n	80024e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10b      	bne.n	8002492 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	3302      	adds	r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	e007      	b.n	80024a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3301      	adds	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1cf      	bne.n	800245a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2200      	movs	r2, #0
 80024c2:	2140      	movs	r1, #64	; 0x40
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f810 	bl	80024ea <UART_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e006      	b.n	80024e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e000      	b.n	80024e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024e0:	2302      	movs	r3, #2
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b090      	sub	sp, #64	; 0x40
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024fa:	e050      	b.n	800259e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d04c      	beq.n	800259e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0x30>
 800250a:	f7fe fa9f 	bl	8000a4c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002516:	429a      	cmp	r2, r3
 8002518:	d241      	bcs.n	800259e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800253a:	637a      	str	r2, [r7, #52]	; 0x34
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e5      	bne.n	800251a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3314      	adds	r3, #20
 8002554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	e853 3f00 	ldrex	r3, [r3]
 800255c:	613b      	str	r3, [r7, #16]
   return(result);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	63bb      	str	r3, [r7, #56]	; 0x38
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3314      	adds	r3, #20
 800256c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800256e:	623a      	str	r2, [r7, #32]
 8002570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	69f9      	ldr	r1, [r7, #28]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	e841 2300 	strex	r3, r2, [r1]
 800257a:	61bb      	str	r3, [r7, #24]
   return(result);
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e5      	bne.n	800254e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e00f      	b.n	80025be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4013      	ands	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	bf0c      	ite	eq
 80025ae:	2301      	moveq	r3, #1
 80025b0:	2300      	movne	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d09f      	beq.n	80024fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3740      	adds	r7, #64	; 0x40
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002602:	f023 030c 	bic.w	r3, r3, #12
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	430b      	orrs	r3, r1
 800260e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <UART_SetConfig+0x114>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d103      	bne.n	8002638 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002630:	f7ff f880 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	e002      	b.n	800263e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002638:	f7ff f868 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 800263c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <UART_SetConfig+0x118>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	0119      	lsls	r1, r3, #4
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb2 f2f3 	udiv	r2, r2, r3
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <UART_SetConfig+0x118>)
 8002676:	fba3 0302 	umull	r0, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2064      	movs	r0, #100	; 0x64
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	3332      	adds	r3, #50	; 0x32
 8002688:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <UART_SetConfig+0x118>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002694:	4419      	add	r1, r3
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	009a      	lsls	r2, r3, #2
 80026a0:	441a      	add	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <UART_SetConfig+0x118>)
 80026ae:	fba3 0302 	umull	r0, r3, r3, r2
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	fb00 f303 	mul.w	r3, r0, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	3332      	adds	r3, #50	; 0x32
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <UART_SetConfig+0x118>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	f003 020f 	and.w	r2, r3, #15
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	440a      	add	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40013800 	.word	0x40013800
 80026e0:	51eb851f 	.word	0x51eb851f

080026e4 <__errno>:
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <__errno+0x8>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	2000000c 	.word	0x2000000c

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2600      	movs	r6, #0
 80026f4:	4d0c      	ldr	r5, [pc, #48]	; (8002728 <__libc_init_array+0x38>)
 80026f6:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f8:	1b64      	subs	r4, r4, r5
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	42a6      	cmp	r6, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	f001 f878 	bl	80037f4 <_init>
 8002704:	2600      	movs	r6, #0
 8002706:	4d0a      	ldr	r5, [pc, #40]	; (8002730 <__libc_init_array+0x40>)
 8002708:	4c0a      	ldr	r4, [pc, #40]	; (8002734 <__libc_init_array+0x44>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	42a6      	cmp	r6, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	f855 3b04 	ldr.w	r3, [r5], #4
 8002718:	4798      	blx	r3
 800271a:	3601      	adds	r6, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002722:	4798      	blx	r3
 8002724:	3601      	adds	r6, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	080039b8 	.word	0x080039b8
 800272c:	080039b8 	.word	0x080039b8
 8002730:	080039b8 	.word	0x080039b8
 8002734:	080039bc 	.word	0x080039bc

08002738 <memset>:
 8002738:	4603      	mov	r3, r0
 800273a:	4402      	add	r2, r0
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	f803 1b01 	strb.w	r1, [r3], #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <iprintf>:
 8002748:	b40f      	push	{r0, r1, r2, r3}
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <iprintf+0x2c>)
 800274c:	b513      	push	{r0, r1, r4, lr}
 800274e:	681c      	ldr	r4, [r3, #0]
 8002750:	b124      	cbz	r4, 800275c <iprintf+0x14>
 8002752:	69a3      	ldr	r3, [r4, #24]
 8002754:	b913      	cbnz	r3, 800275c <iprintf+0x14>
 8002756:	4620      	mov	r0, r4
 8002758:	f000 f8c2 	bl	80028e0 <__sinit>
 800275c:	ab05      	add	r3, sp, #20
 800275e:	4620      	mov	r0, r4
 8002760:	9a04      	ldr	r2, [sp, #16]
 8002762:	68a1      	ldr	r1, [r4, #8]
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	f000 fa79 	bl	8002c5c <_vfiprintf_r>
 800276a:	b002      	add	sp, #8
 800276c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002770:	b004      	add	sp, #16
 8002772:	4770      	bx	lr
 8002774:	2000000c 	.word	0x2000000c

08002778 <rand>:
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <rand+0x5c>)
 800277a:	b510      	push	{r4, lr}
 800277c:	681c      	ldr	r4, [r3, #0]
 800277e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002780:	b9b3      	cbnz	r3, 80027b0 <rand+0x38>
 8002782:	2018      	movs	r0, #24
 8002784:	f000 f95e 	bl	8002a44 <malloc>
 8002788:	4602      	mov	r2, r0
 800278a:	63a0      	str	r0, [r4, #56]	; 0x38
 800278c:	b920      	cbnz	r0, 8002798 <rand+0x20>
 800278e:	214e      	movs	r1, #78	; 0x4e
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <rand+0x60>)
 8002792:	4812      	ldr	r0, [pc, #72]	; (80027dc <rand+0x64>)
 8002794:	f000 f82e 	bl	80027f4 <__assert_func>
 8002798:	4911      	ldr	r1, [pc, #68]	; (80027e0 <rand+0x68>)
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <rand+0x6c>)
 800279c:	e9c0 1300 	strd	r1, r3, [r0]
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <rand+0x70>)
 80027a2:	2100      	movs	r1, #0
 80027a4:	6083      	str	r3, [r0, #8]
 80027a6:	230b      	movs	r3, #11
 80027a8:	8183      	strh	r3, [r0, #12]
 80027aa:	2001      	movs	r0, #1
 80027ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80027b0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80027b2:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <rand+0x74>)
 80027b4:	6920      	ldr	r0, [r4, #16]
 80027b6:	6963      	ldr	r3, [r4, #20]
 80027b8:	4342      	muls	r2, r0
 80027ba:	490d      	ldr	r1, [pc, #52]	; (80027f0 <rand+0x78>)
 80027bc:	fb01 2203 	mla	r2, r1, r3, r2
 80027c0:	fba0 0101 	umull	r0, r1, r0, r1
 80027c4:	1c43      	adds	r3, r0, #1
 80027c6:	eb42 0001 	adc.w	r0, r2, r1
 80027ca:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80027ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80027d2:	bd10      	pop	{r4, pc}
 80027d4:	2000000c 	.word	0x2000000c
 80027d8:	08003874 	.word	0x08003874
 80027dc:	0800388b 	.word	0x0800388b
 80027e0:	abcd330e 	.word	0xabcd330e
 80027e4:	e66d1234 	.word	0xe66d1234
 80027e8:	0005deec 	.word	0x0005deec
 80027ec:	5851f42d 	.word	0x5851f42d
 80027f0:	4c957f2d 	.word	0x4c957f2d

080027f4 <__assert_func>:
 80027f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027f6:	4614      	mov	r4, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <__assert_func+0x2c>)
 80027fc:	4605      	mov	r5, r0
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68d8      	ldr	r0, [r3, #12]
 8002802:	b14c      	cbz	r4, 8002818 <__assert_func+0x24>
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <__assert_func+0x30>)
 8002806:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800280a:	9100      	str	r1, [sp, #0]
 800280c:	462b      	mov	r3, r5
 800280e:	4906      	ldr	r1, [pc, #24]	; (8002828 <__assert_func+0x34>)
 8002810:	f000 f8e4 	bl	80029dc <fiprintf>
 8002814:	f000 fe0e 	bl	8003434 <abort>
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__assert_func+0x38>)
 800281a:	461c      	mov	r4, r3
 800281c:	e7f3      	b.n	8002806 <__assert_func+0x12>
 800281e:	bf00      	nop
 8002820:	2000000c 	.word	0x2000000c
 8002824:	080038e6 	.word	0x080038e6
 8002828:	080038f3 	.word	0x080038f3
 800282c:	08003921 	.word	0x08003921

08002830 <std>:
 8002830:	2300      	movs	r3, #0
 8002832:	b510      	push	{r4, lr}
 8002834:	4604      	mov	r4, r0
 8002836:	e9c0 3300 	strd	r3, r3, [r0]
 800283a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800283e:	6083      	str	r3, [r0, #8]
 8002840:	8181      	strh	r1, [r0, #12]
 8002842:	6643      	str	r3, [r0, #100]	; 0x64
 8002844:	81c2      	strh	r2, [r0, #14]
 8002846:	6183      	str	r3, [r0, #24]
 8002848:	4619      	mov	r1, r3
 800284a:	2208      	movs	r2, #8
 800284c:	305c      	adds	r0, #92	; 0x5c
 800284e:	f7ff ff73 	bl	8002738 <memset>
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <std+0x38>)
 8002854:	6224      	str	r4, [r4, #32]
 8002856:	6263      	str	r3, [r4, #36]	; 0x24
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <std+0x3c>)
 800285a:	62a3      	str	r3, [r4, #40]	; 0x28
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <std+0x40>)
 800285e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <std+0x44>)
 8002862:	6323      	str	r3, [r4, #48]	; 0x30
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop
 8002868:	08003209 	.word	0x08003209
 800286c:	0800322b 	.word	0x0800322b
 8002870:	08003263 	.word	0x08003263
 8002874:	08003287 	.word	0x08003287

08002878 <_cleanup_r>:
 8002878:	4901      	ldr	r1, [pc, #4]	; (8002880 <_cleanup_r+0x8>)
 800287a:	f000 b8c1 	b.w	8002a00 <_fwalk_reent>
 800287e:	bf00      	nop
 8002880:	08003569 	.word	0x08003569

08002884 <__sfmoreglue>:
 8002884:	2268      	movs	r2, #104	; 0x68
 8002886:	b570      	push	{r4, r5, r6, lr}
 8002888:	1e4d      	subs	r5, r1, #1
 800288a:	4355      	muls	r5, r2
 800288c:	460e      	mov	r6, r1
 800288e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002892:	f000 f947 	bl	8002b24 <_malloc_r>
 8002896:	4604      	mov	r4, r0
 8002898:	b140      	cbz	r0, 80028ac <__sfmoreglue+0x28>
 800289a:	2100      	movs	r1, #0
 800289c:	e9c0 1600 	strd	r1, r6, [r0]
 80028a0:	300c      	adds	r0, #12
 80028a2:	60a0      	str	r0, [r4, #8]
 80028a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028a8:	f7ff ff46 	bl	8002738 <memset>
 80028ac:	4620      	mov	r0, r4
 80028ae:	bd70      	pop	{r4, r5, r6, pc}

080028b0 <__sfp_lock_acquire>:
 80028b0:	4801      	ldr	r0, [pc, #4]	; (80028b8 <__sfp_lock_acquire+0x8>)
 80028b2:	f000 b8c5 	b.w	8002a40 <__retarget_lock_acquire_recursive>
 80028b6:	bf00      	nop
 80028b8:	2000012d 	.word	0x2000012d

080028bc <__sfp_lock_release>:
 80028bc:	4801      	ldr	r0, [pc, #4]	; (80028c4 <__sfp_lock_release+0x8>)
 80028be:	f000 b8c0 	b.w	8002a42 <__retarget_lock_release_recursive>
 80028c2:	bf00      	nop
 80028c4:	2000012d 	.word	0x2000012d

080028c8 <__sinit_lock_acquire>:
 80028c8:	4801      	ldr	r0, [pc, #4]	; (80028d0 <__sinit_lock_acquire+0x8>)
 80028ca:	f000 b8b9 	b.w	8002a40 <__retarget_lock_acquire_recursive>
 80028ce:	bf00      	nop
 80028d0:	2000012e 	.word	0x2000012e

080028d4 <__sinit_lock_release>:
 80028d4:	4801      	ldr	r0, [pc, #4]	; (80028dc <__sinit_lock_release+0x8>)
 80028d6:	f000 b8b4 	b.w	8002a42 <__retarget_lock_release_recursive>
 80028da:	bf00      	nop
 80028dc:	2000012e 	.word	0x2000012e

080028e0 <__sinit>:
 80028e0:	b510      	push	{r4, lr}
 80028e2:	4604      	mov	r4, r0
 80028e4:	f7ff fff0 	bl	80028c8 <__sinit_lock_acquire>
 80028e8:	69a3      	ldr	r3, [r4, #24]
 80028ea:	b11b      	cbz	r3, 80028f4 <__sinit+0x14>
 80028ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f0:	f7ff bff0 	b.w	80028d4 <__sinit_lock_release>
 80028f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80028f8:	6523      	str	r3, [r4, #80]	; 0x50
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <__sinit+0x68>)
 80028fc:	4a13      	ldr	r2, [pc, #76]	; (800294c <__sinit+0x6c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	62a2      	str	r2, [r4, #40]	; 0x28
 8002902:	42a3      	cmp	r3, r4
 8002904:	bf08      	it	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	4620      	mov	r0, r4
 800290a:	bf08      	it	eq
 800290c:	61a3      	streq	r3, [r4, #24]
 800290e:	f000 f81f 	bl	8002950 <__sfp>
 8002912:	6060      	str	r0, [r4, #4]
 8002914:	4620      	mov	r0, r4
 8002916:	f000 f81b 	bl	8002950 <__sfp>
 800291a:	60a0      	str	r0, [r4, #8]
 800291c:	4620      	mov	r0, r4
 800291e:	f000 f817 	bl	8002950 <__sfp>
 8002922:	2200      	movs	r2, #0
 8002924:	2104      	movs	r1, #4
 8002926:	60e0      	str	r0, [r4, #12]
 8002928:	6860      	ldr	r0, [r4, #4]
 800292a:	f7ff ff81 	bl	8002830 <std>
 800292e:	2201      	movs	r2, #1
 8002930:	2109      	movs	r1, #9
 8002932:	68a0      	ldr	r0, [r4, #8]
 8002934:	f7ff ff7c 	bl	8002830 <std>
 8002938:	2202      	movs	r2, #2
 800293a:	2112      	movs	r1, #18
 800293c:	68e0      	ldr	r0, [r4, #12]
 800293e:	f7ff ff77 	bl	8002830 <std>
 8002942:	2301      	movs	r3, #1
 8002944:	61a3      	str	r3, [r4, #24]
 8002946:	e7d1      	b.n	80028ec <__sinit+0xc>
 8002948:	08003870 	.word	0x08003870
 800294c:	08002879 	.word	0x08002879

08002950 <__sfp>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	4607      	mov	r7, r0
 8002954:	f7ff ffac 	bl	80028b0 <__sfp_lock_acquire>
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <__sfp+0x84>)
 800295a:	681e      	ldr	r6, [r3, #0]
 800295c:	69b3      	ldr	r3, [r6, #24]
 800295e:	b913      	cbnz	r3, 8002966 <__sfp+0x16>
 8002960:	4630      	mov	r0, r6
 8002962:	f7ff ffbd 	bl	80028e0 <__sinit>
 8002966:	3648      	adds	r6, #72	; 0x48
 8002968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800296c:	3b01      	subs	r3, #1
 800296e:	d503      	bpl.n	8002978 <__sfp+0x28>
 8002970:	6833      	ldr	r3, [r6, #0]
 8002972:	b30b      	cbz	r3, 80029b8 <__sfp+0x68>
 8002974:	6836      	ldr	r6, [r6, #0]
 8002976:	e7f7      	b.n	8002968 <__sfp+0x18>
 8002978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800297c:	b9d5      	cbnz	r5, 80029b4 <__sfp+0x64>
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <__sfp+0x88>)
 8002980:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002984:	60e3      	str	r3, [r4, #12]
 8002986:	6665      	str	r5, [r4, #100]	; 0x64
 8002988:	f000 f859 	bl	8002a3e <__retarget_lock_init_recursive>
 800298c:	f7ff ff96 	bl	80028bc <__sfp_lock_release>
 8002990:	2208      	movs	r2, #8
 8002992:	4629      	mov	r1, r5
 8002994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800299c:	6025      	str	r5, [r4, #0]
 800299e:	61a5      	str	r5, [r4, #24]
 80029a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80029a4:	f7ff fec8 	bl	8002738 <memset>
 80029a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80029b0:	4620      	mov	r0, r4
 80029b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029b4:	3468      	adds	r4, #104	; 0x68
 80029b6:	e7d9      	b.n	800296c <__sfp+0x1c>
 80029b8:	2104      	movs	r1, #4
 80029ba:	4638      	mov	r0, r7
 80029bc:	f7ff ff62 	bl	8002884 <__sfmoreglue>
 80029c0:	4604      	mov	r4, r0
 80029c2:	6030      	str	r0, [r6, #0]
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d1d5      	bne.n	8002974 <__sfp+0x24>
 80029c8:	f7ff ff78 	bl	80028bc <__sfp_lock_release>
 80029cc:	230c      	movs	r3, #12
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	e7ee      	b.n	80029b0 <__sfp+0x60>
 80029d2:	bf00      	nop
 80029d4:	08003870 	.word	0x08003870
 80029d8:	ffff0001 	.word	0xffff0001

080029dc <fiprintf>:
 80029dc:	b40e      	push	{r1, r2, r3}
 80029de:	b503      	push	{r0, r1, lr}
 80029e0:	4601      	mov	r1, r0
 80029e2:	ab03      	add	r3, sp, #12
 80029e4:	4805      	ldr	r0, [pc, #20]	; (80029fc <fiprintf+0x20>)
 80029e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80029ea:	6800      	ldr	r0, [r0, #0]
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	f000 f935 	bl	8002c5c <_vfiprintf_r>
 80029f2:	b002      	add	sp, #8
 80029f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029f8:	b003      	add	sp, #12
 80029fa:	4770      	bx	lr
 80029fc:	2000000c 	.word	0x2000000c

08002a00 <_fwalk_reent>:
 8002a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a04:	4606      	mov	r6, r0
 8002a06:	4688      	mov	r8, r1
 8002a08:	2700      	movs	r7, #0
 8002a0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a12:	f1b9 0901 	subs.w	r9, r9, #1
 8002a16:	d505      	bpl.n	8002a24 <_fwalk_reent+0x24>
 8002a18:	6824      	ldr	r4, [r4, #0]
 8002a1a:	2c00      	cmp	r4, #0
 8002a1c:	d1f7      	bne.n	8002a0e <_fwalk_reent+0xe>
 8002a1e:	4638      	mov	r0, r7
 8002a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a24:	89ab      	ldrh	r3, [r5, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d907      	bls.n	8002a3a <_fwalk_reent+0x3a>
 8002a2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	d003      	beq.n	8002a3a <_fwalk_reent+0x3a>
 8002a32:	4629      	mov	r1, r5
 8002a34:	4630      	mov	r0, r6
 8002a36:	47c0      	blx	r8
 8002a38:	4307      	orrs	r7, r0
 8002a3a:	3568      	adds	r5, #104	; 0x68
 8002a3c:	e7e9      	b.n	8002a12 <_fwalk_reent+0x12>

08002a3e <__retarget_lock_init_recursive>:
 8002a3e:	4770      	bx	lr

08002a40 <__retarget_lock_acquire_recursive>:
 8002a40:	4770      	bx	lr

08002a42 <__retarget_lock_release_recursive>:
 8002a42:	4770      	bx	lr

08002a44 <malloc>:
 8002a44:	4b02      	ldr	r3, [pc, #8]	; (8002a50 <malloc+0xc>)
 8002a46:	4601      	mov	r1, r0
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	f000 b86b 	b.w	8002b24 <_malloc_r>
 8002a4e:	bf00      	nop
 8002a50:	2000000c 	.word	0x2000000c

08002a54 <_free_r>:
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4605      	mov	r5, r0
 8002a58:	2900      	cmp	r1, #0
 8002a5a:	d040      	beq.n	8002ade <_free_r+0x8a>
 8002a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a60:	1f0c      	subs	r4, r1, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfb8      	it	lt
 8002a66:	18e4      	addlt	r4, r4, r3
 8002a68:	f000 fe40 	bl	80036ec <__malloc_lock>
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <_free_r+0x8c>)
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	b933      	cbnz	r3, 8002a80 <_free_r+0x2c>
 8002a72:	6063      	str	r3, [r4, #4]
 8002a74:	6014      	str	r4, [r2, #0]
 8002a76:	4628      	mov	r0, r5
 8002a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a7c:	f000 be3c 	b.w	80036f8 <__malloc_unlock>
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	d908      	bls.n	8002a96 <_free_r+0x42>
 8002a84:	6820      	ldr	r0, [r4, #0]
 8002a86:	1821      	adds	r1, r4, r0
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	bf01      	itttt	eq
 8002a8c:	6819      	ldreq	r1, [r3, #0]
 8002a8e:	685b      	ldreq	r3, [r3, #4]
 8002a90:	1809      	addeq	r1, r1, r0
 8002a92:	6021      	streq	r1, [r4, #0]
 8002a94:	e7ed      	b.n	8002a72 <_free_r+0x1e>
 8002a96:	461a      	mov	r2, r3
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b10b      	cbz	r3, 8002aa0 <_free_r+0x4c>
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	d9fa      	bls.n	8002a96 <_free_r+0x42>
 8002aa0:	6811      	ldr	r1, [r2, #0]
 8002aa2:	1850      	adds	r0, r2, r1
 8002aa4:	42a0      	cmp	r0, r4
 8002aa6:	d10b      	bne.n	8002ac0 <_free_r+0x6c>
 8002aa8:	6820      	ldr	r0, [r4, #0]
 8002aaa:	4401      	add	r1, r0
 8002aac:	1850      	adds	r0, r2, r1
 8002aae:	4283      	cmp	r3, r0
 8002ab0:	6011      	str	r1, [r2, #0]
 8002ab2:	d1e0      	bne.n	8002a76 <_free_r+0x22>
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4401      	add	r1, r0
 8002aba:	6011      	str	r1, [r2, #0]
 8002abc:	6053      	str	r3, [r2, #4]
 8002abe:	e7da      	b.n	8002a76 <_free_r+0x22>
 8002ac0:	d902      	bls.n	8002ac8 <_free_r+0x74>
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	602b      	str	r3, [r5, #0]
 8002ac6:	e7d6      	b.n	8002a76 <_free_r+0x22>
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	1821      	adds	r1, r4, r0
 8002acc:	428b      	cmp	r3, r1
 8002ace:	bf01      	itttt	eq
 8002ad0:	6819      	ldreq	r1, [r3, #0]
 8002ad2:	685b      	ldreq	r3, [r3, #4]
 8002ad4:	1809      	addeq	r1, r1, r0
 8002ad6:	6021      	streq	r1, [r4, #0]
 8002ad8:	6063      	str	r3, [r4, #4]
 8002ada:	6054      	str	r4, [r2, #4]
 8002adc:	e7cb      	b.n	8002a76 <_free_r+0x22>
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	20000130 	.word	0x20000130

08002ae4 <sbrk_aligned>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	4e0e      	ldr	r6, [pc, #56]	; (8002b20 <sbrk_aligned+0x3c>)
 8002ae8:	460c      	mov	r4, r1
 8002aea:	6831      	ldr	r1, [r6, #0]
 8002aec:	4605      	mov	r5, r0
 8002aee:	b911      	cbnz	r1, 8002af6 <sbrk_aligned+0x12>
 8002af0:	f000 fb7a 	bl	80031e8 <_sbrk_r>
 8002af4:	6030      	str	r0, [r6, #0]
 8002af6:	4621      	mov	r1, r4
 8002af8:	4628      	mov	r0, r5
 8002afa:	f000 fb75 	bl	80031e8 <_sbrk_r>
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	d00a      	beq.n	8002b18 <sbrk_aligned+0x34>
 8002b02:	1cc4      	adds	r4, r0, #3
 8002b04:	f024 0403 	bic.w	r4, r4, #3
 8002b08:	42a0      	cmp	r0, r4
 8002b0a:	d007      	beq.n	8002b1c <sbrk_aligned+0x38>
 8002b0c:	1a21      	subs	r1, r4, r0
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f000 fb6a 	bl	80031e8 <_sbrk_r>
 8002b14:	3001      	adds	r0, #1
 8002b16:	d101      	bne.n	8002b1c <sbrk_aligned+0x38>
 8002b18:	f04f 34ff 	mov.w	r4, #4294967295
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	20000134 	.word	0x20000134

08002b24 <_malloc_r>:
 8002b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b28:	1ccd      	adds	r5, r1, #3
 8002b2a:	f025 0503 	bic.w	r5, r5, #3
 8002b2e:	3508      	adds	r5, #8
 8002b30:	2d0c      	cmp	r5, #12
 8002b32:	bf38      	it	cc
 8002b34:	250c      	movcc	r5, #12
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	4607      	mov	r7, r0
 8002b3a:	db01      	blt.n	8002b40 <_malloc_r+0x1c>
 8002b3c:	42a9      	cmp	r1, r5
 8002b3e:	d905      	bls.n	8002b4c <_malloc_r+0x28>
 8002b40:	230c      	movs	r3, #12
 8002b42:	2600      	movs	r6, #0
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	4630      	mov	r0, r6
 8002b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b4c:	4e2e      	ldr	r6, [pc, #184]	; (8002c08 <_malloc_r+0xe4>)
 8002b4e:	f000 fdcd 	bl	80036ec <__malloc_lock>
 8002b52:	6833      	ldr	r3, [r6, #0]
 8002b54:	461c      	mov	r4, r3
 8002b56:	bb34      	cbnz	r4, 8002ba6 <_malloc_r+0x82>
 8002b58:	4629      	mov	r1, r5
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	f7ff ffc2 	bl	8002ae4 <sbrk_aligned>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	4604      	mov	r4, r0
 8002b64:	d14d      	bne.n	8002c02 <_malloc_r+0xde>
 8002b66:	6834      	ldr	r4, [r6, #0]
 8002b68:	4626      	mov	r6, r4
 8002b6a:	2e00      	cmp	r6, #0
 8002b6c:	d140      	bne.n	8002bf0 <_malloc_r+0xcc>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	4631      	mov	r1, r6
 8002b72:	4638      	mov	r0, r7
 8002b74:	eb04 0803 	add.w	r8, r4, r3
 8002b78:	f000 fb36 	bl	80031e8 <_sbrk_r>
 8002b7c:	4580      	cmp	r8, r0
 8002b7e:	d13a      	bne.n	8002bf6 <_malloc_r+0xd2>
 8002b80:	6821      	ldr	r1, [r4, #0]
 8002b82:	3503      	adds	r5, #3
 8002b84:	1a6d      	subs	r5, r5, r1
 8002b86:	f025 0503 	bic.w	r5, r5, #3
 8002b8a:	3508      	adds	r5, #8
 8002b8c:	2d0c      	cmp	r5, #12
 8002b8e:	bf38      	it	cc
 8002b90:	250c      	movcc	r5, #12
 8002b92:	4638      	mov	r0, r7
 8002b94:	4629      	mov	r1, r5
 8002b96:	f7ff ffa5 	bl	8002ae4 <sbrk_aligned>
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	d02b      	beq.n	8002bf6 <_malloc_r+0xd2>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	442b      	add	r3, r5
 8002ba2:	6023      	str	r3, [r4, #0]
 8002ba4:	e00e      	b.n	8002bc4 <_malloc_r+0xa0>
 8002ba6:	6822      	ldr	r2, [r4, #0]
 8002ba8:	1b52      	subs	r2, r2, r5
 8002baa:	d41e      	bmi.n	8002bea <_malloc_r+0xc6>
 8002bac:	2a0b      	cmp	r2, #11
 8002bae:	d916      	bls.n	8002bde <_malloc_r+0xba>
 8002bb0:	1961      	adds	r1, r4, r5
 8002bb2:	42a3      	cmp	r3, r4
 8002bb4:	6025      	str	r5, [r4, #0]
 8002bb6:	bf18      	it	ne
 8002bb8:	6059      	strne	r1, [r3, #4]
 8002bba:	6863      	ldr	r3, [r4, #4]
 8002bbc:	bf08      	it	eq
 8002bbe:	6031      	streq	r1, [r6, #0]
 8002bc0:	5162      	str	r2, [r4, r5]
 8002bc2:	604b      	str	r3, [r1, #4]
 8002bc4:	4638      	mov	r0, r7
 8002bc6:	f104 060b 	add.w	r6, r4, #11
 8002bca:	f000 fd95 	bl	80036f8 <__malloc_unlock>
 8002bce:	f026 0607 	bic.w	r6, r6, #7
 8002bd2:	1d23      	adds	r3, r4, #4
 8002bd4:	1af2      	subs	r2, r6, r3
 8002bd6:	d0b6      	beq.n	8002b46 <_malloc_r+0x22>
 8002bd8:	1b9b      	subs	r3, r3, r6
 8002bda:	50a3      	str	r3, [r4, r2]
 8002bdc:	e7b3      	b.n	8002b46 <_malloc_r+0x22>
 8002bde:	6862      	ldr	r2, [r4, #4]
 8002be0:	42a3      	cmp	r3, r4
 8002be2:	bf0c      	ite	eq
 8002be4:	6032      	streq	r2, [r6, #0]
 8002be6:	605a      	strne	r2, [r3, #4]
 8002be8:	e7ec      	b.n	8002bc4 <_malloc_r+0xa0>
 8002bea:	4623      	mov	r3, r4
 8002bec:	6864      	ldr	r4, [r4, #4]
 8002bee:	e7b2      	b.n	8002b56 <_malloc_r+0x32>
 8002bf0:	4634      	mov	r4, r6
 8002bf2:	6876      	ldr	r6, [r6, #4]
 8002bf4:	e7b9      	b.n	8002b6a <_malloc_r+0x46>
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	f000 fd7c 	bl	80036f8 <__malloc_unlock>
 8002c00:	e7a1      	b.n	8002b46 <_malloc_r+0x22>
 8002c02:	6025      	str	r5, [r4, #0]
 8002c04:	e7de      	b.n	8002bc4 <_malloc_r+0xa0>
 8002c06:	bf00      	nop
 8002c08:	20000130 	.word	0x20000130

08002c0c <__sfputc_r>:
 8002c0c:	6893      	ldr	r3, [r2, #8]
 8002c0e:	b410      	push	{r4}
 8002c10:	3b01      	subs	r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	6093      	str	r3, [r2, #8]
 8002c16:	da07      	bge.n	8002c28 <__sfputc_r+0x1c>
 8002c18:	6994      	ldr	r4, [r2, #24]
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	db01      	blt.n	8002c22 <__sfputc_r+0x16>
 8002c1e:	290a      	cmp	r1, #10
 8002c20:	d102      	bne.n	8002c28 <__sfputc_r+0x1c>
 8002c22:	bc10      	pop	{r4}
 8002c24:	f000 bb34 	b.w	8003290 <__swbuf_r>
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	1c58      	adds	r0, r3, #1
 8002c2c:	6010      	str	r0, [r2, #0]
 8002c2e:	7019      	strb	r1, [r3, #0]
 8002c30:	4608      	mov	r0, r1
 8002c32:	bc10      	pop	{r4}
 8002c34:	4770      	bx	lr

08002c36 <__sfputs_r>:
 8002c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c38:	4606      	mov	r6, r0
 8002c3a:	460f      	mov	r7, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	18d5      	adds	r5, r2, r3
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	d101      	bne.n	8002c48 <__sfputs_r+0x12>
 8002c44:	2000      	movs	r0, #0
 8002c46:	e007      	b.n	8002c58 <__sfputs_r+0x22>
 8002c48:	463a      	mov	r2, r7
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c50:	f7ff ffdc 	bl	8002c0c <__sfputc_r>
 8002c54:	1c43      	adds	r3, r0, #1
 8002c56:	d1f3      	bne.n	8002c40 <__sfputs_r+0xa>
 8002c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c5c <_vfiprintf_r>:
 8002c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c60:	460d      	mov	r5, r1
 8002c62:	4614      	mov	r4, r2
 8002c64:	4698      	mov	r8, r3
 8002c66:	4606      	mov	r6, r0
 8002c68:	b09d      	sub	sp, #116	; 0x74
 8002c6a:	b118      	cbz	r0, 8002c74 <_vfiprintf_r+0x18>
 8002c6c:	6983      	ldr	r3, [r0, #24]
 8002c6e:	b90b      	cbnz	r3, 8002c74 <_vfiprintf_r+0x18>
 8002c70:	f7ff fe36 	bl	80028e0 <__sinit>
 8002c74:	4b89      	ldr	r3, [pc, #548]	; (8002e9c <_vfiprintf_r+0x240>)
 8002c76:	429d      	cmp	r5, r3
 8002c78:	d11b      	bne.n	8002cb2 <_vfiprintf_r+0x56>
 8002c7a:	6875      	ldr	r5, [r6, #4]
 8002c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c7e:	07d9      	lsls	r1, r3, #31
 8002c80:	d405      	bmi.n	8002c8e <_vfiprintf_r+0x32>
 8002c82:	89ab      	ldrh	r3, [r5, #12]
 8002c84:	059a      	lsls	r2, r3, #22
 8002c86:	d402      	bmi.n	8002c8e <_vfiprintf_r+0x32>
 8002c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c8a:	f7ff fed9 	bl	8002a40 <__retarget_lock_acquire_recursive>
 8002c8e:	89ab      	ldrh	r3, [r5, #12]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	d501      	bpl.n	8002c98 <_vfiprintf_r+0x3c>
 8002c94:	692b      	ldr	r3, [r5, #16]
 8002c96:	b9eb      	cbnz	r3, 8002cd4 <_vfiprintf_r+0x78>
 8002c98:	4629      	mov	r1, r5
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	f000 fb5c 	bl	8003358 <__swsetup_r>
 8002ca0:	b1c0      	cbz	r0, 8002cd4 <_vfiprintf_r+0x78>
 8002ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ca4:	07dc      	lsls	r4, r3, #31
 8002ca6:	d50e      	bpl.n	8002cc6 <_vfiprintf_r+0x6a>
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	b01d      	add	sp, #116	; 0x74
 8002cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb2:	4b7b      	ldr	r3, [pc, #492]	; (8002ea0 <_vfiprintf_r+0x244>)
 8002cb4:	429d      	cmp	r5, r3
 8002cb6:	d101      	bne.n	8002cbc <_vfiprintf_r+0x60>
 8002cb8:	68b5      	ldr	r5, [r6, #8]
 8002cba:	e7df      	b.n	8002c7c <_vfiprintf_r+0x20>
 8002cbc:	4b79      	ldr	r3, [pc, #484]	; (8002ea4 <_vfiprintf_r+0x248>)
 8002cbe:	429d      	cmp	r5, r3
 8002cc0:	bf08      	it	eq
 8002cc2:	68f5      	ldreq	r5, [r6, #12]
 8002cc4:	e7da      	b.n	8002c7c <_vfiprintf_r+0x20>
 8002cc6:	89ab      	ldrh	r3, [r5, #12]
 8002cc8:	0598      	lsls	r0, r3, #22
 8002cca:	d4ed      	bmi.n	8002ca8 <_vfiprintf_r+0x4c>
 8002ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cce:	f7ff feb8 	bl	8002a42 <__retarget_lock_release_recursive>
 8002cd2:	e7e9      	b.n	8002ca8 <_vfiprintf_r+0x4c>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cd8:	2320      	movs	r3, #32
 8002cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cde:	2330      	movs	r3, #48	; 0x30
 8002ce0:	f04f 0901 	mov.w	r9, #1
 8002ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ce8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002ea8 <_vfiprintf_r+0x24c>
 8002cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cf0:	4623      	mov	r3, r4
 8002cf2:	469a      	mov	sl, r3
 8002cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cf8:	b10a      	cbz	r2, 8002cfe <_vfiprintf_r+0xa2>
 8002cfa:	2a25      	cmp	r2, #37	; 0x25
 8002cfc:	d1f9      	bne.n	8002cf2 <_vfiprintf_r+0x96>
 8002cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8002d02:	d00b      	beq.n	8002d1c <_vfiprintf_r+0xc0>
 8002d04:	465b      	mov	r3, fp
 8002d06:	4622      	mov	r2, r4
 8002d08:	4629      	mov	r1, r5
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	f7ff ff93 	bl	8002c36 <__sfputs_r>
 8002d10:	3001      	adds	r0, #1
 8002d12:	f000 80aa 	beq.w	8002e6a <_vfiprintf_r+0x20e>
 8002d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d18:	445a      	add	r2, fp
 8002d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8002d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a2 	beq.w	8002e6a <_vfiprintf_r+0x20e>
 8002d26:	2300      	movs	r3, #0
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d30:	f10a 0a01 	add.w	sl, sl, #1
 8002d34:	9304      	str	r3, [sp, #16]
 8002d36:	9307      	str	r3, [sp, #28]
 8002d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8002d3e:	4654      	mov	r4, sl
 8002d40:	2205      	movs	r2, #5
 8002d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d46:	4858      	ldr	r0, [pc, #352]	; (8002ea8 <_vfiprintf_r+0x24c>)
 8002d48:	f000 fcc2 	bl	80036d0 <memchr>
 8002d4c:	9a04      	ldr	r2, [sp, #16]
 8002d4e:	b9d8      	cbnz	r0, 8002d88 <_vfiprintf_r+0x12c>
 8002d50:	06d1      	lsls	r1, r2, #27
 8002d52:	bf44      	itt	mi
 8002d54:	2320      	movmi	r3, #32
 8002d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d5a:	0713      	lsls	r3, r2, #28
 8002d5c:	bf44      	itt	mi
 8002d5e:	232b      	movmi	r3, #43	; 0x2b
 8002d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d64:	f89a 3000 	ldrb.w	r3, [sl]
 8002d68:	2b2a      	cmp	r3, #42	; 0x2a
 8002d6a:	d015      	beq.n	8002d98 <_vfiprintf_r+0x13c>
 8002d6c:	4654      	mov	r4, sl
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f04f 0c0a 	mov.w	ip, #10
 8002d74:	9a07      	ldr	r2, [sp, #28]
 8002d76:	4621      	mov	r1, r4
 8002d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d7c:	3b30      	subs	r3, #48	; 0x30
 8002d7e:	2b09      	cmp	r3, #9
 8002d80:	d94e      	bls.n	8002e20 <_vfiprintf_r+0x1c4>
 8002d82:	b1b0      	cbz	r0, 8002db2 <_vfiprintf_r+0x156>
 8002d84:	9207      	str	r2, [sp, #28]
 8002d86:	e014      	b.n	8002db2 <_vfiprintf_r+0x156>
 8002d88:	eba0 0308 	sub.w	r3, r0, r8
 8002d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8002d90:	4313      	orrs	r3, r2
 8002d92:	46a2      	mov	sl, r4
 8002d94:	9304      	str	r3, [sp, #16]
 8002d96:	e7d2      	b.n	8002d3e <_vfiprintf_r+0xe2>
 8002d98:	9b03      	ldr	r3, [sp, #12]
 8002d9a:	1d19      	adds	r1, r3, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	9103      	str	r1, [sp, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bfbb      	ittet	lt
 8002da4:	425b      	neglt	r3, r3
 8002da6:	f042 0202 	orrlt.w	r2, r2, #2
 8002daa:	9307      	strge	r3, [sp, #28]
 8002dac:	9307      	strlt	r3, [sp, #28]
 8002dae:	bfb8      	it	lt
 8002db0:	9204      	strlt	r2, [sp, #16]
 8002db2:	7823      	ldrb	r3, [r4, #0]
 8002db4:	2b2e      	cmp	r3, #46	; 0x2e
 8002db6:	d10c      	bne.n	8002dd2 <_vfiprintf_r+0x176>
 8002db8:	7863      	ldrb	r3, [r4, #1]
 8002dba:	2b2a      	cmp	r3, #42	; 0x2a
 8002dbc:	d135      	bne.n	8002e2a <_vfiprintf_r+0x1ce>
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	3402      	adds	r4, #2
 8002dc2:	1d1a      	adds	r2, r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	9203      	str	r2, [sp, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bfb8      	it	lt
 8002dcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002dd0:	9305      	str	r3, [sp, #20]
 8002dd2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002eac <_vfiprintf_r+0x250>
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	4650      	mov	r0, sl
 8002dda:	7821      	ldrb	r1, [r4, #0]
 8002ddc:	f000 fc78 	bl	80036d0 <memchr>
 8002de0:	b140      	cbz	r0, 8002df4 <_vfiprintf_r+0x198>
 8002de2:	2340      	movs	r3, #64	; 0x40
 8002de4:	eba0 000a 	sub.w	r0, r0, sl
 8002de8:	fa03 f000 	lsl.w	r0, r3, r0
 8002dec:	9b04      	ldr	r3, [sp, #16]
 8002dee:	3401      	adds	r4, #1
 8002df0:	4303      	orrs	r3, r0
 8002df2:	9304      	str	r3, [sp, #16]
 8002df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002df8:	2206      	movs	r2, #6
 8002dfa:	482d      	ldr	r0, [pc, #180]	; (8002eb0 <_vfiprintf_r+0x254>)
 8002dfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e00:	f000 fc66 	bl	80036d0 <memchr>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d03f      	beq.n	8002e88 <_vfiprintf_r+0x22c>
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <_vfiprintf_r+0x258>)
 8002e0a:	bb1b      	cbnz	r3, 8002e54 <_vfiprintf_r+0x1f8>
 8002e0c:	9b03      	ldr	r3, [sp, #12]
 8002e0e:	3307      	adds	r3, #7
 8002e10:	f023 0307 	bic.w	r3, r3, #7
 8002e14:	3308      	adds	r3, #8
 8002e16:	9303      	str	r3, [sp, #12]
 8002e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e1a:	443b      	add	r3, r7
 8002e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e1e:	e767      	b.n	8002cf0 <_vfiprintf_r+0x94>
 8002e20:	460c      	mov	r4, r1
 8002e22:	2001      	movs	r0, #1
 8002e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e28:	e7a5      	b.n	8002d76 <_vfiprintf_r+0x11a>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f04f 0c0a 	mov.w	ip, #10
 8002e30:	4619      	mov	r1, r3
 8002e32:	3401      	adds	r4, #1
 8002e34:	9305      	str	r3, [sp, #20]
 8002e36:	4620      	mov	r0, r4
 8002e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e3c:	3a30      	subs	r2, #48	; 0x30
 8002e3e:	2a09      	cmp	r2, #9
 8002e40:	d903      	bls.n	8002e4a <_vfiprintf_r+0x1ee>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0c5      	beq.n	8002dd2 <_vfiprintf_r+0x176>
 8002e46:	9105      	str	r1, [sp, #20]
 8002e48:	e7c3      	b.n	8002dd2 <_vfiprintf_r+0x176>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e52:	e7f0      	b.n	8002e36 <_vfiprintf_r+0x1da>
 8002e54:	ab03      	add	r3, sp, #12
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	462a      	mov	r2, r5
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <_vfiprintf_r+0x25c>)
 8002e5e:	a904      	add	r1, sp, #16
 8002e60:	f3af 8000 	nop.w
 8002e64:	4607      	mov	r7, r0
 8002e66:	1c78      	adds	r0, r7, #1
 8002e68:	d1d6      	bne.n	8002e18 <_vfiprintf_r+0x1bc>
 8002e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e6c:	07d9      	lsls	r1, r3, #31
 8002e6e:	d405      	bmi.n	8002e7c <_vfiprintf_r+0x220>
 8002e70:	89ab      	ldrh	r3, [r5, #12]
 8002e72:	059a      	lsls	r2, r3, #22
 8002e74:	d402      	bmi.n	8002e7c <_vfiprintf_r+0x220>
 8002e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e78:	f7ff fde3 	bl	8002a42 <__retarget_lock_release_recursive>
 8002e7c:	89ab      	ldrh	r3, [r5, #12]
 8002e7e:	065b      	lsls	r3, r3, #25
 8002e80:	f53f af12 	bmi.w	8002ca8 <_vfiprintf_r+0x4c>
 8002e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e86:	e711      	b.n	8002cac <_vfiprintf_r+0x50>
 8002e88:	ab03      	add	r3, sp, #12
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	462a      	mov	r2, r5
 8002e8e:	4630      	mov	r0, r6
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <_vfiprintf_r+0x25c>)
 8002e92:	a904      	add	r1, sp, #16
 8002e94:	f000 f882 	bl	8002f9c <_printf_i>
 8002e98:	e7e4      	b.n	8002e64 <_vfiprintf_r+0x208>
 8002e9a:	bf00      	nop
 8002e9c:	08003944 	.word	0x08003944
 8002ea0:	08003964 	.word	0x08003964
 8002ea4:	08003924 	.word	0x08003924
 8002ea8:	08003984 	.word	0x08003984
 8002eac:	0800398a 	.word	0x0800398a
 8002eb0:	0800398e 	.word	0x0800398e
 8002eb4:	00000000 	.word	0x00000000
 8002eb8:	08002c37 	.word	0x08002c37

08002ebc <_printf_common>:
 8002ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec0:	4616      	mov	r6, r2
 8002ec2:	4699      	mov	r9, r3
 8002ec4:	688a      	ldr	r2, [r1, #8]
 8002ec6:	690b      	ldr	r3, [r1, #16]
 8002ec8:	4607      	mov	r7, r0
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	bfb8      	it	lt
 8002ece:	4613      	movlt	r3, r2
 8002ed0:	6033      	str	r3, [r6, #0]
 8002ed2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002edc:	b10a      	cbz	r2, 8002ee2 <_printf_common+0x26>
 8002ede:	3301      	adds	r3, #1
 8002ee0:	6033      	str	r3, [r6, #0]
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	0699      	lsls	r1, r3, #26
 8002ee6:	bf42      	ittt	mi
 8002ee8:	6833      	ldrmi	r3, [r6, #0]
 8002eea:	3302      	addmi	r3, #2
 8002eec:	6033      	strmi	r3, [r6, #0]
 8002eee:	6825      	ldr	r5, [r4, #0]
 8002ef0:	f015 0506 	ands.w	r5, r5, #6
 8002ef4:	d106      	bne.n	8002f04 <_printf_common+0x48>
 8002ef6:	f104 0a19 	add.w	sl, r4, #25
 8002efa:	68e3      	ldr	r3, [r4, #12]
 8002efc:	6832      	ldr	r2, [r6, #0]
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	42ab      	cmp	r3, r5
 8002f02:	dc28      	bgt.n	8002f56 <_printf_common+0x9a>
 8002f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f08:	1e13      	subs	r3, r2, #0
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	bf18      	it	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	0692      	lsls	r2, r2, #26
 8002f12:	d42d      	bmi.n	8002f70 <_printf_common+0xb4>
 8002f14:	4649      	mov	r1, r9
 8002f16:	4638      	mov	r0, r7
 8002f18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f1c:	47c0      	blx	r8
 8002f1e:	3001      	adds	r0, #1
 8002f20:	d020      	beq.n	8002f64 <_printf_common+0xa8>
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	68e5      	ldr	r5, [r4, #12]
 8002f26:	f003 0306 	and.w	r3, r3, #6
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	bf18      	it	ne
 8002f2e:	2500      	movne	r5, #0
 8002f30:	6832      	ldr	r2, [r6, #0]
 8002f32:	f04f 0600 	mov.w	r6, #0
 8002f36:	68a3      	ldr	r3, [r4, #8]
 8002f38:	bf08      	it	eq
 8002f3a:	1aad      	subeq	r5, r5, r2
 8002f3c:	6922      	ldr	r2, [r4, #16]
 8002f3e:	bf08      	it	eq
 8002f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bfc4      	itt	gt
 8002f48:	1a9b      	subgt	r3, r3, r2
 8002f4a:	18ed      	addgt	r5, r5, r3
 8002f4c:	341a      	adds	r4, #26
 8002f4e:	42b5      	cmp	r5, r6
 8002f50:	d11a      	bne.n	8002f88 <_printf_common+0xcc>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e008      	b.n	8002f68 <_printf_common+0xac>
 8002f56:	2301      	movs	r3, #1
 8002f58:	4652      	mov	r2, sl
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	47c0      	blx	r8
 8002f60:	3001      	adds	r0, #1
 8002f62:	d103      	bne.n	8002f6c <_printf_common+0xb0>
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f6c:	3501      	adds	r5, #1
 8002f6e:	e7c4      	b.n	8002efa <_printf_common+0x3e>
 8002f70:	2030      	movs	r0, #48	; 0x30
 8002f72:	18e1      	adds	r1, r4, r3
 8002f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f7e:	4422      	add	r2, r4
 8002f80:	3302      	adds	r3, #2
 8002f82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f86:	e7c5      	b.n	8002f14 <_printf_common+0x58>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	4638      	mov	r0, r7
 8002f90:	47c0      	blx	r8
 8002f92:	3001      	adds	r0, #1
 8002f94:	d0e6      	beq.n	8002f64 <_printf_common+0xa8>
 8002f96:	3601      	adds	r6, #1
 8002f98:	e7d9      	b.n	8002f4e <_printf_common+0x92>
	...

08002f9c <_printf_i>:
 8002f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa0:	7e0f      	ldrb	r7, [r1, #24]
 8002fa2:	4691      	mov	r9, r2
 8002fa4:	2f78      	cmp	r7, #120	; 0x78
 8002fa6:	4680      	mov	r8, r0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	469a      	mov	sl, r3
 8002fac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fb2:	d807      	bhi.n	8002fc4 <_printf_i+0x28>
 8002fb4:	2f62      	cmp	r7, #98	; 0x62
 8002fb6:	d80a      	bhi.n	8002fce <_printf_i+0x32>
 8002fb8:	2f00      	cmp	r7, #0
 8002fba:	f000 80d9 	beq.w	8003170 <_printf_i+0x1d4>
 8002fbe:	2f58      	cmp	r7, #88	; 0x58
 8002fc0:	f000 80a4 	beq.w	800310c <_printf_i+0x170>
 8002fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fcc:	e03a      	b.n	8003044 <_printf_i+0xa8>
 8002fce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fd2:	2b15      	cmp	r3, #21
 8002fd4:	d8f6      	bhi.n	8002fc4 <_printf_i+0x28>
 8002fd6:	a101      	add	r1, pc, #4	; (adr r1, 8002fdc <_printf_i+0x40>)
 8002fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fdc:	08003035 	.word	0x08003035
 8002fe0:	08003049 	.word	0x08003049
 8002fe4:	08002fc5 	.word	0x08002fc5
 8002fe8:	08002fc5 	.word	0x08002fc5
 8002fec:	08002fc5 	.word	0x08002fc5
 8002ff0:	08002fc5 	.word	0x08002fc5
 8002ff4:	08003049 	.word	0x08003049
 8002ff8:	08002fc5 	.word	0x08002fc5
 8002ffc:	08002fc5 	.word	0x08002fc5
 8003000:	08002fc5 	.word	0x08002fc5
 8003004:	08002fc5 	.word	0x08002fc5
 8003008:	08003157 	.word	0x08003157
 800300c:	08003079 	.word	0x08003079
 8003010:	08003139 	.word	0x08003139
 8003014:	08002fc5 	.word	0x08002fc5
 8003018:	08002fc5 	.word	0x08002fc5
 800301c:	08003179 	.word	0x08003179
 8003020:	08002fc5 	.word	0x08002fc5
 8003024:	08003079 	.word	0x08003079
 8003028:	08002fc5 	.word	0x08002fc5
 800302c:	08002fc5 	.word	0x08002fc5
 8003030:	08003141 	.word	0x08003141
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	1d1a      	adds	r2, r3, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	602a      	str	r2, [r5, #0]
 800303c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003044:	2301      	movs	r3, #1
 8003046:	e0a4      	b.n	8003192 <_printf_i+0x1f6>
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	6829      	ldr	r1, [r5, #0]
 800304c:	0606      	lsls	r6, r0, #24
 800304e:	f101 0304 	add.w	r3, r1, #4
 8003052:	d50a      	bpl.n	800306a <_printf_i+0xce>
 8003054:	680e      	ldr	r6, [r1, #0]
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	2e00      	cmp	r6, #0
 800305a:	da03      	bge.n	8003064 <_printf_i+0xc8>
 800305c:	232d      	movs	r3, #45	; 0x2d
 800305e:	4276      	negs	r6, r6
 8003060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003064:	230a      	movs	r3, #10
 8003066:	485e      	ldr	r0, [pc, #376]	; (80031e0 <_printf_i+0x244>)
 8003068:	e019      	b.n	800309e <_printf_i+0x102>
 800306a:	680e      	ldr	r6, [r1, #0]
 800306c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003070:	602b      	str	r3, [r5, #0]
 8003072:	bf18      	it	ne
 8003074:	b236      	sxthne	r6, r6
 8003076:	e7ef      	b.n	8003058 <_printf_i+0xbc>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	6820      	ldr	r0, [r4, #0]
 800307c:	1d19      	adds	r1, r3, #4
 800307e:	6029      	str	r1, [r5, #0]
 8003080:	0601      	lsls	r1, r0, #24
 8003082:	d501      	bpl.n	8003088 <_printf_i+0xec>
 8003084:	681e      	ldr	r6, [r3, #0]
 8003086:	e002      	b.n	800308e <_printf_i+0xf2>
 8003088:	0646      	lsls	r6, r0, #25
 800308a:	d5fb      	bpl.n	8003084 <_printf_i+0xe8>
 800308c:	881e      	ldrh	r6, [r3, #0]
 800308e:	2f6f      	cmp	r7, #111	; 0x6f
 8003090:	bf0c      	ite	eq
 8003092:	2308      	moveq	r3, #8
 8003094:	230a      	movne	r3, #10
 8003096:	4852      	ldr	r0, [pc, #328]	; (80031e0 <_printf_i+0x244>)
 8003098:	2100      	movs	r1, #0
 800309a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800309e:	6865      	ldr	r5, [r4, #4]
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	bfa8      	it	ge
 80030a4:	6821      	ldrge	r1, [r4, #0]
 80030a6:	60a5      	str	r5, [r4, #8]
 80030a8:	bfa4      	itt	ge
 80030aa:	f021 0104 	bicge.w	r1, r1, #4
 80030ae:	6021      	strge	r1, [r4, #0]
 80030b0:	b90e      	cbnz	r6, 80030b6 <_printf_i+0x11a>
 80030b2:	2d00      	cmp	r5, #0
 80030b4:	d04d      	beq.n	8003152 <_printf_i+0x1b6>
 80030b6:	4615      	mov	r5, r2
 80030b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80030bc:	fb03 6711 	mls	r7, r3, r1, r6
 80030c0:	5dc7      	ldrb	r7, [r0, r7]
 80030c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030c6:	4637      	mov	r7, r6
 80030c8:	42bb      	cmp	r3, r7
 80030ca:	460e      	mov	r6, r1
 80030cc:	d9f4      	bls.n	80030b8 <_printf_i+0x11c>
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d10b      	bne.n	80030ea <_printf_i+0x14e>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	07de      	lsls	r6, r3, #31
 80030d6:	d508      	bpl.n	80030ea <_printf_i+0x14e>
 80030d8:	6923      	ldr	r3, [r4, #16]
 80030da:	6861      	ldr	r1, [r4, #4]
 80030dc:	4299      	cmp	r1, r3
 80030de:	bfde      	ittt	le
 80030e0:	2330      	movle	r3, #48	; 0x30
 80030e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030ea:	1b52      	subs	r2, r2, r5
 80030ec:	6122      	str	r2, [r4, #16]
 80030ee:	464b      	mov	r3, r9
 80030f0:	4621      	mov	r1, r4
 80030f2:	4640      	mov	r0, r8
 80030f4:	f8cd a000 	str.w	sl, [sp]
 80030f8:	aa03      	add	r2, sp, #12
 80030fa:	f7ff fedf 	bl	8002ebc <_printf_common>
 80030fe:	3001      	adds	r0, #1
 8003100:	d14c      	bne.n	800319c <_printf_i+0x200>
 8003102:	f04f 30ff 	mov.w	r0, #4294967295
 8003106:	b004      	add	sp, #16
 8003108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800310c:	4834      	ldr	r0, [pc, #208]	; (80031e0 <_printf_i+0x244>)
 800310e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003112:	6829      	ldr	r1, [r5, #0]
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	f851 6b04 	ldr.w	r6, [r1], #4
 800311a:	6029      	str	r1, [r5, #0]
 800311c:	061d      	lsls	r5, r3, #24
 800311e:	d514      	bpl.n	800314a <_printf_i+0x1ae>
 8003120:	07df      	lsls	r7, r3, #31
 8003122:	bf44      	itt	mi
 8003124:	f043 0320 	orrmi.w	r3, r3, #32
 8003128:	6023      	strmi	r3, [r4, #0]
 800312a:	b91e      	cbnz	r6, 8003134 <_printf_i+0x198>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	f023 0320 	bic.w	r3, r3, #32
 8003132:	6023      	str	r3, [r4, #0]
 8003134:	2310      	movs	r3, #16
 8003136:	e7af      	b.n	8003098 <_printf_i+0xfc>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	f043 0320 	orr.w	r3, r3, #32
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	2378      	movs	r3, #120	; 0x78
 8003142:	4828      	ldr	r0, [pc, #160]	; (80031e4 <_printf_i+0x248>)
 8003144:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003148:	e7e3      	b.n	8003112 <_printf_i+0x176>
 800314a:	0659      	lsls	r1, r3, #25
 800314c:	bf48      	it	mi
 800314e:	b2b6      	uxthmi	r6, r6
 8003150:	e7e6      	b.n	8003120 <_printf_i+0x184>
 8003152:	4615      	mov	r5, r2
 8003154:	e7bb      	b.n	80030ce <_printf_i+0x132>
 8003156:	682b      	ldr	r3, [r5, #0]
 8003158:	6826      	ldr	r6, [r4, #0]
 800315a:	1d18      	adds	r0, r3, #4
 800315c:	6961      	ldr	r1, [r4, #20]
 800315e:	6028      	str	r0, [r5, #0]
 8003160:	0635      	lsls	r5, r6, #24
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	d501      	bpl.n	800316a <_printf_i+0x1ce>
 8003166:	6019      	str	r1, [r3, #0]
 8003168:	e002      	b.n	8003170 <_printf_i+0x1d4>
 800316a:	0670      	lsls	r0, r6, #25
 800316c:	d5fb      	bpl.n	8003166 <_printf_i+0x1ca>
 800316e:	8019      	strh	r1, [r3, #0]
 8003170:	2300      	movs	r3, #0
 8003172:	4615      	mov	r5, r2
 8003174:	6123      	str	r3, [r4, #16]
 8003176:	e7ba      	b.n	80030ee <_printf_i+0x152>
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	2100      	movs	r1, #0
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	602a      	str	r2, [r5, #0]
 8003180:	681d      	ldr	r5, [r3, #0]
 8003182:	6862      	ldr	r2, [r4, #4]
 8003184:	4628      	mov	r0, r5
 8003186:	f000 faa3 	bl	80036d0 <memchr>
 800318a:	b108      	cbz	r0, 8003190 <_printf_i+0x1f4>
 800318c:	1b40      	subs	r0, r0, r5
 800318e:	6060      	str	r0, [r4, #4]
 8003190:	6863      	ldr	r3, [r4, #4]
 8003192:	6123      	str	r3, [r4, #16]
 8003194:	2300      	movs	r3, #0
 8003196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800319a:	e7a8      	b.n	80030ee <_printf_i+0x152>
 800319c:	462a      	mov	r2, r5
 800319e:	4649      	mov	r1, r9
 80031a0:	4640      	mov	r0, r8
 80031a2:	6923      	ldr	r3, [r4, #16]
 80031a4:	47d0      	blx	sl
 80031a6:	3001      	adds	r0, #1
 80031a8:	d0ab      	beq.n	8003102 <_printf_i+0x166>
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	079b      	lsls	r3, r3, #30
 80031ae:	d413      	bmi.n	80031d8 <_printf_i+0x23c>
 80031b0:	68e0      	ldr	r0, [r4, #12]
 80031b2:	9b03      	ldr	r3, [sp, #12]
 80031b4:	4298      	cmp	r0, r3
 80031b6:	bfb8      	it	lt
 80031b8:	4618      	movlt	r0, r3
 80031ba:	e7a4      	b.n	8003106 <_printf_i+0x16a>
 80031bc:	2301      	movs	r3, #1
 80031be:	4632      	mov	r2, r6
 80031c0:	4649      	mov	r1, r9
 80031c2:	4640      	mov	r0, r8
 80031c4:	47d0      	blx	sl
 80031c6:	3001      	adds	r0, #1
 80031c8:	d09b      	beq.n	8003102 <_printf_i+0x166>
 80031ca:	3501      	adds	r5, #1
 80031cc:	68e3      	ldr	r3, [r4, #12]
 80031ce:	9903      	ldr	r1, [sp, #12]
 80031d0:	1a5b      	subs	r3, r3, r1
 80031d2:	42ab      	cmp	r3, r5
 80031d4:	dcf2      	bgt.n	80031bc <_printf_i+0x220>
 80031d6:	e7eb      	b.n	80031b0 <_printf_i+0x214>
 80031d8:	2500      	movs	r5, #0
 80031da:	f104 0619 	add.w	r6, r4, #25
 80031de:	e7f5      	b.n	80031cc <_printf_i+0x230>
 80031e0:	08003995 	.word	0x08003995
 80031e4:	080039a6 	.word	0x080039a6

080031e8 <_sbrk_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	2300      	movs	r3, #0
 80031ec:	4d05      	ldr	r5, [pc, #20]	; (8003204 <_sbrk_r+0x1c>)
 80031ee:	4604      	mov	r4, r0
 80031f0:	4608      	mov	r0, r1
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	f7fd fb70 	bl	80008d8 <_sbrk>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_sbrk_r+0x1a>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_sbrk_r+0x1a>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	20000138 	.word	0x20000138

08003208 <__sread>:
 8003208:	b510      	push	{r4, lr}
 800320a:	460c      	mov	r4, r1
 800320c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003210:	f000 fa78 	bl	8003704 <_read_r>
 8003214:	2800      	cmp	r0, #0
 8003216:	bfab      	itete	ge
 8003218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800321a:	89a3      	ldrhlt	r3, [r4, #12]
 800321c:	181b      	addge	r3, r3, r0
 800321e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003222:	bfac      	ite	ge
 8003224:	6563      	strge	r3, [r4, #84]	; 0x54
 8003226:	81a3      	strhlt	r3, [r4, #12]
 8003228:	bd10      	pop	{r4, pc}

0800322a <__swrite>:
 800322a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800322e:	461f      	mov	r7, r3
 8003230:	898b      	ldrh	r3, [r1, #12]
 8003232:	4605      	mov	r5, r0
 8003234:	05db      	lsls	r3, r3, #23
 8003236:	460c      	mov	r4, r1
 8003238:	4616      	mov	r6, r2
 800323a:	d505      	bpl.n	8003248 <__swrite+0x1e>
 800323c:	2302      	movs	r3, #2
 800323e:	2200      	movs	r2, #0
 8003240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003244:	f000 f9cc 	bl	80035e0 <_lseek_r>
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	4632      	mov	r2, r6
 800324c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003250:	81a3      	strh	r3, [r4, #12]
 8003252:	4628      	mov	r0, r5
 8003254:	463b      	mov	r3, r7
 8003256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800325a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800325e:	f000 b869 	b.w	8003334 <_write_r>

08003262 <__sseek>:
 8003262:	b510      	push	{r4, lr}
 8003264:	460c      	mov	r4, r1
 8003266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326a:	f000 f9b9 	bl	80035e0 <_lseek_r>
 800326e:	1c43      	adds	r3, r0, #1
 8003270:	89a3      	ldrh	r3, [r4, #12]
 8003272:	bf15      	itete	ne
 8003274:	6560      	strne	r0, [r4, #84]	; 0x54
 8003276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800327a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800327e:	81a3      	strheq	r3, [r4, #12]
 8003280:	bf18      	it	ne
 8003282:	81a3      	strhne	r3, [r4, #12]
 8003284:	bd10      	pop	{r4, pc}

08003286 <__sclose>:
 8003286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800328a:	f000 b8db 	b.w	8003444 <_close_r>
	...

08003290 <__swbuf_r>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	460e      	mov	r6, r1
 8003294:	4614      	mov	r4, r2
 8003296:	4605      	mov	r5, r0
 8003298:	b118      	cbz	r0, 80032a2 <__swbuf_r+0x12>
 800329a:	6983      	ldr	r3, [r0, #24]
 800329c:	b90b      	cbnz	r3, 80032a2 <__swbuf_r+0x12>
 800329e:	f7ff fb1f 	bl	80028e0 <__sinit>
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <__swbuf_r+0x98>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d12b      	bne.n	8003300 <__swbuf_r+0x70>
 80032a8:	686c      	ldr	r4, [r5, #4]
 80032aa:	69a3      	ldr	r3, [r4, #24]
 80032ac:	60a3      	str	r3, [r4, #8]
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	071a      	lsls	r2, r3, #28
 80032b2:	d52f      	bpl.n	8003314 <__swbuf_r+0x84>
 80032b4:	6923      	ldr	r3, [r4, #16]
 80032b6:	b36b      	cbz	r3, 8003314 <__swbuf_r+0x84>
 80032b8:	6923      	ldr	r3, [r4, #16]
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	b2f6      	uxtb	r6, r6
 80032be:	1ac0      	subs	r0, r0, r3
 80032c0:	6963      	ldr	r3, [r4, #20]
 80032c2:	4637      	mov	r7, r6
 80032c4:	4283      	cmp	r3, r0
 80032c6:	dc04      	bgt.n	80032d2 <__swbuf_r+0x42>
 80032c8:	4621      	mov	r1, r4
 80032ca:	4628      	mov	r0, r5
 80032cc:	f000 f94c 	bl	8003568 <_fflush_r>
 80032d0:	bb30      	cbnz	r0, 8003320 <__swbuf_r+0x90>
 80032d2:	68a3      	ldr	r3, [r4, #8]
 80032d4:	3001      	adds	r0, #1
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60a3      	str	r3, [r4, #8]
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	6022      	str	r2, [r4, #0]
 80032e0:	701e      	strb	r6, [r3, #0]
 80032e2:	6963      	ldr	r3, [r4, #20]
 80032e4:	4283      	cmp	r3, r0
 80032e6:	d004      	beq.n	80032f2 <__swbuf_r+0x62>
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	07db      	lsls	r3, r3, #31
 80032ec:	d506      	bpl.n	80032fc <__swbuf_r+0x6c>
 80032ee:	2e0a      	cmp	r6, #10
 80032f0:	d104      	bne.n	80032fc <__swbuf_r+0x6c>
 80032f2:	4621      	mov	r1, r4
 80032f4:	4628      	mov	r0, r5
 80032f6:	f000 f937 	bl	8003568 <_fflush_r>
 80032fa:	b988      	cbnz	r0, 8003320 <__swbuf_r+0x90>
 80032fc:	4638      	mov	r0, r7
 80032fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <__swbuf_r+0x9c>)
 8003302:	429c      	cmp	r4, r3
 8003304:	d101      	bne.n	800330a <__swbuf_r+0x7a>
 8003306:	68ac      	ldr	r4, [r5, #8]
 8003308:	e7cf      	b.n	80032aa <__swbuf_r+0x1a>
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <__swbuf_r+0xa0>)
 800330c:	429c      	cmp	r4, r3
 800330e:	bf08      	it	eq
 8003310:	68ec      	ldreq	r4, [r5, #12]
 8003312:	e7ca      	b.n	80032aa <__swbuf_r+0x1a>
 8003314:	4621      	mov	r1, r4
 8003316:	4628      	mov	r0, r5
 8003318:	f000 f81e 	bl	8003358 <__swsetup_r>
 800331c:	2800      	cmp	r0, #0
 800331e:	d0cb      	beq.n	80032b8 <__swbuf_r+0x28>
 8003320:	f04f 37ff 	mov.w	r7, #4294967295
 8003324:	e7ea      	b.n	80032fc <__swbuf_r+0x6c>
 8003326:	bf00      	nop
 8003328:	08003944 	.word	0x08003944
 800332c:	08003964 	.word	0x08003964
 8003330:	08003924 	.word	0x08003924

08003334 <_write_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	2200      	movs	r2, #0
 800333e:	4d05      	ldr	r5, [pc, #20]	; (8003354 <_write_r+0x20>)
 8003340:	602a      	str	r2, [r5, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7fd fa7b 	bl	800083e <_write>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_write_r+0x1e>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	b103      	cbz	r3, 8003352 <_write_r+0x1e>
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	20000138 	.word	0x20000138

08003358 <__swsetup_r>:
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <__swsetup_r+0xcc>)
 800335a:	b570      	push	{r4, r5, r6, lr}
 800335c:	681d      	ldr	r5, [r3, #0]
 800335e:	4606      	mov	r6, r0
 8003360:	460c      	mov	r4, r1
 8003362:	b125      	cbz	r5, 800336e <__swsetup_r+0x16>
 8003364:	69ab      	ldr	r3, [r5, #24]
 8003366:	b913      	cbnz	r3, 800336e <__swsetup_r+0x16>
 8003368:	4628      	mov	r0, r5
 800336a:	f7ff fab9 	bl	80028e0 <__sinit>
 800336e:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <__swsetup_r+0xd0>)
 8003370:	429c      	cmp	r4, r3
 8003372:	d10f      	bne.n	8003394 <__swsetup_r+0x3c>
 8003374:	686c      	ldr	r4, [r5, #4]
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800337c:	0719      	lsls	r1, r3, #28
 800337e:	d42c      	bmi.n	80033da <__swsetup_r+0x82>
 8003380:	06dd      	lsls	r5, r3, #27
 8003382:	d411      	bmi.n	80033a8 <__swsetup_r+0x50>
 8003384:	2309      	movs	r3, #9
 8003386:	6033      	str	r3, [r6, #0]
 8003388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	81a3      	strh	r3, [r4, #12]
 8003392:	e03e      	b.n	8003412 <__swsetup_r+0xba>
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <__swsetup_r+0xd4>)
 8003396:	429c      	cmp	r4, r3
 8003398:	d101      	bne.n	800339e <__swsetup_r+0x46>
 800339a:	68ac      	ldr	r4, [r5, #8]
 800339c:	e7eb      	b.n	8003376 <__swsetup_r+0x1e>
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <__swsetup_r+0xd8>)
 80033a0:	429c      	cmp	r4, r3
 80033a2:	bf08      	it	eq
 80033a4:	68ec      	ldreq	r4, [r5, #12]
 80033a6:	e7e6      	b.n	8003376 <__swsetup_r+0x1e>
 80033a8:	0758      	lsls	r0, r3, #29
 80033aa:	d512      	bpl.n	80033d2 <__swsetup_r+0x7a>
 80033ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ae:	b141      	cbz	r1, 80033c2 <__swsetup_r+0x6a>
 80033b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033b4:	4299      	cmp	r1, r3
 80033b6:	d002      	beq.n	80033be <__swsetup_r+0x66>
 80033b8:	4630      	mov	r0, r6
 80033ba:	f7ff fb4b 	bl	8002a54 <_free_r>
 80033be:	2300      	movs	r3, #0
 80033c0:	6363      	str	r3, [r4, #52]	; 0x34
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033c8:	81a3      	strh	r3, [r4, #12]
 80033ca:	2300      	movs	r3, #0
 80033cc:	6063      	str	r3, [r4, #4]
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	81a3      	strh	r3, [r4, #12]
 80033da:	6923      	ldr	r3, [r4, #16]
 80033dc:	b94b      	cbnz	r3, 80033f2 <__swsetup_r+0x9a>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d003      	beq.n	80033f2 <__swsetup_r+0x9a>
 80033ea:	4621      	mov	r1, r4
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 f92f 	bl	8003650 <__smakebuf_r>
 80033f2:	89a0      	ldrh	r0, [r4, #12]
 80033f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033f8:	f010 0301 	ands.w	r3, r0, #1
 80033fc:	d00a      	beq.n	8003414 <__swsetup_r+0xbc>
 80033fe:	2300      	movs	r3, #0
 8003400:	60a3      	str	r3, [r4, #8]
 8003402:	6963      	ldr	r3, [r4, #20]
 8003404:	425b      	negs	r3, r3
 8003406:	61a3      	str	r3, [r4, #24]
 8003408:	6923      	ldr	r3, [r4, #16]
 800340a:	b943      	cbnz	r3, 800341e <__swsetup_r+0xc6>
 800340c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003410:	d1ba      	bne.n	8003388 <__swsetup_r+0x30>
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	0781      	lsls	r1, r0, #30
 8003416:	bf58      	it	pl
 8003418:	6963      	ldrpl	r3, [r4, #20]
 800341a:	60a3      	str	r3, [r4, #8]
 800341c:	e7f4      	b.n	8003408 <__swsetup_r+0xb0>
 800341e:	2000      	movs	r0, #0
 8003420:	e7f7      	b.n	8003412 <__swsetup_r+0xba>
 8003422:	bf00      	nop
 8003424:	2000000c 	.word	0x2000000c
 8003428:	08003944 	.word	0x08003944
 800342c:	08003964 	.word	0x08003964
 8003430:	08003924 	.word	0x08003924

08003434 <abort>:
 8003434:	2006      	movs	r0, #6
 8003436:	b508      	push	{r3, lr}
 8003438:	f000 f99e 	bl	8003778 <raise>
 800343c:	2001      	movs	r0, #1
 800343e:	f7fd f9d7 	bl	80007f0 <_exit>
	...

08003444 <_close_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	2300      	movs	r3, #0
 8003448:	4d05      	ldr	r5, [pc, #20]	; (8003460 <_close_r+0x1c>)
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	602b      	str	r3, [r5, #0]
 8003450:	f7fd fa11 	bl	8000876 <_close>
 8003454:	1c43      	adds	r3, r0, #1
 8003456:	d102      	bne.n	800345e <_close_r+0x1a>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	b103      	cbz	r3, 800345e <_close_r+0x1a>
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	20000138 	.word	0x20000138

08003464 <__sflush_r>:
 8003464:	898a      	ldrh	r2, [r1, #12]
 8003466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003468:	4605      	mov	r5, r0
 800346a:	0710      	lsls	r0, r2, #28
 800346c:	460c      	mov	r4, r1
 800346e:	d457      	bmi.n	8003520 <__sflush_r+0xbc>
 8003470:	684b      	ldr	r3, [r1, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	dc04      	bgt.n	8003480 <__sflush_r+0x1c>
 8003476:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	dc01      	bgt.n	8003480 <__sflush_r+0x1c>
 800347c:	2000      	movs	r0, #0
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003482:	2e00      	cmp	r6, #0
 8003484:	d0fa      	beq.n	800347c <__sflush_r+0x18>
 8003486:	2300      	movs	r3, #0
 8003488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800348c:	682f      	ldr	r7, [r5, #0]
 800348e:	602b      	str	r3, [r5, #0]
 8003490:	d032      	beq.n	80034f8 <__sflush_r+0x94>
 8003492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003494:	89a3      	ldrh	r3, [r4, #12]
 8003496:	075a      	lsls	r2, r3, #29
 8003498:	d505      	bpl.n	80034a6 <__sflush_r+0x42>
 800349a:	6863      	ldr	r3, [r4, #4]
 800349c:	1ac0      	subs	r0, r0, r3
 800349e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034a0:	b10b      	cbz	r3, 80034a6 <__sflush_r+0x42>
 80034a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034a4:	1ac0      	subs	r0, r0, r3
 80034a6:	2300      	movs	r3, #0
 80034a8:	4602      	mov	r2, r0
 80034aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ac:	4628      	mov	r0, r5
 80034ae:	6a21      	ldr	r1, [r4, #32]
 80034b0:	47b0      	blx	r6
 80034b2:	1c43      	adds	r3, r0, #1
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	d106      	bne.n	80034c6 <__sflush_r+0x62>
 80034b8:	6829      	ldr	r1, [r5, #0]
 80034ba:	291d      	cmp	r1, #29
 80034bc:	d82c      	bhi.n	8003518 <__sflush_r+0xb4>
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <__sflush_r+0x100>)
 80034c0:	40ca      	lsrs	r2, r1
 80034c2:	07d6      	lsls	r6, r2, #31
 80034c4:	d528      	bpl.n	8003518 <__sflush_r+0xb4>
 80034c6:	2200      	movs	r2, #0
 80034c8:	6062      	str	r2, [r4, #4]
 80034ca:	6922      	ldr	r2, [r4, #16]
 80034cc:	04d9      	lsls	r1, r3, #19
 80034ce:	6022      	str	r2, [r4, #0]
 80034d0:	d504      	bpl.n	80034dc <__sflush_r+0x78>
 80034d2:	1c42      	adds	r2, r0, #1
 80034d4:	d101      	bne.n	80034da <__sflush_r+0x76>
 80034d6:	682b      	ldr	r3, [r5, #0]
 80034d8:	b903      	cbnz	r3, 80034dc <__sflush_r+0x78>
 80034da:	6560      	str	r0, [r4, #84]	; 0x54
 80034dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034de:	602f      	str	r7, [r5, #0]
 80034e0:	2900      	cmp	r1, #0
 80034e2:	d0cb      	beq.n	800347c <__sflush_r+0x18>
 80034e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034e8:	4299      	cmp	r1, r3
 80034ea:	d002      	beq.n	80034f2 <__sflush_r+0x8e>
 80034ec:	4628      	mov	r0, r5
 80034ee:	f7ff fab1 	bl	8002a54 <_free_r>
 80034f2:	2000      	movs	r0, #0
 80034f4:	6360      	str	r0, [r4, #52]	; 0x34
 80034f6:	e7c2      	b.n	800347e <__sflush_r+0x1a>
 80034f8:	6a21      	ldr	r1, [r4, #32]
 80034fa:	2301      	movs	r3, #1
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b0      	blx	r6
 8003500:	1c41      	adds	r1, r0, #1
 8003502:	d1c7      	bne.n	8003494 <__sflush_r+0x30>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0c4      	beq.n	8003494 <__sflush_r+0x30>
 800350a:	2b1d      	cmp	r3, #29
 800350c:	d001      	beq.n	8003512 <__sflush_r+0xae>
 800350e:	2b16      	cmp	r3, #22
 8003510:	d101      	bne.n	8003516 <__sflush_r+0xb2>
 8003512:	602f      	str	r7, [r5, #0]
 8003514:	e7b2      	b.n	800347c <__sflush_r+0x18>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	e7ae      	b.n	800347e <__sflush_r+0x1a>
 8003520:	690f      	ldr	r7, [r1, #16]
 8003522:	2f00      	cmp	r7, #0
 8003524:	d0aa      	beq.n	800347c <__sflush_r+0x18>
 8003526:	0793      	lsls	r3, r2, #30
 8003528:	bf18      	it	ne
 800352a:	2300      	movne	r3, #0
 800352c:	680e      	ldr	r6, [r1, #0]
 800352e:	bf08      	it	eq
 8003530:	694b      	ldreq	r3, [r1, #20]
 8003532:	1bf6      	subs	r6, r6, r7
 8003534:	600f      	str	r7, [r1, #0]
 8003536:	608b      	str	r3, [r1, #8]
 8003538:	2e00      	cmp	r6, #0
 800353a:	dd9f      	ble.n	800347c <__sflush_r+0x18>
 800353c:	4633      	mov	r3, r6
 800353e:	463a      	mov	r2, r7
 8003540:	4628      	mov	r0, r5
 8003542:	6a21      	ldr	r1, [r4, #32]
 8003544:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003548:	47e0      	blx	ip
 800354a:	2800      	cmp	r0, #0
 800354c:	dc06      	bgt.n	800355c <__sflush_r+0xf8>
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	e790      	b.n	800347e <__sflush_r+0x1a>
 800355c:	4407      	add	r7, r0
 800355e:	1a36      	subs	r6, r6, r0
 8003560:	e7ea      	b.n	8003538 <__sflush_r+0xd4>
 8003562:	bf00      	nop
 8003564:	20400001 	.word	0x20400001

08003568 <_fflush_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	690b      	ldr	r3, [r1, #16]
 800356c:	4605      	mov	r5, r0
 800356e:	460c      	mov	r4, r1
 8003570:	b913      	cbnz	r3, 8003578 <_fflush_r+0x10>
 8003572:	2500      	movs	r5, #0
 8003574:	4628      	mov	r0, r5
 8003576:	bd38      	pop	{r3, r4, r5, pc}
 8003578:	b118      	cbz	r0, 8003582 <_fflush_r+0x1a>
 800357a:	6983      	ldr	r3, [r0, #24]
 800357c:	b90b      	cbnz	r3, 8003582 <_fflush_r+0x1a>
 800357e:	f7ff f9af 	bl	80028e0 <__sinit>
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <_fflush_r+0x6c>)
 8003584:	429c      	cmp	r4, r3
 8003586:	d11b      	bne.n	80035c0 <_fflush_r+0x58>
 8003588:	686c      	ldr	r4, [r5, #4]
 800358a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0ef      	beq.n	8003572 <_fflush_r+0xa>
 8003592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003594:	07d0      	lsls	r0, r2, #31
 8003596:	d404      	bmi.n	80035a2 <_fflush_r+0x3a>
 8003598:	0599      	lsls	r1, r3, #22
 800359a:	d402      	bmi.n	80035a2 <_fflush_r+0x3a>
 800359c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800359e:	f7ff fa4f 	bl	8002a40 <__retarget_lock_acquire_recursive>
 80035a2:	4628      	mov	r0, r5
 80035a4:	4621      	mov	r1, r4
 80035a6:	f7ff ff5d 	bl	8003464 <__sflush_r>
 80035aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ac:	4605      	mov	r5, r0
 80035ae:	07da      	lsls	r2, r3, #31
 80035b0:	d4e0      	bmi.n	8003574 <_fflush_r+0xc>
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	059b      	lsls	r3, r3, #22
 80035b6:	d4dd      	bmi.n	8003574 <_fflush_r+0xc>
 80035b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ba:	f7ff fa42 	bl	8002a42 <__retarget_lock_release_recursive>
 80035be:	e7d9      	b.n	8003574 <_fflush_r+0xc>
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <_fflush_r+0x70>)
 80035c2:	429c      	cmp	r4, r3
 80035c4:	d101      	bne.n	80035ca <_fflush_r+0x62>
 80035c6:	68ac      	ldr	r4, [r5, #8]
 80035c8:	e7df      	b.n	800358a <_fflush_r+0x22>
 80035ca:	4b04      	ldr	r3, [pc, #16]	; (80035dc <_fflush_r+0x74>)
 80035cc:	429c      	cmp	r4, r3
 80035ce:	bf08      	it	eq
 80035d0:	68ec      	ldreq	r4, [r5, #12]
 80035d2:	e7da      	b.n	800358a <_fflush_r+0x22>
 80035d4:	08003944 	.word	0x08003944
 80035d8:	08003964 	.word	0x08003964
 80035dc:	08003924 	.word	0x08003924

080035e0 <_lseek_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4604      	mov	r4, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	2200      	movs	r2, #0
 80035ea:	4d05      	ldr	r5, [pc, #20]	; (8003600 <_lseek_r+0x20>)
 80035ec:	602a      	str	r2, [r5, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f7fd f965 	bl	80008be <_lseek>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d102      	bne.n	80035fe <_lseek_r+0x1e>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	b103      	cbz	r3, 80035fe <_lseek_r+0x1e>
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	20000138 	.word	0x20000138

08003604 <__swhatbuf_r>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	460e      	mov	r6, r1
 8003608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800360c:	4614      	mov	r4, r2
 800360e:	2900      	cmp	r1, #0
 8003610:	461d      	mov	r5, r3
 8003612:	b096      	sub	sp, #88	; 0x58
 8003614:	da08      	bge.n	8003628 <__swhatbuf_r+0x24>
 8003616:	2200      	movs	r2, #0
 8003618:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800361c:	602a      	str	r2, [r5, #0]
 800361e:	061a      	lsls	r2, r3, #24
 8003620:	d410      	bmi.n	8003644 <__swhatbuf_r+0x40>
 8003622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003626:	e00e      	b.n	8003646 <__swhatbuf_r+0x42>
 8003628:	466a      	mov	r2, sp
 800362a:	f000 f8c1 	bl	80037b0 <_fstat_r>
 800362e:	2800      	cmp	r0, #0
 8003630:	dbf1      	blt.n	8003616 <__swhatbuf_r+0x12>
 8003632:	9a01      	ldr	r2, [sp, #4]
 8003634:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003638:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800363c:	425a      	negs	r2, r3
 800363e:	415a      	adcs	r2, r3
 8003640:	602a      	str	r2, [r5, #0]
 8003642:	e7ee      	b.n	8003622 <__swhatbuf_r+0x1e>
 8003644:	2340      	movs	r3, #64	; 0x40
 8003646:	2000      	movs	r0, #0
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	b016      	add	sp, #88	; 0x58
 800364c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003650 <__smakebuf_r>:
 8003650:	898b      	ldrh	r3, [r1, #12]
 8003652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003654:	079d      	lsls	r5, r3, #30
 8003656:	4606      	mov	r6, r0
 8003658:	460c      	mov	r4, r1
 800365a:	d507      	bpl.n	800366c <__smakebuf_r+0x1c>
 800365c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	6123      	str	r3, [r4, #16]
 8003664:	2301      	movs	r3, #1
 8003666:	6163      	str	r3, [r4, #20]
 8003668:	b002      	add	sp, #8
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	466a      	mov	r2, sp
 800366e:	ab01      	add	r3, sp, #4
 8003670:	f7ff ffc8 	bl	8003604 <__swhatbuf_r>
 8003674:	9900      	ldr	r1, [sp, #0]
 8003676:	4605      	mov	r5, r0
 8003678:	4630      	mov	r0, r6
 800367a:	f7ff fa53 	bl	8002b24 <_malloc_r>
 800367e:	b948      	cbnz	r0, 8003694 <__smakebuf_r+0x44>
 8003680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003684:	059a      	lsls	r2, r3, #22
 8003686:	d4ef      	bmi.n	8003668 <__smakebuf_r+0x18>
 8003688:	f023 0303 	bic.w	r3, r3, #3
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	81a3      	strh	r3, [r4, #12]
 8003692:	e7e3      	b.n	800365c <__smakebuf_r+0xc>
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <__smakebuf_r+0x7c>)
 8003696:	62b3      	str	r3, [r6, #40]	; 0x28
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	6020      	str	r0, [r4, #0]
 800369c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	9b00      	ldr	r3, [sp, #0]
 80036a4:	6120      	str	r0, [r4, #16]
 80036a6:	6163      	str	r3, [r4, #20]
 80036a8:	9b01      	ldr	r3, [sp, #4]
 80036aa:	b15b      	cbz	r3, 80036c4 <__smakebuf_r+0x74>
 80036ac:	4630      	mov	r0, r6
 80036ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036b2:	f000 f88f 	bl	80037d4 <_isatty_r>
 80036b6:	b128      	cbz	r0, 80036c4 <__smakebuf_r+0x74>
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	81a3      	strh	r3, [r4, #12]
 80036c4:	89a0      	ldrh	r0, [r4, #12]
 80036c6:	4305      	orrs	r5, r0
 80036c8:	81a5      	strh	r5, [r4, #12]
 80036ca:	e7cd      	b.n	8003668 <__smakebuf_r+0x18>
 80036cc:	08002879 	.word	0x08002879

080036d0 <memchr>:
 80036d0:	4603      	mov	r3, r0
 80036d2:	b510      	push	{r4, lr}
 80036d4:	b2c9      	uxtb	r1, r1
 80036d6:	4402      	add	r2, r0
 80036d8:	4293      	cmp	r3, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	d101      	bne.n	80036e2 <memchr+0x12>
 80036de:	2000      	movs	r0, #0
 80036e0:	e003      	b.n	80036ea <memchr+0x1a>
 80036e2:	7804      	ldrb	r4, [r0, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	428c      	cmp	r4, r1
 80036e8:	d1f6      	bne.n	80036d8 <memchr+0x8>
 80036ea:	bd10      	pop	{r4, pc}

080036ec <__malloc_lock>:
 80036ec:	4801      	ldr	r0, [pc, #4]	; (80036f4 <__malloc_lock+0x8>)
 80036ee:	f7ff b9a7 	b.w	8002a40 <__retarget_lock_acquire_recursive>
 80036f2:	bf00      	nop
 80036f4:	2000012c 	.word	0x2000012c

080036f8 <__malloc_unlock>:
 80036f8:	4801      	ldr	r0, [pc, #4]	; (8003700 <__malloc_unlock+0x8>)
 80036fa:	f7ff b9a2 	b.w	8002a42 <__retarget_lock_release_recursive>
 80036fe:	bf00      	nop
 8003700:	2000012c 	.word	0x2000012c

08003704 <_read_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4604      	mov	r4, r0
 8003708:	4608      	mov	r0, r1
 800370a:	4611      	mov	r1, r2
 800370c:	2200      	movs	r2, #0
 800370e:	4d05      	ldr	r5, [pc, #20]	; (8003724 <_read_r+0x20>)
 8003710:	602a      	str	r2, [r5, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f7fd f876 	bl	8000804 <_read>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_read_r+0x1e>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_read_r+0x1e>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	20000138 	.word	0x20000138

08003728 <_raise_r>:
 8003728:	291f      	cmp	r1, #31
 800372a:	b538      	push	{r3, r4, r5, lr}
 800372c:	4604      	mov	r4, r0
 800372e:	460d      	mov	r5, r1
 8003730:	d904      	bls.n	800373c <_raise_r+0x14>
 8003732:	2316      	movs	r3, #22
 8003734:	6003      	str	r3, [r0, #0]
 8003736:	f04f 30ff 	mov.w	r0, #4294967295
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800373e:	b112      	cbz	r2, 8003746 <_raise_r+0x1e>
 8003740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003744:	b94b      	cbnz	r3, 800375a <_raise_r+0x32>
 8003746:	4620      	mov	r0, r4
 8003748:	f000 f830 	bl	80037ac <_getpid_r>
 800374c:	462a      	mov	r2, r5
 800374e:	4601      	mov	r1, r0
 8003750:	4620      	mov	r0, r4
 8003752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003756:	f000 b817 	b.w	8003788 <_kill_r>
 800375a:	2b01      	cmp	r3, #1
 800375c:	d00a      	beq.n	8003774 <_raise_r+0x4c>
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	d103      	bne.n	800376a <_raise_r+0x42>
 8003762:	2316      	movs	r3, #22
 8003764:	6003      	str	r3, [r0, #0]
 8003766:	2001      	movs	r0, #1
 8003768:	e7e7      	b.n	800373a <_raise_r+0x12>
 800376a:	2400      	movs	r4, #0
 800376c:	4628      	mov	r0, r5
 800376e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003772:	4798      	blx	r3
 8003774:	2000      	movs	r0, #0
 8003776:	e7e0      	b.n	800373a <_raise_r+0x12>

08003778 <raise>:
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <raise+0xc>)
 800377a:	4601      	mov	r1, r0
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	f7ff bfd3 	b.w	8003728 <_raise_r>
 8003782:	bf00      	nop
 8003784:	2000000c 	.word	0x2000000c

08003788 <_kill_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	2300      	movs	r3, #0
 800378c:	4d06      	ldr	r5, [pc, #24]	; (80037a8 <_kill_r+0x20>)
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	602b      	str	r3, [r5, #0]
 8003796:	f7fd f81b 	bl	80007d0 <_kill>
 800379a:	1c43      	adds	r3, r0, #1
 800379c:	d102      	bne.n	80037a4 <_kill_r+0x1c>
 800379e:	682b      	ldr	r3, [r5, #0]
 80037a0:	b103      	cbz	r3, 80037a4 <_kill_r+0x1c>
 80037a2:	6023      	str	r3, [r4, #0]
 80037a4:	bd38      	pop	{r3, r4, r5, pc}
 80037a6:	bf00      	nop
 80037a8:	20000138 	.word	0x20000138

080037ac <_getpid_r>:
 80037ac:	f7fd b809 	b.w	80007c2 <_getpid>

080037b0 <_fstat_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	2300      	movs	r3, #0
 80037b4:	4d06      	ldr	r5, [pc, #24]	; (80037d0 <_fstat_r+0x20>)
 80037b6:	4604      	mov	r4, r0
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	602b      	str	r3, [r5, #0]
 80037be:	f7fd f865 	bl	800088c <_fstat>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	d102      	bne.n	80037cc <_fstat_r+0x1c>
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	b103      	cbz	r3, 80037cc <_fstat_r+0x1c>
 80037ca:	6023      	str	r3, [r4, #0]
 80037cc:	bd38      	pop	{r3, r4, r5, pc}
 80037ce:	bf00      	nop
 80037d0:	20000138 	.word	0x20000138

080037d4 <_isatty_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	2300      	movs	r3, #0
 80037d8:	4d05      	ldr	r5, [pc, #20]	; (80037f0 <_isatty_r+0x1c>)
 80037da:	4604      	mov	r4, r0
 80037dc:	4608      	mov	r0, r1
 80037de:	602b      	str	r3, [r5, #0]
 80037e0:	f7fd f863 	bl	80008aa <_isatty>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d102      	bne.n	80037ee <_isatty_r+0x1a>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	b103      	cbz	r3, 80037ee <_isatty_r+0x1a>
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	20000138 	.word	0x20000138

080037f4 <_init>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr

08003800 <_fini>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	bf00      	nop
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr
