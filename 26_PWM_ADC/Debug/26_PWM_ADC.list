
26_PWM_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b8  080043b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080043b8  080043b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043b8  080043b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08004430  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004430  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcd7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbf  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0002fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00030b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001901f  00000000  00000000  000317f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4ab  00000000  00000000  0004a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bd7  00000000  00000000  00059cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004164  00000000  00000000  000ea8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080042a8 	.word	0x080042a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080042a8 	.word	0x080042a8

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800015a:	2201      	movs	r2, #1
 800015c:	4808      	ldr	r0, [pc, #32]	; (8000180 <__io_putchar+0x34>)
 800015e:	f002 ff5d 	bl	800301c <HAL_UART_Transmit>
   if (ch == '\n') {
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b0a      	cmp	r3, #10
 8000166:	d106      	bne.n	8000176 <__io_putchar+0x2a>
	  HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 1000);
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	2201      	movs	r2, #1
 800016e:	4905      	ldr	r1, [pc, #20]	; (8000184 <__io_putchar+0x38>)
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <__io_putchar+0x34>)
 8000172:	f002 ff53 	bl	800301c <HAL_UART_Transmit>
   }
   return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	20000104 	.word	0x20000104
 8000184:	080042c0 	.word	0x080042c0

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fbdc 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f86e 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f9a6 	bl	80004e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000198:	f000 f8c6 	bl	8000328 <MX_ADC1_Init>
  MX_TIM3_Init();
 800019c:	f000 f902 	bl	80003a4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80001a0:	f000 f976 	bl	8000490 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80001a4:	482a      	ldr	r0, [pc, #168]	; (8000250 <main+0xc8>)
 80001a6:	f001 f881 	bl	80012ac <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80001aa:	4829      	ldr	r0, [pc, #164]	; (8000250 <main+0xc8>)
 80001ac:	f000 fd2a 	bl	8000c04 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001b0:	2100      	movs	r1, #0
 80001b2:	4828      	ldr	r0, [pc, #160]	; (8000254 <main+0xcc>)
 80001b4:	f002 f9b4 	bl	8002520 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 80001b8:	210a      	movs	r1, #10
 80001ba:	4825      	ldr	r0, [pc, #148]	; (8000250 <main+0xc8>)
 80001bc:	f000 fdd0 	bl	8000d60 <HAL_ADC_PollForConversion>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d1f8      	bne.n	80001b8 <main+0x30>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 80001c6:	4822      	ldr	r0, [pc, #136]	; (8000250 <main+0xc8>)
 80001c8:	f000 fed0 	bl	8000f6c <HAL_ADC_GetValue>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	4b21      	ldr	r3, [pc, #132]	; (8000258 <main+0xd0>)
 80001d2:	801a      	strh	r2, [r3, #0]
		  led_ccr1 = (adc_value * 1000) / 4095;
 80001d4:	4b20      	ldr	r3, [pc, #128]	; (8000258 <main+0xd0>)
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	461a      	mov	r2, r3
 80001da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001de:	fb02 f303 	mul.w	r3, r2, r3
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <main+0xd4>)
 80001e4:	fb82 1203 	smull	r1, r2, r2, r3
 80001e8:	441a      	add	r2, r3
 80001ea:	12d2      	asrs	r2, r2, #11
 80001ec:	17db      	asrs	r3, r3, #31
 80001ee:	1ad3      	subs	r3, r2, r3
 80001f0:	b29a      	uxth	r2, r3
 80001f2:	4b1b      	ldr	r3, [pc, #108]	; (8000260 <main+0xd8>)
 80001f4:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, led_ccr1);
 80001f6:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <main+0xd8>)
 80001f8:	881a      	ldrh	r2, [r3, #0]
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <main+0xcc>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	635a      	str	r2, [r3, #52]	; 0x34
		  printf("R = %d ohm\n\n", adc_value * 100000 / 4095);
 8000200:	4b15      	ldr	r3, [pc, #84]	; (8000258 <main+0xd0>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <main+0xdc>)
 8000208:	fb02 f303 	mul.w	r3, r2, r3
 800020c:	4a13      	ldr	r2, [pc, #76]	; (800025c <main+0xd4>)
 800020e:	fb82 1203 	smull	r1, r2, r2, r3
 8000212:	441a      	add	r2, r3
 8000214:	12d2      	asrs	r2, r2, #11
 8000216:	17db      	asrs	r3, r3, #31
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	4619      	mov	r1, r3
 800021c:	4812      	ldr	r0, [pc, #72]	; (8000268 <main+0xe0>)
 800021e:	f003 f8af 	bl	8003380 <iprintf>
		  printf("V = %d mV\n\n", adc_value * 3300 / 4095);
 8000222:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <main+0xd0>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	461a      	mov	r2, r3
 8000228:	f640 43e4 	movw	r3, #3300	; 0xce4
 800022c:	fb02 f303 	mul.w	r3, r2, r3
 8000230:	4a0a      	ldr	r2, [pc, #40]	; (800025c <main+0xd4>)
 8000232:	fb82 1203 	smull	r1, r2, r2, r3
 8000236:	441a      	add	r2, r3
 8000238:	12d2      	asrs	r2, r2, #11
 800023a:	17db      	asrs	r3, r3, #31
 800023c:	1ad3      	subs	r3, r2, r3
 800023e:	4619      	mov	r1, r3
 8000240:	480a      	ldr	r0, [pc, #40]	; (800026c <main+0xe4>)
 8000242:	f003 f89d 	bl	8003380 <iprintf>
		  HAL_Delay(1000);
 8000246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024a:	f000 fbdf 	bl	8000a0c <HAL_Delay>
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 800024e:	e7b3      	b.n	80001b8 <main+0x30>
 8000250:	2000008c 	.word	0x2000008c
 8000254:	200000bc 	.word	0x200000bc
 8000258:	2000014c 	.word	0x2000014c
 800025c:	80080081 	.word	0x80080081
 8000260:	2000014e 	.word	0x2000014e
 8000264:	000186a0 	.word	0x000186a0
 8000268:	080042c4 	.word	0x080042c4
 800026c:	080042d4 	.word	0x080042d4

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b094      	sub	sp, #80	; 0x50
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f003 f876 	bl	8003370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a0:	2301      	movs	r3, #1
 80002a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fb06 	bl	80018d8 <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002d2:	f000 f935 	bl	8000540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fd72 	bl	8001ddc <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fe:	f000 f91f 	bl	8000540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000302:	2302      	movs	r3, #2
 8000304:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800030a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fef2 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800031a:	f000 f911 	bl	8000540 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	; 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_ADC1_Init+0x74>)
 800033a:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <MX_ADC1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <MX_ADC1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_ADC1_Init+0x74>)
 8000346:	2201      	movs	r2, #1
 8000348:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_ADC1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_ADC1_Init+0x74>)
 8000352:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000356:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <MX_ADC1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_ADC1_Init+0x74>)
 8000360:	2201      	movs	r2, #1
 8000362:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <MX_ADC1_Init+0x74>)
 8000366:	f000 fb75 	bl	8000a54 <HAL_ADC_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000370:	f000 f8e6 	bl	8000540 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000374:	230a      	movs	r3, #10
 8000376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000378:	2301      	movs	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800037c:	2302      	movs	r3, #2
 800037e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4619      	mov	r1, r3
 8000384:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_ADC1_Init+0x74>)
 8000386:	f000 fdfd 	bl	8000f84 <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000390:	f000 f8d6 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	2000008c 	.word	0x2000008c
 80003a0:	40012400 	.word	0x40012400

080003a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08e      	sub	sp, #56	; 0x38
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	f107 0320 	add.w	r3, r7, #32
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	615a      	str	r2, [r3, #20]
 80003d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003d6:	4a2d      	ldr	r2, [pc, #180]	; (800048c <MX_TIM3_Init+0xe8>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003dc:	2247      	movs	r2, #71	; 0x47
 80003de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b26      	ldr	r3, [pc, #152]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003fa:	4823      	ldr	r0, [pc, #140]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003fc:	f001 ffe8 	bl	80023d0 <HAL_TIM_Base_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000406:	f000 f89b 	bl	8000540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000414:	4619      	mov	r1, r3
 8000416:	481c      	ldr	r0, [pc, #112]	; (8000488 <MX_TIM3_Init+0xe4>)
 8000418:	f002 f9e6 	bl	80027e8 <HAL_TIM_ConfigClockSource>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000422:	f000 f88d 	bl	8000540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000426:	4818      	ldr	r0, [pc, #96]	; (8000488 <MX_TIM3_Init+0xe4>)
 8000428:	f002 f821 	bl	800246e <HAL_TIM_PWM_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000432:	f000 f885 	bl	8000540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800043e:	f107 0320 	add.w	r3, r7, #32
 8000442:	4619      	mov	r1, r3
 8000444:	4810      	ldr	r0, [pc, #64]	; (8000488 <MX_TIM3_Init+0xe4>)
 8000446:	f002 fd3b 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000450:	f000 f876 	bl	8000540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000454:	2360      	movs	r3, #96	; 0x60
 8000456:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	4619      	mov	r1, r3
 800046a:	4807      	ldr	r0, [pc, #28]	; (8000488 <MX_TIM3_Init+0xe4>)
 800046c:	f002 f8fa 	bl	8002664 <HAL_TIM_PWM_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000476:	f000 f863 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800047a:	4803      	ldr	r0, [pc, #12]	; (8000488 <MX_TIM3_Init+0xe4>)
 800047c:	f000 f8e2 	bl	8000644 <HAL_TIM_MspPostInit>

}
 8000480:	bf00      	nop
 8000482:	3738      	adds	r7, #56	; 0x38
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000bc 	.word	0x200000bc
 800048c:	40000400 	.word	0x40000400

08000490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <MX_USART2_UART_Init+0x50>)
 8000498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 800049c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_USART2_UART_Init+0x4c>)
 80004c8:	f002 fd58 	bl	8002f7c <HAL_UART_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004d2:	f000 f835 	bl	8000540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000104 	.word	0x20000104
 80004e0:	40004400 	.word	0x40004400

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_GPIO_Init+0x58>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a13      	ldr	r2, [pc, #76]	; (800053c <MX_GPIO_Init+0x58>)
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_GPIO_Init+0x58>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0310 	and.w	r3, r3, #16
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_GPIO_Init+0x58>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a0d      	ldr	r2, [pc, #52]	; (800053c <MX_GPIO_Init+0x58>)
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_GPIO_Init+0x58>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0320 	and.w	r3, r3, #32
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_GPIO_Init+0x58>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <MX_GPIO_Init+0x58>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <MX_GPIO_Init+0x58>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000548:	e7fe      	b.n	8000548 <Error_Handler+0x8>
	...

0800054c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <HAL_MspInit+0x40>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a0d      	ldr	r2, [pc, #52]	; (800058c <HAL_MspInit+0x40>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_MspInit+0x40>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_MspInit+0x40>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_MspInit+0x40>)
 8000570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000574:	61d3      	str	r3, [r2, #28]
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_MspInit+0x40>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_ADC_MspInit+0x6c>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d121      	bne.n	80005f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_ADC_MspInit+0x70>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <HAL_ADC_MspInit+0x70>)
 80005b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_ADC_MspInit+0x70>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <HAL_ADC_MspInit+0x70>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <HAL_ADC_MspInit+0x70>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_ADC_MspInit+0x70>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0310 	and.w	r3, r3, #16
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e4:	2303      	movs	r3, #3
 80005e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <HAL_ADC_MspInit+0x74>)
 80005f0:	f000 ffee 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40012400 	.word	0x40012400
 8000600:	40021000 	.word	0x40021000
 8000604:	40011000 	.word	0x40011000

08000608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <HAL_TIM_Base_MspInit+0x34>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d10b      	bne.n	8000632 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40000400 	.word	0x40000400
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <HAL_TIM_MspPostInit+0x7c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d129      	bne.n	80006b8 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_TIM_MspPostInit+0x80>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <HAL_TIM_MspPostInit+0x80>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_TIM_MspPostInit+0x80>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0310 	and.w	r3, r3, #16
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800067c:	2340      	movs	r3, #64	; 0x40
 800067e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <HAL_TIM_MspPostInit+0x84>)
 8000690:	f000 ff9e 	bl	80015d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_TIM_MspPostInit+0x88>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	61fb      	str	r3, [r7, #28]
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006a8:	61fb      	str	r3, [r7, #28]
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80006b0:	61fb      	str	r3, [r7, #28]
 80006b2:	4a06      	ldr	r2, [pc, #24]	; (80006cc <HAL_TIM_MspPostInit+0x88>)
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40000400 	.word	0x40000400
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40011000 	.word	0x40011000
 80006cc:	40010000 	.word	0x40010000

080006d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <HAL_UART_MspInit+0x88>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d12f      	bne.n	8000750 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <HAL_UART_MspInit+0x8c>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	4a19      	ldr	r2, [pc, #100]	; (800075c <HAL_UART_MspInit+0x8c>)
 80006f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fa:	61d3      	str	r3, [r2, #28]
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_UART_MspInit+0x8c>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_UART_MspInit+0x8c>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <HAL_UART_MspInit+0x8c>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_UART_MspInit+0x8c>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000720:	2304      	movs	r3, #4
 8000722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <HAL_UART_MspInit+0x90>)
 8000734:	f000 ff4c 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000738:	2308      	movs	r3, #8
 800073a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <HAL_UART_MspInit+0x90>)
 800074c:	f000 ff40 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40004400 	.word	0x40004400
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 f913 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	e00a      	b.n	80007da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007c4:	f3af 8000 	nop.w
 80007c8:	4601      	mov	r1, r0
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	b2ca      	uxtb	r2, r1
 80007d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbf0      	blt.n	80007c4 <_read+0x12>
  }

  return len;
 80007e2:	687b      	ldr	r3, [r7, #4]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e009      	b.n	8000812 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	60ba      	str	r2, [r7, #8]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fca0 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	dbf1      	blt.n	80007fe <_write+0x12>
  }
  return len;
 800081a:	687b      	ldr	r3, [r7, #4]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <_close>:

int _close(int file)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800084a:	605a      	str	r2, [r3, #4]
  return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <_isatty>:

int _isatty(int file)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f002 fd32 	bl	800331c <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20005000 	.word	0x20005000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	20000150 	.word	0x20000150
 80008ec:	20000168 	.word	0x20000168

080008f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff fff8 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 fcff 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc2d 	bl	8000188 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000938:	080043c0 	.word	0x080043c0
  ldr r2, =_sbss
 800093c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000940:	20000168 	.word	0x20000168

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 fe05 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fdf2 	bl	800054c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fe0f 	bl	80015b6 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 fde5 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000154 	.word	0x20000154

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000154 	.word	0x20000154

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008

08000a54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0be      	b.n	8000bf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d109      	bne.n	8000a98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fd7c 	bl	8000590 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 fbc5 	bl	8001228 <ADC_ConversionStop_Disable>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 8099 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8095 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac0:	f023 0302 	bic.w	r3, r3, #2
 8000ac4:	f043 0202 	orr.w	r2, r3, #2
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7b1b      	ldrb	r3, [r3, #12]
 8000ada:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000adc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aec:	d003      	beq.n	8000af6 <HAL_ADC_Init+0xa2>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d102      	bne.n	8000afc <HAL_ADC_Init+0xa8>
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	e000      	b.n	8000afe <HAL_ADC_Init+0xaa>
 8000afc:	2300      	movs	r3, #0
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7d1b      	ldrb	r3, [r3, #20]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d119      	bne.n	8000b40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7b1b      	ldrb	r3, [r3, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	035a      	lsls	r2, r3, #13
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	e00b      	b.n	8000b40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f043 0220 	orr.w	r2, r3, #32
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	f043 0201 	orr.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <HAL_ADC_Init+0x1a8>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b70:	d003      	beq.n	8000b7a <HAL_ADC_Init+0x126>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	051b      	lsls	r3, r3, #20
 8000b82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_ADC_Init+0x1ac>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb2:	f023 0303 	bic.w	r3, r3, #3
 8000bb6:	f043 0201 	orr.w	r2, r3, #1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbe:	e018      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f023 0312 	bic.w	r3, r3, #18
 8000bc8:	f043 0210 	orr.w	r2, r3, #16
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	f043 0201 	orr.w	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be0:	e007      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be6:	f043 0210 	orr.w	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	ffe1f7fd 	.word	0xffe1f7fd
 8000c00:	ff1f0efe 	.word	0xff1f0efe

08000c04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Start+0x1a>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e098      	b.n	8000d50 <HAL_ADC_Start+0x14c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 faa4 	bl	8001174 <ADC_Enable>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8087 	bne.w	8000d46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c40:	f023 0301 	bic.w	r3, r3, #1
 8000c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a41      	ldr	r2, [pc, #260]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d105      	bne.n	8000c62 <HAL_ADC_Start+0x5e>
 8000c56:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d115      	bne.n	8000c8e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d026      	beq.n	8000cca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c8c:	e01d      	b.n	8000cca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d004      	beq.n	8000cae <HAL_ADC_Start+0xaa>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_ADC_Start+0xc6>
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d007      	beq.n	8000cca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	f023 0206 	bic.w	r2, r3, #6
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ce2:	e002      	b.n	8000cea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f06f 0202 	mvn.w	r2, #2
 8000cfa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d0a:	d113      	bne.n	8000d34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d10:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_ADC_Start+0x154>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d105      	bne.n	8000d22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_ADC_Start+0x158>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d108      	bne.n	8000d34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	e00c      	b.n	8000d4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e003      	b.n	8000d4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40012800 	.word	0x40012800
 8000d5c:	40012400 	.word	0x40012400

08000d60 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d76:	f7ff fe3f 	bl	80009f8 <HAL_GetTick>
 8000d7a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00b      	beq.n	8000da2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	f043 0220 	orr.w	r2, r3, #32
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e0d3      	b.n	8000f4a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d131      	bne.n	8000e14 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d12a      	bne.n	8000e14 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dbe:	e021      	b.n	8000e04 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc6:	d01d      	beq.n	8000e04 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <HAL_ADC_PollForConversion+0x7e>
 8000dce:	f7ff fe13 	bl	80009f8 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d212      	bcs.n	8000e04 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10b      	bne.n	8000e04 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f043 0204 	orr.w	r2, r3, #4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e0a2      	b.n	8000f4a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0d6      	beq.n	8000dc0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e12:	e070      	b.n	8000ef6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e14:	4b4f      	ldr	r3, [pc, #316]	; (8000f54 <HAL_ADC_PollForConversion+0x1f4>)
 8000e16:	681c      	ldr	r4, [r3, #0]
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f001 fa23 	bl	8002264 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6919      	ldr	r1, [r3, #16]
 8000e2a:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <HAL_ADC_PollForConversion+0x1f8>)
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d118      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x104>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68d9      	ldr	r1, [r3, #12]
 8000e38:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <HAL_ADC_PollForConversion+0x1fc>)
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d111      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x104>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6919      	ldr	r1, [r3, #16]
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_ADC_PollForConversion+0x200>)
 8000e48:	400b      	ands	r3, r1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d108      	bne.n	8000e60 <HAL_ADC_PollForConversion+0x100>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68d9      	ldr	r1, [r3, #12]
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_ADC_PollForConversion+0x204>)
 8000e56:	400b      	ands	r3, r1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_ADC_PollForConversion+0x100>
 8000e5c:	2314      	movs	r3, #20
 8000e5e:	e020      	b.n	8000ea2 <HAL_ADC_PollForConversion+0x142>
 8000e60:	2329      	movs	r3, #41	; 0x29
 8000e62:	e01e      	b.n	8000ea2 <HAL_ADC_PollForConversion+0x142>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6919      	ldr	r1, [r3, #16]
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_ADC_PollForConversion+0x200>)
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d106      	bne.n	8000e80 <HAL_ADC_PollForConversion+0x120>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68d9      	ldr	r1, [r3, #12]
 8000e78:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <HAL_ADC_PollForConversion+0x204>)
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00d      	beq.n	8000e9c <HAL_ADC_PollForConversion+0x13c>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6919      	ldr	r1, [r3, #16]
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <HAL_ADC_PollForConversion+0x208>)
 8000e88:	400b      	ands	r3, r1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d108      	bne.n	8000ea0 <HAL_ADC_PollForConversion+0x140>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68d9      	ldr	r1, [r3, #12]
 8000e94:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_ADC_PollForConversion+0x208>)
 8000e96:	400b      	ands	r3, r1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <HAL_ADC_PollForConversion+0x140>
 8000e9c:	2354      	movs	r3, #84	; 0x54
 8000e9e:	e000      	b.n	8000ea2 <HAL_ADC_PollForConversion+0x142>
 8000ea0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ea8:	e021      	b.n	8000eee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d01a      	beq.n	8000ee8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d007      	beq.n	8000ec8 <HAL_ADC_PollForConversion+0x168>
 8000eb8:	f7ff fd9e 	bl	80009f8 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d20f      	bcs.n	8000ee8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d90b      	bls.n	8000ee8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f043 0204 	orr.w	r2, r3, #4
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e030      	b.n	8000f4a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d8d9      	bhi.n	8000eaa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f06f 0212 	mvn.w	r2, #18
 8000efe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f1a:	d115      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000000 	.word	0x20000000
 8000f58:	24924924 	.word	0x24924924
 8000f5c:	00924924 	.word	0x00924924
 8000f60:	12492492 	.word	0x12492492
 8000f64:	00492492 	.word	0x00492492
 8000f68:	00249249 	.word	0x00249249

08000f6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <HAL_ADC_ConfigChannel+0x20>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e0dc      	b.n	800115e <HAL_ADC_ConfigChannel+0x1da>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b06      	cmp	r3, #6
 8000fb2:	d81c      	bhi.n	8000fee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3b05      	subs	r3, #5
 8000fc6:	221f      	movs	r2, #31
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4019      	ands	r1, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	3b05      	subs	r3, #5
 8000fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
 8000fec:	e03c      	b.n	8001068 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b0c      	cmp	r3, #12
 8000ff4:	d81c      	bhi.n	8001030 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	3b23      	subs	r3, #35	; 0x23
 8001008:	221f      	movs	r2, #31
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	4019      	ands	r1, r3
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	3b23      	subs	r3, #35	; 0x23
 8001022:	fa00 f203 	lsl.w	r2, r0, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
 800102e:	e01b      	b.n	8001068 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3b41      	subs	r3, #65	; 0x41
 8001042:	221f      	movs	r2, #31
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4019      	ands	r1, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	3b41      	subs	r3, #65	; 0x41
 800105c:	fa00 f203 	lsl.w	r2, r0, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d91c      	bls.n	80010aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d9      	ldr	r1, [r3, #12]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	3b1e      	subs	r3, #30
 8001082:	2207      	movs	r2, #7
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	4019      	ands	r1, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6898      	ldr	r0, [r3, #8]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	3b1e      	subs	r3, #30
 800109c:	fa00 f203 	lsl.w	r2, r0, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	e019      	b.n	80010de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6919      	ldr	r1, [r3, #16]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	2207      	movs	r2, #7
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4019      	ands	r1, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6898      	ldr	r0, [r3, #8]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	fa00 f203 	lsl.w	r2, r0, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b10      	cmp	r3, #16
 80010e4:	d003      	beq.n	80010ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ea:	2b11      	cmp	r3, #17
 80010ec:	d132      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_ADC_ConfigChannel+0x1e4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d125      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d126      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001114:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b10      	cmp	r3, #16
 800111c:	d11a      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_ADC_ConfigChannel+0x1e8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_ADC_ConfigChannel+0x1ec>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	0c9a      	lsrs	r2, r3, #18
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001134:	e002      	b.n	800113c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3b01      	subs	r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f9      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x1b2>
 8001142:	e007      	b.n	8001154 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f043 0220 	orr.w	r2, r3, #32
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40012400 	.word	0x40012400
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83

08001174 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b01      	cmp	r3, #1
 8001190:	d040      	beq.n	8001214 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <ADC_Enable+0xac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <ADC_Enable+0xb0>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	0c9b      	lsrs	r3, r3, #18
 80011ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011b0:	e002      	b.n	80011b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f9      	bne.n	80011b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011be:	f7ff fc1b 	bl	80009f8 <HAL_GetTick>
 80011c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011c4:	e01f      	b.n	8001206 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011c6:	f7ff fc17 	bl	80009f8 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d918      	bls.n	8001206 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d011      	beq.n	8001206 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	f043 0210 	orr.w	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e007      	b.n	8001216 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b01      	cmp	r3, #1
 8001212:	d1d8      	bne.n	80011c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000000 	.word	0x20000000
 8001224:	431bde83 	.word	0x431bde83

08001228 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b01      	cmp	r3, #1
 8001240:	d12e      	bne.n	80012a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001252:	f7ff fbd1 	bl	80009f8 <HAL_GetTick>
 8001256:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001258:	e01b      	b.n	8001292 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800125a:	f7ff fbcd 	bl	80009f8 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d914      	bls.n	8001292 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10d      	bne.n	8001292 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	f043 0210 	orr.w	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e007      	b.n	80012a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d0dc      	beq.n	800125a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADCEx_Calibration_Start+0x1e>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e097      	b.n	80013fa <HAL_ADCEx_Calibration_Start+0x14e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa8 	bl	8001228 <ADC_ConversionStop_Disable>
 80012d8:	4603      	mov	r3, r0
 80012da:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff49 	bl	8001174 <ADC_Enable>
 80012e2:	4603      	mov	r3, r0
 80012e4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f040 8081 	bne.w	80013f0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f6:	f023 0302 	bic.w	r3, r3, #2
 80012fa:	f043 0202 	orr.w	r2, r3, #2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <HAL_ADCEx_Calibration_Start+0x158>)
 8001304:	681c      	ldr	r4, [r3, #0]
 8001306:	2002      	movs	r0, #2
 8001308:	f000 ffac 	bl	8002264 <HAL_RCCEx_GetPeriphCLKFreq>
 800130c:	4603      	mov	r3, r0
 800130e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001312:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001314:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001316:	e002      	b.n	800131e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3b01      	subs	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f9      	bne.n	8001318 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0208 	orr.w	r2, r2, #8
 8001332:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001334:	f7ff fb60 	bl	80009f8 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800133a:	e01b      	b.n	8001374 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800133c:	f7ff fb5c 	bl	80009f8 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b0a      	cmp	r3, #10
 8001348:	d914      	bls.n	8001374 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00d      	beq.n	8001374 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f023 0312 	bic.w	r3, r3, #18
 8001360:	f043 0210 	orr.w	r2, r3, #16
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e042      	b.n	80013fa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1dc      	bne.n	800133c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001392:	f7ff fb31 	bl	80009f8 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001398:	e01b      	b.n	80013d2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800139a:	f7ff fb2d 	bl	80009f8 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d914      	bls.n	80013d2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00d      	beq.n	80013d2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	f023 0312 	bic.w	r3, r3, #18
 80013be:	f043 0210 	orr.w	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e013      	b.n	80013fa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1dc      	bne.n	800139a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	f023 0303 	bic.w	r3, r3, #3
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff90 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff49 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff5e 	bl	8001450 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff90 	bl	80014c0 <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5f 	bl	800146c <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffb0 	bl	8001524 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e2:	e169      	b.n	80018b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015e4:	2201      	movs	r2, #1
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f040 8158 	bne.w	80018b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4a9a      	ldr	r2, [pc, #616]	; (8001870 <HAL_GPIO_Init+0x2a0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d05e      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 800160c:	4a98      	ldr	r2, [pc, #608]	; (8001870 <HAL_GPIO_Init+0x2a0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d875      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001612:	4a98      	ldr	r2, [pc, #608]	; (8001874 <HAL_GPIO_Init+0x2a4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d058      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001618:	4a96      	ldr	r2, [pc, #600]	; (8001874 <HAL_GPIO_Init+0x2a4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d86f      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800161e:	4a96      	ldr	r2, [pc, #600]	; (8001878 <HAL_GPIO_Init+0x2a8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d052      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001624:	4a94      	ldr	r2, [pc, #592]	; (8001878 <HAL_GPIO_Init+0x2a8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d869      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800162a:	4a94      	ldr	r2, [pc, #592]	; (800187c <HAL_GPIO_Init+0x2ac>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04c      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001630:	4a92      	ldr	r2, [pc, #584]	; (800187c <HAL_GPIO_Init+0x2ac>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d863      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001636:	4a92      	ldr	r2, [pc, #584]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d046      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 800163c:	4a90      	ldr	r2, [pc, #576]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d85d      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d82a      	bhi.n	800169c <HAL_GPIO_Init+0xcc>
 8001646:	2b12      	cmp	r3, #18
 8001648:	d859      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800164a:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <HAL_GPIO_Init+0x80>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	080016cb 	.word	0x080016cb
 8001654:	080016a5 	.word	0x080016a5
 8001658:	080016b7 	.word	0x080016b7
 800165c:	080016f9 	.word	0x080016f9
 8001660:	080016ff 	.word	0x080016ff
 8001664:	080016ff 	.word	0x080016ff
 8001668:	080016ff 	.word	0x080016ff
 800166c:	080016ff 	.word	0x080016ff
 8001670:	080016ff 	.word	0x080016ff
 8001674:	080016ff 	.word	0x080016ff
 8001678:	080016ff 	.word	0x080016ff
 800167c:	080016ff 	.word	0x080016ff
 8001680:	080016ff 	.word	0x080016ff
 8001684:	080016ff 	.word	0x080016ff
 8001688:	080016ff 	.word	0x080016ff
 800168c:	080016ff 	.word	0x080016ff
 8001690:	080016ff 	.word	0x080016ff
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016c1 	.word	0x080016c1
 800169c:	4a79      	ldr	r2, [pc, #484]	; (8001884 <HAL_GPIO_Init+0x2b4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016a2:	e02c      	b.n	80016fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e029      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	3304      	adds	r3, #4
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e024      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	3308      	adds	r3, #8
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e01f      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	330c      	adds	r3, #12
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e01a      	b.n	8001700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016d2:	2304      	movs	r3, #4
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e013      	b.n	8001700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e0:	2308      	movs	r3, #8
 80016e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	611a      	str	r2, [r3, #16]
          break;
 80016ea:	e009      	b.n	8001700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	615a      	str	r2, [r3, #20]
          break;
 80016f6:	e003      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x130>
          break;
 80016fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d801      	bhi.n	800170a <HAL_GPIO_Init+0x13a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	e001      	b.n	800170e <HAL_GPIO_Init+0x13e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d802      	bhi.n	800171c <HAL_GPIO_Init+0x14c>
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	e002      	b.n	8001722 <HAL_GPIO_Init+0x152>
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	3b08      	subs	r3, #8
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	210f      	movs	r1, #15
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	401a      	ands	r2, r3
 8001734:	6a39      	ldr	r1, [r7, #32]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80b1 	beq.w	80018b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001750:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001768:	4a48      	ldr	r2, [pc, #288]	; (800188c <HAL_GPIO_Init+0x2bc>)
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a40      	ldr	r2, [pc, #256]	; (8001890 <HAL_GPIO_Init+0x2c0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d013      	beq.n	80017bc <HAL_GPIO_Init+0x1ec>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3f      	ldr	r2, [pc, #252]	; (8001894 <HAL_GPIO_Init+0x2c4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00d      	beq.n	80017b8 <HAL_GPIO_Init+0x1e8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a3e      	ldr	r2, [pc, #248]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d007      	beq.n	80017b4 <HAL_GPIO_Init+0x1e4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a3d      	ldr	r2, [pc, #244]	; (800189c <HAL_GPIO_Init+0x2cc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_GPIO_Init+0x1e0>
 80017ac:	2303      	movs	r3, #3
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017bc:	2300      	movs	r3, #0
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ce:	492f      	ldr	r1, [pc, #188]	; (800188c <HAL_GPIO_Init+0x2bc>)
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	492c      	ldr	r1, [pc, #176]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4928      	ldr	r1, [pc, #160]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001800:	4013      	ands	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4922      	ldr	r1, [pc, #136]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	491e      	ldr	r1, [pc, #120]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001828:	4013      	ands	r3, r2
 800182a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4918      	ldr	r1, [pc, #96]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4914      	ldr	r1, [pc, #80]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001850:	4013      	ands	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d021      	beq.n	80018a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
 800186c:	e021      	b.n	80018b2 <HAL_GPIO_Init+0x2e2>
 800186e:	bf00      	nop
 8001870:	10320000 	.word	0x10320000
 8001874:	10310000 	.word	0x10310000
 8001878:	10220000 	.word	0x10220000
 800187c:	10210000 	.word	0x10210000
 8001880:	10120000 	.word	0x10120000
 8001884:	10110000 	.word	0x10110000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	40010800 	.word	0x40010800
 8001894:	40010c00 	.word	0x40010c00
 8001898:	40011000 	.word	0x40011000
 800189c:	40011400 	.word	0x40011400
 80018a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_GPIO_Init+0x304>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	4909      	ldr	r1, [pc, #36]	; (80018d4 <HAL_GPIO_Init+0x304>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	3301      	adds	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f47f ae8e 	bne.w	80015e4 <HAL_GPIO_Init+0x14>
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	372c      	adds	r7, #44	; 0x2c
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e272      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8087 	beq.w	8001a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b04      	cmp	r3, #4
 8001902:	d00c      	beq.n	800191e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001904:	4b8f      	ldr	r3, [pc, #572]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d112      	bne.n	8001936 <HAL_RCC_OscConfig+0x5e>
 8001910:	4b8c      	ldr	r3, [pc, #560]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d10b      	bne.n	8001936 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191e:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d06c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x12c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d168      	bne.n	8001a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e24c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x76>
 8001940:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a7f      	ldr	r2, [pc, #508]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	e02e      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x98>
 8001956:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a77      	ldr	r2, [pc, #476]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e01d      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0xbc>
 800197a:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a71      	ldr	r2, [pc, #452]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 8001994:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a6a      	ldr	r2, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800199a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a67      	ldr	r2, [pc, #412]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d013      	beq.n	80019dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff f820 	bl	80009f8 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff f81c 	bl	80009f8 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e200      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0xe4>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff f80c 	bl	80009f8 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff f808 	bl	80009f8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1ec      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x10c>
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d063      	beq.n	8001ada <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a12:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a1e:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d11c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x18c>
 8001a2a:	4b46      	ldr	r3, [pc, #280]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x176>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1c0      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4939      	ldr	r1, [pc, #228]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7fe ffc1 	bl	80009f8 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7fe ffbd 	bl	80009f8 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1a1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4927      	ldr	r1, [pc, #156]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7fe ffa0 	bl	80009f8 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7fe ff9c 	bl	80009f8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e180      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d03a      	beq.n	8001b5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d019      	beq.n	8001b22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_RCC_OscConfig+0x274>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7fe ff80 	bl	80009f8 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7fe ff7c 	bl	80009f8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e160      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f000 face 	bl	80020bc <RCC_Delay>
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_OscConfig+0x274>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7fe ff66 	bl	80009f8 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2e:	e00f      	b.n	8001b50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7fe ff62 	bl	80009f8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d908      	bls.n	8001b50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e146      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	42420000 	.word	0x42420000
 8001b4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	4b92      	ldr	r3, [pc, #584]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1e9      	bne.n	8001b30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80a6 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10d      	bne.n	8001b96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a87      	ldr	r2, [pc, #540]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b85      	ldr	r3, [pc, #532]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b92:	2301      	movs	r3, #1
 8001b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <HAL_RCC_OscConfig+0x4c8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x4c8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7e      	ldr	r2, [pc, #504]	; (8001da0 <HAL_RCC_OscConfig+0x4c8>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bae:	f7fe ff23 	bl	80009f8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb6:	f7fe ff1f 	bl	80009f8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b64      	cmp	r3, #100	; 0x64
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e103      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <HAL_RCC_OscConfig+0x4c8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x312>
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e02d      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x334>
 8001bf2:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a69      	ldr	r2, [pc, #420]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a66      	ldr	r2, [pc, #408]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	e01c      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x356>
 8001c14:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a60      	ldr	r2, [pc, #384]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4a5d      	ldr	r2, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6213      	str	r3, [r2, #32]
 8001c2c:	e00b      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a5a      	ldr	r2, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a57      	ldr	r2, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d015      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7fe fed3 	bl	80009f8 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7fe fecf 	bl	80009f8 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0b1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ee      	beq.n	8001c56 <HAL_RCC_OscConfig+0x37e>
 8001c78:	e014      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe febd 	bl	80009f8 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe feb9 	bl	80009f8 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e09b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c98:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ee      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8087 	beq.w	8001dce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d061      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d146      	bne.n	8001d62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe fe8d 	bl	80009f8 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7fe fe89 	bl	80009f8 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e06d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d108      	bne.n	8001d1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4921      	ldr	r1, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a19      	ldr	r1, [r3, #32]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	491b      	ldr	r1, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fe5d 	bl	80009f8 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7fe fe59 	bl	80009f8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e03d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x46a>
 8001d60:	e035      	b.n	8001dce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_RCC_OscConfig+0x4cc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7fe fe46 	bl	80009f8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe fe42 	bl	80009f8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e026      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x498>
 8001d8e:	e01e      	b.n	8001dce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e019      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40007000 	.word	0x40007000
 8001da4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x500>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000

08001ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0d0      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4965      	ldr	r1, [pc, #404]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0b8      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e38:	4b59      	ldr	r3, [pc, #356]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	494d      	ldr	r1, [pc, #308]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d040      	beq.n	8001efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e07f      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e073      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06b      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4936      	ldr	r1, [pc, #216]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7fe fd94 	bl	80009f8 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7fe fd90 	bl	80009f8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e053      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d210      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4922      	ldr	r1, [pc, #136]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e032      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4916      	ldr	r1, [pc, #88]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	490e      	ldr	r1, [pc, #56]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6a:	f000 f821 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	490a      	ldr	r1, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7c:	5ccb      	ldrb	r3, [r1, r3]
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1d0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fcf2 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	080042e0 	.word	0x080042e0
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004

08001fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d002      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fde:	e027      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fe2:	613b      	str	r3, [r7, #16]
      break;
 8001fe4:	e027      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	0c9b      	lsrs	r3, r3, #18
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d010      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_GetSysClockFreq+0x94>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	0c5b      	lsrs	r3, r3, #17
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_RCC_GetSysClockFreq+0xa0>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8002012:	fb03 f202 	mul.w	r2, r3, r2
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e004      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	613b      	str	r3, [r7, #16]
      break;
 800202e:	e002      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	613b      	str	r3, [r7, #16]
      break;
 8002034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002036:	693b      	ldr	r3, [r7, #16]
}
 8002038:	4618      	mov	r0, r3
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	007a1200 	.word	0x007a1200
 800204c:	080042f8 	.word	0x080042f8
 8002050:	08004308 	.word	0x08004308
 8002054:	003d0900 	.word	0x003d0900

08002058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_RCC_GetHCLKFreq+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	20000000 	.word	0x20000000

0800206c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002070:	f7ff fff2 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4903      	ldr	r1, [pc, #12]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	080042f0 	.word	0x080042f0

08002094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002098:	f7ff ffde 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	0adb      	lsrs	r3, r3, #11
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4903      	ldr	r1, [pc, #12]	; (80020b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	080042f0 	.word	0x080042f0

080020bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <RCC_Delay+0x34>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <RCC_Delay+0x38>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0a5b      	lsrs	r3, r3, #9
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020d8:	bf00      	nop
  }
  while (Delay --);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <RCC_Delay+0x1c>
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000000 	.word	0x20000000
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d07d      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002118:	4b4f      	ldr	r3, [pc, #316]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10d      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	61d3      	str	r3, [r2, #28]
 8002130:	4b49      	ldr	r3, [pc, #292]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213c:	2301      	movs	r3, #1
 800213e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d118      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214c:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a42      	ldr	r2, [pc, #264]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002158:	f7fe fc4e 	bl	80009f8 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	e008      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7fe fc4a 	bl	80009f8 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e06d      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002172:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800217e:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002186:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d02e      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d027      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021b2:	4a29      	ldr	r2, [pc, #164]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d014      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe fc19 	bl	80009f8 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fc15 	bl	80009f8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e036      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ee      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4917      	ldr	r1, [pc, #92]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a13      	ldr	r2, [pc, #76]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	490b      	ldr	r1, [pc, #44]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	40007000 	.word	0x40007000
 8002260:	42420440 	.word	0x42420440

08002264 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b10      	cmp	r3, #16
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b10      	cmp	r3, #16
 800228a:	f200 808a 	bhi.w	80023a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d045      	beq.n	8002320 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d075      	beq.n	8002386 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800229a:	e082      	b.n	80023a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80022a2:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d07b      	beq.n	80023a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0c9b      	lsrs	r3, r3, #18
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	4a41      	ldr	r2, [pc, #260]	; (80023bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c5b      	lsrs	r3, r3, #17
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	4a3b      	ldr	r2, [pc, #236]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00d      	beq.n	80022fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80022e0:	4a38      	ldr	r2, [pc, #224]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	e004      	b.n	80022fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80022fc:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002308:	d102      	bne.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	61bb      	str	r3, [r7, #24]
      break;
 800230e:	e04a      	b.n	80023a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4a2d      	ldr	r2, [pc, #180]	; (80023cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	61bb      	str	r3, [r7, #24]
      break;
 800231e:	e042      	b.n	80023a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002330:	d108      	bne.n	8002344 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800233c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e01f      	b.n	8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234e:	d109      	bne.n	8002364 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800235c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	e00f      	b.n	8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800236e:	d11c      	bne.n	80023aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d016      	beq.n	80023aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800237c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002380:	61bb      	str	r3, [r7, #24]
      break;
 8002382:	e012      	b.n	80023aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002384:	e011      	b.n	80023aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002386:	f7ff fe85 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 800238a:	4602      	mov	r2, r0
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0b9b      	lsrs	r3, r3, #14
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	61bb      	str	r3, [r7, #24]
      break;
 80023a0:	e004      	b.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80023a2:	bf00      	nop
 80023a4:	e002      	b.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80023aa:	bf00      	nop
    }
  }
  return (frequency);
 80023ac:	69bb      	ldr	r3, [r7, #24]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	0800430c 	.word	0x0800430c
 80023c0:	0800431c 	.word	0x0800431c
 80023c4:	007a1200 	.word	0x007a1200
 80023c8:	003d0900 	.word	0x003d0900
 80023cc:	aaaaaaab 	.word	0xaaaaaaab

080023d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e041      	b.n	8002466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe f906 	bl	8000608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f000 fab2 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e041      	b.n	8002504 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f839 	bl	800250c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f000 fa63 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
	...

08002520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_TIM_PWM_Start+0x24>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e022      	b.n	800258a <HAL_TIM_PWM_Start+0x6a>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b04      	cmp	r3, #4
 8002548:	d109      	bne.n	800255e <HAL_TIM_PWM_Start+0x3e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	bf14      	ite	ne
 8002556:	2301      	movne	r3, #1
 8002558:	2300      	moveq	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	e015      	b.n	800258a <HAL_TIM_PWM_Start+0x6a>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d109      	bne.n	8002578 <HAL_TIM_PWM_Start+0x58>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e008      	b.n	800258a <HAL_TIM_PWM_Start+0x6a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e05e      	b.n	8002650 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x82>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a0:	e013      	b.n	80025ca <HAL_TIM_PWM_Start+0xaa>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x92>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b0:	e00b      	b.n	80025ca <HAL_TIM_PWM_Start+0xaa>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_PWM_Start+0xa2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c0:	e003      	b.n	80025ca <HAL_TIM_PWM_Start+0xaa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fc50 	bl	8002e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <HAL_TIM_PWM_Start+0x138>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d107      	bne.n	80025f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a18      	ldr	r2, [pc, #96]	; (8002658 <HAL_TIM_PWM_Start+0x138>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00e      	beq.n	800261a <HAL_TIM_PWM_Start+0xfa>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d009      	beq.n	800261a <HAL_TIM_PWM_Start+0xfa>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_TIM_PWM_Start+0x13c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d004      	beq.n	800261a <HAL_TIM_PWM_Start+0xfa>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_TIM_PWM_Start+0x140>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d111      	bne.n	800263e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b06      	cmp	r3, #6
 800262a:	d010      	beq.n	800264e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263c:	e007      	b.n	800264e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40000400 	.word	0x40000400
 8002660:	40000800 	.word	0x40000800

08002664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800267e:	2302      	movs	r3, #2
 8002680:	e0ae      	b.n	80027e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	f200 809f 	bhi.w	80027d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	080026cd 	.word	0x080026cd
 800269c:	080027d1 	.word	0x080027d1
 80026a0:	080027d1 	.word	0x080027d1
 80026a4:	080027d1 	.word	0x080027d1
 80026a8:	0800270d 	.word	0x0800270d
 80026ac:	080027d1 	.word	0x080027d1
 80026b0:	080027d1 	.word	0x080027d1
 80026b4:	080027d1 	.word	0x080027d1
 80026b8:	0800274f 	.word	0x0800274f
 80026bc:	080027d1 	.word	0x080027d1
 80026c0:	080027d1 	.word	0x080027d1
 80026c4:	080027d1 	.word	0x080027d1
 80026c8:	0800278f 	.word	0x0800278f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f9b2 	bl	8002a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0208 	orr.w	r2, r2, #8
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]
      break;
 800270a:	e064      	b.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9f8 	bl	8002b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6999      	ldr	r1, [r3, #24]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	021a      	lsls	r2, r3, #8
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	619a      	str	r2, [r3, #24]
      break;
 800274c:	e043      	b.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fa41 	bl	8002bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0208 	orr.w	r2, r2, #8
 8002768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0204 	bic.w	r2, r2, #4
 8002778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	61da      	str	r2, [r3, #28]
      break;
 800278c:	e023      	b.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fa8b 	bl	8002cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69d9      	ldr	r1, [r3, #28]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	021a      	lsls	r2, r3, #8
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	61da      	str	r2, [r3, #28]
      break;
 80027ce:	e002      	b.n	80027d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	75fb      	strb	r3, [r7, #23]
      break;
 80027d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027de:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_TIM_ConfigClockSource+0x1c>
 8002800:	2302      	movs	r3, #2
 8002802:	e0b4      	b.n	800296e <HAL_TIM_ConfigClockSource+0x186>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283c:	d03e      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0xd4>
 800283e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002842:	f200 8087 	bhi.w	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	f000 8086 	beq.w	800295a <HAL_TIM_ConfigClockSource+0x172>
 800284e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002852:	d87f      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b70      	cmp	r3, #112	; 0x70
 8002856:	d01a      	beq.n	800288e <HAL_TIM_ConfigClockSource+0xa6>
 8002858:	2b70      	cmp	r3, #112	; 0x70
 800285a:	d87b      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b60      	cmp	r3, #96	; 0x60
 800285e:	d050      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x11a>
 8002860:	2b60      	cmp	r3, #96	; 0x60
 8002862:	d877      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b50      	cmp	r3, #80	; 0x50
 8002866:	d03c      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002868:	2b50      	cmp	r3, #80	; 0x50
 800286a:	d873      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d058      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x13a>
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d86f      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002874:	2b30      	cmp	r3, #48	; 0x30
 8002876:	d064      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x15a>
 8002878:	2b30      	cmp	r3, #48	; 0x30
 800287a:	d86b      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 800287c:	2b20      	cmp	r3, #32
 800287e:	d060      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x15a>
 8002880:	2b20      	cmp	r3, #32
 8002882:	d867      	bhi.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d05c      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x15a>
 8002888:	2b10      	cmp	r3, #16
 800288a:	d05a      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	e062      	b.n	8002954 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f000 facc 	bl	8002e3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	609a      	str	r2, [r3, #8]
      break;
 80028ba:	e04f      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6899      	ldr	r1, [r3, #8]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f000 fab5 	bl	8002e3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028de:	609a      	str	r2, [r3, #8]
      break;
 80028e0:	e03c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 fa2c 	bl	8002d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2150      	movs	r1, #80	; 0x50
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fa83 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002900:	e02c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	f000 fa4a 	bl	8002da8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2160      	movs	r1, #96	; 0x60
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fa73 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002920:	e01c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	461a      	mov	r2, r3
 8002930:	f000 fa0c 	bl	8002d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2140      	movs	r1, #64	; 0x40
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fa63 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002940:	e00c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f000 fa5a 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002952:	e003      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e000      	b.n	800295c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800295a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <TIM_Base_SetConfig+0xb8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00b      	beq.n	80029a8 <TIM_Base_SetConfig+0x30>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d007      	beq.n	80029a8 <TIM_Base_SetConfig+0x30>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <TIM_Base_SetConfig+0xbc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d003      	beq.n	80029a8 <TIM_Base_SetConfig+0x30>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <TIM_Base_SetConfig+0xc0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d108      	bne.n	80029ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <TIM_Base_SetConfig+0xb8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00b      	beq.n	80029da <TIM_Base_SetConfig+0x62>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d007      	beq.n	80029da <TIM_Base_SetConfig+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <TIM_Base_SetConfig+0xbc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d003      	beq.n	80029da <TIM_Base_SetConfig+0x62>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <TIM_Base_SetConfig+0xc0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <TIM_Base_SetConfig+0xb8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40000800 	.word	0x40000800

08002a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 0201 	bic.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f023 0302 	bic.w	r3, r3, #2
 8002a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <TIM_OC1_SetConfig+0xc8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d10c      	bne.n	8002ab2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0308 	bic.w	r3, r3, #8
 8002a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <TIM_OC1_SetConfig+0xc8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d111      	bne.n	8002ade <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	621a      	str	r2, [r3, #32]
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f023 0210 	bic.w	r2, r3, #16
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0320 	bic.w	r3, r3, #32
 8002b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <TIM_OC2_SetConfig+0xd0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10d      	bne.n	8002b84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <TIM_OC2_SetConfig+0xd0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d113      	bne.n	8002bb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	621a      	str	r2, [r3, #32]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	40012c00 	.word	0x40012c00

08002bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <TIM_OC3_SetConfig+0xd0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10d      	bne.n	8002c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <TIM_OC3_SetConfig+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d113      	bne.n	8002c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	bf00      	nop
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40012c00 	.word	0x40012c00

08002cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	031b      	lsls	r3, r3, #12
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <TIM_OC4_SetConfig+0x98>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d109      	bne.n	8002d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	019b      	lsls	r3, r3, #6
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00

08002d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0201 	bic.w	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 030a 	bic.w	r3, r3, #10
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f023 0210 	bic.w	r2, r3, #16
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	031b      	lsls	r3, r3, #12
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	621a      	str	r2, [r3, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 0307 	orr.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	021a      	lsls	r2, r3, #8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	609a      	str	r2, [r3, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e046      	b.n	8002f66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f24:	d009      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10c      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e042      	b.n	8003014 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fb94 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f91d 	bl	8003200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	d16d      	bne.n	8003118 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_UART_Transmit+0x2c>
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e066      	b.n	800311a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2221      	movs	r2, #33	; 0x21
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305a:	f7fd fccd 	bl	80009f8 <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003074:	d108      	bne.n	8003088 <HAL_UART_Transmit+0x6c>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e003      	b.n	8003090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003090:	e02a      	b.n	80030e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2180      	movs	r1, #128	; 0x80
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f840 	bl	8003122 <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e036      	b.n	800311a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10b      	bne.n	80030ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	3302      	adds	r3, #2
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e007      	b.n	80030da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	3301      	adds	r3, #1
 80030d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1cf      	bne.n	8003092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2140      	movs	r1, #64	; 0x40
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f810 	bl	8003122 <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e006      	b.n	800311a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b090      	sub	sp, #64	; 0x40
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003132:	e050      	b.n	80031d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d04c      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800313c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0x30>
 8003142:	f7fd fc59 	bl	80009f8 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800314e:	429a      	cmp	r2, r3
 8003150:	d241      	bcs.n	80031d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003172:	637a      	str	r2, [r7, #52]	; 0x34
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e5      	bne.n	8003152 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3314      	adds	r3, #20
 800318c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	613b      	str	r3, [r7, #16]
   return(result);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3314      	adds	r3, #20
 80031a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a6:	623a      	str	r2, [r7, #32]
 80031a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	69f9      	ldr	r1, [r7, #28]
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e5      	bne.n	8003186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e00f      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d09f      	beq.n	8003134 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3740      	adds	r7, #64	; 0x40
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800323a:	f023 030c 	bic.w	r3, r3, #12
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	430b      	orrs	r3, r1
 8003246:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <UART_SetConfig+0x114>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d103      	bne.n	8003270 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7fe ff14 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	e002      	b.n	8003276 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7fe fefc 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8003274:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009a      	lsls	r2, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <UART_SetConfig+0x118>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	0119      	lsls	r1, r3, #4
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009a      	lsls	r2, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <UART_SetConfig+0x118>)
 80032ae:	fba3 0302 	umull	r0, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2064      	movs	r0, #100	; 0x64
 80032b6:	fb00 f303 	mul.w	r3, r0, r3
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	3332      	adds	r3, #50	; 0x32
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <UART_SetConfig+0x118>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032cc:	4419      	add	r1, r3
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009a      	lsls	r2, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <UART_SetConfig+0x118>)
 80032e6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2064      	movs	r0, #100	; 0x64
 80032ee:	fb00 f303 	mul.w	r3, r0, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	; 0x32
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <UART_SetConfig+0x118>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 020f 	and.w	r2, r3, #15
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	440a      	add	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40013800 	.word	0x40013800
 8003318:	51eb851f 	.word	0x51eb851f

0800331c <__errno>:
 800331c:	4b01      	ldr	r3, [pc, #4]	; (8003324 <__errno+0x8>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	2000000c 	.word	0x2000000c

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	2600      	movs	r6, #0
 800332c:	4d0c      	ldr	r5, [pc, #48]	; (8003360 <__libc_init_array+0x38>)
 800332e:	4c0d      	ldr	r4, [pc, #52]	; (8003364 <__libc_init_array+0x3c>)
 8003330:	1b64      	subs	r4, r4, r5
 8003332:	10a4      	asrs	r4, r4, #2
 8003334:	42a6      	cmp	r6, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	f000 ffb6 	bl	80042a8 <_init>
 800333c:	2600      	movs	r6, #0
 800333e:	4d0a      	ldr	r5, [pc, #40]	; (8003368 <__libc_init_array+0x40>)
 8003340:	4c0a      	ldr	r4, [pc, #40]	; (800336c <__libc_init_array+0x44>)
 8003342:	1b64      	subs	r4, r4, r5
 8003344:	10a4      	asrs	r4, r4, #2
 8003346:	42a6      	cmp	r6, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003350:	4798      	blx	r3
 8003352:	3601      	adds	r6, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	f855 3b04 	ldr.w	r3, [r5], #4
 800335a:	4798      	blx	r3
 800335c:	3601      	adds	r6, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	080043b8 	.word	0x080043b8
 8003364:	080043b8 	.word	0x080043b8
 8003368:	080043b8 	.word	0x080043b8
 800336c:	080043bc 	.word	0x080043bc

08003370 <memset>:
 8003370:	4603      	mov	r3, r0
 8003372:	4402      	add	r2, r0
 8003374:	4293      	cmp	r3, r2
 8003376:	d100      	bne.n	800337a <memset+0xa>
 8003378:	4770      	bx	lr
 800337a:	f803 1b01 	strb.w	r1, [r3], #1
 800337e:	e7f9      	b.n	8003374 <memset+0x4>

08003380 <iprintf>:
 8003380:	b40f      	push	{r0, r1, r2, r3}
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <iprintf+0x2c>)
 8003384:	b513      	push	{r0, r1, r4, lr}
 8003386:	681c      	ldr	r4, [r3, #0]
 8003388:	b124      	cbz	r4, 8003394 <iprintf+0x14>
 800338a:	69a3      	ldr	r3, [r4, #24]
 800338c:	b913      	cbnz	r3, 8003394 <iprintf+0x14>
 800338e:	4620      	mov	r0, r4
 8003390:	f000 f866 	bl	8003460 <__sinit>
 8003394:	ab05      	add	r3, sp, #20
 8003396:	4620      	mov	r0, r4
 8003398:	9a04      	ldr	r2, [sp, #16]
 800339a:	68a1      	ldr	r1, [r4, #8]
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	f000 f9bb 	bl	8003718 <_vfiprintf_r>
 80033a2:	b002      	add	sp, #8
 80033a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a8:	b004      	add	sp, #16
 80033aa:	4770      	bx	lr
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <std>:
 80033b0:	2300      	movs	r3, #0
 80033b2:	b510      	push	{r4, lr}
 80033b4:	4604      	mov	r4, r0
 80033b6:	e9c0 3300 	strd	r3, r3, [r0]
 80033ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033be:	6083      	str	r3, [r0, #8]
 80033c0:	8181      	strh	r1, [r0, #12]
 80033c2:	6643      	str	r3, [r0, #100]	; 0x64
 80033c4:	81c2      	strh	r2, [r0, #14]
 80033c6:	6183      	str	r3, [r0, #24]
 80033c8:	4619      	mov	r1, r3
 80033ca:	2208      	movs	r2, #8
 80033cc:	305c      	adds	r0, #92	; 0x5c
 80033ce:	f7ff ffcf 	bl	8003370 <memset>
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <std+0x38>)
 80033d4:	6224      	str	r4, [r4, #32]
 80033d6:	6263      	str	r3, [r4, #36]	; 0x24
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <std+0x3c>)
 80033da:	62a3      	str	r3, [r4, #40]	; 0x28
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <std+0x40>)
 80033de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <std+0x44>)
 80033e2:	6323      	str	r3, [r4, #48]	; 0x30
 80033e4:	bd10      	pop	{r4, pc}
 80033e6:	bf00      	nop
 80033e8:	08003cc5 	.word	0x08003cc5
 80033ec:	08003ce7 	.word	0x08003ce7
 80033f0:	08003d1f 	.word	0x08003d1f
 80033f4:	08003d43 	.word	0x08003d43

080033f8 <_cleanup_r>:
 80033f8:	4901      	ldr	r1, [pc, #4]	; (8003400 <_cleanup_r+0x8>)
 80033fa:	f000 b8af 	b.w	800355c <_fwalk_reent>
 80033fe:	bf00      	nop
 8003400:	08004015 	.word	0x08004015

08003404 <__sfmoreglue>:
 8003404:	2268      	movs	r2, #104	; 0x68
 8003406:	b570      	push	{r4, r5, r6, lr}
 8003408:	1e4d      	subs	r5, r1, #1
 800340a:	4355      	muls	r5, r2
 800340c:	460e      	mov	r6, r1
 800340e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003412:	f000 f8e5 	bl	80035e0 <_malloc_r>
 8003416:	4604      	mov	r4, r0
 8003418:	b140      	cbz	r0, 800342c <__sfmoreglue+0x28>
 800341a:	2100      	movs	r1, #0
 800341c:	e9c0 1600 	strd	r1, r6, [r0]
 8003420:	300c      	adds	r0, #12
 8003422:	60a0      	str	r0, [r4, #8]
 8003424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003428:	f7ff ffa2 	bl	8003370 <memset>
 800342c:	4620      	mov	r0, r4
 800342e:	bd70      	pop	{r4, r5, r6, pc}

08003430 <__sfp_lock_acquire>:
 8003430:	4801      	ldr	r0, [pc, #4]	; (8003438 <__sfp_lock_acquire+0x8>)
 8003432:	f000 b8b3 	b.w	800359c <__retarget_lock_acquire_recursive>
 8003436:	bf00      	nop
 8003438:	20000159 	.word	0x20000159

0800343c <__sfp_lock_release>:
 800343c:	4801      	ldr	r0, [pc, #4]	; (8003444 <__sfp_lock_release+0x8>)
 800343e:	f000 b8ae 	b.w	800359e <__retarget_lock_release_recursive>
 8003442:	bf00      	nop
 8003444:	20000159 	.word	0x20000159

08003448 <__sinit_lock_acquire>:
 8003448:	4801      	ldr	r0, [pc, #4]	; (8003450 <__sinit_lock_acquire+0x8>)
 800344a:	f000 b8a7 	b.w	800359c <__retarget_lock_acquire_recursive>
 800344e:	bf00      	nop
 8003450:	2000015a 	.word	0x2000015a

08003454 <__sinit_lock_release>:
 8003454:	4801      	ldr	r0, [pc, #4]	; (800345c <__sinit_lock_release+0x8>)
 8003456:	f000 b8a2 	b.w	800359e <__retarget_lock_release_recursive>
 800345a:	bf00      	nop
 800345c:	2000015a 	.word	0x2000015a

08003460 <__sinit>:
 8003460:	b510      	push	{r4, lr}
 8003462:	4604      	mov	r4, r0
 8003464:	f7ff fff0 	bl	8003448 <__sinit_lock_acquire>
 8003468:	69a3      	ldr	r3, [r4, #24]
 800346a:	b11b      	cbz	r3, 8003474 <__sinit+0x14>
 800346c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003470:	f7ff bff0 	b.w	8003454 <__sinit_lock_release>
 8003474:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003478:	6523      	str	r3, [r4, #80]	; 0x50
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <__sinit+0x68>)
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <__sinit+0x6c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	62a2      	str	r2, [r4, #40]	; 0x28
 8003482:	42a3      	cmp	r3, r4
 8003484:	bf08      	it	eq
 8003486:	2301      	moveq	r3, #1
 8003488:	4620      	mov	r0, r4
 800348a:	bf08      	it	eq
 800348c:	61a3      	streq	r3, [r4, #24]
 800348e:	f000 f81f 	bl	80034d0 <__sfp>
 8003492:	6060      	str	r0, [r4, #4]
 8003494:	4620      	mov	r0, r4
 8003496:	f000 f81b 	bl	80034d0 <__sfp>
 800349a:	60a0      	str	r0, [r4, #8]
 800349c:	4620      	mov	r0, r4
 800349e:	f000 f817 	bl	80034d0 <__sfp>
 80034a2:	2200      	movs	r2, #0
 80034a4:	2104      	movs	r1, #4
 80034a6:	60e0      	str	r0, [r4, #12]
 80034a8:	6860      	ldr	r0, [r4, #4]
 80034aa:	f7ff ff81 	bl	80033b0 <std>
 80034ae:	2201      	movs	r2, #1
 80034b0:	2109      	movs	r1, #9
 80034b2:	68a0      	ldr	r0, [r4, #8]
 80034b4:	f7ff ff7c 	bl	80033b0 <std>
 80034b8:	2202      	movs	r2, #2
 80034ba:	2112      	movs	r1, #18
 80034bc:	68e0      	ldr	r0, [r4, #12]
 80034be:	f7ff ff77 	bl	80033b0 <std>
 80034c2:	2301      	movs	r3, #1
 80034c4:	61a3      	str	r3, [r4, #24]
 80034c6:	e7d1      	b.n	800346c <__sinit+0xc>
 80034c8:	08004320 	.word	0x08004320
 80034cc:	080033f9 	.word	0x080033f9

080034d0 <__sfp>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	4607      	mov	r7, r0
 80034d4:	f7ff ffac 	bl	8003430 <__sfp_lock_acquire>
 80034d8:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <__sfp+0x84>)
 80034da:	681e      	ldr	r6, [r3, #0]
 80034dc:	69b3      	ldr	r3, [r6, #24]
 80034de:	b913      	cbnz	r3, 80034e6 <__sfp+0x16>
 80034e0:	4630      	mov	r0, r6
 80034e2:	f7ff ffbd 	bl	8003460 <__sinit>
 80034e6:	3648      	adds	r6, #72	; 0x48
 80034e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	d503      	bpl.n	80034f8 <__sfp+0x28>
 80034f0:	6833      	ldr	r3, [r6, #0]
 80034f2:	b30b      	cbz	r3, 8003538 <__sfp+0x68>
 80034f4:	6836      	ldr	r6, [r6, #0]
 80034f6:	e7f7      	b.n	80034e8 <__sfp+0x18>
 80034f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034fc:	b9d5      	cbnz	r5, 8003534 <__sfp+0x64>
 80034fe:	4b16      	ldr	r3, [pc, #88]	; (8003558 <__sfp+0x88>)
 8003500:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003504:	60e3      	str	r3, [r4, #12]
 8003506:	6665      	str	r5, [r4, #100]	; 0x64
 8003508:	f000 f847 	bl	800359a <__retarget_lock_init_recursive>
 800350c:	f7ff ff96 	bl	800343c <__sfp_lock_release>
 8003510:	2208      	movs	r2, #8
 8003512:	4629      	mov	r1, r5
 8003514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800351c:	6025      	str	r5, [r4, #0]
 800351e:	61a5      	str	r5, [r4, #24]
 8003520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003524:	f7ff ff24 	bl	8003370 <memset>
 8003528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800352c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003530:	4620      	mov	r0, r4
 8003532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003534:	3468      	adds	r4, #104	; 0x68
 8003536:	e7d9      	b.n	80034ec <__sfp+0x1c>
 8003538:	2104      	movs	r1, #4
 800353a:	4638      	mov	r0, r7
 800353c:	f7ff ff62 	bl	8003404 <__sfmoreglue>
 8003540:	4604      	mov	r4, r0
 8003542:	6030      	str	r0, [r6, #0]
 8003544:	2800      	cmp	r0, #0
 8003546:	d1d5      	bne.n	80034f4 <__sfp+0x24>
 8003548:	f7ff ff78 	bl	800343c <__sfp_lock_release>
 800354c:	230c      	movs	r3, #12
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	e7ee      	b.n	8003530 <__sfp+0x60>
 8003552:	bf00      	nop
 8003554:	08004320 	.word	0x08004320
 8003558:	ffff0001 	.word	0xffff0001

0800355c <_fwalk_reent>:
 800355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003560:	4606      	mov	r6, r0
 8003562:	4688      	mov	r8, r1
 8003564:	2700      	movs	r7, #0
 8003566:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800356a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800356e:	f1b9 0901 	subs.w	r9, r9, #1
 8003572:	d505      	bpl.n	8003580 <_fwalk_reent+0x24>
 8003574:	6824      	ldr	r4, [r4, #0]
 8003576:	2c00      	cmp	r4, #0
 8003578:	d1f7      	bne.n	800356a <_fwalk_reent+0xe>
 800357a:	4638      	mov	r0, r7
 800357c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003580:	89ab      	ldrh	r3, [r5, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d907      	bls.n	8003596 <_fwalk_reent+0x3a>
 8003586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800358a:	3301      	adds	r3, #1
 800358c:	d003      	beq.n	8003596 <_fwalk_reent+0x3a>
 800358e:	4629      	mov	r1, r5
 8003590:	4630      	mov	r0, r6
 8003592:	47c0      	blx	r8
 8003594:	4307      	orrs	r7, r0
 8003596:	3568      	adds	r5, #104	; 0x68
 8003598:	e7e9      	b.n	800356e <_fwalk_reent+0x12>

0800359a <__retarget_lock_init_recursive>:
 800359a:	4770      	bx	lr

0800359c <__retarget_lock_acquire_recursive>:
 800359c:	4770      	bx	lr

0800359e <__retarget_lock_release_recursive>:
 800359e:	4770      	bx	lr

080035a0 <sbrk_aligned>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	4e0e      	ldr	r6, [pc, #56]	; (80035dc <sbrk_aligned+0x3c>)
 80035a4:	460c      	mov	r4, r1
 80035a6:	6831      	ldr	r1, [r6, #0]
 80035a8:	4605      	mov	r5, r0
 80035aa:	b911      	cbnz	r1, 80035b2 <sbrk_aligned+0x12>
 80035ac:	f000 fb7a 	bl	8003ca4 <_sbrk_r>
 80035b0:	6030      	str	r0, [r6, #0]
 80035b2:	4621      	mov	r1, r4
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 fb75 	bl	8003ca4 <_sbrk_r>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	d00a      	beq.n	80035d4 <sbrk_aligned+0x34>
 80035be:	1cc4      	adds	r4, r0, #3
 80035c0:	f024 0403 	bic.w	r4, r4, #3
 80035c4:	42a0      	cmp	r0, r4
 80035c6:	d007      	beq.n	80035d8 <sbrk_aligned+0x38>
 80035c8:	1a21      	subs	r1, r4, r0
 80035ca:	4628      	mov	r0, r5
 80035cc:	f000 fb6a 	bl	8003ca4 <_sbrk_r>
 80035d0:	3001      	adds	r0, #1
 80035d2:	d101      	bne.n	80035d8 <sbrk_aligned+0x38>
 80035d4:	f04f 34ff 	mov.w	r4, #4294967295
 80035d8:	4620      	mov	r0, r4
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	20000160 	.word	0x20000160

080035e0 <_malloc_r>:
 80035e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	1ccd      	adds	r5, r1, #3
 80035e6:	f025 0503 	bic.w	r5, r5, #3
 80035ea:	3508      	adds	r5, #8
 80035ec:	2d0c      	cmp	r5, #12
 80035ee:	bf38      	it	cc
 80035f0:	250c      	movcc	r5, #12
 80035f2:	2d00      	cmp	r5, #0
 80035f4:	4607      	mov	r7, r0
 80035f6:	db01      	blt.n	80035fc <_malloc_r+0x1c>
 80035f8:	42a9      	cmp	r1, r5
 80035fa:	d905      	bls.n	8003608 <_malloc_r+0x28>
 80035fc:	230c      	movs	r3, #12
 80035fe:	2600      	movs	r6, #0
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	4630      	mov	r0, r6
 8003604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003608:	4e2e      	ldr	r6, [pc, #184]	; (80036c4 <_malloc_r+0xe4>)
 800360a:	f000 fdc5 	bl	8004198 <__malloc_lock>
 800360e:	6833      	ldr	r3, [r6, #0]
 8003610:	461c      	mov	r4, r3
 8003612:	bb34      	cbnz	r4, 8003662 <_malloc_r+0x82>
 8003614:	4629      	mov	r1, r5
 8003616:	4638      	mov	r0, r7
 8003618:	f7ff ffc2 	bl	80035a0 <sbrk_aligned>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	4604      	mov	r4, r0
 8003620:	d14d      	bne.n	80036be <_malloc_r+0xde>
 8003622:	6834      	ldr	r4, [r6, #0]
 8003624:	4626      	mov	r6, r4
 8003626:	2e00      	cmp	r6, #0
 8003628:	d140      	bne.n	80036ac <_malloc_r+0xcc>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	4631      	mov	r1, r6
 800362e:	4638      	mov	r0, r7
 8003630:	eb04 0803 	add.w	r8, r4, r3
 8003634:	f000 fb36 	bl	8003ca4 <_sbrk_r>
 8003638:	4580      	cmp	r8, r0
 800363a:	d13a      	bne.n	80036b2 <_malloc_r+0xd2>
 800363c:	6821      	ldr	r1, [r4, #0]
 800363e:	3503      	adds	r5, #3
 8003640:	1a6d      	subs	r5, r5, r1
 8003642:	f025 0503 	bic.w	r5, r5, #3
 8003646:	3508      	adds	r5, #8
 8003648:	2d0c      	cmp	r5, #12
 800364a:	bf38      	it	cc
 800364c:	250c      	movcc	r5, #12
 800364e:	4638      	mov	r0, r7
 8003650:	4629      	mov	r1, r5
 8003652:	f7ff ffa5 	bl	80035a0 <sbrk_aligned>
 8003656:	3001      	adds	r0, #1
 8003658:	d02b      	beq.n	80036b2 <_malloc_r+0xd2>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	442b      	add	r3, r5
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	e00e      	b.n	8003680 <_malloc_r+0xa0>
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	1b52      	subs	r2, r2, r5
 8003666:	d41e      	bmi.n	80036a6 <_malloc_r+0xc6>
 8003668:	2a0b      	cmp	r2, #11
 800366a:	d916      	bls.n	800369a <_malloc_r+0xba>
 800366c:	1961      	adds	r1, r4, r5
 800366e:	42a3      	cmp	r3, r4
 8003670:	6025      	str	r5, [r4, #0]
 8003672:	bf18      	it	ne
 8003674:	6059      	strne	r1, [r3, #4]
 8003676:	6863      	ldr	r3, [r4, #4]
 8003678:	bf08      	it	eq
 800367a:	6031      	streq	r1, [r6, #0]
 800367c:	5162      	str	r2, [r4, r5]
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	4638      	mov	r0, r7
 8003682:	f104 060b 	add.w	r6, r4, #11
 8003686:	f000 fd8d 	bl	80041a4 <__malloc_unlock>
 800368a:	f026 0607 	bic.w	r6, r6, #7
 800368e:	1d23      	adds	r3, r4, #4
 8003690:	1af2      	subs	r2, r6, r3
 8003692:	d0b6      	beq.n	8003602 <_malloc_r+0x22>
 8003694:	1b9b      	subs	r3, r3, r6
 8003696:	50a3      	str	r3, [r4, r2]
 8003698:	e7b3      	b.n	8003602 <_malloc_r+0x22>
 800369a:	6862      	ldr	r2, [r4, #4]
 800369c:	42a3      	cmp	r3, r4
 800369e:	bf0c      	ite	eq
 80036a0:	6032      	streq	r2, [r6, #0]
 80036a2:	605a      	strne	r2, [r3, #4]
 80036a4:	e7ec      	b.n	8003680 <_malloc_r+0xa0>
 80036a6:	4623      	mov	r3, r4
 80036a8:	6864      	ldr	r4, [r4, #4]
 80036aa:	e7b2      	b.n	8003612 <_malloc_r+0x32>
 80036ac:	4634      	mov	r4, r6
 80036ae:	6876      	ldr	r6, [r6, #4]
 80036b0:	e7b9      	b.n	8003626 <_malloc_r+0x46>
 80036b2:	230c      	movs	r3, #12
 80036b4:	4638      	mov	r0, r7
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	f000 fd74 	bl	80041a4 <__malloc_unlock>
 80036bc:	e7a1      	b.n	8003602 <_malloc_r+0x22>
 80036be:	6025      	str	r5, [r4, #0]
 80036c0:	e7de      	b.n	8003680 <_malloc_r+0xa0>
 80036c2:	bf00      	nop
 80036c4:	2000015c 	.word	0x2000015c

080036c8 <__sfputc_r>:
 80036c8:	6893      	ldr	r3, [r2, #8]
 80036ca:	b410      	push	{r4}
 80036cc:	3b01      	subs	r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	6093      	str	r3, [r2, #8]
 80036d2:	da07      	bge.n	80036e4 <__sfputc_r+0x1c>
 80036d4:	6994      	ldr	r4, [r2, #24]
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	db01      	blt.n	80036de <__sfputc_r+0x16>
 80036da:	290a      	cmp	r1, #10
 80036dc:	d102      	bne.n	80036e4 <__sfputc_r+0x1c>
 80036de:	bc10      	pop	{r4}
 80036e0:	f000 bb34 	b.w	8003d4c <__swbuf_r>
 80036e4:	6813      	ldr	r3, [r2, #0]
 80036e6:	1c58      	adds	r0, r3, #1
 80036e8:	6010      	str	r0, [r2, #0]
 80036ea:	7019      	strb	r1, [r3, #0]
 80036ec:	4608      	mov	r0, r1
 80036ee:	bc10      	pop	{r4}
 80036f0:	4770      	bx	lr

080036f2 <__sfputs_r>:
 80036f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f4:	4606      	mov	r6, r0
 80036f6:	460f      	mov	r7, r1
 80036f8:	4614      	mov	r4, r2
 80036fa:	18d5      	adds	r5, r2, r3
 80036fc:	42ac      	cmp	r4, r5
 80036fe:	d101      	bne.n	8003704 <__sfputs_r+0x12>
 8003700:	2000      	movs	r0, #0
 8003702:	e007      	b.n	8003714 <__sfputs_r+0x22>
 8003704:	463a      	mov	r2, r7
 8003706:	4630      	mov	r0, r6
 8003708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370c:	f7ff ffdc 	bl	80036c8 <__sfputc_r>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d1f3      	bne.n	80036fc <__sfputs_r+0xa>
 8003714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003718 <_vfiprintf_r>:
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	460d      	mov	r5, r1
 800371e:	4614      	mov	r4, r2
 8003720:	4698      	mov	r8, r3
 8003722:	4606      	mov	r6, r0
 8003724:	b09d      	sub	sp, #116	; 0x74
 8003726:	b118      	cbz	r0, 8003730 <_vfiprintf_r+0x18>
 8003728:	6983      	ldr	r3, [r0, #24]
 800372a:	b90b      	cbnz	r3, 8003730 <_vfiprintf_r+0x18>
 800372c:	f7ff fe98 	bl	8003460 <__sinit>
 8003730:	4b89      	ldr	r3, [pc, #548]	; (8003958 <_vfiprintf_r+0x240>)
 8003732:	429d      	cmp	r5, r3
 8003734:	d11b      	bne.n	800376e <_vfiprintf_r+0x56>
 8003736:	6875      	ldr	r5, [r6, #4]
 8003738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800373a:	07d9      	lsls	r1, r3, #31
 800373c:	d405      	bmi.n	800374a <_vfiprintf_r+0x32>
 800373e:	89ab      	ldrh	r3, [r5, #12]
 8003740:	059a      	lsls	r2, r3, #22
 8003742:	d402      	bmi.n	800374a <_vfiprintf_r+0x32>
 8003744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003746:	f7ff ff29 	bl	800359c <__retarget_lock_acquire_recursive>
 800374a:	89ab      	ldrh	r3, [r5, #12]
 800374c:	071b      	lsls	r3, r3, #28
 800374e:	d501      	bpl.n	8003754 <_vfiprintf_r+0x3c>
 8003750:	692b      	ldr	r3, [r5, #16]
 8003752:	b9eb      	cbnz	r3, 8003790 <_vfiprintf_r+0x78>
 8003754:	4629      	mov	r1, r5
 8003756:	4630      	mov	r0, r6
 8003758:	f000 fb5c 	bl	8003e14 <__swsetup_r>
 800375c:	b1c0      	cbz	r0, 8003790 <_vfiprintf_r+0x78>
 800375e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003760:	07dc      	lsls	r4, r3, #31
 8003762:	d50e      	bpl.n	8003782 <_vfiprintf_r+0x6a>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	b01d      	add	sp, #116	; 0x74
 800376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376e:	4b7b      	ldr	r3, [pc, #492]	; (800395c <_vfiprintf_r+0x244>)
 8003770:	429d      	cmp	r5, r3
 8003772:	d101      	bne.n	8003778 <_vfiprintf_r+0x60>
 8003774:	68b5      	ldr	r5, [r6, #8]
 8003776:	e7df      	b.n	8003738 <_vfiprintf_r+0x20>
 8003778:	4b79      	ldr	r3, [pc, #484]	; (8003960 <_vfiprintf_r+0x248>)
 800377a:	429d      	cmp	r5, r3
 800377c:	bf08      	it	eq
 800377e:	68f5      	ldreq	r5, [r6, #12]
 8003780:	e7da      	b.n	8003738 <_vfiprintf_r+0x20>
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	0598      	lsls	r0, r3, #22
 8003786:	d4ed      	bmi.n	8003764 <_vfiprintf_r+0x4c>
 8003788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800378a:	f7ff ff08 	bl	800359e <__retarget_lock_release_recursive>
 800378e:	e7e9      	b.n	8003764 <_vfiprintf_r+0x4c>
 8003790:	2300      	movs	r3, #0
 8003792:	9309      	str	r3, [sp, #36]	; 0x24
 8003794:	2320      	movs	r3, #32
 8003796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800379a:	2330      	movs	r3, #48	; 0x30
 800379c:	f04f 0901 	mov.w	r9, #1
 80037a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003964 <_vfiprintf_r+0x24c>
 80037a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ac:	4623      	mov	r3, r4
 80037ae:	469a      	mov	sl, r3
 80037b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037b4:	b10a      	cbz	r2, 80037ba <_vfiprintf_r+0xa2>
 80037b6:	2a25      	cmp	r2, #37	; 0x25
 80037b8:	d1f9      	bne.n	80037ae <_vfiprintf_r+0x96>
 80037ba:	ebba 0b04 	subs.w	fp, sl, r4
 80037be:	d00b      	beq.n	80037d8 <_vfiprintf_r+0xc0>
 80037c0:	465b      	mov	r3, fp
 80037c2:	4622      	mov	r2, r4
 80037c4:	4629      	mov	r1, r5
 80037c6:	4630      	mov	r0, r6
 80037c8:	f7ff ff93 	bl	80036f2 <__sfputs_r>
 80037cc:	3001      	adds	r0, #1
 80037ce:	f000 80aa 	beq.w	8003926 <_vfiprintf_r+0x20e>
 80037d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037d4:	445a      	add	r2, fp
 80037d6:	9209      	str	r2, [sp, #36]	; 0x24
 80037d8:	f89a 3000 	ldrb.w	r3, [sl]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80a2 	beq.w	8003926 <_vfiprintf_r+0x20e>
 80037e2:	2300      	movs	r3, #0
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ec:	f10a 0a01 	add.w	sl, sl, #1
 80037f0:	9304      	str	r3, [sp, #16]
 80037f2:	9307      	str	r3, [sp, #28]
 80037f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037f8:	931a      	str	r3, [sp, #104]	; 0x68
 80037fa:	4654      	mov	r4, sl
 80037fc:	2205      	movs	r2, #5
 80037fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003802:	4858      	ldr	r0, [pc, #352]	; (8003964 <_vfiprintf_r+0x24c>)
 8003804:	f000 fcba 	bl	800417c <memchr>
 8003808:	9a04      	ldr	r2, [sp, #16]
 800380a:	b9d8      	cbnz	r0, 8003844 <_vfiprintf_r+0x12c>
 800380c:	06d1      	lsls	r1, r2, #27
 800380e:	bf44      	itt	mi
 8003810:	2320      	movmi	r3, #32
 8003812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003816:	0713      	lsls	r3, r2, #28
 8003818:	bf44      	itt	mi
 800381a:	232b      	movmi	r3, #43	; 0x2b
 800381c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003820:	f89a 3000 	ldrb.w	r3, [sl]
 8003824:	2b2a      	cmp	r3, #42	; 0x2a
 8003826:	d015      	beq.n	8003854 <_vfiprintf_r+0x13c>
 8003828:	4654      	mov	r4, sl
 800382a:	2000      	movs	r0, #0
 800382c:	f04f 0c0a 	mov.w	ip, #10
 8003830:	9a07      	ldr	r2, [sp, #28]
 8003832:	4621      	mov	r1, r4
 8003834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003838:	3b30      	subs	r3, #48	; 0x30
 800383a:	2b09      	cmp	r3, #9
 800383c:	d94e      	bls.n	80038dc <_vfiprintf_r+0x1c4>
 800383e:	b1b0      	cbz	r0, 800386e <_vfiprintf_r+0x156>
 8003840:	9207      	str	r2, [sp, #28]
 8003842:	e014      	b.n	800386e <_vfiprintf_r+0x156>
 8003844:	eba0 0308 	sub.w	r3, r0, r8
 8003848:	fa09 f303 	lsl.w	r3, r9, r3
 800384c:	4313      	orrs	r3, r2
 800384e:	46a2      	mov	sl, r4
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	e7d2      	b.n	80037fa <_vfiprintf_r+0xe2>
 8003854:	9b03      	ldr	r3, [sp, #12]
 8003856:	1d19      	adds	r1, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	9103      	str	r1, [sp, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	bfbb      	ittet	lt
 8003860:	425b      	neglt	r3, r3
 8003862:	f042 0202 	orrlt.w	r2, r2, #2
 8003866:	9307      	strge	r3, [sp, #28]
 8003868:	9307      	strlt	r3, [sp, #28]
 800386a:	bfb8      	it	lt
 800386c:	9204      	strlt	r2, [sp, #16]
 800386e:	7823      	ldrb	r3, [r4, #0]
 8003870:	2b2e      	cmp	r3, #46	; 0x2e
 8003872:	d10c      	bne.n	800388e <_vfiprintf_r+0x176>
 8003874:	7863      	ldrb	r3, [r4, #1]
 8003876:	2b2a      	cmp	r3, #42	; 0x2a
 8003878:	d135      	bne.n	80038e6 <_vfiprintf_r+0x1ce>
 800387a:	9b03      	ldr	r3, [sp, #12]
 800387c:	3402      	adds	r4, #2
 800387e:	1d1a      	adds	r2, r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	9203      	str	r2, [sp, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	bfb8      	it	lt
 8003888:	f04f 33ff 	movlt.w	r3, #4294967295
 800388c:	9305      	str	r3, [sp, #20]
 800388e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003968 <_vfiprintf_r+0x250>
 8003892:	2203      	movs	r2, #3
 8003894:	4650      	mov	r0, sl
 8003896:	7821      	ldrb	r1, [r4, #0]
 8003898:	f000 fc70 	bl	800417c <memchr>
 800389c:	b140      	cbz	r0, 80038b0 <_vfiprintf_r+0x198>
 800389e:	2340      	movs	r3, #64	; 0x40
 80038a0:	eba0 000a 	sub.w	r0, r0, sl
 80038a4:	fa03 f000 	lsl.w	r0, r3, r0
 80038a8:	9b04      	ldr	r3, [sp, #16]
 80038aa:	3401      	adds	r4, #1
 80038ac:	4303      	orrs	r3, r0
 80038ae:	9304      	str	r3, [sp, #16]
 80038b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b4:	2206      	movs	r2, #6
 80038b6:	482d      	ldr	r0, [pc, #180]	; (800396c <_vfiprintf_r+0x254>)
 80038b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038bc:	f000 fc5e 	bl	800417c <memchr>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d03f      	beq.n	8003944 <_vfiprintf_r+0x22c>
 80038c4:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <_vfiprintf_r+0x258>)
 80038c6:	bb1b      	cbnz	r3, 8003910 <_vfiprintf_r+0x1f8>
 80038c8:	9b03      	ldr	r3, [sp, #12]
 80038ca:	3307      	adds	r3, #7
 80038cc:	f023 0307 	bic.w	r3, r3, #7
 80038d0:	3308      	adds	r3, #8
 80038d2:	9303      	str	r3, [sp, #12]
 80038d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d6:	443b      	add	r3, r7
 80038d8:	9309      	str	r3, [sp, #36]	; 0x24
 80038da:	e767      	b.n	80037ac <_vfiprintf_r+0x94>
 80038dc:	460c      	mov	r4, r1
 80038de:	2001      	movs	r0, #1
 80038e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038e4:	e7a5      	b.n	8003832 <_vfiprintf_r+0x11a>
 80038e6:	2300      	movs	r3, #0
 80038e8:	f04f 0c0a 	mov.w	ip, #10
 80038ec:	4619      	mov	r1, r3
 80038ee:	3401      	adds	r4, #1
 80038f0:	9305      	str	r3, [sp, #20]
 80038f2:	4620      	mov	r0, r4
 80038f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038f8:	3a30      	subs	r2, #48	; 0x30
 80038fa:	2a09      	cmp	r2, #9
 80038fc:	d903      	bls.n	8003906 <_vfiprintf_r+0x1ee>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0c5      	beq.n	800388e <_vfiprintf_r+0x176>
 8003902:	9105      	str	r1, [sp, #20]
 8003904:	e7c3      	b.n	800388e <_vfiprintf_r+0x176>
 8003906:	4604      	mov	r4, r0
 8003908:	2301      	movs	r3, #1
 800390a:	fb0c 2101 	mla	r1, ip, r1, r2
 800390e:	e7f0      	b.n	80038f2 <_vfiprintf_r+0x1da>
 8003910:	ab03      	add	r3, sp, #12
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	462a      	mov	r2, r5
 8003916:	4630      	mov	r0, r6
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <_vfiprintf_r+0x25c>)
 800391a:	a904      	add	r1, sp, #16
 800391c:	f3af 8000 	nop.w
 8003920:	4607      	mov	r7, r0
 8003922:	1c78      	adds	r0, r7, #1
 8003924:	d1d6      	bne.n	80038d4 <_vfiprintf_r+0x1bc>
 8003926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003928:	07d9      	lsls	r1, r3, #31
 800392a:	d405      	bmi.n	8003938 <_vfiprintf_r+0x220>
 800392c:	89ab      	ldrh	r3, [r5, #12]
 800392e:	059a      	lsls	r2, r3, #22
 8003930:	d402      	bmi.n	8003938 <_vfiprintf_r+0x220>
 8003932:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003934:	f7ff fe33 	bl	800359e <__retarget_lock_release_recursive>
 8003938:	89ab      	ldrh	r3, [r5, #12]
 800393a:	065b      	lsls	r3, r3, #25
 800393c:	f53f af12 	bmi.w	8003764 <_vfiprintf_r+0x4c>
 8003940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003942:	e711      	b.n	8003768 <_vfiprintf_r+0x50>
 8003944:	ab03      	add	r3, sp, #12
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	462a      	mov	r2, r5
 800394a:	4630      	mov	r0, r6
 800394c:	4b09      	ldr	r3, [pc, #36]	; (8003974 <_vfiprintf_r+0x25c>)
 800394e:	a904      	add	r1, sp, #16
 8003950:	f000 f882 	bl	8003a58 <_printf_i>
 8003954:	e7e4      	b.n	8003920 <_vfiprintf_r+0x208>
 8003956:	bf00      	nop
 8003958:	08004344 	.word	0x08004344
 800395c:	08004364 	.word	0x08004364
 8003960:	08004324 	.word	0x08004324
 8003964:	08004384 	.word	0x08004384
 8003968:	0800438a 	.word	0x0800438a
 800396c:	0800438e 	.word	0x0800438e
 8003970:	00000000 	.word	0x00000000
 8003974:	080036f3 	.word	0x080036f3

08003978 <_printf_common>:
 8003978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	4616      	mov	r6, r2
 800397e:	4699      	mov	r9, r3
 8003980:	688a      	ldr	r2, [r1, #8]
 8003982:	690b      	ldr	r3, [r1, #16]
 8003984:	4607      	mov	r7, r0
 8003986:	4293      	cmp	r3, r2
 8003988:	bfb8      	it	lt
 800398a:	4613      	movlt	r3, r2
 800398c:	6033      	str	r3, [r6, #0]
 800398e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003992:	460c      	mov	r4, r1
 8003994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003998:	b10a      	cbz	r2, 800399e <_printf_common+0x26>
 800399a:	3301      	adds	r3, #1
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	0699      	lsls	r1, r3, #26
 80039a2:	bf42      	ittt	mi
 80039a4:	6833      	ldrmi	r3, [r6, #0]
 80039a6:	3302      	addmi	r3, #2
 80039a8:	6033      	strmi	r3, [r6, #0]
 80039aa:	6825      	ldr	r5, [r4, #0]
 80039ac:	f015 0506 	ands.w	r5, r5, #6
 80039b0:	d106      	bne.n	80039c0 <_printf_common+0x48>
 80039b2:	f104 0a19 	add.w	sl, r4, #25
 80039b6:	68e3      	ldr	r3, [r4, #12]
 80039b8:	6832      	ldr	r2, [r6, #0]
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	42ab      	cmp	r3, r5
 80039be:	dc28      	bgt.n	8003a12 <_printf_common+0x9a>
 80039c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039c4:	1e13      	subs	r3, r2, #0
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	bf18      	it	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	0692      	lsls	r2, r2, #26
 80039ce:	d42d      	bmi.n	8003a2c <_printf_common+0xb4>
 80039d0:	4649      	mov	r1, r9
 80039d2:	4638      	mov	r0, r7
 80039d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d020      	beq.n	8003a20 <_printf_common+0xa8>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	68e5      	ldr	r5, [r4, #12]
 80039e2:	f003 0306 	and.w	r3, r3, #6
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	bf18      	it	ne
 80039ea:	2500      	movne	r5, #0
 80039ec:	6832      	ldr	r2, [r6, #0]
 80039ee:	f04f 0600 	mov.w	r6, #0
 80039f2:	68a3      	ldr	r3, [r4, #8]
 80039f4:	bf08      	it	eq
 80039f6:	1aad      	subeq	r5, r5, r2
 80039f8:	6922      	ldr	r2, [r4, #16]
 80039fa:	bf08      	it	eq
 80039fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a00:	4293      	cmp	r3, r2
 8003a02:	bfc4      	itt	gt
 8003a04:	1a9b      	subgt	r3, r3, r2
 8003a06:	18ed      	addgt	r5, r5, r3
 8003a08:	341a      	adds	r4, #26
 8003a0a:	42b5      	cmp	r5, r6
 8003a0c:	d11a      	bne.n	8003a44 <_printf_common+0xcc>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e008      	b.n	8003a24 <_printf_common+0xac>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4652      	mov	r2, sl
 8003a16:	4649      	mov	r1, r9
 8003a18:	4638      	mov	r0, r7
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d103      	bne.n	8003a28 <_printf_common+0xb0>
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7c4      	b.n	80039b6 <_printf_common+0x3e>
 8003a2c:	2030      	movs	r0, #48	; 0x30
 8003a2e:	18e1      	adds	r1, r4, r3
 8003a30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a3a:	4422      	add	r2, r4
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a42:	e7c5      	b.n	80039d0 <_printf_common+0x58>
 8003a44:	2301      	movs	r3, #1
 8003a46:	4622      	mov	r2, r4
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	47c0      	blx	r8
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d0e6      	beq.n	8003a20 <_printf_common+0xa8>
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7d9      	b.n	8003a0a <_printf_common+0x92>
	...

08003a58 <_printf_i>:
 8003a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	7e0f      	ldrb	r7, [r1, #24]
 8003a5e:	4691      	mov	r9, r2
 8003a60:	2f78      	cmp	r7, #120	; 0x78
 8003a62:	4680      	mov	r8, r0
 8003a64:	460c      	mov	r4, r1
 8003a66:	469a      	mov	sl, r3
 8003a68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a6e:	d807      	bhi.n	8003a80 <_printf_i+0x28>
 8003a70:	2f62      	cmp	r7, #98	; 0x62
 8003a72:	d80a      	bhi.n	8003a8a <_printf_i+0x32>
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	f000 80d9 	beq.w	8003c2c <_printf_i+0x1d4>
 8003a7a:	2f58      	cmp	r7, #88	; 0x58
 8003a7c:	f000 80a4 	beq.w	8003bc8 <_printf_i+0x170>
 8003a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a88:	e03a      	b.n	8003b00 <_printf_i+0xa8>
 8003a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a8e:	2b15      	cmp	r3, #21
 8003a90:	d8f6      	bhi.n	8003a80 <_printf_i+0x28>
 8003a92:	a101      	add	r1, pc, #4	; (adr r1, 8003a98 <_printf_i+0x40>)
 8003a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003b05 	.word	0x08003b05
 8003aa0:	08003a81 	.word	0x08003a81
 8003aa4:	08003a81 	.word	0x08003a81
 8003aa8:	08003a81 	.word	0x08003a81
 8003aac:	08003a81 	.word	0x08003a81
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003a81 	.word	0x08003a81
 8003ab8:	08003a81 	.word	0x08003a81
 8003abc:	08003a81 	.word	0x08003a81
 8003ac0:	08003a81 	.word	0x08003a81
 8003ac4:	08003c13 	.word	0x08003c13
 8003ac8:	08003b35 	.word	0x08003b35
 8003acc:	08003bf5 	.word	0x08003bf5
 8003ad0:	08003a81 	.word	0x08003a81
 8003ad4:	08003a81 	.word	0x08003a81
 8003ad8:	08003c35 	.word	0x08003c35
 8003adc:	08003a81 	.word	0x08003a81
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003a81 	.word	0x08003a81
 8003ae8:	08003a81 	.word	0x08003a81
 8003aec:	08003bfd 	.word	0x08003bfd
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0a4      	b.n	8003c4e <_printf_i+0x1f6>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	6829      	ldr	r1, [r5, #0]
 8003b08:	0606      	lsls	r6, r0, #24
 8003b0a:	f101 0304 	add.w	r3, r1, #4
 8003b0e:	d50a      	bpl.n	8003b26 <_printf_i+0xce>
 8003b10:	680e      	ldr	r6, [r1, #0]
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	2e00      	cmp	r6, #0
 8003b16:	da03      	bge.n	8003b20 <_printf_i+0xc8>
 8003b18:	232d      	movs	r3, #45	; 0x2d
 8003b1a:	4276      	negs	r6, r6
 8003b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b20:	230a      	movs	r3, #10
 8003b22:	485e      	ldr	r0, [pc, #376]	; (8003c9c <_printf_i+0x244>)
 8003b24:	e019      	b.n	8003b5a <_printf_i+0x102>
 8003b26:	680e      	ldr	r6, [r1, #0]
 8003b28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b2c:	602b      	str	r3, [r5, #0]
 8003b2e:	bf18      	it	ne
 8003b30:	b236      	sxthne	r6, r6
 8003b32:	e7ef      	b.n	8003b14 <_printf_i+0xbc>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	1d19      	adds	r1, r3, #4
 8003b3a:	6029      	str	r1, [r5, #0]
 8003b3c:	0601      	lsls	r1, r0, #24
 8003b3e:	d501      	bpl.n	8003b44 <_printf_i+0xec>
 8003b40:	681e      	ldr	r6, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <_printf_i+0xf2>
 8003b44:	0646      	lsls	r6, r0, #25
 8003b46:	d5fb      	bpl.n	8003b40 <_printf_i+0xe8>
 8003b48:	881e      	ldrh	r6, [r3, #0]
 8003b4a:	2f6f      	cmp	r7, #111	; 0x6f
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2308      	moveq	r3, #8
 8003b50:	230a      	movne	r3, #10
 8003b52:	4852      	ldr	r0, [pc, #328]	; (8003c9c <_printf_i+0x244>)
 8003b54:	2100      	movs	r1, #0
 8003b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b5a:	6865      	ldr	r5, [r4, #4]
 8003b5c:	2d00      	cmp	r5, #0
 8003b5e:	bfa8      	it	ge
 8003b60:	6821      	ldrge	r1, [r4, #0]
 8003b62:	60a5      	str	r5, [r4, #8]
 8003b64:	bfa4      	itt	ge
 8003b66:	f021 0104 	bicge.w	r1, r1, #4
 8003b6a:	6021      	strge	r1, [r4, #0]
 8003b6c:	b90e      	cbnz	r6, 8003b72 <_printf_i+0x11a>
 8003b6e:	2d00      	cmp	r5, #0
 8003b70:	d04d      	beq.n	8003c0e <_printf_i+0x1b6>
 8003b72:	4615      	mov	r5, r2
 8003b74:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b78:	fb03 6711 	mls	r7, r3, r1, r6
 8003b7c:	5dc7      	ldrb	r7, [r0, r7]
 8003b7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b82:	4637      	mov	r7, r6
 8003b84:	42bb      	cmp	r3, r7
 8003b86:	460e      	mov	r6, r1
 8003b88:	d9f4      	bls.n	8003b74 <_printf_i+0x11c>
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d10b      	bne.n	8003ba6 <_printf_i+0x14e>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	07de      	lsls	r6, r3, #31
 8003b92:	d508      	bpl.n	8003ba6 <_printf_i+0x14e>
 8003b94:	6923      	ldr	r3, [r4, #16]
 8003b96:	6861      	ldr	r1, [r4, #4]
 8003b98:	4299      	cmp	r1, r3
 8003b9a:	bfde      	ittt	le
 8003b9c:	2330      	movle	r3, #48	; 0x30
 8003b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ba2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ba6:	1b52      	subs	r2, r2, r5
 8003ba8:	6122      	str	r2, [r4, #16]
 8003baa:	464b      	mov	r3, r9
 8003bac:	4621      	mov	r1, r4
 8003bae:	4640      	mov	r0, r8
 8003bb0:	f8cd a000 	str.w	sl, [sp]
 8003bb4:	aa03      	add	r2, sp, #12
 8003bb6:	f7ff fedf 	bl	8003978 <_printf_common>
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d14c      	bne.n	8003c58 <_printf_i+0x200>
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc2:	b004      	add	sp, #16
 8003bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc8:	4834      	ldr	r0, [pc, #208]	; (8003c9c <_printf_i+0x244>)
 8003bca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bce:	6829      	ldr	r1, [r5, #0]
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bd6:	6029      	str	r1, [r5, #0]
 8003bd8:	061d      	lsls	r5, r3, #24
 8003bda:	d514      	bpl.n	8003c06 <_printf_i+0x1ae>
 8003bdc:	07df      	lsls	r7, r3, #31
 8003bde:	bf44      	itt	mi
 8003be0:	f043 0320 	orrmi.w	r3, r3, #32
 8003be4:	6023      	strmi	r3, [r4, #0]
 8003be6:	b91e      	cbnz	r6, 8003bf0 <_printf_i+0x198>
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	f023 0320 	bic.w	r3, r3, #32
 8003bee:	6023      	str	r3, [r4, #0]
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	e7af      	b.n	8003b54 <_printf_i+0xfc>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	f043 0320 	orr.w	r3, r3, #32
 8003bfa:	6023      	str	r3, [r4, #0]
 8003bfc:	2378      	movs	r3, #120	; 0x78
 8003bfe:	4828      	ldr	r0, [pc, #160]	; (8003ca0 <_printf_i+0x248>)
 8003c00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c04:	e7e3      	b.n	8003bce <_printf_i+0x176>
 8003c06:	0659      	lsls	r1, r3, #25
 8003c08:	bf48      	it	mi
 8003c0a:	b2b6      	uxthmi	r6, r6
 8003c0c:	e7e6      	b.n	8003bdc <_printf_i+0x184>
 8003c0e:	4615      	mov	r5, r2
 8003c10:	e7bb      	b.n	8003b8a <_printf_i+0x132>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	6826      	ldr	r6, [r4, #0]
 8003c16:	1d18      	adds	r0, r3, #4
 8003c18:	6961      	ldr	r1, [r4, #20]
 8003c1a:	6028      	str	r0, [r5, #0]
 8003c1c:	0635      	lsls	r5, r6, #24
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	d501      	bpl.n	8003c26 <_printf_i+0x1ce>
 8003c22:	6019      	str	r1, [r3, #0]
 8003c24:	e002      	b.n	8003c2c <_printf_i+0x1d4>
 8003c26:	0670      	lsls	r0, r6, #25
 8003c28:	d5fb      	bpl.n	8003c22 <_printf_i+0x1ca>
 8003c2a:	8019      	strh	r1, [r3, #0]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4615      	mov	r5, r2
 8003c30:	6123      	str	r3, [r4, #16]
 8003c32:	e7ba      	b.n	8003baa <_printf_i+0x152>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	2100      	movs	r1, #0
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	602a      	str	r2, [r5, #0]
 8003c3c:	681d      	ldr	r5, [r3, #0]
 8003c3e:	6862      	ldr	r2, [r4, #4]
 8003c40:	4628      	mov	r0, r5
 8003c42:	f000 fa9b 	bl	800417c <memchr>
 8003c46:	b108      	cbz	r0, 8003c4c <_printf_i+0x1f4>
 8003c48:	1b40      	subs	r0, r0, r5
 8003c4a:	6060      	str	r0, [r4, #4]
 8003c4c:	6863      	ldr	r3, [r4, #4]
 8003c4e:	6123      	str	r3, [r4, #16]
 8003c50:	2300      	movs	r3, #0
 8003c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c56:	e7a8      	b.n	8003baa <_printf_i+0x152>
 8003c58:	462a      	mov	r2, r5
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	6923      	ldr	r3, [r4, #16]
 8003c60:	47d0      	blx	sl
 8003c62:	3001      	adds	r0, #1
 8003c64:	d0ab      	beq.n	8003bbe <_printf_i+0x166>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	079b      	lsls	r3, r3, #30
 8003c6a:	d413      	bmi.n	8003c94 <_printf_i+0x23c>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	9b03      	ldr	r3, [sp, #12]
 8003c70:	4298      	cmp	r0, r3
 8003c72:	bfb8      	it	lt
 8003c74:	4618      	movlt	r0, r3
 8003c76:	e7a4      	b.n	8003bc2 <_printf_i+0x16a>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	4632      	mov	r2, r6
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	4640      	mov	r0, r8
 8003c80:	47d0      	blx	sl
 8003c82:	3001      	adds	r0, #1
 8003c84:	d09b      	beq.n	8003bbe <_printf_i+0x166>
 8003c86:	3501      	adds	r5, #1
 8003c88:	68e3      	ldr	r3, [r4, #12]
 8003c8a:	9903      	ldr	r1, [sp, #12]
 8003c8c:	1a5b      	subs	r3, r3, r1
 8003c8e:	42ab      	cmp	r3, r5
 8003c90:	dcf2      	bgt.n	8003c78 <_printf_i+0x220>
 8003c92:	e7eb      	b.n	8003c6c <_printf_i+0x214>
 8003c94:	2500      	movs	r5, #0
 8003c96:	f104 0619 	add.w	r6, r4, #25
 8003c9a:	e7f5      	b.n	8003c88 <_printf_i+0x230>
 8003c9c:	08004395 	.word	0x08004395
 8003ca0:	080043a6 	.word	0x080043a6

08003ca4 <_sbrk_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4d05      	ldr	r5, [pc, #20]	; (8003cc0 <_sbrk_r+0x1c>)
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	f7fc fde8 	bl	8000884 <_sbrk>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_sbrk_r+0x1a>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_sbrk_r+0x1a>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	20000164 	.word	0x20000164

08003cc4 <__sread>:
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ccc:	f000 fab8 	bl	8004240 <_read_r>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bfab      	itete	ge
 8003cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cd8:	181b      	addge	r3, r3, r0
 8003cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cde:	bfac      	ite	ge
 8003ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ce2:	81a3      	strhlt	r3, [r4, #12]
 8003ce4:	bd10      	pop	{r4, pc}

08003ce6 <__swrite>:
 8003ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cea:	461f      	mov	r7, r3
 8003cec:	898b      	ldrh	r3, [r1, #12]
 8003cee:	4605      	mov	r5, r0
 8003cf0:	05db      	lsls	r3, r3, #23
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	4616      	mov	r6, r2
 8003cf6:	d505      	bpl.n	8003d04 <__swrite+0x1e>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d00:	f000 f9c4 	bl	800408c <_lseek_r>
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	4632      	mov	r2, r6
 8003d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d0c:	81a3      	strh	r3, [r4, #12]
 8003d0e:	4628      	mov	r0, r5
 8003d10:	463b      	mov	r3, r7
 8003d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1a:	f000 b869 	b.w	8003df0 <_write_r>

08003d1e <__sseek>:
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	460c      	mov	r4, r1
 8003d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d26:	f000 f9b1 	bl	800408c <_lseek_r>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	bf15      	itete	ne
 8003d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d3a:	81a3      	strheq	r3, [r4, #12]
 8003d3c:	bf18      	it	ne
 8003d3e:	81a3      	strhne	r3, [r4, #12]
 8003d40:	bd10      	pop	{r4, pc}

08003d42 <__sclose>:
 8003d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d46:	f000 b8d3 	b.w	8003ef0 <_close_r>
	...

08003d4c <__swbuf_r>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	460e      	mov	r6, r1
 8003d50:	4614      	mov	r4, r2
 8003d52:	4605      	mov	r5, r0
 8003d54:	b118      	cbz	r0, 8003d5e <__swbuf_r+0x12>
 8003d56:	6983      	ldr	r3, [r0, #24]
 8003d58:	b90b      	cbnz	r3, 8003d5e <__swbuf_r+0x12>
 8003d5a:	f7ff fb81 	bl	8003460 <__sinit>
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <__swbuf_r+0x98>)
 8003d60:	429c      	cmp	r4, r3
 8003d62:	d12b      	bne.n	8003dbc <__swbuf_r+0x70>
 8003d64:	686c      	ldr	r4, [r5, #4]
 8003d66:	69a3      	ldr	r3, [r4, #24]
 8003d68:	60a3      	str	r3, [r4, #8]
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	071a      	lsls	r2, r3, #28
 8003d6e:	d52f      	bpl.n	8003dd0 <__swbuf_r+0x84>
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	b36b      	cbz	r3, 8003dd0 <__swbuf_r+0x84>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	6820      	ldr	r0, [r4, #0]
 8003d78:	b2f6      	uxtb	r6, r6
 8003d7a:	1ac0      	subs	r0, r0, r3
 8003d7c:	6963      	ldr	r3, [r4, #20]
 8003d7e:	4637      	mov	r7, r6
 8003d80:	4283      	cmp	r3, r0
 8003d82:	dc04      	bgt.n	8003d8e <__swbuf_r+0x42>
 8003d84:	4621      	mov	r1, r4
 8003d86:	4628      	mov	r0, r5
 8003d88:	f000 f944 	bl	8004014 <_fflush_r>
 8003d8c:	bb30      	cbnz	r0, 8003ddc <__swbuf_r+0x90>
 8003d8e:	68a3      	ldr	r3, [r4, #8]
 8003d90:	3001      	adds	r0, #1
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60a3      	str	r3, [r4, #8]
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	6022      	str	r2, [r4, #0]
 8003d9c:	701e      	strb	r6, [r3, #0]
 8003d9e:	6963      	ldr	r3, [r4, #20]
 8003da0:	4283      	cmp	r3, r0
 8003da2:	d004      	beq.n	8003dae <__swbuf_r+0x62>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	07db      	lsls	r3, r3, #31
 8003da8:	d506      	bpl.n	8003db8 <__swbuf_r+0x6c>
 8003daa:	2e0a      	cmp	r6, #10
 8003dac:	d104      	bne.n	8003db8 <__swbuf_r+0x6c>
 8003dae:	4621      	mov	r1, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 f92f 	bl	8004014 <_fflush_r>
 8003db6:	b988      	cbnz	r0, 8003ddc <__swbuf_r+0x90>
 8003db8:	4638      	mov	r0, r7
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <__swbuf_r+0x9c>)
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	d101      	bne.n	8003dc6 <__swbuf_r+0x7a>
 8003dc2:	68ac      	ldr	r4, [r5, #8]
 8003dc4:	e7cf      	b.n	8003d66 <__swbuf_r+0x1a>
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <__swbuf_r+0xa0>)
 8003dc8:	429c      	cmp	r4, r3
 8003dca:	bf08      	it	eq
 8003dcc:	68ec      	ldreq	r4, [r5, #12]
 8003dce:	e7ca      	b.n	8003d66 <__swbuf_r+0x1a>
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 f81e 	bl	8003e14 <__swsetup_r>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d0cb      	beq.n	8003d74 <__swbuf_r+0x28>
 8003ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8003de0:	e7ea      	b.n	8003db8 <__swbuf_r+0x6c>
 8003de2:	bf00      	nop
 8003de4:	08004344 	.word	0x08004344
 8003de8:	08004364 	.word	0x08004364
 8003dec:	08004324 	.word	0x08004324

08003df0 <_write_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4604      	mov	r4, r0
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4d05      	ldr	r5, [pc, #20]	; (8003e10 <_write_r+0x20>)
 8003dfc:	602a      	str	r2, [r5, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f7fc fcf4 	bl	80007ec <_write>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_write_r+0x1e>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_write_r+0x1e>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20000164 	.word	0x20000164

08003e14 <__swsetup_r>:
 8003e14:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <__swsetup_r+0xcc>)
 8003e16:	b570      	push	{r4, r5, r6, lr}
 8003e18:	681d      	ldr	r5, [r3, #0]
 8003e1a:	4606      	mov	r6, r0
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	b125      	cbz	r5, 8003e2a <__swsetup_r+0x16>
 8003e20:	69ab      	ldr	r3, [r5, #24]
 8003e22:	b913      	cbnz	r3, 8003e2a <__swsetup_r+0x16>
 8003e24:	4628      	mov	r0, r5
 8003e26:	f7ff fb1b 	bl	8003460 <__sinit>
 8003e2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <__swsetup_r+0xd0>)
 8003e2c:	429c      	cmp	r4, r3
 8003e2e:	d10f      	bne.n	8003e50 <__swsetup_r+0x3c>
 8003e30:	686c      	ldr	r4, [r5, #4]
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e38:	0719      	lsls	r1, r3, #28
 8003e3a:	d42c      	bmi.n	8003e96 <__swsetup_r+0x82>
 8003e3c:	06dd      	lsls	r5, r3, #27
 8003e3e:	d411      	bmi.n	8003e64 <__swsetup_r+0x50>
 8003e40:	2309      	movs	r3, #9
 8003e42:	6033      	str	r3, [r6, #0]
 8003e44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	81a3      	strh	r3, [r4, #12]
 8003e4e:	e03e      	b.n	8003ece <__swsetup_r+0xba>
 8003e50:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <__swsetup_r+0xd4>)
 8003e52:	429c      	cmp	r4, r3
 8003e54:	d101      	bne.n	8003e5a <__swsetup_r+0x46>
 8003e56:	68ac      	ldr	r4, [r5, #8]
 8003e58:	e7eb      	b.n	8003e32 <__swsetup_r+0x1e>
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <__swsetup_r+0xd8>)
 8003e5c:	429c      	cmp	r4, r3
 8003e5e:	bf08      	it	eq
 8003e60:	68ec      	ldreq	r4, [r5, #12]
 8003e62:	e7e6      	b.n	8003e32 <__swsetup_r+0x1e>
 8003e64:	0758      	lsls	r0, r3, #29
 8003e66:	d512      	bpl.n	8003e8e <__swsetup_r+0x7a>
 8003e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e6a:	b141      	cbz	r1, 8003e7e <__swsetup_r+0x6a>
 8003e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e70:	4299      	cmp	r1, r3
 8003e72:	d002      	beq.n	8003e7a <__swsetup_r+0x66>
 8003e74:	4630      	mov	r0, r6
 8003e76:	f000 f99b 	bl	80041b0 <_free_r>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8003e7e:	89a3      	ldrh	r3, [r4, #12]
 8003e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	2300      	movs	r3, #0
 8003e88:	6063      	str	r3, [r4, #4]
 8003e8a:	6923      	ldr	r3, [r4, #16]
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	f043 0308 	orr.w	r3, r3, #8
 8003e94:	81a3      	strh	r3, [r4, #12]
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	b94b      	cbnz	r3, 8003eae <__swsetup_r+0x9a>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea4:	d003      	beq.n	8003eae <__swsetup_r+0x9a>
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f000 f927 	bl	80040fc <__smakebuf_r>
 8003eae:	89a0      	ldrh	r0, [r4, #12]
 8003eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003eb4:	f010 0301 	ands.w	r3, r0, #1
 8003eb8:	d00a      	beq.n	8003ed0 <__swsetup_r+0xbc>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60a3      	str	r3, [r4, #8]
 8003ebe:	6963      	ldr	r3, [r4, #20]
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	61a3      	str	r3, [r4, #24]
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	b943      	cbnz	r3, 8003eda <__swsetup_r+0xc6>
 8003ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ecc:	d1ba      	bne.n	8003e44 <__swsetup_r+0x30>
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	0781      	lsls	r1, r0, #30
 8003ed2:	bf58      	it	pl
 8003ed4:	6963      	ldrpl	r3, [r4, #20]
 8003ed6:	60a3      	str	r3, [r4, #8]
 8003ed8:	e7f4      	b.n	8003ec4 <__swsetup_r+0xb0>
 8003eda:	2000      	movs	r0, #0
 8003edc:	e7f7      	b.n	8003ece <__swsetup_r+0xba>
 8003ede:	bf00      	nop
 8003ee0:	2000000c 	.word	0x2000000c
 8003ee4:	08004344 	.word	0x08004344
 8003ee8:	08004364 	.word	0x08004364
 8003eec:	08004324 	.word	0x08004324

08003ef0 <_close_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	4d05      	ldr	r5, [pc, #20]	; (8003f0c <_close_r+0x1c>)
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	f7fc fc92 	bl	8000824 <_close>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_close_r+0x1a>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_close_r+0x1a>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000164 	.word	0x20000164

08003f10 <__sflush_r>:
 8003f10:	898a      	ldrh	r2, [r1, #12]
 8003f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f14:	4605      	mov	r5, r0
 8003f16:	0710      	lsls	r0, r2, #28
 8003f18:	460c      	mov	r4, r1
 8003f1a:	d457      	bmi.n	8003fcc <__sflush_r+0xbc>
 8003f1c:	684b      	ldr	r3, [r1, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	dc04      	bgt.n	8003f2c <__sflush_r+0x1c>
 8003f22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	dc01      	bgt.n	8003f2c <__sflush_r+0x1c>
 8003f28:	2000      	movs	r0, #0
 8003f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f2e:	2e00      	cmp	r6, #0
 8003f30:	d0fa      	beq.n	8003f28 <__sflush_r+0x18>
 8003f32:	2300      	movs	r3, #0
 8003f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f38:	682f      	ldr	r7, [r5, #0]
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	d032      	beq.n	8003fa4 <__sflush_r+0x94>
 8003f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	075a      	lsls	r2, r3, #29
 8003f44:	d505      	bpl.n	8003f52 <__sflush_r+0x42>
 8003f46:	6863      	ldr	r3, [r4, #4]
 8003f48:	1ac0      	subs	r0, r0, r3
 8003f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f4c:	b10b      	cbz	r3, 8003f52 <__sflush_r+0x42>
 8003f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f50:	1ac0      	subs	r0, r0, r3
 8003f52:	2300      	movs	r3, #0
 8003f54:	4602      	mov	r2, r0
 8003f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f58:	4628      	mov	r0, r5
 8003f5a:	6a21      	ldr	r1, [r4, #32]
 8003f5c:	47b0      	blx	r6
 8003f5e:	1c43      	adds	r3, r0, #1
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	d106      	bne.n	8003f72 <__sflush_r+0x62>
 8003f64:	6829      	ldr	r1, [r5, #0]
 8003f66:	291d      	cmp	r1, #29
 8003f68:	d82c      	bhi.n	8003fc4 <__sflush_r+0xb4>
 8003f6a:	4a29      	ldr	r2, [pc, #164]	; (8004010 <__sflush_r+0x100>)
 8003f6c:	40ca      	lsrs	r2, r1
 8003f6e:	07d6      	lsls	r6, r2, #31
 8003f70:	d528      	bpl.n	8003fc4 <__sflush_r+0xb4>
 8003f72:	2200      	movs	r2, #0
 8003f74:	6062      	str	r2, [r4, #4]
 8003f76:	6922      	ldr	r2, [r4, #16]
 8003f78:	04d9      	lsls	r1, r3, #19
 8003f7a:	6022      	str	r2, [r4, #0]
 8003f7c:	d504      	bpl.n	8003f88 <__sflush_r+0x78>
 8003f7e:	1c42      	adds	r2, r0, #1
 8003f80:	d101      	bne.n	8003f86 <__sflush_r+0x76>
 8003f82:	682b      	ldr	r3, [r5, #0]
 8003f84:	b903      	cbnz	r3, 8003f88 <__sflush_r+0x78>
 8003f86:	6560      	str	r0, [r4, #84]	; 0x54
 8003f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f8a:	602f      	str	r7, [r5, #0]
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	d0cb      	beq.n	8003f28 <__sflush_r+0x18>
 8003f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f94:	4299      	cmp	r1, r3
 8003f96:	d002      	beq.n	8003f9e <__sflush_r+0x8e>
 8003f98:	4628      	mov	r0, r5
 8003f9a:	f000 f909 	bl	80041b0 <_free_r>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8003fa2:	e7c2      	b.n	8003f2a <__sflush_r+0x1a>
 8003fa4:	6a21      	ldr	r1, [r4, #32]
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4628      	mov	r0, r5
 8003faa:	47b0      	blx	r6
 8003fac:	1c41      	adds	r1, r0, #1
 8003fae:	d1c7      	bne.n	8003f40 <__sflush_r+0x30>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0c4      	beq.n	8003f40 <__sflush_r+0x30>
 8003fb6:	2b1d      	cmp	r3, #29
 8003fb8:	d001      	beq.n	8003fbe <__sflush_r+0xae>
 8003fba:	2b16      	cmp	r3, #22
 8003fbc:	d101      	bne.n	8003fc2 <__sflush_r+0xb2>
 8003fbe:	602f      	str	r7, [r5, #0]
 8003fc0:	e7b2      	b.n	8003f28 <__sflush_r+0x18>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc8:	81a3      	strh	r3, [r4, #12]
 8003fca:	e7ae      	b.n	8003f2a <__sflush_r+0x1a>
 8003fcc:	690f      	ldr	r7, [r1, #16]
 8003fce:	2f00      	cmp	r7, #0
 8003fd0:	d0aa      	beq.n	8003f28 <__sflush_r+0x18>
 8003fd2:	0793      	lsls	r3, r2, #30
 8003fd4:	bf18      	it	ne
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	680e      	ldr	r6, [r1, #0]
 8003fda:	bf08      	it	eq
 8003fdc:	694b      	ldreq	r3, [r1, #20]
 8003fde:	1bf6      	subs	r6, r6, r7
 8003fe0:	600f      	str	r7, [r1, #0]
 8003fe2:	608b      	str	r3, [r1, #8]
 8003fe4:	2e00      	cmp	r6, #0
 8003fe6:	dd9f      	ble.n	8003f28 <__sflush_r+0x18>
 8003fe8:	4633      	mov	r3, r6
 8003fea:	463a      	mov	r2, r7
 8003fec:	4628      	mov	r0, r5
 8003fee:	6a21      	ldr	r1, [r4, #32]
 8003ff0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003ff4:	47e0      	blx	ip
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	dc06      	bgt.n	8004008 <__sflush_r+0xf8>
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	e790      	b.n	8003f2a <__sflush_r+0x1a>
 8004008:	4407      	add	r7, r0
 800400a:	1a36      	subs	r6, r6, r0
 800400c:	e7ea      	b.n	8003fe4 <__sflush_r+0xd4>
 800400e:	bf00      	nop
 8004010:	20400001 	.word	0x20400001

08004014 <_fflush_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	690b      	ldr	r3, [r1, #16]
 8004018:	4605      	mov	r5, r0
 800401a:	460c      	mov	r4, r1
 800401c:	b913      	cbnz	r3, 8004024 <_fflush_r+0x10>
 800401e:	2500      	movs	r5, #0
 8004020:	4628      	mov	r0, r5
 8004022:	bd38      	pop	{r3, r4, r5, pc}
 8004024:	b118      	cbz	r0, 800402e <_fflush_r+0x1a>
 8004026:	6983      	ldr	r3, [r0, #24]
 8004028:	b90b      	cbnz	r3, 800402e <_fflush_r+0x1a>
 800402a:	f7ff fa19 	bl	8003460 <__sinit>
 800402e:	4b14      	ldr	r3, [pc, #80]	; (8004080 <_fflush_r+0x6c>)
 8004030:	429c      	cmp	r4, r3
 8004032:	d11b      	bne.n	800406c <_fflush_r+0x58>
 8004034:	686c      	ldr	r4, [r5, #4]
 8004036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ef      	beq.n	800401e <_fflush_r+0xa>
 800403e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004040:	07d0      	lsls	r0, r2, #31
 8004042:	d404      	bmi.n	800404e <_fflush_r+0x3a>
 8004044:	0599      	lsls	r1, r3, #22
 8004046:	d402      	bmi.n	800404e <_fflush_r+0x3a>
 8004048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800404a:	f7ff faa7 	bl	800359c <__retarget_lock_acquire_recursive>
 800404e:	4628      	mov	r0, r5
 8004050:	4621      	mov	r1, r4
 8004052:	f7ff ff5d 	bl	8003f10 <__sflush_r>
 8004056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004058:	4605      	mov	r5, r0
 800405a:	07da      	lsls	r2, r3, #31
 800405c:	d4e0      	bmi.n	8004020 <_fflush_r+0xc>
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	059b      	lsls	r3, r3, #22
 8004062:	d4dd      	bmi.n	8004020 <_fflush_r+0xc>
 8004064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004066:	f7ff fa9a 	bl	800359e <__retarget_lock_release_recursive>
 800406a:	e7d9      	b.n	8004020 <_fflush_r+0xc>
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <_fflush_r+0x70>)
 800406e:	429c      	cmp	r4, r3
 8004070:	d101      	bne.n	8004076 <_fflush_r+0x62>
 8004072:	68ac      	ldr	r4, [r5, #8]
 8004074:	e7df      	b.n	8004036 <_fflush_r+0x22>
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <_fflush_r+0x74>)
 8004078:	429c      	cmp	r4, r3
 800407a:	bf08      	it	eq
 800407c:	68ec      	ldreq	r4, [r5, #12]
 800407e:	e7da      	b.n	8004036 <_fflush_r+0x22>
 8004080:	08004344 	.word	0x08004344
 8004084:	08004364 	.word	0x08004364
 8004088:	08004324 	.word	0x08004324

0800408c <_lseek_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4604      	mov	r4, r0
 8004090:	4608      	mov	r0, r1
 8004092:	4611      	mov	r1, r2
 8004094:	2200      	movs	r2, #0
 8004096:	4d05      	ldr	r5, [pc, #20]	; (80040ac <_lseek_r+0x20>)
 8004098:	602a      	str	r2, [r5, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f7fc fbe6 	bl	800086c <_lseek>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_lseek_r+0x1e>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_lseek_r+0x1e>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	20000164 	.word	0x20000164

080040b0 <__swhatbuf_r>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	460e      	mov	r6, r1
 80040b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b8:	4614      	mov	r4, r2
 80040ba:	2900      	cmp	r1, #0
 80040bc:	461d      	mov	r5, r3
 80040be:	b096      	sub	sp, #88	; 0x58
 80040c0:	da08      	bge.n	80040d4 <__swhatbuf_r+0x24>
 80040c2:	2200      	movs	r2, #0
 80040c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	061a      	lsls	r2, r3, #24
 80040cc:	d410      	bmi.n	80040f0 <__swhatbuf_r+0x40>
 80040ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d2:	e00e      	b.n	80040f2 <__swhatbuf_r+0x42>
 80040d4:	466a      	mov	r2, sp
 80040d6:	f000 f8c5 	bl	8004264 <_fstat_r>
 80040da:	2800      	cmp	r0, #0
 80040dc:	dbf1      	blt.n	80040c2 <__swhatbuf_r+0x12>
 80040de:	9a01      	ldr	r2, [sp, #4]
 80040e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040e8:	425a      	negs	r2, r3
 80040ea:	415a      	adcs	r2, r3
 80040ec:	602a      	str	r2, [r5, #0]
 80040ee:	e7ee      	b.n	80040ce <__swhatbuf_r+0x1e>
 80040f0:	2340      	movs	r3, #64	; 0x40
 80040f2:	2000      	movs	r0, #0
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	b016      	add	sp, #88	; 0x58
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080040fc <__smakebuf_r>:
 80040fc:	898b      	ldrh	r3, [r1, #12]
 80040fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004100:	079d      	lsls	r5, r3, #30
 8004102:	4606      	mov	r6, r0
 8004104:	460c      	mov	r4, r1
 8004106:	d507      	bpl.n	8004118 <__smakebuf_r+0x1c>
 8004108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	6123      	str	r3, [r4, #16]
 8004110:	2301      	movs	r3, #1
 8004112:	6163      	str	r3, [r4, #20]
 8004114:	b002      	add	sp, #8
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	466a      	mov	r2, sp
 800411a:	ab01      	add	r3, sp, #4
 800411c:	f7ff ffc8 	bl	80040b0 <__swhatbuf_r>
 8004120:	9900      	ldr	r1, [sp, #0]
 8004122:	4605      	mov	r5, r0
 8004124:	4630      	mov	r0, r6
 8004126:	f7ff fa5b 	bl	80035e0 <_malloc_r>
 800412a:	b948      	cbnz	r0, 8004140 <__smakebuf_r+0x44>
 800412c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004130:	059a      	lsls	r2, r3, #22
 8004132:	d4ef      	bmi.n	8004114 <__smakebuf_r+0x18>
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	e7e3      	b.n	8004108 <__smakebuf_r+0xc>
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <__smakebuf_r+0x7c>)
 8004142:	62b3      	str	r3, [r6, #40]	; 0x28
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	6020      	str	r0, [r4, #0]
 8004148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414c:	81a3      	strh	r3, [r4, #12]
 800414e:	9b00      	ldr	r3, [sp, #0]
 8004150:	6120      	str	r0, [r4, #16]
 8004152:	6163      	str	r3, [r4, #20]
 8004154:	9b01      	ldr	r3, [sp, #4]
 8004156:	b15b      	cbz	r3, 8004170 <__smakebuf_r+0x74>
 8004158:	4630      	mov	r0, r6
 800415a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800415e:	f000 f893 	bl	8004288 <_isatty_r>
 8004162:	b128      	cbz	r0, 8004170 <__smakebuf_r+0x74>
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	81a3      	strh	r3, [r4, #12]
 8004170:	89a0      	ldrh	r0, [r4, #12]
 8004172:	4305      	orrs	r5, r0
 8004174:	81a5      	strh	r5, [r4, #12]
 8004176:	e7cd      	b.n	8004114 <__smakebuf_r+0x18>
 8004178:	080033f9 	.word	0x080033f9

0800417c <memchr>:
 800417c:	4603      	mov	r3, r0
 800417e:	b510      	push	{r4, lr}
 8004180:	b2c9      	uxtb	r1, r1
 8004182:	4402      	add	r2, r0
 8004184:	4293      	cmp	r3, r2
 8004186:	4618      	mov	r0, r3
 8004188:	d101      	bne.n	800418e <memchr+0x12>
 800418a:	2000      	movs	r0, #0
 800418c:	e003      	b.n	8004196 <memchr+0x1a>
 800418e:	7804      	ldrb	r4, [r0, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	428c      	cmp	r4, r1
 8004194:	d1f6      	bne.n	8004184 <memchr+0x8>
 8004196:	bd10      	pop	{r4, pc}

08004198 <__malloc_lock>:
 8004198:	4801      	ldr	r0, [pc, #4]	; (80041a0 <__malloc_lock+0x8>)
 800419a:	f7ff b9ff 	b.w	800359c <__retarget_lock_acquire_recursive>
 800419e:	bf00      	nop
 80041a0:	20000158 	.word	0x20000158

080041a4 <__malloc_unlock>:
 80041a4:	4801      	ldr	r0, [pc, #4]	; (80041ac <__malloc_unlock+0x8>)
 80041a6:	f7ff b9fa 	b.w	800359e <__retarget_lock_release_recursive>
 80041aa:	bf00      	nop
 80041ac:	20000158 	.word	0x20000158

080041b0 <_free_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4605      	mov	r5, r0
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d040      	beq.n	800423a <_free_r+0x8a>
 80041b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041bc:	1f0c      	subs	r4, r1, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bfb8      	it	lt
 80041c2:	18e4      	addlt	r4, r4, r3
 80041c4:	f7ff ffe8 	bl	8004198 <__malloc_lock>
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <_free_r+0x8c>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	b933      	cbnz	r3, 80041dc <_free_r+0x2c>
 80041ce:	6063      	str	r3, [r4, #4]
 80041d0:	6014      	str	r4, [r2, #0]
 80041d2:	4628      	mov	r0, r5
 80041d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d8:	f7ff bfe4 	b.w	80041a4 <__malloc_unlock>
 80041dc:	42a3      	cmp	r3, r4
 80041de:	d908      	bls.n	80041f2 <_free_r+0x42>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	1821      	adds	r1, r4, r0
 80041e4:	428b      	cmp	r3, r1
 80041e6:	bf01      	itttt	eq
 80041e8:	6819      	ldreq	r1, [r3, #0]
 80041ea:	685b      	ldreq	r3, [r3, #4]
 80041ec:	1809      	addeq	r1, r1, r0
 80041ee:	6021      	streq	r1, [r4, #0]
 80041f0:	e7ed      	b.n	80041ce <_free_r+0x1e>
 80041f2:	461a      	mov	r2, r3
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b10b      	cbz	r3, 80041fc <_free_r+0x4c>
 80041f8:	42a3      	cmp	r3, r4
 80041fa:	d9fa      	bls.n	80041f2 <_free_r+0x42>
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	1850      	adds	r0, r2, r1
 8004200:	42a0      	cmp	r0, r4
 8004202:	d10b      	bne.n	800421c <_free_r+0x6c>
 8004204:	6820      	ldr	r0, [r4, #0]
 8004206:	4401      	add	r1, r0
 8004208:	1850      	adds	r0, r2, r1
 800420a:	4283      	cmp	r3, r0
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	d1e0      	bne.n	80041d2 <_free_r+0x22>
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4401      	add	r1, r0
 8004216:	6011      	str	r1, [r2, #0]
 8004218:	6053      	str	r3, [r2, #4]
 800421a:	e7da      	b.n	80041d2 <_free_r+0x22>
 800421c:	d902      	bls.n	8004224 <_free_r+0x74>
 800421e:	230c      	movs	r3, #12
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	e7d6      	b.n	80041d2 <_free_r+0x22>
 8004224:	6820      	ldr	r0, [r4, #0]
 8004226:	1821      	adds	r1, r4, r0
 8004228:	428b      	cmp	r3, r1
 800422a:	bf01      	itttt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	1809      	addeq	r1, r1, r0
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	6063      	str	r3, [r4, #4]
 8004236:	6054      	str	r4, [r2, #4]
 8004238:	e7cb      	b.n	80041d2 <_free_r+0x22>
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	2000015c 	.word	0x2000015c

08004240 <_read_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	2200      	movs	r2, #0
 800424a:	4d05      	ldr	r5, [pc, #20]	; (8004260 <_read_r+0x20>)
 800424c:	602a      	str	r2, [r5, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	f7fc faaf 	bl	80007b2 <_read>
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	d102      	bne.n	800425e <_read_r+0x1e>
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	b103      	cbz	r3, 800425e <_read_r+0x1e>
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	20000164 	.word	0x20000164

08004264 <_fstat_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	2300      	movs	r3, #0
 8004268:	4d06      	ldr	r5, [pc, #24]	; (8004284 <_fstat_r+0x20>)
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	602b      	str	r3, [r5, #0]
 8004272:	f7fc fae2 	bl	800083a <_fstat>
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d102      	bne.n	8004280 <_fstat_r+0x1c>
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	b103      	cbz	r3, 8004280 <_fstat_r+0x1c>
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	bd38      	pop	{r3, r4, r5, pc}
 8004282:	bf00      	nop
 8004284:	20000164 	.word	0x20000164

08004288 <_isatty_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	2300      	movs	r3, #0
 800428c:	4d05      	ldr	r5, [pc, #20]	; (80042a4 <_isatty_r+0x1c>)
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	f7fc fae0 	bl	8000858 <_isatty>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_isatty_r+0x1a>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_isatty_r+0x1a>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000164 	.word	0x20000164

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
