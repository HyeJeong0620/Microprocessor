
31_MOTOR_ALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003014  08003014  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003014  08003014  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003014  08003014  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800301c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000078  08003094  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003094  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a180  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa8  00000000  00000000  0002a221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171ca  00000000  00000000  0002d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcc3  00000000  00000000  000443c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892df  00000000  00000000  00050085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  000d93b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fbc 	.word	0x08002fbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002fbc 	.word	0x08002fbc

0800014c <display_fnd>:
};
FND sel[4] = {
  {GPIOA, GPIO_PIN_10}, {GPIOA, GPIO_PIN_11},
  {GPIOC, GPIO_PIN_4}, {GPIOC, GPIO_PIN_3}
};
void display_fnd(uint8_t data, uint8_t position, uint32_t time) {  // ?•¨?ˆ˜
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	603a      	str	r2, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	460b      	mov	r3, r1
 800015a:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 4; i++) {
 800015c:	2300      	movs	r3, #0
 800015e:	60fb      	str	r3, [r7, #12]
 8000160:	e021      	b.n	80001a6 <display_fnd+0x5a>
    if(i == position)
 8000162:	79bb      	ldrb	r3, [r7, #6]
 8000164:	68fa      	ldr	r2, [r7, #12]
 8000166:	429a      	cmp	r2, r3
 8000168:	d10d      	bne.n	8000186 <display_fnd+0x3a>
      HAL_GPIO_WritePin(sel[i].port, sel[i].pin, 1);
 800016a:	4a2a      	ldr	r2, [pc, #168]	; (8000214 <display_fnd+0xc8>)
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000172:	4a28      	ldr	r2, [pc, #160]	; (8000214 <display_fnd+0xc8>)
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	00db      	lsls	r3, r3, #3
 8000178:	4413      	add	r3, r2
 800017a:	889b      	ldrh	r3, [r3, #4]
 800017c:	2201      	movs	r2, #1
 800017e:	4619      	mov	r1, r3
 8000180:	f001 fc81 	bl	8001a86 <HAL_GPIO_WritePin>
 8000184:	e00c      	b.n	80001a0 <display_fnd+0x54>
    else
      HAL_GPIO_WritePin(sel[i].port, sel[i].pin, 0);
 8000186:	4a23      	ldr	r2, [pc, #140]	; (8000214 <display_fnd+0xc8>)
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800018e:	4a21      	ldr	r2, [pc, #132]	; (8000214 <display_fnd+0xc8>)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	00db      	lsls	r3, r3, #3
 8000194:	4413      	add	r3, r2
 8000196:	889b      	ldrh	r3, [r3, #4]
 8000198:	2200      	movs	r2, #0
 800019a:	4619      	mov	r1, r3
 800019c:	f001 fc73 	bl	8001a86 <HAL_GPIO_WritePin>
  for (i = 0; i < 4; i++) {
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	3301      	adds	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	2b03      	cmp	r3, #3
 80001aa:	ddda      	ble.n	8000162 <display_fnd+0x16>
  }
  for(i = 0; i < 8; i++) {
 80001ac:	2300      	movs	r3, #0
 80001ae:	60fb      	str	r3, [r7, #12]
 80001b0:	e025      	b.n	80001fe <display_fnd+0xb2>
    if((data & (1 << i)) != 0)
 80001b2:	79fa      	ldrb	r2, [r7, #7]
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	fa42 f303 	asr.w	r3, r2, r3
 80001ba:	f003 0301 	and.w	r3, r3, #1
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d00d      	beq.n	80001de <display_fnd+0x92>
      HAL_GPIO_WritePin(value[i].port, value[i].pin, 1);
 80001c2:	4a15      	ldr	r2, [pc, #84]	; (8000218 <display_fnd+0xcc>)
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001ca:	4a13      	ldr	r2, [pc, #76]	; (8000218 <display_fnd+0xcc>)
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	889b      	ldrh	r3, [r3, #4]
 80001d4:	2201      	movs	r2, #1
 80001d6:	4619      	mov	r1, r3
 80001d8:	f001 fc55 	bl	8001a86 <HAL_GPIO_WritePin>
 80001dc:	e00c      	b.n	80001f8 <display_fnd+0xac>
    else
      HAL_GPIO_WritePin(value[i].port, value[i].pin, 0);
 80001de:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <display_fnd+0xcc>)
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001e6:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <display_fnd+0xcc>)
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	00db      	lsls	r3, r3, #3
 80001ec:	4413      	add	r3, r2
 80001ee:	889b      	ldrh	r3, [r3, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	4619      	mov	r1, r3
 80001f4:	f001 fc47 	bl	8001a86 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++) {
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2b07      	cmp	r3, #7
 8000202:	ddd6      	ble.n	80001b2 <display_fnd+0x66>
  }
  HAL_Delay(time);
 8000204:	6838      	ldr	r0, [r7, #0]
 8000206:	f000 fc97 	bl	8000b38 <HAL_Delay>
}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000004c 	.word	0x2000004c
 8000218:	2000000c 	.word	0x2000000c

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fc28 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f8f8 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fa14 	bl	8000654 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022c:	f000 f950 	bl	80004d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000230:	f000 f98c 	bl	800054c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000234:	2104      	movs	r1, #4
 8000236:	486c      	ldr	r0, [pc, #432]	; (80003e8 <main+0x1cc>)
 8000238:	f002 fa0e 	bl	8002658 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800023c:	486b      	ldr	r0, [pc, #428]	; (80003ec <main+0x1d0>)
 800023e:	f001 f8cb 	bl	80013d8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000242:	486a      	ldr	r0, [pc, #424]	; (80003ec <main+0x1d0>)
 8000244:	f000 fd74 	bl	8000d30 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000248:	210a      	movs	r1, #10
 800024a:	4868      	ldr	r0, [pc, #416]	; (80003ec <main+0x1d0>)
 800024c:	f000 fe1e 	bl	8000e8c <HAL_ADC_PollForConversion>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d10e      	bne.n	8000274 <main+0x58>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8000256:	4865      	ldr	r0, [pc, #404]	; (80003ec <main+0x1d0>)
 8000258:	f000 ff1e 	bl	8001098 <HAL_ADC_GetValue>
 800025c:	4603      	mov	r3, r0
 800025e:	b29a      	uxth	r2, r3
 8000260:	4b63      	ldr	r3, [pc, #396]	; (80003f0 <main+0x1d4>)
 8000262:	801a      	strh	r2, [r3, #0]
	      if (adc_value < 1000) {
 8000264:	4b62      	ldr	r3, [pc, #392]	; (80003f0 <main+0x1d4>)
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800026c:	d202      	bcs.n	8000274 <main+0x58>
	    	  motor_state = MOTOR_STOP;
 800026e:	4b61      	ldr	r3, [pc, #388]	; (80003f4 <main+0x1d8>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
	      }
	  }
	  switch (motor_state) {
 8000274:	4b5f      	ldr	r3, [pc, #380]	; (80003f4 <main+0x1d8>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	2b02      	cmp	r3, #2
 800027c:	d052      	beq.n	8000324 <main+0x108>
 800027e:	2b02      	cmp	r3, #2
 8000280:	f300 8088 	bgt.w	8000394 <main+0x178>
 8000284:	2b00      	cmp	r3, #0
 8000286:	d002      	beq.n	800028e <main+0x72>
 8000288:	2b01      	cmp	r3, #1
 800028a:	d013      	beq.n	80002b4 <main+0x98>
			  motor_ccr2 = 500;
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, motor_ccr2);
		  }
		  break;
	  default:
		  break;
 800028c:	e082      	b.n	8000394 <main+0x178>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800028e:	2104      	movs	r1, #4
 8000290:	4855      	ldr	r0, [pc, #340]	; (80003e8 <main+0x1cc>)
 8000292:	f002 fa83 	bl	800279c <HAL_TIM_PWM_Stop>
		  ccw_counter = 0;
 8000296:	4b58      	ldr	r3, [pc, #352]	; (80003f8 <main+0x1dc>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
		  cw_counter = 0;
 800029c:	4b57      	ldr	r3, [pc, #348]	; (80003fc <main+0x1e0>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
		  motor_ccr2 = 0;
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <main+0x1e4>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, motor_ccr2);
 80002a8:	4b55      	ldr	r3, [pc, #340]	; (8000400 <main+0x1e4>)
 80002aa:	881a      	ldrh	r2, [r3, #0]
 80002ac:	4b4e      	ldr	r3, [pc, #312]	; (80003e8 <main+0x1cc>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 80002b2:	e070      	b.n	8000396 <main+0x17a>
		  ccw_counter = 0;
 80002b4:	4b50      	ldr	r3, [pc, #320]	; (80003f8 <main+0x1dc>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c0:	4850      	ldr	r0, [pc, #320]	; (8000404 <main+0x1e8>)
 80002c2:	f001 fbe0 	bl	8001a86 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002cc:	484e      	ldr	r0, [pc, #312]	; (8000408 <main+0x1ec>)
 80002ce:	f001 fbda 	bl	8001a86 <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002d2:	2104      	movs	r1, #4
 80002d4:	4844      	ldr	r0, [pc, #272]	; (80003e8 <main+0x1cc>)
 80002d6:	f002 f9bf 	bl	8002658 <HAL_TIM_PWM_Start>
		  if(cw_counter <= 5) {
 80002da:	4b48      	ldr	r3, [pc, #288]	; (80003fc <main+0x1e0>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	2b05      	cmp	r3, #5
 80002e2:	d815      	bhi.n	8000310 <main+0xf4>
			  motor_ccr2 = cw_counter * 100;
 80002e4:	4b45      	ldr	r3, [pc, #276]	; (80003fc <main+0x1e0>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	461a      	mov	r2, r3
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	461a      	mov	r2, r3
 80002f4:	0091      	lsls	r1, r2, #2
 80002f6:	461a      	mov	r2, r3
 80002f8:	460b      	mov	r3, r1
 80002fa:	4413      	add	r3, r2
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	b29a      	uxth	r2, r3
 8000300:	4b3f      	ldr	r3, [pc, #252]	; (8000400 <main+0x1e4>)
 8000302:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, motor_ccr2);
 8000304:	4b3e      	ldr	r3, [pc, #248]	; (8000400 <main+0x1e4>)
 8000306:	881a      	ldrh	r2, [r3, #0]
 8000308:	4b37      	ldr	r3, [pc, #220]	; (80003e8 <main+0x1cc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 800030e:	e042      	b.n	8000396 <main+0x17a>
			  motor_ccr2 = 500;
 8000310:	4b3b      	ldr	r3, [pc, #236]	; (8000400 <main+0x1e4>)
 8000312:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000316:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, motor_ccr2);
 8000318:	4b39      	ldr	r3, [pc, #228]	; (8000400 <main+0x1e4>)
 800031a:	881a      	ldrh	r2, [r3, #0]
 800031c:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <main+0x1cc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 8000322:	e038      	b.n	8000396 <main+0x17a>
		  cw_counter = 0;
 8000324:	4b35      	ldr	r3, [pc, #212]	; (80003fc <main+0x1e0>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000330:	4834      	ldr	r0, [pc, #208]	; (8000404 <main+0x1e8>)
 8000332:	f001 fba8 	bl	8001a86 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033c:	4832      	ldr	r0, [pc, #200]	; (8000408 <main+0x1ec>)
 800033e:	f001 fba2 	bl	8001a86 <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000342:	2104      	movs	r1, #4
 8000344:	4828      	ldr	r0, [pc, #160]	; (80003e8 <main+0x1cc>)
 8000346:	f002 f987 	bl	8002658 <HAL_TIM_PWM_Start>
		  if(ccw_counter <= 5) {
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <main+0x1dc>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b05      	cmp	r3, #5
 8000352:	d815      	bhi.n	8000380 <main+0x164>
			  motor_ccr2 = ccw_counter * 100;
 8000354:	4b28      	ldr	r3, [pc, #160]	; (80003f8 <main+0x1dc>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	b29b      	uxth	r3, r3
 800035c:	461a      	mov	r2, r3
 800035e:	0092      	lsls	r2, r2, #2
 8000360:	4413      	add	r3, r2
 8000362:	461a      	mov	r2, r3
 8000364:	0091      	lsls	r1, r2, #2
 8000366:	461a      	mov	r2, r3
 8000368:	460b      	mov	r3, r1
 800036a:	4413      	add	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	b29a      	uxth	r2, r3
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <main+0x1e4>)
 8000372:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, motor_ccr2);
 8000374:	4b22      	ldr	r3, [pc, #136]	; (8000400 <main+0x1e4>)
 8000376:	881a      	ldrh	r2, [r3, #0]
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <main+0x1cc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 800037e:	e00a      	b.n	8000396 <main+0x17a>
			  motor_ccr2 = 500;
 8000380:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <main+0x1e4>)
 8000382:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000386:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, motor_ccr2);
 8000388:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <main+0x1e4>)
 800038a:	881a      	ldrh	r2, [r3, #0]
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <main+0x1cc>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 8000392:	e000      	b.n	8000396 <main+0x17a>
		  break;
 8000394:	bf00      	nop
	  }
	  display_fnd(number[motor_ccr2 / 100], 1, 5);
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <main+0x1e4>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	4a1c      	ldr	r2, [pc, #112]	; (800040c <main+0x1f0>)
 800039c:	fba2 2303 	umull	r2, r3, r2, r3
 80003a0:	095b      	lsrs	r3, r3, #5
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <main+0x1f4>)
 80003a8:	5c9b      	ldrb	r3, [r3, r2]
 80003aa:	2205      	movs	r2, #5
 80003ac:	2101      	movs	r1, #1
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff fecc 	bl	800014c <display_fnd>
	  display_fnd(number[(motor_ccr2 % 100) / 10], 0, 5);
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <main+0x1e4>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <main+0x1f0>)
 80003ba:	fba2 1203 	umull	r1, r2, r2, r3
 80003be:	0952      	lsrs	r2, r2, #5
 80003c0:	2164      	movs	r1, #100	; 0x64
 80003c2:	fb01 f202 	mul.w	r2, r1, r2
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <main+0x1f8>)
 80003cc:	fba2 2303 	umull	r2, r3, r2, r3
 80003d0:	08db      	lsrs	r3, r3, #3
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <main+0x1f4>)
 80003d8:	5c9b      	ldrb	r3, [r3, r2]
 80003da:	2205      	movs	r2, #5
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff feb4 	bl	800014c <display_fnd>
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80003e4:	e730      	b.n	8000248 <main+0x2c>
 80003e6:	bf00      	nop
 80003e8:	200000c4 	.word	0x200000c4
 80003ec:	20000094 	.word	0x20000094
 80003f0:	2000010e 	.word	0x2000010e
 80003f4:	20000110 	.word	0x20000110
 80003f8:	20000112 	.word	0x20000112
 80003fc:	20000111 	.word	0x20000111
 8000400:	2000010c 	.word	0x2000010c
 8000404:	40010c00 	.word	0x40010c00
 8000408:	40011000 	.word	0x40011000
 800040c:	51eb851f 	.word	0x51eb851f
 8000410:	20000000 	.word	0x20000000
 8000414:	cccccccd 	.word	0xcccccccd

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b094      	sub	sp, #80	; 0x50
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fdc0 	bl	8002fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000448:	2301      	movs	r3, #1
 800044a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800044c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000456:	2301      	movs	r3, #1
 8000458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	2302      	movs	r3, #2
 800045c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000464:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000468:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fb3a 	bl	8001ae8 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800047a:	f000 f9d3 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2302      	movs	r3, #2
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fda6 	bl	8001fec <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004a6:	f000 f9bd 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004aa:	2302      	movs	r3, #2
 80004ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 ff12 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004c2:	f000 f9af 	bl	8000824 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3750      	adds	r7, #80	; 0x50
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_ADC1_Init+0x74>)
 80004e2:	4a19      	ldr	r2, [pc, #100]	; (8000548 <MX_ADC1_Init+0x78>)
 80004e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <MX_ADC1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_ADC1_Init+0x74>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_ADC1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_ADC1_Init+0x74>)
 80004fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <MX_ADC1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_ADC1_Init+0x74>)
 8000508:	2201      	movs	r2, #1
 800050a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <MX_ADC1_Init+0x74>)
 800050e:	f000 fb37 	bl	8000b80 <HAL_ADC_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000518:	f000 f984 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000520:	2301      	movs	r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000524:	2302      	movs	r3, #2
 8000526:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_ADC1_Init+0x74>)
 800052e:	f000 fdbf 	bl	80010b0 <HAL_ADC_ConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000538:	f000 f974 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000094 	.word	0x20000094
 8000548:	40012400 	.word	0x40012400

0800054c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b092      	sub	sp, #72	; 0x48
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
 800056c:	615a      	str	r2, [r3, #20]
 800056e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2220      	movs	r2, #32
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fd18 	bl	8002fac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800057c:	4b33      	ldr	r3, [pc, #204]	; (800064c <MX_TIM1_Init+0x100>)
 800057e:	4a34      	ldr	r2, [pc, #208]	; (8000650 <MX_TIM1_Init+0x104>)
 8000580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <MX_TIM1_Init+0x100>)
 8000584:	2247      	movs	r2, #71	; 0x47
 8000586:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000588:	4b30      	ldr	r3, [pc, #192]	; (800064c <MX_TIM1_Init+0x100>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <MX_TIM1_Init+0x100>)
 8000590:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000594:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <MX_TIM1_Init+0x100>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <MX_TIM1_Init+0x100>)
 800059e:	2200      	movs	r2, #0
 80005a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <MX_TIM1_Init+0x100>)
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005a8:	4828      	ldr	r0, [pc, #160]	; (800064c <MX_TIM1_Init+0x100>)
 80005aa:	f002 f805 	bl	80025b8 <HAL_TIM_PWM_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80005b4:	f000 f936 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b8:	2300      	movs	r3, #0
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005c4:	4619      	mov	r1, r3
 80005c6:	4821      	ldr	r0, [pc, #132]	; (800064c <MX_TIM1_Init+0x100>)
 80005c8:	f002 fc1c 	bl	8002e04 <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80005d2:	f000 f927 	bl	8000824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d6:	2360      	movs	r3, #96	; 0x60
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005de:	2300      	movs	r3, #0
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005e2:	2300      	movs	r3, #0
 80005e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005ea:	2300      	movs	r3, #0
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2204      	movs	r2, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <MX_TIM1_Init+0x100>)
 80005fc:	f002 f932 	bl	8002864 <HAL_TIM_PWM_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000606:	f000 f90d 	bl	8000824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800061e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000622:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <MX_TIM1_Init+0x100>)
 800062e:	f002 fc47 	bl	8002ec0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000638:	f000 f8f4 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <MX_TIM1_Init+0x100>)
 800063e:	f000 f983 	bl	8000948 <HAL_TIM_MspPostInit>

}
 8000642:	bf00      	nop
 8000644:	3748      	adds	r7, #72	; 0x48
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000c4 	.word	0x200000c4
 8000650:	40012c00 	.word	0x40012c00

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <MX_GPIO_Init+0x14c>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a4c      	ldr	r2, [pc, #304]	; (80007a0 <MX_GPIO_Init+0x14c>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b4a      	ldr	r3, [pc, #296]	; (80007a0 <MX_GPIO_Init+0x14c>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0310 	and.w	r3, r3, #16
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000680:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <MX_GPIO_Init+0x14c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a46      	ldr	r2, [pc, #280]	; (80007a0 <MX_GPIO_Init+0x14c>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b44      	ldr	r3, [pc, #272]	; (80007a0 <MX_GPIO_Init+0x14c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0320 	and.w	r3, r3, #32
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <MX_GPIO_Init+0x14c>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a40      	ldr	r2, [pc, #256]	; (80007a0 <MX_GPIO_Init+0x14c>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b3e      	ldr	r3, [pc, #248]	; (80007a0 <MX_GPIO_Init+0x14c>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <MX_GPIO_Init+0x14c>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <MX_GPIO_Init+0x14c>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <MX_GPIO_Init+0x14c>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_12, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f241 0118 	movw	r1, #4120	; 0x1018
 80006ce:	4835      	ldr	r0, [pc, #212]	; (80007a4 <MX_GPIO_Init+0x150>)
 80006d0:	f001 f9d9 	bl	8001a86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006d4:	2200      	movs	r2, #0
 80006d6:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80006da:	4833      	ldr	r0, [pc, #204]	; (80007a8 <MX_GPIO_Init+0x154>)
 80006dc:	f001 f9d3 	bl	8001a86 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80006e6:	4831      	ldr	r0, [pc, #196]	; (80007ac <MX_GPIO_Init+0x158>)
 80006e8:	f001 f9cd 	bl	8001a86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC4 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_12;
 80006ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	4827      	ldr	r0, [pc, #156]	; (80007a4 <MX_GPIO_Init+0x150>)
 8000706:	f001 f823 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800070a:	2310      	movs	r3, #16
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_GPIO_Init+0x15c>)
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	4823      	ldr	r0, [pc, #140]	; (80007ac <MX_GPIO_Init+0x158>)
 800071e:	f001 f817 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000722:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8000726:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	481b      	ldr	r0, [pc, #108]	; (80007a8 <MX_GPIO_Init+0x154>)
 800073c:	f001 f808 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000740:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <MX_GPIO_Init+0x158>)
 800075a:	f000 fff9 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075e:	2304      	movs	r3, #4
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_GPIO_Init+0x15c>)
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4810      	ldr	r0, [pc, #64]	; (80007b4 <MX_GPIO_Init+0x160>)
 8000772:	f000 ffed 	bl	8001750 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2008      	movs	r0, #8
 800077c:	f000 ffb1 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000780:	2008      	movs	r0, #8
 8000782:	f000 ffca 	bl	800171a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	200a      	movs	r0, #10
 800078c:	f000 ffa9 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000790:	200a      	movs	r0, #10
 8000792:	f000 ffc2 	bl	800171a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40011000 	.word	0x40011000
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	40010800 	.word	0x40010800
 80007b0:	10210000 	.word	0x10210000
 80007b4:	40011400 	.word	0x40011400

080007b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
  if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 80007c2:	2104      	movs	r1, #4
 80007c4:	4812      	ldr	r0, [pc, #72]	; (8000810 <HAL_GPIO_EXTI_Callback+0x58>)
 80007c6:	f001 f947 	bl	8001a58 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d109      	bne.n	80007e4 <HAL_GPIO_EXTI_Callback+0x2c>
    motor_state = MOTOR_CW;
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_GPIO_EXTI_Callback+0x5c>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
    cw_counter++;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_GPIO_EXTI_Callback+0x60>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3301      	adds	r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_GPIO_EXTI_Callback+0x60>)
 80007e2:	701a      	strb	r2, [r3, #0]
  }
  if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)) {
 80007e4:	2110      	movs	r1, #16
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <HAL_GPIO_EXTI_Callback+0x64>)
 80007e8:	f001 f936 	bl	8001a58 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d109      	bne.n	8000806 <HAL_GPIO_EXTI_Callback+0x4e>
    motor_state = MOTOR_CCW;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_GPIO_EXTI_Callback+0x5c>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	701a      	strb	r2, [r3, #0]
    ccw_counter++;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_GPIO_EXTI_Callback+0x68>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	3301      	adds	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <HAL_GPIO_EXTI_Callback+0x68>)
 8000804:	701a      	strb	r2, [r3, #0]
  }
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40011400 	.word	0x40011400
 8000814:	20000110 	.word	0x20000110
 8000818:	20000111 	.word	0x20000111
 800081c:	40010800 	.word	0x40010800
 8000820:	20000112 	.word	0x20000112

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_MspInit+0x5c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x5c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_MspInit+0x60>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_MspInit+0x60>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000

08000894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_ADC_MspInit+0x6c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d121      	bne.n	80008f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e8:	2303      	movs	r3, #3
 80008ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_ADC_MspInit+0x74>)
 80008f4:	f000 ff2c 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40012400 	.word	0x40012400
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800

0800090c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a09      	ldr	r2, [pc, #36]	; (8000940 <HAL_TIM_PWM_MspInit+0x34>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d10b      	bne.n	8000936 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_TIM_PWM_MspInit+0x38>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_TIM_PWM_MspInit+0x38>)
 8000924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_TIM_PWM_MspInit+0x38>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	40012c00 	.word	0x40012c00
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_TIM_MspPostInit+0x5c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d118      	bne.n	800099a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_TIM_MspPostInit+0x60>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_TIM_MspPostInit+0x60>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_TIM_MspPostInit+0x60>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000984:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2302      	movs	r3, #2
 800098c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_TIM_MspPostInit+0x64>)
 8000996:	f000 fedb 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40012c00 	.word	0x40012c00
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f6:	f000 f883 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}

080009fe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000a02:	2004      	movs	r0, #4
 8000a04:	f001 f858 	bl	8001ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a10:	2010      	movs	r0, #16
 8000a12:	f001 f851 	bl	8001ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
	...

08000a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff fff7 	bl	8000a1a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2e:	490c      	ldr	r1, [pc, #48]	; (8000a60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a44:	4c09      	ldr	r4, [pc, #36]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 fa87 	bl	8002f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fbe1 	bl	800021c <main>
  bx lr
 8000a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a64:	0800301c 	.word	0x0800301c
  ldr r2, =_sbss
 8000a68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a6c:	20000118 	.word	0x20000118

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_Init+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_Init+0x28>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 fe21 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	f000 f808 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fece 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fe39 	bl	8001736 <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 fe01 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000006c 	.word	0x2000006c
 8000af8:	20000074 	.word	0x20000074
 8000afc:	20000070 	.word	0x20000070

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000074 	.word	0x20000074
 8000b20:	20000114 	.word	0x20000114

08000b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000114 	.word	0x20000114

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff fff0 	bl	8000b24 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffe0 	bl	8000b24 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000074 	.word	0x20000074

08000b80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e0be      	b.n	8000d20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fe68 	bl	8000894 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 fbc5 	bl	8001354 <ADC_ConversionStop_Disable>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8099 	bne.w	8000d0e <HAL_ADC_Init+0x18e>
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 8095 	bne.w	8000d0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bec:	f023 0302 	bic.w	r3, r3, #2
 8000bf0:	f043 0202 	orr.w	r2, r3, #2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7b1b      	ldrb	r3, [r3, #12]
 8000c06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c18:	d003      	beq.n	8000c22 <HAL_ADC_Init+0xa2>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d102      	bne.n	8000c28 <HAL_ADC_Init+0xa8>
 8000c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c26:	e000      	b.n	8000c2a <HAL_ADC_Init+0xaa>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7d1b      	ldrb	r3, [r3, #20]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d119      	bne.n	8000c6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7b1b      	ldrb	r3, [r3, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	035a      	lsls	r2, r3, #13
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	e00b      	b.n	8000c6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c58:	f043 0220 	orr.w	r2, r3, #32
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	f043 0201 	orr.w	r2, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_ADC_Init+0x1a8>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	430b      	orrs	r3, r1
 8000c92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c9c:	d003      	beq.n	8000ca6 <HAL_ADC_Init+0x126>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d104      	bne.n	8000cb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	051b      	lsls	r3, r3, #20
 8000cae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_ADC_Init+0x1ac>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d10b      	bne.n	8000cec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cde:	f023 0303 	bic.w	r3, r3, #3
 8000ce2:	f043 0201 	orr.w	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cea:	e018      	b.n	8000d1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf0:	f023 0312 	bic.w	r3, r3, #18
 8000cf4:	f043 0210 	orr.w	r2, r3, #16
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	f043 0201 	orr.w	r2, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d0c:	e007      	b.n	8000d1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d12:	f043 0210 	orr.w	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	ffe1f7fd 	.word	0xffe1f7fd
 8000d2c:	ff1f0efe 	.word	0xff1f0efe

08000d30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Start+0x1a>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e098      	b.n	8000e7c <HAL_ADC_Start+0x14c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 faa4 	bl	80012a0 <ADC_Enable>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8087 	bne.w	8000e72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a41      	ldr	r2, [pc, #260]	; (8000e84 <HAL_ADC_Start+0x154>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d105      	bne.n	8000d8e <HAL_ADC_Start+0x5e>
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <HAL_ADC_Start+0x158>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d115      	bne.n	8000dba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d026      	beq.n	8000df6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000db8:	e01d      	b.n	8000df6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a2f      	ldr	r2, [pc, #188]	; (8000e88 <HAL_ADC_Start+0x158>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d004      	beq.n	8000dda <HAL_ADC_Start+0xaa>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	; (8000e84 <HAL_ADC_Start+0x154>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d10d      	bne.n	8000df6 <HAL_ADC_Start+0xc6>
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_ADC_Start+0x158>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	f023 0206 	bic.w	r2, r3, #6
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e0e:	e002      	b.n	8000e16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f06f 0202 	mvn.w	r2, #2
 8000e26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e36:	d113      	bne.n	8000e60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_ADC_Start+0x154>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d105      	bne.n	8000e4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_ADC_Start+0x158>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d108      	bne.n	8000e60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	e00c      	b.n	8000e7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e003      	b.n	8000e7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40012800 	.word	0x40012800
 8000e88:	40012400 	.word	0x40012400

08000e8c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ea2:	f7ff fe3f 	bl	8000b24 <HAL_GetTick>
 8000ea6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00b      	beq.n	8000ece <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	f043 0220 	orr.w	r2, r3, #32
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0d3      	b.n	8001076 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d131      	bne.n	8000f40 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d12a      	bne.n	8000f40 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eea:	e021      	b.n	8000f30 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef2:	d01d      	beq.n	8000f30 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <HAL_ADC_PollForConversion+0x7e>
 8000efa:	f7ff fe13 	bl	8000b24 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d212      	bcs.n	8000f30 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10b      	bne.n	8000f30 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	f043 0204 	orr.w	r2, r3, #4
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e0a2      	b.n	8001076 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0d6      	beq.n	8000eec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f3e:	e070      	b.n	8001022 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f40:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <HAL_ADC_PollForConversion+0x1f4>)
 8000f42:	681c      	ldr	r4, [r3, #0]
 8000f44:	2002      	movs	r0, #2
 8000f46:	f001 fa81 	bl	800244c <HAL_RCCEx_GetPeriphCLKFreq>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6919      	ldr	r1, [r3, #16]
 8000f56:	4b4b      	ldr	r3, [pc, #300]	; (8001084 <HAL_ADC_PollForConversion+0x1f8>)
 8000f58:	400b      	ands	r3, r1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d118      	bne.n	8000f90 <HAL_ADC_PollForConversion+0x104>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68d9      	ldr	r1, [r3, #12]
 8000f64:	4b48      	ldr	r3, [pc, #288]	; (8001088 <HAL_ADC_PollForConversion+0x1fc>)
 8000f66:	400b      	ands	r3, r1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d111      	bne.n	8000f90 <HAL_ADC_PollForConversion+0x104>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6919      	ldr	r1, [r3, #16]
 8000f72:	4b46      	ldr	r3, [pc, #280]	; (800108c <HAL_ADC_PollForConversion+0x200>)
 8000f74:	400b      	ands	r3, r1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d108      	bne.n	8000f8c <HAL_ADC_PollForConversion+0x100>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68d9      	ldr	r1, [r3, #12]
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_ADC_PollForConversion+0x204>)
 8000f82:	400b      	ands	r3, r1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_ADC_PollForConversion+0x100>
 8000f88:	2314      	movs	r3, #20
 8000f8a:	e020      	b.n	8000fce <HAL_ADC_PollForConversion+0x142>
 8000f8c:	2329      	movs	r3, #41	; 0x29
 8000f8e:	e01e      	b.n	8000fce <HAL_ADC_PollForConversion+0x142>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6919      	ldr	r1, [r3, #16]
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <HAL_ADC_PollForConversion+0x200>)
 8000f98:	400b      	ands	r3, r1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d106      	bne.n	8000fac <HAL_ADC_PollForConversion+0x120>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68d9      	ldr	r1, [r3, #12]
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <HAL_ADC_PollForConversion+0x204>)
 8000fa6:	400b      	ands	r3, r1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00d      	beq.n	8000fc8 <HAL_ADC_PollForConversion+0x13c>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6919      	ldr	r1, [r3, #16]
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <HAL_ADC_PollForConversion+0x208>)
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d108      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x140>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68d9      	ldr	r1, [r3, #12]
 8000fc0:	4b34      	ldr	r3, [pc, #208]	; (8001094 <HAL_ADC_PollForConversion+0x208>)
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x140>
 8000fc8:	2354      	movs	r3, #84	; 0x54
 8000fca:	e000      	b.n	8000fce <HAL_ADC_PollForConversion+0x142>
 8000fcc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fd4:	e021      	b.n	800101a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d01a      	beq.n	8001014 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <HAL_ADC_PollForConversion+0x168>
 8000fe4:	f7ff fd9e 	bl	8000b24 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d20f      	bcs.n	8001014 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d90b      	bls.n	8001014 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	f043 0204 	orr.w	r2, r3, #4
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e030      	b.n	8001076 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	429a      	cmp	r2, r3
 8001020:	d8d9      	bhi.n	8000fd6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f06f 0212 	mvn.w	r2, #18
 800102a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001042:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001046:	d115      	bne.n	8001074 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800104c:	2b00      	cmp	r3, #0
 800104e:	d111      	bne.n	8001074 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	bf00      	nop
 8001080:	2000006c 	.word	0x2000006c
 8001084:	24924924 	.word	0x24924924
 8001088:	00924924 	.word	0x00924924
 800108c:	12492492 	.word	0x12492492
 8001090:	00492492 	.word	0x00492492
 8001094:	00249249 	.word	0x00249249

08001098 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x20>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e0dc      	b.n	800128a <HAL_ADC_ConfigChannel+0x1da>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d81c      	bhi.n	800111a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	3b05      	subs	r3, #5
 80010f2:	221f      	movs	r2, #31
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4019      	ands	r1, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b05      	subs	r3, #5
 800110c:	fa00 f203 	lsl.w	r2, r0, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
 8001118:	e03c      	b.n	8001194 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d81c      	bhi.n	800115c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b23      	subs	r3, #35	; 0x23
 8001134:	221f      	movs	r2, #31
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	4019      	ands	r1, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b23      	subs	r3, #35	; 0x23
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
 800115a:	e01b      	b.n	8001194 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b41      	subs	r3, #65	; 0x41
 800116e:	221f      	movs	r2, #31
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b41      	subs	r3, #65	; 0x41
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b09      	cmp	r3, #9
 800119a:	d91c      	bls.n	80011d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68d9      	ldr	r1, [r3, #12]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	3b1e      	subs	r3, #30
 80011ae:	2207      	movs	r2, #7
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4019      	ands	r1, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	6898      	ldr	r0, [r3, #8]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	3b1e      	subs	r3, #30
 80011c8:	fa00 f203 	lsl.w	r2, r0, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	e019      	b.n	800120a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6919      	ldr	r1, [r3, #16]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	2207      	movs	r2, #7
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6898      	ldr	r0, [r3, #8]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b10      	cmp	r3, #16
 8001210:	d003      	beq.n	800121a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001216:	2b11      	cmp	r3, #17
 8001218:	d132      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_ADC_ConfigChannel+0x1e4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d125      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d126      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001240:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d11a      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_ADC_ConfigChannel+0x1e8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_ADC_ConfigChannel+0x1ec>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	0c9a      	lsrs	r2, r3, #18
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001260:	e002      	b.n	8001268 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3b01      	subs	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x1b2>
 800126e:	e007      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	f043 0220 	orr.w	r2, r3, #32
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40012400 	.word	0x40012400
 8001298:	2000006c 	.word	0x2000006c
 800129c:	431bde83 	.word	0x431bde83

080012a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d040      	beq.n	8001340 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <ADC_Enable+0xac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <ADC_Enable+0xb0>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	0c9b      	lsrs	r3, r3, #18
 80012da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012dc:	e002      	b.n	80012e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ea:	f7ff fc1b 	bl	8000b24 <HAL_GetTick>
 80012ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012f0:	e01f      	b.n	8001332 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012f2:	f7ff fc17 	bl	8000b24 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d918      	bls.n	8001332 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b01      	cmp	r3, #1
 800130c:	d011      	beq.n	8001332 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	f043 0210 	orr.w	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e007      	b.n	8001342 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b01      	cmp	r3, #1
 800133e:	d1d8      	bne.n	80012f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000006c 	.word	0x2000006c
 8001350:	431bde83 	.word	0x431bde83

08001354 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b01      	cmp	r3, #1
 800136c:	d12e      	bne.n	80013cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800137e:	f7ff fbd1 	bl	8000b24 <HAL_GetTick>
 8001382:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001384:	e01b      	b.n	80013be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001386:	f7ff fbcd 	bl	8000b24 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d914      	bls.n	80013be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10d      	bne.n	80013be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	f043 0210 	orr.w	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e007      	b.n	80013ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d0dc      	beq.n	8001386 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADCEx_Calibration_Start+0x1e>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e097      	b.n	8001526 <HAL_ADCEx_Calibration_Start+0x14e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa8 	bl	8001354 <ADC_ConversionStop_Disable>
 8001404:	4603      	mov	r3, r0
 8001406:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff49 	bl	80012a0 <ADC_Enable>
 800140e:	4603      	mov	r3, r0
 8001410:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	2b00      	cmp	r3, #0
 8001416:	f040 8081 	bne.w	800151c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001422:	f023 0302 	bic.w	r3, r3, #2
 8001426:	f043 0202 	orr.w	r2, r3, #2
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <HAL_ADCEx_Calibration_Start+0x158>)
 8001430:	681c      	ldr	r4, [r3, #0]
 8001432:	2002      	movs	r0, #2
 8001434:	f001 f80a 	bl	800244c <HAL_RCCEx_GetPeriphCLKFreq>
 8001438:	4603      	mov	r3, r0
 800143a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800143e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001440:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001442:	e002      	b.n	800144a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3b01      	subs	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f9      	bne.n	8001444 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0208 	orr.w	r2, r2, #8
 800145e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001460:	f7ff fb60 	bl	8000b24 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001466:	e01b      	b.n	80014a0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001468:	f7ff fb5c 	bl	8000b24 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b0a      	cmp	r3, #10
 8001474:	d914      	bls.n	80014a0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00d      	beq.n	80014a0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	f023 0312 	bic.w	r3, r3, #18
 800148c:	f043 0210 	orr.w	r2, r3, #16
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e042      	b.n	8001526 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1dc      	bne.n	8001468 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0204 	orr.w	r2, r2, #4
 80014bc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014be:	f7ff fb31 	bl	8000b24 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014c4:	e01b      	b.n	80014fe <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014c6:	f7ff fb2d 	bl	8000b24 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b0a      	cmp	r3, #10
 80014d2:	d914      	bls.n	80014fe <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00d      	beq.n	80014fe <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	f023 0312 	bic.w	r3, r3, #18
 80014ea:	f043 0210 	orr.w	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e013      	b.n	8001526 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1dc      	bne.n	80014c6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f023 0303 	bic.w	r3, r3, #3
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001524:	7dfb      	ldrb	r3, [r7, #23]
}
 8001526:	4618      	mov	r0, r3
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	2000006c 	.word	0x2000006c

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4906      	ldr	r1, [pc, #24]	; (80015cc <__NVIC_EnableIRQ+0x34>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff90 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff2d 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff42 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff90 	bl	8001624 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5f 	bl	80015d0 <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff35 	bl	8001598 <__NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffa2 	bl	8001688 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b08b      	sub	sp, #44	; 0x2c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	e169      	b.n	8001a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001764:	2201      	movs	r2, #1
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8158 	bne.w	8001a32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4a9a      	ldr	r2, [pc, #616]	; (80019f0 <HAL_GPIO_Init+0x2a0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d05e      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 800178c:	4a98      	ldr	r2, [pc, #608]	; (80019f0 <HAL_GPIO_Init+0x2a0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d875      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 8001792:	4a98      	ldr	r2, [pc, #608]	; (80019f4 <HAL_GPIO_Init+0x2a4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d058      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 8001798:	4a96      	ldr	r2, [pc, #600]	; (80019f4 <HAL_GPIO_Init+0x2a4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d86f      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 800179e:	4a96      	ldr	r2, [pc, #600]	; (80019f8 <HAL_GPIO_Init+0x2a8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d052      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017a4:	4a94      	ldr	r2, [pc, #592]	; (80019f8 <HAL_GPIO_Init+0x2a8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d869      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017aa:	4a94      	ldr	r2, [pc, #592]	; (80019fc <HAL_GPIO_Init+0x2ac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d04c      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017b0:	4a92      	ldr	r2, [pc, #584]	; (80019fc <HAL_GPIO_Init+0x2ac>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d863      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017b6:	4a92      	ldr	r2, [pc, #584]	; (8001a00 <HAL_GPIO_Init+0x2b0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d046      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017bc:	4a90      	ldr	r2, [pc, #576]	; (8001a00 <HAL_GPIO_Init+0x2b0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d85d      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d82a      	bhi.n	800181c <HAL_GPIO_Init+0xcc>
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d859      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <HAL_GPIO_Init+0x80>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	0800184b 	.word	0x0800184b
 80017d4:	08001825 	.word	0x08001825
 80017d8:	08001837 	.word	0x08001837
 80017dc:	08001879 	.word	0x08001879
 80017e0:	0800187f 	.word	0x0800187f
 80017e4:	0800187f 	.word	0x0800187f
 80017e8:	0800187f 	.word	0x0800187f
 80017ec:	0800187f 	.word	0x0800187f
 80017f0:	0800187f 	.word	0x0800187f
 80017f4:	0800187f 	.word	0x0800187f
 80017f8:	0800187f 	.word	0x0800187f
 80017fc:	0800187f 	.word	0x0800187f
 8001800:	0800187f 	.word	0x0800187f
 8001804:	0800187f 	.word	0x0800187f
 8001808:	0800187f 	.word	0x0800187f
 800180c:	0800187f 	.word	0x0800187f
 8001810:	0800187f 	.word	0x0800187f
 8001814:	0800182d 	.word	0x0800182d
 8001818:	08001841 	.word	0x08001841
 800181c:	4a79      	ldr	r2, [pc, #484]	; (8001a04 <HAL_GPIO_Init+0x2b4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001822:	e02c      	b.n	800187e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	623b      	str	r3, [r7, #32]
          break;
 800182a:	e029      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	3304      	adds	r3, #4
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e024      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	3308      	adds	r3, #8
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e01f      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	330c      	adds	r3, #12
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e01a      	b.n	8001880 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001852:	2304      	movs	r3, #4
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e013      	b.n	8001880 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001860:	2308      	movs	r3, #8
 8001862:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	611a      	str	r2, [r3, #16]
          break;
 800186a:	e009      	b.n	8001880 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	615a      	str	r2, [r3, #20]
          break;
 8001876:	e003      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x130>
          break;
 800187e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d801      	bhi.n	800188a <HAL_GPIO_Init+0x13a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	e001      	b.n	800188e <HAL_GPIO_Init+0x13e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d802      	bhi.n	800189c <HAL_GPIO_Init+0x14c>
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x152>
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3b08      	subs	r3, #8
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	210f      	movs	r1, #15
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	6a39      	ldr	r1, [r7, #32]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80b1 	beq.w	8001a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d0:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a4c      	ldr	r2, [pc, #304]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018e8:	4a48      	ldr	r2, [pc, #288]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <HAL_GPIO_Init+0x2c0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_GPIO_Init+0x1ec>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3f      	ldr	r2, [pc, #252]	; (8001a14 <HAL_GPIO_Init+0x2c4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00d      	beq.n	8001938 <HAL_GPIO_Init+0x1e8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <HAL_GPIO_Init+0x2c8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_Init+0x1e4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3d      	ldr	r2, [pc, #244]	; (8001a1c <HAL_GPIO_Init+0x2cc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_GPIO_Init+0x1e0>
 800192c:	2303      	movs	r3, #3
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001930:	2304      	movs	r3, #4
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001934:	2302      	movs	r3, #2
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 800193c:	2300      	movs	r3, #0
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194e:	492f      	ldr	r1, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	492c      	ldr	r1, [pc, #176]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4928      	ldr	r1, [pc, #160]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001980:	4013      	ands	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4922      	ldr	r1, [pc, #136]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	491e      	ldr	r1, [pc, #120]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4918      	ldr	r1, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4914      	ldr	r1, [pc, #80]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d021      	beq.n	8001a24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e021      	b.n	8001a32 <HAL_GPIO_Init+0x2e2>
 80019ee:	bf00      	nop
 80019f0:	10320000 	.word	0x10320000
 80019f4:	10310000 	.word	0x10310000
 80019f8:	10220000 	.word	0x10220000
 80019fc:	10210000 	.word	0x10210000
 8001a00:	10120000 	.word	0x10120000
 8001a04:	10110000 	.word	0x10110000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40010800 	.word	0x40010800
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	40011000 	.word	0x40011000
 8001a1c:	40011400 	.word	0x40011400
 8001a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4909      	ldr	r1, [pc, #36]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f47f ae8e 	bne.w	8001764 <HAL_GPIO_Init+0x14>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	372c      	adds	r7, #44	; 0x2c
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]
 8001a92:	4613      	mov	r3, r2
 8001a94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a96:	787b      	ldrb	r3, [r7, #1]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa2:	e003      	b.n	8001aac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	041a      	lsls	r2, r3, #16
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	611a      	str	r2, [r3, #16]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fe6e 	bl	80007b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e272      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d00c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b14:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d112      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
 8001b20:	4b8c      	ldr	r3, [pc, #560]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d10b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2e:	4b89      	ldr	r3, [pc, #548]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d06c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x12c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d168      	bne.n	8001c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e24c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x76>
 8001b50:	4b80      	ldr	r3, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a7f      	ldr	r2, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x98>
 8001b66:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a7a      	ldr	r2, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a77      	ldr	r2, [pc, #476]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e01d      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xbc>
 8001b8a:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a71      	ldr	r2, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001ba4:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6a      	ldr	r2, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a67      	ldr	r2, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ffae 	bl	8000b24 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7fe ffaa 	bl	8000b24 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e200      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe4>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7fe ff9a 	bl	8000b24 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7fe ff96 	bl	8000b24 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1ec      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x10c>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d063      	beq.n	8001cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d11c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d116      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e1c0      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4939      	ldr	r1, [pc, #228]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	e03a      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe ff4f 	bl	8000b24 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7fe ff4b 	bl	8000b24 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1a1      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4927      	ldr	r1, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe ff2e 	bl	8000b24 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7fe ff2a 	bl	8000b24 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e180      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03a      	beq.n	8001d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d019      	beq.n	8001d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7fe ff0e 	bl	8000b24 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7fe ff0a 	bl	8000b24 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e160      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f000 faba 	bl	80022a4 <RCC_Delay>
 8001d30:	e01c      	b.n	8001d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7fe fef4 	bl	8000b24 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3e:	e00f      	b.n	8001d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7fe fef0 	bl	8000b24 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d908      	bls.n	8001d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e146      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	42420000 	.word	0x42420000
 8001d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b92      	ldr	r3, [pc, #584]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e9      	bne.n	8001d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a6 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b85      	ldr	r3, [pc, #532]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7e      	ldr	r2, [pc, #504]	; (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe feb1 	bl	8000b24 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7fe fead 	bl	8000b24 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b64      	cmp	r3, #100	; 0x64
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e103      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b75      	ldr	r3, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x312>
 8001dec:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a6e      	ldr	r2, [pc, #440]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e02d      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x334>
 8001e02:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a69      	ldr	r2, [pc, #420]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a66      	ldr	r2, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	e01c      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x356>
 8001e24:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a60      	ldr	r2, [pc, #384]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a5a      	ldr	r2, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b58      	ldr	r3, [pc, #352]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a57      	ldr	r2, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d015      	beq.n	8001e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe fe61 	bl	8000b24 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7fe fe5d 	bl	8000b24 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0b1      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <HAL_RCC_OscConfig+0x37e>
 8001e88:	e014      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe fe4b 	bl	8000b24 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe fe47 	bl	8000b24 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e09b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	4b40      	ldr	r3, [pc, #256]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8087 	beq.w	8001fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d061      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d146      	bne.n	8001f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fe1b 	bl	8000b24 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe fe17 	bl	8000b24 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e06d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d108      	bne.n	8001f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4921      	ldr	r1, [pc, #132]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a19      	ldr	r1, [r3, #32]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fdeb 	bl	8000b24 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe fde7 	bl	8000b24 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46a>
 8001f70:	e035      	b.n	8001fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe fdd4 	bl	8000b24 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe fdd0 	bl	8000b24 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e026      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x498>
 8001f9e:	e01e      	b.n	8001fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e019      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x500>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0d0      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d910      	bls.n	8002030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b67      	ldr	r3, [pc, #412]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0207 	bic.w	r2, r3, #7
 8002016:	4965      	ldr	r1, [pc, #404]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b63      	ldr	r3, [pc, #396]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b8      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002048:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800206a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	494d      	ldr	r1, [pc, #308]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d040      	beq.n	800210c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d115      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e073      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06b      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4936      	ldr	r1, [pc, #216]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020dc:	f7fe fd22 	bl	8000b24 <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7fe fd1e 	bl	8000b24 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e053      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d210      	bcs.n	800213c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4922      	ldr	r1, [pc, #136]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e032      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4916      	ldr	r1, [pc, #88]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490e      	ldr	r1, [pc, #56]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217a:	f000 f821 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800217e:	4602      	mov	r2, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	490a      	ldr	r1, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800218c:	5ccb      	ldrb	r3, [r1, r3]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1d0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fc80 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08002fd4 	.word	0x08002fd4
 80021b8:	2000006c 	.word	0x2000006c
 80021bc:	20000070 	.word	0x20000070

080021c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ee:	e027      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	613b      	str	r3, [r7, #16]
      break;
 80021f4:	e027      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCC_GetSysClockFreq+0x94>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0c5b      	lsrs	r3, r3, #17
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_RCC_GetSysClockFreq+0xa0>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 8002222:	fb03 f202 	mul.w	r2, r3, r2
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e004      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	613b      	str	r3, [r7, #16]
      break;
 800223e:	e002      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 8002242:	613b      	str	r3, [r7, #16]
      break;
 8002244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002246:	693b      	ldr	r3, [r7, #16]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	007a1200 	.word	0x007a1200
 800225c:	08002fec 	.word	0x08002fec
 8002260:	08002ffc 	.word	0x08002ffc
 8002264:	003d0900 	.word	0x003d0900

08002268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <HAL_RCC_GetHCLKFreq+0x10>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	2000006c 	.word	0x2000006c

0800227c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002280:	f7ff fff2 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0adb      	lsrs	r3, r3, #11
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4903      	ldr	r1, [pc, #12]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	08002fe4 	.word	0x08002fe4

080022a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <RCC_Delay+0x34>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <RCC_Delay+0x38>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0a5b      	lsrs	r3, r3, #9
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c0:	bf00      	nop
  }
  while (Delay --);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	60fa      	str	r2, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <RCC_Delay+0x1c>
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	2000006c 	.word	0x2000006c
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d07d      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002300:	4b4f      	ldr	r3, [pc, #316]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	61d3      	str	r3, [r2, #28]
 8002318:	4b49      	ldr	r3, [pc, #292]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d118      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002334:	4b43      	ldr	r3, [pc, #268]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a42      	ldr	r2, [pc, #264]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002340:	f7fe fbf0 	bl	8000b24 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	e008      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe fbec 	bl	8000b24 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e06d      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d02e      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	429a      	cmp	r2, r3
 8002382:	d027      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002384:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800238e:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002394:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800239a:	4a29      	ldr	r2, [pc, #164]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d014      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fbbb 	bl	8000b24 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fbb7 	bl	8000b24 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e036      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ee      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4917      	ldr	r1, [pc, #92]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	490b      	ldr	r1, [pc, #44]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4904      	ldr	r1, [pc, #16]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	40007000 	.word	0x40007000
 8002448:	42420440 	.word	0x42420440

0800244c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b10      	cmp	r3, #16
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b10      	cmp	r3, #16
 8002472:	f200 808a 	bhi.w	800258a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d045      	beq.n	8002508 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d075      	beq.n	800256e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002482:	e082      	b.n	800258a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002484:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800248a:	4b45      	ldr	r3, [pc, #276]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d07b      	beq.n	800258e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4a41      	ldr	r2, [pc, #260]	; (80025a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ae:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0c5b      	lsrs	r3, r3, #17
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80024c8:	4a38      	ldr	r2, [pc, #224]	; (80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	e004      	b.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4a34      	ldr	r2, [pc, #208]	; (80025b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80024e4:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f0:	d102      	bne.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	61bb      	str	r3, [r7, #24]
      break;
 80024f6:	e04a      	b.n	800258e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	61bb      	str	r3, [r7, #24]
      break;
 8002506:	e042      	b.n	800258e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002518:	d108      	bne.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	e01f      	b.n	800256c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002536:	d109      	bne.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002544:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	e00f      	b.n	800256c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002556:	d11c      	bne.n	8002592 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d016      	beq.n	8002592 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002564:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002568:	61bb      	str	r3, [r7, #24]
      break;
 800256a:	e012      	b.n	8002592 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800256c:	e011      	b.n	8002592 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800256e:	f7ff fe85 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0b9b      	lsrs	r3, r3, #14
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fbb2 f3f3 	udiv	r3, r2, r3
 8002586:	61bb      	str	r3, [r7, #24]
      break;
 8002588:	e004      	b.n	8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002592:	bf00      	nop
    }
  }
  return (frequency);
 8002594:	69bb      	ldr	r3, [r7, #24]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08003000 	.word	0x08003000
 80025a8:	08003010 	.word	0x08003010
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	003d0900 	.word	0x003d0900
 80025b4:	aaaaaaab 	.word	0xaaaaaaab

080025b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e041      	b.n	800264e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe f994 	bl	800090c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f000 f9f6 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_TIM_PWM_Start+0x24>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e022      	b.n	80026c2 <HAL_TIM_PWM_Start+0x6a>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d109      	bne.n	8002696 <HAL_TIM_PWM_Start+0x3e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	e015      	b.n	80026c2 <HAL_TIM_PWM_Start+0x6a>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d109      	bne.n	80026b0 <HAL_TIM_PWM_Start+0x58>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e008      	b.n	80026c2 <HAL_TIM_PWM_Start+0x6a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e05e      	b.n	8002788 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d104      	bne.n	80026da <HAL_TIM_PWM_Start+0x82>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d8:	e013      	b.n	8002702 <HAL_TIM_PWM_Start+0xaa>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d104      	bne.n	80026ea <HAL_TIM_PWM_Start+0x92>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e8:	e00b      	b.n	8002702 <HAL_TIM_PWM_Start+0xaa>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_PWM_Start+0xa2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f8:	e003      	b.n	8002702 <HAL_TIM_PWM_Start+0xaa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fb56 	bl	8002dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_TIM_PWM_Start+0x138>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d107      	bne.n	800272a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_TIM_PWM_Start+0x138>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_TIM_PWM_Start+0xfa>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d009      	beq.n	8002752 <HAL_TIM_PWM_Start+0xfa>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a14      	ldr	r2, [pc, #80]	; (8002794 <HAL_TIM_PWM_Start+0x13c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_TIM_PWM_Start+0xfa>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_TIM_PWM_Start+0x140>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d111      	bne.n	8002776 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b06      	cmp	r3, #6
 8002762:	d010      	beq.n	8002786 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	e007      	b.n	8002786 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800

0800279c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fb04 	bl	8002dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a29      	ldr	r2, [pc, #164]	; (8002860 <HAL_TIM_PWM_Stop+0xc4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d117      	bne.n	80027ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_TIM_PWM_Stop+0x52>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	f240 4344 	movw	r3, #1092	; 0x444
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_TIM_PWM_Stop+0x52>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <HAL_TIM_PWM_Stop+0x82>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	f240 4344 	movw	r3, #1092	; 0x444
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d107      	bne.n	800281e <HAL_TIM_PWM_Stop+0x82>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <HAL_TIM_PWM_Stop+0x92>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800282c:	e013      	b.n	8002856 <HAL_TIM_PWM_Stop+0xba>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d104      	bne.n	800283e <HAL_TIM_PWM_Stop+0xa2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800283c:	e00b      	b.n	8002856 <HAL_TIM_PWM_Stop+0xba>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d104      	bne.n	800284e <HAL_TIM_PWM_Stop+0xb2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284c:	e003      	b.n	8002856 <HAL_TIM_PWM_Stop+0xba>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40012c00 	.word	0x40012c00

08002864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800287e:	2302      	movs	r3, #2
 8002880:	e0ae      	b.n	80029e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b0c      	cmp	r3, #12
 800288e:	f200 809f 	bhi.w	80029d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002892:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028cd 	.word	0x080028cd
 800289c:	080029d1 	.word	0x080029d1
 80028a0:	080029d1 	.word	0x080029d1
 80028a4:	080029d1 	.word	0x080029d1
 80028a8:	0800290d 	.word	0x0800290d
 80028ac:	080029d1 	.word	0x080029d1
 80028b0:	080029d1 	.word	0x080029d1
 80028b4:	080029d1 	.word	0x080029d1
 80028b8:	0800294f 	.word	0x0800294f
 80028bc:	080029d1 	.word	0x080029d1
 80028c0:	080029d1 	.word	0x080029d1
 80028c4:	080029d1 	.word	0x080029d1
 80028c8:	0800298f 	.word	0x0800298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f8ea 	bl	8002aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0208 	orr.w	r2, r2, #8
 80028e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0204 	bic.w	r2, r2, #4
 80028f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6999      	ldr	r1, [r3, #24]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	619a      	str	r2, [r3, #24]
      break;
 800290a:	e064      	b.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f930 	bl	8002b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6999      	ldr	r1, [r3, #24]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	021a      	lsls	r2, r3, #8
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	619a      	str	r2, [r3, #24]
      break;
 800294c:	e043      	b.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f979 	bl	8002c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0208 	orr.w	r2, r2, #8
 8002968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0204 	bic.w	r2, r2, #4
 8002978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69d9      	ldr	r1, [r3, #28]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	61da      	str	r2, [r3, #28]
      break;
 800298c:	e023      	b.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f9c3 	bl	8002d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69d9      	ldr	r1, [r3, #28]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	021a      	lsls	r2, r3, #8
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	61da      	str	r2, [r3, #28]
      break;
 80029ce:	e002      	b.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	75fb      	strb	r3, [r7, #23]
      break;
 80029d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <TIM_Base_SetConfig+0xb8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_Base_SetConfig+0x30>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d007      	beq.n	8002a18 <TIM_Base_SetConfig+0x30>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <TIM_Base_SetConfig+0xbc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0x30>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <TIM_Base_SetConfig+0xc0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d108      	bne.n	8002a2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <TIM_Base_SetConfig+0xb8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <TIM_Base_SetConfig+0x62>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d007      	beq.n	8002a4a <TIM_Base_SetConfig+0x62>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <TIM_Base_SetConfig+0xbc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d003      	beq.n	8002a4a <TIM_Base_SetConfig+0x62>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <TIM_Base_SetConfig+0xc0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d108      	bne.n	8002a5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <TIM_Base_SetConfig+0xb8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d103      	bne.n	8002a90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	615a      	str	r2, [r3, #20]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800

08002aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f023 0201 	bic.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <TIM_OC1_SetConfig+0xc8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d10c      	bne.n	8002b22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0308 	bic.w	r3, r3, #8
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <TIM_OC1_SetConfig+0xc8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d111      	bne.n	8002b4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	621a      	str	r2, [r3, #32]
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00

08002b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f023 0210 	bic.w	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0320 	bic.w	r3, r3, #32
 8002bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <TIM_OC2_SetConfig+0xd0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d10d      	bne.n	8002bf4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <TIM_OC2_SetConfig+0xd0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d113      	bne.n	8002c24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40012c00 	.word	0x40012c00

08002c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <TIM_OC3_SetConfig+0xd0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10d      	bne.n	8002cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <TIM_OC3_SetConfig+0xd0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d113      	bne.n	8002cf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	621a      	str	r2, [r3, #32]
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40012c00 	.word	0x40012c00

08002d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	031b      	lsls	r3, r3, #12
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <TIM_OC4_SetConfig+0x98>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d109      	bne.n	8002d94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	40012c00 	.word	0x40012c00

08002dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2201      	movs	r2, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	401a      	ands	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e046      	b.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00e      	beq.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e68:	d009      	beq.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10c      	bne.n	8002e98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800

08002ec0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e03d      	b.n	8002f58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
	...

08002f64 <__libc_init_array>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	2600      	movs	r6, #0
 8002f68:	4d0c      	ldr	r5, [pc, #48]	; (8002f9c <__libc_init_array+0x38>)
 8002f6a:	4c0d      	ldr	r4, [pc, #52]	; (8002fa0 <__libc_init_array+0x3c>)
 8002f6c:	1b64      	subs	r4, r4, r5
 8002f6e:	10a4      	asrs	r4, r4, #2
 8002f70:	42a6      	cmp	r6, r4
 8002f72:	d109      	bne.n	8002f88 <__libc_init_array+0x24>
 8002f74:	f000 f822 	bl	8002fbc <_init>
 8002f78:	2600      	movs	r6, #0
 8002f7a:	4d0a      	ldr	r5, [pc, #40]	; (8002fa4 <__libc_init_array+0x40>)
 8002f7c:	4c0a      	ldr	r4, [pc, #40]	; (8002fa8 <__libc_init_array+0x44>)
 8002f7e:	1b64      	subs	r4, r4, r5
 8002f80:	10a4      	asrs	r4, r4, #2
 8002f82:	42a6      	cmp	r6, r4
 8002f84:	d105      	bne.n	8002f92 <__libc_init_array+0x2e>
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
 8002f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8c:	4798      	blx	r3
 8002f8e:	3601      	adds	r6, #1
 8002f90:	e7ee      	b.n	8002f70 <__libc_init_array+0xc>
 8002f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f96:	4798      	blx	r3
 8002f98:	3601      	adds	r6, #1
 8002f9a:	e7f2      	b.n	8002f82 <__libc_init_array+0x1e>
 8002f9c:	08003014 	.word	0x08003014
 8002fa0:	08003014 	.word	0x08003014
 8002fa4:	08003014 	.word	0x08003014
 8002fa8:	08003018 	.word	0x08003018

08002fac <memset>:
 8002fac:	4603      	mov	r3, r0
 8002fae:	4402      	add	r2, r0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <memset+0xa>
 8002fb4:	4770      	bx	lr
 8002fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fba:	e7f9      	b.n	8002fb0 <memset+0x4>

08002fbc <_init>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr

08002fc8 <_fini>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr
