
27_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002214  08002214  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002214  08002214  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002214  08002214  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002214  08002214  00012214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002218  08002218  00012218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800221c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000078  08002294  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002294  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f45  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c8  00000000  00000000  00027fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  000294b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  00029df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016595  00000000  00000000  0002a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094b5  00000000  00000000  00040c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ffc  00000000  00000000  0004a0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce0de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002638  00000000  00000000  000ce130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080021d8 	.word	0x080021d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080021d8 	.word	0x080021d8

0800014c <display_fnd>:
FND sel[4] ={
		{GPIOA, GPIO_PIN_10}, {GPIOA, GPIO_PIN_11},
		{GPIOC, GPIO_PIN_4}, {GPIOC, GPIO_PIN_3}
};

void display_fnd(uint8_t data, uint8_t position, uint32_t time) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	603a      	str	r2, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	460b      	mov	r3, r1
 800015a:	71bb      	strb	r3, [r7, #6]
   int i;
   for(i = 0; i < 4; i++) {
 800015c:	2300      	movs	r3, #0
 800015e:	60fb      	str	r3, [r7, #12]
 8000160:	e021      	b.n	80001a6 <display_fnd+0x5a>
      if(i == position) {
 8000162:	79bb      	ldrb	r3, [r7, #6]
 8000164:	68fa      	ldr	r2, [r7, #12]
 8000166:	429a      	cmp	r2, r3
 8000168:	d10d      	bne.n	8000186 <display_fnd+0x3a>
         HAL_GPIO_WritePin(sel[i].port, sel[i].pin, GPIO_PIN_SET);
 800016a:	4a2a      	ldr	r2, [pc, #168]	; (8000214 <display_fnd+0xc8>)
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000172:	4a28      	ldr	r2, [pc, #160]	; (8000214 <display_fnd+0xc8>)
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	00db      	lsls	r3, r3, #3
 8000178:	4413      	add	r3, r2
 800017a:	889b      	ldrh	r3, [r3, #4]
 800017c:	2201      	movs	r2, #1
 800017e:	4619      	mov	r1, r3
 8000180:	f000 fedf 	bl	8000f42 <HAL_GPIO_WritePin>
 8000184:	e00c      	b.n	80001a0 <display_fnd+0x54>
      } else {
         HAL_GPIO_WritePin(sel[i].port, sel[i].pin, GPIO_PIN_RESET);
 8000186:	4a23      	ldr	r2, [pc, #140]	; (8000214 <display_fnd+0xc8>)
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800018e:	4a21      	ldr	r2, [pc, #132]	; (8000214 <display_fnd+0xc8>)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	00db      	lsls	r3, r3, #3
 8000194:	4413      	add	r3, r2
 8000196:	889b      	ldrh	r3, [r3, #4]
 8000198:	2200      	movs	r2, #0
 800019a:	4619      	mov	r1, r3
 800019c:	f000 fed1 	bl	8000f42 <HAL_GPIO_WritePin>
   for(i = 0; i < 4; i++) {
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	3301      	adds	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	2b03      	cmp	r3, #3
 80001aa:	ddda      	ble.n	8000162 <display_fnd+0x16>
      }
   }
   for(i = 0; i < 8; i++) {
 80001ac:	2300      	movs	r3, #0
 80001ae:	60fb      	str	r3, [r7, #12]
 80001b0:	e025      	b.n	80001fe <display_fnd+0xb2>
      if((data & (1 << i)) != 0){
 80001b2:	79fa      	ldrb	r2, [r7, #7]
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	fa42 f303 	asr.w	r3, r2, r3
 80001ba:	f003 0301 	and.w	r3, r3, #1
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d00d      	beq.n	80001de <display_fnd+0x92>
         HAL_GPIO_WritePin(value[i].port, value[i].pin, GPIO_PIN_SET);
 80001c2:	4a15      	ldr	r2, [pc, #84]	; (8000218 <display_fnd+0xcc>)
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001ca:	4a13      	ldr	r2, [pc, #76]	; (8000218 <display_fnd+0xcc>)
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	889b      	ldrh	r3, [r3, #4]
 80001d4:	2201      	movs	r2, #1
 80001d6:	4619      	mov	r1, r3
 80001d8:	f000 feb3 	bl	8000f42 <HAL_GPIO_WritePin>
 80001dc:	e00c      	b.n	80001f8 <display_fnd+0xac>
      } else {
         HAL_GPIO_WritePin(value[i].port, value[i].pin, GPIO_PIN_RESET);
 80001de:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <display_fnd+0xcc>)
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001e6:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <display_fnd+0xcc>)
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	00db      	lsls	r3, r3, #3
 80001ec:	4413      	add	r3, r2
 80001ee:	889b      	ldrh	r3, [r3, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	4619      	mov	r1, r3
 80001f4:	f000 fea5 	bl	8000f42 <HAL_GPIO_WritePin>
   for(i = 0; i < 8; i++) {
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2b07      	cmp	r3, #7
 8000202:	ddd6      	ble.n	80001b2 <display_fnd+0x66>
      }
   }
   HAL_Delay(time);
 8000204:	6838      	ldr	r0, [r7, #0]
 8000206:	f000 fbcf 	bl	80009a8 <HAL_Delay>
}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000004c 	.word	0x2000004c
 8000218:	2000000c 	.word	0x2000000c

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb60 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f89c 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f956 	bl	80004d8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800022c:	f000 f8de 	bl	80003ec <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_1000 = led_ccr1 / 1000;
 8000230:	4b42      	ldr	r3, [pc, #264]	; (800033c <main+0x120>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	b29b      	uxth	r3, r3
 8000236:	4a42      	ldr	r2, [pc, #264]	; (8000340 <main+0x124>)
 8000238:	fba2 2303 	umull	r2, r3, r2, r3
 800023c:	099b      	lsrs	r3, r3, #6
 800023e:	b29a      	uxth	r2, r3
 8000240:	4b40      	ldr	r3, [pc, #256]	; (8000344 <main+0x128>)
 8000242:	801a      	strh	r2, [r3, #0]
	  led_100 = (led_ccr1 % 1000) / 100;
 8000244:	4b3d      	ldr	r3, [pc, #244]	; (800033c <main+0x120>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	b29b      	uxth	r3, r3
 800024a:	4a3d      	ldr	r2, [pc, #244]	; (8000340 <main+0x124>)
 800024c:	fba2 1203 	umull	r1, r2, r2, r3
 8000250:	0992      	lsrs	r2, r2, #6
 8000252:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000256:	fb01 f202 	mul.w	r2, r1, r2
 800025a:	1a9b      	subs	r3, r3, r2
 800025c:	b29b      	uxth	r3, r3
 800025e:	4a3a      	ldr	r2, [pc, #232]	; (8000348 <main+0x12c>)
 8000260:	fba2 2303 	umull	r2, r3, r2, r3
 8000264:	095b      	lsrs	r3, r3, #5
 8000266:	b29a      	uxth	r2, r3
 8000268:	4b38      	ldr	r3, [pc, #224]	; (800034c <main+0x130>)
 800026a:	801a      	strh	r2, [r3, #0]
	  led_10 = ((led_ccr1 % 1000) % 100) / 10;
 800026c:	4b33      	ldr	r3, [pc, #204]	; (800033c <main+0x120>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	b29b      	uxth	r3, r3
 8000272:	4a33      	ldr	r2, [pc, #204]	; (8000340 <main+0x124>)
 8000274:	fba2 1203 	umull	r1, r2, r2, r3
 8000278:	0992      	lsrs	r2, r2, #6
 800027a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800027e:	fb01 f202 	mul.w	r2, r1, r2
 8000282:	1a9b      	subs	r3, r3, r2
 8000284:	b29b      	uxth	r3, r3
 8000286:	4a30      	ldr	r2, [pc, #192]	; (8000348 <main+0x12c>)
 8000288:	fba2 1203 	umull	r1, r2, r2, r3
 800028c:	0952      	lsrs	r2, r2, #5
 800028e:	2164      	movs	r1, #100	; 0x64
 8000290:	fb01 f202 	mul.w	r2, r1, r2
 8000294:	1a9b      	subs	r3, r3, r2
 8000296:	b29b      	uxth	r3, r3
 8000298:	4a2d      	ldr	r2, [pc, #180]	; (8000350 <main+0x134>)
 800029a:	fba2 2303 	umull	r2, r3, r2, r3
 800029e:	08db      	lsrs	r3, r3, #3
 80002a0:	b29a      	uxth	r2, r3
 80002a2:	4b2c      	ldr	r3, [pc, #176]	; (8000354 <main+0x138>)
 80002a4:	801a      	strh	r2, [r3, #0]
	  led_1 = ((led_ccr1 % 1000) % 100) % 10;
 80002a6:	4b25      	ldr	r3, [pc, #148]	; (800033c <main+0x120>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4a24      	ldr	r2, [pc, #144]	; (8000340 <main+0x124>)
 80002ae:	fba2 1203 	umull	r1, r2, r2, r3
 80002b2:	0992      	lsrs	r2, r2, #6
 80002b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002b8:	fb01 f202 	mul.w	r2, r1, r2
 80002bc:	1a9b      	subs	r3, r3, r2
 80002be:	b29b      	uxth	r3, r3
 80002c0:	4a21      	ldr	r2, [pc, #132]	; (8000348 <main+0x12c>)
 80002c2:	fba2 1203 	umull	r1, r2, r2, r3
 80002c6:	0952      	lsrs	r2, r2, #5
 80002c8:	2164      	movs	r1, #100	; 0x64
 80002ca:	fb01 f202 	mul.w	r2, r1, r2
 80002ce:	1a9b      	subs	r3, r3, r2
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <main+0x134>)
 80002d4:	fba3 1302 	umull	r1, r3, r3, r2
 80002d8:	08d9      	lsrs	r1, r3, #3
 80002da:	460b      	mov	r3, r1
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	440b      	add	r3, r1
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <main+0x13c>)
 80002e8:	801a      	strh	r2, [r3, #0]

	  display_fnd(number[led_1000], 3, 5);
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <main+0x128>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <main+0x140>)
 80002f2:	5c9b      	ldrb	r3, [r3, r2]
 80002f4:	2205      	movs	r2, #5
 80002f6:	2103      	movs	r1, #3
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff27 	bl	800014c <display_fnd>
	  display_fnd(number[led_100], 2, 5);
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <main+0x130>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <main+0x140>)
 8000306:	5c9b      	ldrb	r3, [r3, r2]
 8000308:	2205      	movs	r2, #5
 800030a:	2102      	movs	r1, #2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff1d 	bl	800014c <display_fnd>
	  display_fnd(number[led_10], 1, 5);
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <main+0x138>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <main+0x140>)
 800031a:	5c9b      	ldrb	r3, [r3, r2]
 800031c:	2205      	movs	r2, #5
 800031e:	2101      	movs	r1, #1
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff13 	bl	800014c <display_fnd>
	  display_fnd(number[led_1], 0, 5);
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <main+0x13c>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <main+0x140>)
 800032e:	5c9b      	ldrb	r3, [r3, r2]
 8000330:	2205      	movs	r2, #5
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff09 	bl	800014c <display_fnd>
	  led_1000 = led_ccr1 / 1000;
 800033a:	e779      	b.n	8000230 <main+0x14>
 800033c:	200000dc 	.word	0x200000dc
 8000340:	10624dd3 	.word	0x10624dd3
 8000344:	200000de 	.word	0x200000de
 8000348:	51eb851f 	.word	0x51eb851f
 800034c:	200000e0 	.word	0x200000e0
 8000350:	cccccccd 	.word	0xcccccccd
 8000354:	200000e2 	.word	0x200000e2
 8000358:	200000e4 	.word	0x200000e4
 800035c:	20000000 	.word	0x20000000

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b090      	sub	sp, #64	; 0x40
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f001 ff2a 	bl	80021c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000382:	2301      	movs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000386:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800038a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000390:	2301      	movs	r3, #1
 8000392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000394:	2302      	movs	r3, #2
 8000396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fdfb 	bl	8000fa4 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003b4:	f000 f998 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2302      	movs	r3, #2
 80003be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 f868 	bl	80014a8 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003de:	f000 f983 	bl	80006e8 <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	; 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08e      	sub	sp, #56	; 0x38
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000400:	f107 0320 	add.w	r3, r7, #32
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
 8000418:	615a      	str	r2, [r3, #20]
 800041a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800041c:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <MX_TIM3_Init+0xe4>)
 800041e:	4a2d      	ldr	r2, [pc, #180]	; (80004d4 <MX_TIM3_Init+0xe8>)
 8000420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000422:	4b2b      	ldr	r3, [pc, #172]	; (80004d0 <MX_TIM3_Init+0xe4>)
 8000424:	2247      	movs	r2, #71	; 0x47
 8000426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000428:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <MX_TIM3_Init+0xe4>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800042e:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <MX_TIM3_Init+0xe4>)
 8000430:	f242 720f 	movw	r2, #9999	; 0x270f
 8000434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000436:	4b26      	ldr	r3, [pc, #152]	; (80004d0 <MX_TIM3_Init+0xe4>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800043c:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <MX_TIM3_Init+0xe4>)
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000442:	4823      	ldr	r0, [pc, #140]	; (80004d0 <MX_TIM3_Init+0xe4>)
 8000444:	f001 f98c 	bl	8001760 <HAL_TIM_Base_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800044e:	f000 f94b 	bl	80006e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800045c:	4619      	mov	r1, r3
 800045e:	481c      	ldr	r0, [pc, #112]	; (80004d0 <MX_TIM3_Init+0xe4>)
 8000460:	f001 fae8 	bl	8001a34 <HAL_TIM_ConfigClockSource>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800046a:	f000 f93d 	bl	80006e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800046e:	4818      	ldr	r0, [pc, #96]	; (80004d0 <MX_TIM3_Init+0xe4>)
 8000470:	f001 f9c5 	bl	80017fe <HAL_TIM_PWM_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800047a:	f000 f935 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000486:	f107 0320 	add.w	r3, r7, #32
 800048a:	4619      	mov	r1, r3
 800048c:	4810      	ldr	r0, [pc, #64]	; (80004d0 <MX_TIM3_Init+0xe4>)
 800048e:	f001 fe19 	bl	80020c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000498:	f000 f926 	bl	80006e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800049c:	2360      	movs	r3, #96	; 0x60
 800049e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	4807      	ldr	r0, [pc, #28]	; (80004d0 <MX_TIM3_Init+0xe4>)
 80004b4:	f001 f9fc 	bl	80018b0 <HAL_TIM_PWM_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80004be:	f000 f913 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004c2:	4803      	ldr	r0, [pc, #12]	; (80004d0 <MX_TIM3_Init+0xe4>)
 80004c4:	f000 f966 	bl	8000794 <HAL_TIM_MspPostInit>

}
 80004c8:	bf00      	nop
 80004ca:	3738      	adds	r7, #56	; 0x38
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000094 	.word	0x20000094
 80004d4:	40000400 	.word	0x40000400

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	4b4b      	ldr	r3, [pc, #300]	; (800061c <MX_GPIO_Init+0x144>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a4a      	ldr	r2, [pc, #296]	; (800061c <MX_GPIO_Init+0x144>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b48      	ldr	r3, [pc, #288]	; (800061c <MX_GPIO_Init+0x144>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0310 	and.w	r3, r3, #16
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000504:	4b45      	ldr	r3, [pc, #276]	; (800061c <MX_GPIO_Init+0x144>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a44      	ldr	r2, [pc, #272]	; (800061c <MX_GPIO_Init+0x144>)
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b42      	ldr	r3, [pc, #264]	; (800061c <MX_GPIO_Init+0x144>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0320 	and.w	r3, r3, #32
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b3f      	ldr	r3, [pc, #252]	; (800061c <MX_GPIO_Init+0x144>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a3e      	ldr	r2, [pc, #248]	; (800061c <MX_GPIO_Init+0x144>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b3c      	ldr	r3, [pc, #240]	; (800061c <MX_GPIO_Init+0x144>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000534:	4b39      	ldr	r3, [pc, #228]	; (800061c <MX_GPIO_Init+0x144>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a38      	ldr	r2, [pc, #224]	; (800061c <MX_GPIO_Init+0x144>)
 800053a:	f043 0308 	orr.w	r3, r3, #8
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b36      	ldr	r3, [pc, #216]	; (800061c <MX_GPIO_Init+0x144>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0308 	and.w	r3, r3, #8
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2118      	movs	r1, #24
 8000550:	4833      	ldr	r0, [pc, #204]	; (8000620 <MX_GPIO_Init+0x148>)
 8000552:	f000 fcf6 	bl	8000f42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000556:	2200      	movs	r2, #0
 8000558:	21ff      	movs	r1, #255	; 0xff
 800055a:	4832      	ldr	r0, [pc, #200]	; (8000624 <MX_GPIO_Init+0x14c>)
 800055c:	f000 fcf1 	bl	8000f42 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000566:	4830      	ldr	r0, [pc, #192]	; (8000628 <MX_GPIO_Init+0x150>)
 8000568:	f000 fceb 	bl	8000f42 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800056c:	2318      	movs	r3, #24
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2302      	movs	r3, #2
 800057a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	4827      	ldr	r0, [pc, #156]	; (8000620 <MX_GPIO_Init+0x148>)
 8000584:	f000 fb42 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000588:	2310      	movs	r3, #16
 800058a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <MX_GPIO_Init+0x154>)
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4823      	ldr	r0, [pc, #140]	; (8000628 <MX_GPIO_Init+0x150>)
 800059c:	f000 fb36 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005a0:	23ff      	movs	r3, #255	; 0xff
 80005a2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	481b      	ldr	r0, [pc, #108]	; (8000624 <MX_GPIO_Init+0x14c>)
 80005b8:	f000 fb28 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80005bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4619      	mov	r1, r3
 80005d4:	4814      	ldr	r0, [pc, #80]	; (8000628 <MX_GPIO_Init+0x150>)
 80005d6:	f000 fb19 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005da:	2304      	movs	r3, #4
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_GPIO_Init+0x154>)
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	4810      	ldr	r0, [pc, #64]	; (8000630 <MX_GPIO_Init+0x158>)
 80005ee:	f000 fb0d 	bl	8000c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2008      	movs	r0, #8
 80005f8:	f000 fad1 	bl	8000b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005fc:	2008      	movs	r0, #8
 80005fe:	f000 faea 	bl	8000bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	200a      	movs	r0, #10
 8000608:	f000 fac9 	bl	8000b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800060c:	200a      	movs	r0, #10
 800060e:	f000 fae2 	bl	8000bd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	40011000 	.word	0x40011000
 8000624:	40010c00 	.word	0x40010c00
 8000628:	40010800 	.word	0x40010800
 800062c:	10210000 	.word	0x10210000
 8000630:	40011400 	.word	0x40011400

08000634 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)) {
 800063e:	2110      	movs	r1, #16
 8000640:	4825      	ldr	r0, [pc, #148]	; (80006d8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000642:	f000 fc67 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d11d      	bne.n	8000688 <HAL_GPIO_EXTI_Callback+0x54>
	  if(led_ccr1 != 1000){
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	b29b      	uxth	r3, r3
 8000652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000656:	d00d      	beq.n	8000674 <HAL_GPIO_EXTI_Callback+0x40>
		  led_ccr1 += 50;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b29b      	uxth	r3, r3
 800065e:	3332      	adds	r3, #50	; 0x32
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000664:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, led_ccr1);
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <HAL_GPIO_EXTI_Callback+0xac>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
 8000672:	e009      	b.n	8000688 <HAL_GPIO_EXTI_Callback+0x54>
	  }else {
		  led_ccr1 = 1000;
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800067a:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, led_ccr1);
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
	  }
  }

  if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 8000688:	2104      	movs	r1, #4
 800068a:	4816      	ldr	r0, [pc, #88]	; (80006e4 <HAL_GPIO_EXTI_Callback+0xb0>)
 800068c:	f000 fc42 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d11b      	bne.n	80006ce <HAL_GPIO_EXTI_Callback+0x9a>
	  if(led_ccr1 != 0){
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	b29b      	uxth	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00d      	beq.n	80006bc <HAL_GPIO_EXTI_Callback+0x88>
		  led_ccr1 -= 50;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	3b32      	subs	r3, #50	; 0x32
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 80006ac:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, led_ccr1);
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_GPIO_EXTI_Callback+0xac>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
	  }else {
		  led_ccr1 = 0;
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, led_ccr1);
	  }
  }
}
 80006ba:	e008      	b.n	80006ce <HAL_GPIO_EXTI_Callback+0x9a>
		  led_ccr1 = 0;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, led_ccr1);
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_GPIO_EXTI_Callback+0xa8>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_GPIO_EXTI_Callback+0xac>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010800 	.word	0x40010800
 80006dc:	200000dc 	.word	0x200000dc
 80006e0:	20000094 	.word	0x20000094
 80006e4:	40011400 	.word	0x40011400

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <HAL_MspInit+0x5c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x5c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_MspInit+0x60>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_MspInit+0x60>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000

08000758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <HAL_TIM_Base_MspInit+0x34>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d10b      	bne.n	8000782 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_TIM_Base_MspInit+0x38>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_TIM_Base_MspInit+0x38>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_TIM_Base_MspInit+0x38>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40000400 	.word	0x40000400
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <HAL_TIM_MspPostInit+0x7c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d129      	bne.n	8000808 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_TIM_MspPostInit+0x80>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a16      	ldr	r2, [pc, #88]	; (8000814 <HAL_TIM_MspPostInit+0x80>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_TIM_MspPostInit+0x80>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <HAL_TIM_MspPostInit+0x84>)
 80007e0:	f000 fa14 	bl	8000c0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_TIM_MspPostInit+0x88>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000800:	61fb      	str	r3, [r7, #28]
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_TIM_MspPostInit+0x88>)
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40000400 	.word	0x40000400
 8000814:	40021000 	.word	0x40021000
 8000818:	40011000 	.word	0x40011000
 800081c:	40010000 	.word	0x40010000

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000866:	f000 f883 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000872:	2004      	movs	r0, #4
 8000874:	f000 fb7e 	bl	8000f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000880:	2010      	movs	r0, #16
 8000882:	f000 fb77 	bl	8000f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
	...

08000898 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff fff7 	bl	800088a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800089e:	490c      	ldr	r1, [pc, #48]	; (80008d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b4:	4c09      	ldr	r4, [pc, #36]	; (80008dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f001 fc5d 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c6:	f7ff fca9 	bl	800021c <main>
  bx lr
 80008ca:	4770      	bx	lr
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80008d4:	0800221c 	.word	0x0800221c
  ldr r2, =_sbss
 80008d8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80008dc:	200000ec 	.word	0x200000ec

080008e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_2_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_Init+0x28>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_Init+0x28>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 f947 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fa:	200f      	movs	r0, #15
 80008fc:	f000 f808 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000900:	f7ff fef8 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x54>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x58>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f95f 	bl	8000bf2 <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e00e      	b.n	800095c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d80a      	bhi.n	800095a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 f927 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <HAL_InitTick+0x5c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000006c 	.word	0x2000006c
 8000968:	20000074 	.word	0x20000074
 800096c:	20000070 	.word	0x20000070

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_IncTick+0x1c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x20>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <HAL_IncTick+0x20>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	20000074 	.word	0x20000074
 8000990:	200000e8 	.word	0x200000e8

08000994 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <HAL_GetTick+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	200000e8 	.word	0x200000e8

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff fff0 	bl	8000994 <HAL_GetTick>
 80009b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ce:	bf00      	nop
 80009d0:	f7ff ffe0 	bl	8000994 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000074 	.word	0x20000074

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4906      	ldr	r1, [pc, #24]	; (8000a88 <__NVIC_EnableIRQ+0x34>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff90 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff2d 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff42 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff90 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5f 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff35 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffa2 	bl	8000b44 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1e:	e169      	b.n	8000ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c20:	2201      	movs	r2, #1
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	f040 8158 	bne.w	8000eee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a9a      	ldr	r2, [pc, #616]	; (8000eac <HAL_GPIO_Init+0x2a0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d05e      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c48:	4a98      	ldr	r2, [pc, #608]	; (8000eac <HAL_GPIO_Init+0x2a0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d875      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c4e:	4a98      	ldr	r2, [pc, #608]	; (8000eb0 <HAL_GPIO_Init+0x2a4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d058      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c54:	4a96      	ldr	r2, [pc, #600]	; (8000eb0 <HAL_GPIO_Init+0x2a4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d86f      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c5a:	4a96      	ldr	r2, [pc, #600]	; (8000eb4 <HAL_GPIO_Init+0x2a8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d052      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c60:	4a94      	ldr	r2, [pc, #592]	; (8000eb4 <HAL_GPIO_Init+0x2a8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d869      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c66:	4a94      	ldr	r2, [pc, #592]	; (8000eb8 <HAL_GPIO_Init+0x2ac>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d04c      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c6c:	4a92      	ldr	r2, [pc, #584]	; (8000eb8 <HAL_GPIO_Init+0x2ac>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d863      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c72:	4a92      	ldr	r2, [pc, #584]	; (8000ebc <HAL_GPIO_Init+0x2b0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d046      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
 8000c78:	4a90      	ldr	r2, [pc, #576]	; (8000ebc <HAL_GPIO_Init+0x2b0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d85d      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c7e:	2b12      	cmp	r3, #18
 8000c80:	d82a      	bhi.n	8000cd8 <HAL_GPIO_Init+0xcc>
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d859      	bhi.n	8000d3a <HAL_GPIO_Init+0x12e>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <HAL_GPIO_Init+0x80>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000d07 	.word	0x08000d07
 8000c90:	08000ce1 	.word	0x08000ce1
 8000c94:	08000cf3 	.word	0x08000cf3
 8000c98:	08000d35 	.word	0x08000d35
 8000c9c:	08000d3b 	.word	0x08000d3b
 8000ca0:	08000d3b 	.word	0x08000d3b
 8000ca4:	08000d3b 	.word	0x08000d3b
 8000ca8:	08000d3b 	.word	0x08000d3b
 8000cac:	08000d3b 	.word	0x08000d3b
 8000cb0:	08000d3b 	.word	0x08000d3b
 8000cb4:	08000d3b 	.word	0x08000d3b
 8000cb8:	08000d3b 	.word	0x08000d3b
 8000cbc:	08000d3b 	.word	0x08000d3b
 8000cc0:	08000d3b 	.word	0x08000d3b
 8000cc4:	08000d3b 	.word	0x08000d3b
 8000cc8:	08000d3b 	.word	0x08000d3b
 8000ccc:	08000d3b 	.word	0x08000d3b
 8000cd0:	08000ce9 	.word	0x08000ce9
 8000cd4:	08000cfd 	.word	0x08000cfd
 8000cd8:	4a79      	ldr	r2, [pc, #484]	; (8000ec0 <HAL_GPIO_Init+0x2b4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d013      	beq.n	8000d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cde:	e02c      	b.n	8000d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	623b      	str	r3, [r7, #32]
          break;
 8000ce6:	e029      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	3304      	adds	r3, #4
 8000cee:	623b      	str	r3, [r7, #32]
          break;
 8000cf0:	e024      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	3308      	adds	r3, #8
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e01f      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	330c      	adds	r3, #12
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	e01a      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	623b      	str	r3, [r7, #32]
          break;
 8000d12:	e013      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d105      	bne.n	8000d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	611a      	str	r2, [r3, #16]
          break;
 8000d26:	e009      	b.n	8000d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	615a      	str	r2, [r3, #20]
          break;
 8000d32:	e003      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x130>
          break;
 8000d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	2bff      	cmp	r3, #255	; 0xff
 8000d40:	d801      	bhi.n	8000d46 <HAL_GPIO_Init+0x13a>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	e001      	b.n	8000d4a <HAL_GPIO_Init+0x13e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	2bff      	cmp	r3, #255	; 0xff
 8000d50:	d802      	bhi.n	8000d58 <HAL_GPIO_Init+0x14c>
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x152>
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	3b08      	subs	r3, #8
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	210f      	movs	r1, #15
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	6a39      	ldr	r1, [r7, #32]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 80b1 	beq.w	8000eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_GPIO_Init+0x2b8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a4c      	ldr	r2, [pc, #304]	; (8000ec4 <HAL_GPIO_Init+0x2b8>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <HAL_GPIO_Init+0x2b8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <HAL_GPIO_Init+0x2bc>)
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a40      	ldr	r2, [pc, #256]	; (8000ecc <HAL_GPIO_Init+0x2c0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d013      	beq.n	8000df8 <HAL_GPIO_Init+0x1ec>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a3f      	ldr	r2, [pc, #252]	; (8000ed0 <HAL_GPIO_Init+0x2c4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00d      	beq.n	8000df4 <HAL_GPIO_Init+0x1e8>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <HAL_GPIO_Init+0x2c8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x1e4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a3d      	ldr	r2, [pc, #244]	; (8000ed8 <HAL_GPIO_Init+0x2cc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_GPIO_Init+0x1e0>
 8000de8:	2303      	movs	r3, #3
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000dec:	2304      	movs	r3, #4
 8000dee:	e004      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e002      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <HAL_GPIO_Init+0x1ee>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dfc:	f002 0203 	and.w	r2, r2, #3
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	4093      	lsls	r3, r2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e0a:	492f      	ldr	r1, [pc, #188]	; (8000ec8 <HAL_GPIO_Init+0x2bc>)
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	492c      	ldr	r1, [pc, #176]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	608b      	str	r3, [r1, #8]
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4928      	ldr	r1, [pc, #160]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	4922      	ldr	r1, [pc, #136]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60cb      	str	r3, [r1, #12]
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	491e      	ldr	r1, [pc, #120]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	4918      	ldr	r1, [pc, #96]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	604b      	str	r3, [r1, #4]
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4914      	ldr	r1, [pc, #80]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d021      	beq.n	8000ee0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	490e      	ldr	r1, [pc, #56]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e021      	b.n	8000eee <HAL_GPIO_Init+0x2e2>
 8000eaa:	bf00      	nop
 8000eac:	10320000 	.word	0x10320000
 8000eb0:	10310000 	.word	0x10310000
 8000eb4:	10220000 	.word	0x10220000
 8000eb8:	10210000 	.word	0x10210000
 8000ebc:	10120000 	.word	0x10120000
 8000ec0:	10110000 	.word	0x10110000
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	40010800 	.word	0x40010800
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40011400 	.word	0x40011400
 8000edc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	4909      	ldr	r1, [pc, #36]	; (8000f10 <HAL_GPIO_Init+0x304>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	fa22 f303 	lsr.w	r3, r2, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f47f ae8e 	bne.w	8000c20 <HAL_GPIO_Init+0x14>
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	372c      	adds	r7, #44	; 0x2c
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e001      	b.n	8000f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f52:	787b      	ldrb	r3, [r7, #1]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f58:	887a      	ldrh	r2, [r7, #2]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f5e:	e003      	b.n	8000f68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	041a      	lsls	r2, r3, #16
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	611a      	str	r2, [r3, #16]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb4e 	bl	8000634 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e272      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8087 	beq.w	80010d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc4:	4b92      	ldr	r3, [pc, #584]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d00c      	beq.n	8000fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd0:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d112      	bne.n	8001002 <HAL_RCC_OscConfig+0x5e>
 8000fdc:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d10b      	bne.n	8001002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fea:	4b89      	ldr	r3, [pc, #548]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d06c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x12c>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d168      	bne.n	80010d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e24c      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100a:	d106      	bne.n	800101a <HAL_RCC_OscConfig+0x76>
 800100c:	4b80      	ldr	r3, [pc, #512]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a7f      	ldr	r2, [pc, #508]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e02e      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x98>
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7a      	ldr	r2, [pc, #488]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b78      	ldr	r3, [pc, #480]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a77      	ldr	r2, [pc, #476]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0xbc>
 8001046:	4b72      	ldr	r3, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a71      	ldr	r2, [pc, #452]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a6e      	ldr	r2, [pc, #440]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0xd4>
 8001060:	4b6b      	ldr	r3, [pc, #428]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a6a      	ldr	r2, [pc, #424]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a67      	ldr	r2, [pc, #412]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fc88 	bl	8000994 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fc84 	bl	8000994 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	; 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e200      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0xe4>
 80010a6:	e014      	b.n	80010d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fc74 	bl	8000994 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fc70 	bl	8000994 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e1ec      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x10c>
 80010ce:	e000      	b.n	80010d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d063      	beq.n	80011a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d11c      	bne.n	8001130 <HAL_RCC_OscConfig+0x18c>
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d116      	bne.n	8001130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	4b43      	ldr	r3, [pc, #268]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <HAL_RCC_OscConfig+0x176>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e1c0      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4939      	ldr	r1, [pc, #228]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	e03a      	b.n	80011a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <HAL_RCC_OscConfig+0x270>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff fc29 	bl	8000994 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fc25 	bl	8000994 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e1a1      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4927      	ldr	r1, [pc, #156]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]
 8001178:	e015      	b.n	80011a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_RCC_OscConfig+0x270>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fc08 	bl	8000994 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff fc04 	bl	8000994 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e180      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d03a      	beq.n	8001228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d019      	beq.n	80011ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_RCC_OscConfig+0x274>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fbe8 	bl	8000994 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fbe4 	bl	8000994 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e160      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f000 fa9c 	bl	8001724 <RCC_Delay>
 80011ec:	e01c      	b.n	8001228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_RCC_OscConfig+0x274>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fbce 	bl	8000994 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fa:	e00f      	b.n	800121c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff fbca 	bl	8000994 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d908      	bls.n	800121c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e146      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	42420000 	.word	0x42420000
 8001218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	4b92      	ldr	r3, [pc, #584]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e9      	bne.n	80011fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80a6 	beq.w	8001382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123a:	4b8b      	ldr	r3, [pc, #556]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10d      	bne.n	8001262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b88      	ldr	r3, [pc, #544]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a87      	ldr	r2, [pc, #540]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b85      	ldr	r3, [pc, #532]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125e:	2301      	movs	r3, #1
 8001260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001262:	4b82      	ldr	r3, [pc, #520]	; (800146c <HAL_RCC_OscConfig+0x4c8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126e:	4b7f      	ldr	r3, [pc, #508]	; (800146c <HAL_RCC_OscConfig+0x4c8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7e      	ldr	r2, [pc, #504]	; (800146c <HAL_RCC_OscConfig+0x4c8>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127a:	f7ff fb8b 	bl	8000994 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001282:	f7ff fb87 	bl	8000994 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b64      	cmp	r3, #100	; 0x64
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e103      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	4b75      	ldr	r3, [pc, #468]	; (800146c <HAL_RCC_OscConfig+0x4c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d106      	bne.n	80012b6 <HAL_RCC_OscConfig+0x312>
 80012a8:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a6e      	ldr	r2, [pc, #440]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	e02d      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x334>
 80012be:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a69      	ldr	r2, [pc, #420]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	f023 0301 	bic.w	r3, r3, #1
 80012c8:	6213      	str	r3, [r2, #32]
 80012ca:	4b67      	ldr	r3, [pc, #412]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a66      	ldr	r2, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	6213      	str	r3, [r2, #32]
 80012d6:	e01c      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	d10c      	bne.n	80012fa <HAL_RCC_OscConfig+0x356>
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4a60      	ldr	r2, [pc, #384]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	4b5e      	ldr	r3, [pc, #376]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4a5d      	ldr	r2, [pc, #372]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6213      	str	r3, [r2, #32]
 80012f8:	e00b      	b.n	8001312 <HAL_RCC_OscConfig+0x36e>
 80012fa:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a5a      	ldr	r2, [pc, #360]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	4b58      	ldr	r3, [pc, #352]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a57      	ldr	r2, [pc, #348]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d015      	beq.n	8001346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb3b 	bl	8000994 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f7ff fb37 	bl	8000994 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e0b1      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0ee      	beq.n	8001322 <HAL_RCC_OscConfig+0x37e>
 8001344:	e014      	b.n	8001370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fb25 	bl	8000994 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff fb21 	bl	8000994 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	; 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e09b      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001364:	4b40      	ldr	r3, [pc, #256]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ee      	bne.n	800134e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d105      	bne.n	8001382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a3b      	ldr	r2, [pc, #236]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8087 	beq.w	800149a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b08      	cmp	r3, #8
 8001396:	d061      	beq.n	800145c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d146      	bne.n	800142e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a0:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_RCC_OscConfig+0x4cc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff faf5 	bl	8000994 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff faf1 	bl	8000994 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e06d      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d4:	d108      	bne.n	80013e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	4921      	ldr	r1, [pc, #132]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a19      	ldr	r1, [r3, #32]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	430b      	orrs	r3, r1
 80013fa:	491b      	ldr	r1, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x4cc>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fac5 	bl	8000994 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff fac1 	bl	8000994 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e03d      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x46a>
 800142c:	e035      	b.n	800149a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_RCC_OscConfig+0x4cc>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff faae 	bl	8000994 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff faaa 	bl	8000994 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e026      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x498>
 800145a:	e01e      	b.n	800149a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d107      	bne.n	8001474 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e019      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
 8001468:	40021000 	.word	0x40021000
 800146c:	40007000 	.word	0x40007000
 8001470:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x500>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	429a      	cmp	r2, r3
 8001486:	d106      	bne.n	8001496 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0d0      	b.n	800165e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d910      	bls.n	80014ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0207 	bic.w	r2, r3, #7
 80014d2:	4965      	ldr	r1, [pc, #404]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0b8      	b.n	800165e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001504:	4b59      	ldr	r3, [pc, #356]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a58      	ldr	r2, [pc, #352]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800150e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001526:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	494d      	ldr	r1, [pc, #308]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d040      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	4b47      	ldr	r3, [pc, #284]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d115      	bne.n	8001586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e07f      	b.n	800165e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e073      	b.n	800165e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e06b      	b.n	800165e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f023 0203 	bic.w	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4936      	ldr	r1, [pc, #216]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001598:	f7ff f9fc 	bl	8000994 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a0:	f7ff f9f8 	bl	8000994 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e053      	b.n	800165e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 020c 	and.w	r2, r3, #12
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d1eb      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d210      	bcs.n	80015f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 0207 	bic.w	r2, r3, #7
 80015de:	4922      	ldr	r1, [pc, #136]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e032      	b.n	800165e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	4916      	ldr	r1, [pc, #88]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d009      	beq.n	8001636 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	490e      	ldr	r1, [pc, #56]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001636:	f000 f821 	bl	800167c <HAL_RCC_GetSysClockFreq>
 800163a:	4602      	mov	r2, r0
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	490a      	ldr	r1, [pc, #40]	; (8001670 <HAL_RCC_ClockConfig+0x1c8>)
 8001648:	5ccb      	ldrb	r3, [r1, r3]
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_RCC_ClockConfig+0x1cc>)
 8001650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_RCC_ClockConfig+0x1d0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff f95a 	bl	8000910 <HAL_InitTick>

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000
 800166c:	40021000 	.word	0x40021000
 8001670:	080021f0 	.word	0x080021f0
 8001674:	2000006c 	.word	0x2000006c
 8001678:	20000070 	.word	0x20000070

0800167c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_GetSysClockFreq+0x94>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d002      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x30>
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x36>
 80016aa:	e027      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ae:	613b      	str	r3, [r7, #16]
      break;
 80016b0:	e027      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	0c9b      	lsrs	r3, r3, #18
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d010      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_RCC_GetSysClockFreq+0x94>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	0c5b      	lsrs	r3, r3, #17
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_RCC_GetSysClockFreq+0xa0>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <HAL_RCC_GetSysClockFreq+0x98>)
 80016de:	fb03 f202 	mul.w	r2, r3, r2
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e004      	b.n	80016f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	613b      	str	r3, [r7, #16]
      break;
 80016fa:	e002      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_RCC_GetSysClockFreq+0x98>)
 80016fe:	613b      	str	r3, [r7, #16]
      break;
 8001700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001702:	693b      	ldr	r3, [r7, #16]
}
 8001704:	4618      	mov	r0, r3
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	007a1200 	.word	0x007a1200
 8001718:	08002200 	.word	0x08002200
 800171c:	08002210 	.word	0x08002210
 8001720:	003d0900 	.word	0x003d0900

08001724 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <RCC_Delay+0x34>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <RCC_Delay+0x38>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0a5b      	lsrs	r3, r3, #9
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001740:	bf00      	nop
  }
  while (Delay --);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	60fa      	str	r2, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f9      	bne.n	8001740 <RCC_Delay+0x1c>
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	2000006c 	.word	0x2000006c
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e041      	b.n	80017f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7fe ffe6 	bl	8000758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3304      	adds	r3, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f000 fa10 	bl	8001bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e041      	b.n	8001894 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d106      	bne.n	800182a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f839 	bl	800189c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3304      	adds	r3, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f000 f9c1 	bl	8001bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e0ae      	b.n	8001a2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	f200 809f 	bhi.w	8001a1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	08001919 	.word	0x08001919
 80018e8:	08001a1d 	.word	0x08001a1d
 80018ec:	08001a1d 	.word	0x08001a1d
 80018f0:	08001a1d 	.word	0x08001a1d
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001a1d 	.word	0x08001a1d
 80018fc:	08001a1d 	.word	0x08001a1d
 8001900:	08001a1d 	.word	0x08001a1d
 8001904:	0800199b 	.word	0x0800199b
 8001908:	08001a1d 	.word	0x08001a1d
 800190c:	08001a1d 	.word	0x08001a1d
 8001910:	08001a1d 	.word	0x08001a1d
 8001914:	080019db 	.word	0x080019db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f9b2 	bl	8001c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0208 	orr.w	r2, r2, #8
 8001932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699a      	ldr	r2, [r3, #24]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0204 	bic.w	r2, r2, #4
 8001942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6999      	ldr	r1, [r3, #24]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	619a      	str	r2, [r3, #24]
      break;
 8001956:	e064      	b.n	8001a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f9f8 	bl	8001d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6999      	ldr	r1, [r3, #24]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	021a      	lsls	r2, r3, #8
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	619a      	str	r2, [r3, #24]
      break;
 8001998:	e043      	b.n	8001a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fa41 	bl	8001e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	69da      	ldr	r2, [r3, #28]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0208 	orr.w	r2, r2, #8
 80019b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0204 	bic.w	r2, r2, #4
 80019c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69d9      	ldr	r1, [r3, #28]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	61da      	str	r2, [r3, #28]
      break;
 80019d8:	e023      	b.n	8001a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fa8b 	bl	8001efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69d9      	ldr	r1, [r3, #28]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	021a      	lsls	r2, r3, #8
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	61da      	str	r2, [r3, #28]
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8001a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_TIM_ConfigClockSource+0x1c>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e0b4      	b.n	8001bba <HAL_TIM_ConfigClockSource+0x186>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a88:	d03e      	beq.n	8001b08 <HAL_TIM_ConfigClockSource+0xd4>
 8001a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a8e:	f200 8087 	bhi.w	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a96:	f000 8086 	beq.w	8001ba6 <HAL_TIM_ConfigClockSource+0x172>
 8001a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9e:	d87f      	bhi.n	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa0:	2b70      	cmp	r3, #112	; 0x70
 8001aa2:	d01a      	beq.n	8001ada <HAL_TIM_ConfigClockSource+0xa6>
 8001aa4:	2b70      	cmp	r3, #112	; 0x70
 8001aa6:	d87b      	bhi.n	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa8:	2b60      	cmp	r3, #96	; 0x60
 8001aaa:	d050      	beq.n	8001b4e <HAL_TIM_ConfigClockSource+0x11a>
 8001aac:	2b60      	cmp	r3, #96	; 0x60
 8001aae:	d877      	bhi.n	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab0:	2b50      	cmp	r3, #80	; 0x50
 8001ab2:	d03c      	beq.n	8001b2e <HAL_TIM_ConfigClockSource+0xfa>
 8001ab4:	2b50      	cmp	r3, #80	; 0x50
 8001ab6:	d873      	bhi.n	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab8:	2b40      	cmp	r3, #64	; 0x40
 8001aba:	d058      	beq.n	8001b6e <HAL_TIM_ConfigClockSource+0x13a>
 8001abc:	2b40      	cmp	r3, #64	; 0x40
 8001abe:	d86f      	bhi.n	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac0:	2b30      	cmp	r3, #48	; 0x30
 8001ac2:	d064      	beq.n	8001b8e <HAL_TIM_ConfigClockSource+0x15a>
 8001ac4:	2b30      	cmp	r3, #48	; 0x30
 8001ac6:	d86b      	bhi.n	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d060      	beq.n	8001b8e <HAL_TIM_ConfigClockSource+0x15a>
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d867      	bhi.n	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d05c      	beq.n	8001b8e <HAL_TIM_ConfigClockSource+0x15a>
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d05a      	beq.n	8001b8e <HAL_TIM_ConfigClockSource+0x15a>
 8001ad8:	e062      	b.n	8001ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f000 facc 	bl	8002086 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	609a      	str	r2, [r3, #8]
      break;
 8001b06:	e04f      	b.n	8001ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f000 fab5 	bl	8002086 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b2a:	609a      	str	r2, [r3, #8]
      break;
 8001b2c:	e03c      	b.n	8001ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f000 fa2c 	bl	8001f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2150      	movs	r1, #80	; 0x50
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fa83 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001b4c:	e02c      	b.n	8001ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f000 fa4a 	bl	8001ff4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2160      	movs	r1, #96	; 0x60
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fa73 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001b6c:	e01c      	b.n	8001ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6859      	ldr	r1, [r3, #4]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f000 fa0c 	bl	8001f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2140      	movs	r1, #64	; 0x40
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fa63 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001b8c:	e00c      	b.n	8001ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f000 fa5a 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001b9e:	e003      	b.n	8001ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba4:	e000      	b.n	8001ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <TIM_Base_SetConfig+0xb8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00b      	beq.n	8001bf4 <TIM_Base_SetConfig+0x30>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be2:	d007      	beq.n	8001bf4 <TIM_Base_SetConfig+0x30>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <TIM_Base_SetConfig+0xbc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <TIM_Base_SetConfig+0x30>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <TIM_Base_SetConfig+0xc0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d108      	bne.n	8001c06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <TIM_Base_SetConfig+0xb8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00b      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c14:	d007      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <TIM_Base_SetConfig+0xbc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d003      	beq.n	8001c26 <TIM_Base_SetConfig+0x62>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <TIM_Base_SetConfig+0xc0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d108      	bne.n	8001c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <TIM_Base_SetConfig+0xb8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d103      	bne.n	8001c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	615a      	str	r2, [r3, #20]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40000800 	.word	0x40000800

08001c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f023 0201 	bic.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f023 0302 	bic.w	r3, r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <TIM_OC1_SetConfig+0xc8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10c      	bne.n	8001cfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f023 0308 	bic.w	r3, r3, #8
 8001cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f023 0304 	bic.w	r3, r3, #4
 8001cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <TIM_OC1_SetConfig+0xc8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d111      	bne.n	8001d2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	621a      	str	r2, [r3, #32]
}
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40012c00 	.word	0x40012c00

08001d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f023 0210 	bic.w	r2, r3, #16
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f023 0320 	bic.w	r3, r3, #32
 8001d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <TIM_OC2_SetConfig+0xd0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d10d      	bne.n	8001dd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <TIM_OC2_SetConfig+0xd0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d113      	bne.n	8001e00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	621a      	str	r2, [r3, #32]
}
 8001e1a:	bf00      	nop
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	40012c00 	.word	0x40012c00

08001e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0303 	bic.w	r3, r3, #3
 8001e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <TIM_OC3_SetConfig+0xd0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10d      	bne.n	8001ea2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <TIM_OC3_SetConfig+0xd0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d113      	bne.n	8001ed2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	621a      	str	r2, [r3, #32]
}
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40012c00 	.word	0x40012c00

08001efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	031b      	lsls	r3, r3, #12
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <TIM_OC4_SetConfig+0x98>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d109      	bne.n	8001f70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	621a      	str	r2, [r3, #32]
}
 8001f8a:	bf00      	nop
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40012c00 	.word	0x40012c00

08001f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0201 	bic.w	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f023 030a 	bic.w	r3, r3, #10
 8001fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	621a      	str	r2, [r3, #32]
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	f023 0210 	bic.w	r2, r3, #16
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800201e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	031b      	lsls	r3, r3, #12
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	621a      	str	r2, [r3, #32]
}
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	f043 0307 	orr.w	r3, r3, #7
 8002074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002086:	b480      	push	{r7}
 8002088:	b087      	sub	sp, #28
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	021a      	lsls	r2, r3, #8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	609a      	str	r2, [r3, #8]
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020d8:	2302      	movs	r3, #2
 80020da:	e046      	b.n	800216a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d009      	beq.n	800213e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10c      	bne.n	8002158 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	4313      	orrs	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	2600      	movs	r6, #0
 8002184:	4d0c      	ldr	r5, [pc, #48]	; (80021b8 <__libc_init_array+0x38>)
 8002186:	4c0d      	ldr	r4, [pc, #52]	; (80021bc <__libc_init_array+0x3c>)
 8002188:	1b64      	subs	r4, r4, r5
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	42a6      	cmp	r6, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	f000 f822 	bl	80021d8 <_init>
 8002194:	2600      	movs	r6, #0
 8002196:	4d0a      	ldr	r5, [pc, #40]	; (80021c0 <__libc_init_array+0x40>)
 8002198:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <__libc_init_array+0x44>)
 800219a:	1b64      	subs	r4, r4, r5
 800219c:	10a4      	asrs	r4, r4, #2
 800219e:	42a6      	cmp	r6, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a8:	4798      	blx	r3
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b2:	4798      	blx	r3
 80021b4:	3601      	adds	r6, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08002214 	.word	0x08002214
 80021bc:	08002214 	.word	0x08002214
 80021c0:	08002214 	.word	0x08002214
 80021c4:	08002218 	.word	0x08002218

080021c8 <memset>:
 80021c8:	4603      	mov	r3, r0
 80021ca:	4402      	add	r2, r0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d100      	bne.n	80021d2 <memset+0xa>
 80021d0:	4770      	bx	lr
 80021d2:	f803 1b01 	strb.w	r1, [r3], #1
 80021d6:	e7f9      	b.n	80021cc <memset+0x4>

080021d8 <_init>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	bf00      	nop
 80021dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021de:	bc08      	pop	{r3}
 80021e0:	469e      	mov	lr, r3
 80021e2:	4770      	bx	lr

080021e4 <_fini>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	bf00      	nop
 80021e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ea:	bc08      	pop	{r3}
 80021ec:	469e      	mov	lr, r3
 80021ee:	4770      	bx	lr
