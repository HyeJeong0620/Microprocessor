
14_review.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003778  08003778  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003778  08003778  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003778  08003778  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  080037f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080037f0  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008853  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185c  00000000  00000000  000288ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002a148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001786d  00000000  00000000  0002af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bcb  00000000  00000000  000427fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083adc  00000000  00000000  0004b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ceea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d0  00000000  00000000  000ceef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035b8 	.word	0x080035b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035b8 	.word	0x080035b8

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800015a:	2201      	movs	r2, #1
 800015c:	4808      	ldr	r0, [pc, #32]	; (8000180 <__io_putchar+0x34>)
 800015e:	f001 fbb3 	bl	80018c8 <HAL_UART_Transmit>
	if (ch == '\n')
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b0a      	cmp	r3, #10
 8000166:	d106      	bne.n	8000176 <__io_putchar+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *)&"\r", 1, 1000);
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	2201      	movs	r2, #1
 800016e:	4905      	ldr	r1, [pc, #20]	; (8000184 <__io_putchar+0x38>)
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <__io_putchar+0x34>)
 8000172:	f001 fba9 	bl	80018c8 <HAL_UART_Transmit>
	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	2000008c 	.word	0x2000008c
 8000184:	080035d0 	.word	0x080035d0

08000188 <display_menu>:

void display_menu() {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	printf("\n\n***********************\n");
 800018c:	480c      	ldr	r0, [pc, #48]	; (80001c0 <display_menu+0x38>)
 800018e:	f002 fd21 	bl	8002bd4 <puts>
	printf("Mode Control\n");
 8000192:	480c      	ldr	r0, [pc, #48]	; (80001c4 <display_menu+0x3c>)
 8000194:	f002 fd1e 	bl	8002bd4 <puts>
	printf("***********************\n\n");
 8000198:	480b      	ldr	r0, [pc, #44]	; (80001c8 <display_menu+0x40>)
 800019a:	f002 fd1b 	bl	8002bd4 <puts>
	printf("1. Set to A mode\n");
 800019e:	480b      	ldr	r0, [pc, #44]	; (80001cc <display_menu+0x44>)
 80001a0:	f002 fd18 	bl	8002bd4 <puts>
	printf("2. Set to B mode\n");
 80001a4:	480a      	ldr	r0, [pc, #40]	; (80001d0 <display_menu+0x48>)
 80001a6:	f002 fd15 	bl	8002bd4 <puts>
	printf("Type number : ");
 80001aa:	480a      	ldr	r0, [pc, #40]	; (80001d4 <display_menu+0x4c>)
 80001ac:	f002 fc8c 	bl	8002ac8 <iprintf>
	fflush(stdout);
 80001b0:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <display_menu+0x50>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	689b      	ldr	r3, [r3, #8]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f002 fa72 	bl	80026a0 <fflush>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	080035d4 	.word	0x080035d4
 80001c4:	080035f0 	.word	0x080035f0
 80001c8:	08003600 	.word	0x08003600
 80001cc:	0800361c 	.word	0x0800361c
 80001d0:	08003630 	.word	0x08003630
 80001d4:	08003644 	.word	0x08003644
 80001d8:	2000000c 	.word	0x2000000c

080001dc <a>:

void a() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	printf("long time no see\n");
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <a+0x18>)
 80001e2:	f002 fcf7 	bl	8002bd4 <puts>
  HAL_Delay(1000);
 80001e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ea:	f000 fb6b 	bl	80008c4 <HAL_Delay>
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	08003654 	.word	0x08003654

080001f8 <b>:

void b() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	printf("오랜만이야!!!\n");
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <b+0x18>)
 80001fe:	f002 fce9 	bl	8002bd4 <puts>
  HAL_Delay(1000);
 8000202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000206:	f000 fb5d 	bl	80008c4 <HAL_Delay>
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	08003668 	.word	0x08003668

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 faf2 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f822 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f890 	bl	8000344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000224:	f000 f864 	bl	80002f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  display_menu();
 8000228:	f7ff ffae 	bl	8000188 <display_menu>
  HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 800022c:	2201      	movs	r2, #1
 800022e:	490a      	ldr	r1, [pc, #40]	; (8000258 <main+0x44>)
 8000230:	480a      	ldr	r0, [pc, #40]	; (800025c <main+0x48>)
 8000232:	f001 fbcc 	bl	80019ce <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (mode == MODE_A)
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <main+0x4c>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b01      	cmp	r3, #1
 800023e:	d102      	bne.n	8000246 <main+0x32>
		  a();
 8000240:	f7ff ffcc 	bl	80001dc <a>
 8000244:	e7f7      	b.n	8000236 <main+0x22>
	  else if (mode == MODE_B)
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <main+0x4c>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	2b02      	cmp	r3, #2
 800024e:	d1f2      	bne.n	8000236 <main+0x22>
		  b();
 8000250:	f7ff ffd2 	bl	80001f8 <b>
	  if (mode == MODE_A)
 8000254:	e7ef      	b.n	8000236 <main+0x22>
 8000256:	bf00      	nop
 8000258:	200000d8 	.word	0x200000d8
 800025c:	2000008c 	.word	0x2000008c
 8000260:	200000d4 	.word	0x200000d4

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b090      	sub	sp, #64	; 0x40
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fb43 	bl	80028fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000286:	2301      	movs	r3, #1
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800028a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800028e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	2302      	movs	r3, #2
 800029a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	f107 0318 	add.w	r3, r7, #24
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 feab 	bl	8001008 <HAL_RCC_OscConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b8:	f000 f924 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	230f      	movs	r3, #15
 80002be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c0:	2302      	movs	r3, #2
 80002c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2102      	movs	r1, #2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 f918 	bl	800150c <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e2:	f000 f90f 	bl	8000504 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3740      	adds	r7, #64	; 0x40
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART2_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000328:	f001 fa7e 	bl	8001828 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f8e7 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000008c 	.word	0x2000008c
 8000340:	40004400 	.word	0x40004400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b3d      	ldr	r3, [pc, #244]	; (8000450 <MX_GPIO_Init+0x10c>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a3c      	ldr	r2, [pc, #240]	; (8000450 <MX_GPIO_Init+0x10c>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b3a      	ldr	r3, [pc, #232]	; (8000450 <MX_GPIO_Init+0x10c>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <MX_GPIO_Init+0x10c>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a36      	ldr	r2, [pc, #216]	; (8000450 <MX_GPIO_Init+0x10c>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b34      	ldr	r3, [pc, #208]	; (8000450 <MX_GPIO_Init+0x10c>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b31      	ldr	r3, [pc, #196]	; (8000450 <MX_GPIO_Init+0x10c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a30      	ldr	r2, [pc, #192]	; (8000450 <MX_GPIO_Init+0x10c>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2e      	ldr	r3, [pc, #184]	; (8000450 <MX_GPIO_Init+0x10c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <MX_GPIO_Init+0x10c>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a2a      	ldr	r2, [pc, #168]	; (8000450 <MX_GPIO_Init+0x10c>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b28      	ldr	r3, [pc, #160]	; (8000450 <MX_GPIO_Init+0x10c>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	210f      	movs	r1, #15
 80003bc:	4825      	ldr	r0, [pc, #148]	; (8000454 <MX_GPIO_Init+0x110>)
 80003be:	f000 fde9 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80003c8:	4823      	ldr	r0, [pc, #140]	; (8000458 <MX_GPIO_Init+0x114>)
 80003ca:	f000 fde3 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80003ce:	230f      	movs	r3, #15
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	481b      	ldr	r0, [pc, #108]	; (8000454 <MX_GPIO_Init+0x110>)
 80003e6:	f000 fc51 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003ea:	2310      	movs	r3, #16
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ee:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_GPIO_Init+0x118>)
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4818      	ldr	r0, [pc, #96]	; (8000460 <MX_GPIO_Init+0x11c>)
 80003fe:	f000 fc45 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000402:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	480f      	ldr	r0, [pc, #60]	; (8000458 <MX_GPIO_Init+0x114>)
 800041c:	f000 fc36 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000420:	2304      	movs	r3, #4
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	480c      	ldr	r0, [pc, #48]	; (8000464 <MX_GPIO_Init+0x120>)
 8000434:	f000 fc2a 	bl	8000c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2100      	movs	r1, #0
 800043c:	200a      	movs	r0, #10
 800043e:	f000 fb3c 	bl	8000aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000442:	200a      	movs	r0, #10
 8000444:	f000 fb55 	bl	8000af2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	40011000 	.word	0x40011000
 8000458:	40010c00 	.word	0x40010c00
 800045c:	10210000 	.word	0x10210000
 8000460:	40010800 	.word	0x40010800
 8000464:	40011400 	.word	0x40011400

08000468 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	switch (RxBuffer[0]) {
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <HAL_UART_RxCpltCallback+0x84>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b31      	cmp	r3, #49	; 0x31
 8000476:	d002      	beq.n	800047e <HAL_UART_RxCpltCallback+0x16>
 8000478:	2b32      	cmp	r3, #50	; 0x32
 800047a:	d00f      	beq.n	800049c <HAL_UART_RxCpltCallback+0x34>
 800047c:	e01d      	b.n	80004ba <HAL_UART_RxCpltCallback+0x52>
	    case '1':
	      mode = MODE_A;
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <HAL_UART_RxCpltCallback+0x88>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 8000484:	2364      	movs	r3, #100	; 0x64
 8000486:	2201      	movs	r2, #1
 8000488:	4918      	ldr	r1, [pc, #96]	; (80004ec <HAL_UART_RxCpltCallback+0x84>)
 800048a:	481a      	ldr	r0, [pc, #104]	; (80004f4 <HAL_UART_RxCpltCallback+0x8c>)
 800048c:	f001 fa1c 	bl	80018c8 <HAL_UART_Transmit>
	      printf("\n\nNow, A mode\n");
 8000490:	4819      	ldr	r0, [pc, #100]	; (80004f8 <HAL_UART_RxCpltCallback+0x90>)
 8000492:	f002 fb9f 	bl	8002bd4 <puts>
	      display_menu();
 8000496:	f7ff fe77 	bl	8000188 <display_menu>
	      break;
 800049a:	e01d      	b.n	80004d8 <HAL_UART_RxCpltCallback+0x70>
	    case '2':
	      mode = MODE_B;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <HAL_UART_RxCpltCallback+0x88>)
 800049e:	2202      	movs	r2, #2
 80004a0:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 80004a2:	2364      	movs	r3, #100	; 0x64
 80004a4:	2201      	movs	r2, #1
 80004a6:	4911      	ldr	r1, [pc, #68]	; (80004ec <HAL_UART_RxCpltCallback+0x84>)
 80004a8:	4812      	ldr	r0, [pc, #72]	; (80004f4 <HAL_UART_RxCpltCallback+0x8c>)
 80004aa:	f001 fa0d 	bl	80018c8 <HAL_UART_Transmit>
	      printf("\n\nNow, B mode\n");
 80004ae:	4813      	ldr	r0, [pc, #76]	; (80004fc <HAL_UART_RxCpltCallback+0x94>)
 80004b0:	f002 fb90 	bl	8002bd4 <puts>
	      display_menu();
 80004b4:	f7ff fe68 	bl	8000188 <display_menu>
	      break;
 80004b8:	e00e      	b.n	80004d8 <HAL_UART_RxCpltCallback+0x70>
	     default :
	       RxBuffer[0] = '\a';
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_UART_RxCpltCallback+0x84>)
 80004bc:	2207      	movs	r2, #7
 80004be:	701a      	strb	r2, [r3, #0]
	       HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 80004c0:	2364      	movs	r3, #100	; 0x64
 80004c2:	2201      	movs	r2, #1
 80004c4:	4909      	ldr	r1, [pc, #36]	; (80004ec <HAL_UART_RxCpltCallback+0x84>)
 80004c6:	480b      	ldr	r0, [pc, #44]	; (80004f4 <HAL_UART_RxCpltCallback+0x8c>)
 80004c8:	f001 f9fe 	bl	80018c8 <HAL_UART_Transmit>
	       printf("\n\nSelect number : 1 ~ 2\n");
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <HAL_UART_RxCpltCallback+0x98>)
 80004ce:	f002 fb81 	bl	8002bd4 <puts>
	       display_menu();
 80004d2:	f7ff fe59 	bl	8000188 <display_menu>
	       break;
 80004d6:	bf00      	nop
	   }
	   HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <HAL_UART_RxCpltCallback+0x84>)
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_UART_RxCpltCallback+0x8c>)
 80004de:	f001 fa76 	bl	80019ce <HAL_UART_Receive_IT>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000d8 	.word	0x200000d8
 80004f0:	200000d4 	.word	0x200000d4
 80004f4:	2000008c 	.word	0x2000008c
 80004f8:	0800367c 	.word	0x0800367c
 80004fc:	0800368c 	.word	0x0800368c
 8000500:	0800369c 	.word	0x0800369c

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_MspInit+0x40>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <HAL_MspInit+0x40>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_MspInit+0x40>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_MspInit+0x40>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_MspInit+0x40>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_MspInit+0x40>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <HAL_UART_MspInit+0x98>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d137      	bne.n	80005e4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <HAL_UART_MspInit+0x9c>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <HAL_UART_MspInit+0x9c>)
 800057a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057e:	61d3      	str	r3, [r2, #28]
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <HAL_UART_MspInit+0x9c>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_UART_MspInit+0x9c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <HAL_UART_MspInit+0x9c>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_UART_MspInit+0x9c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005a4:	2304      	movs	r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	480f      	ldr	r0, [pc, #60]	; (80005f4 <HAL_UART_MspInit+0xa0>)
 80005b8:	f000 fb68 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005bc:	2308      	movs	r3, #8
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <HAL_UART_MspInit+0xa0>)
 80005d0:	f000 fb5c 	bl	8000c8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	2026      	movs	r0, #38	; 0x26
 80005da:	f000 fa6e 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005de:	2026      	movs	r0, #38	; 0x26
 80005e0:	f000 fa87 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40004400 	.word	0x40004400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010800 	.word	0x40010800

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063e:	f000 f925 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}

08000646 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800064a:	2010      	movs	r0, #16
 800064c:	f000 fcba 	bl	8000fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <USART2_IRQHandler+0x10>)
 800065a:	f001 f9dd 	bl	8001a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000008c 	.word	0x2000008c

08000668 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e00a      	b.n	8000690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800067a:	f3af 8000 	nop.w
 800067e:	4601      	mov	r1, r0
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	60ba      	str	r2, [r7, #8]
 8000686:	b2ca      	uxtb	r2, r1
 8000688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3301      	adds	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	dbf0      	blt.n	800067a <_read+0x12>
  }

  return len;
 8000698:	687b      	ldr	r3, [r7, #4]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e009      	b.n	80006c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	60ba      	str	r2, [r7, #8]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd45 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf1      	blt.n	80006b4 <_write+0x12>
  }
  return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_close>:

int _close(int file)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000700:	605a      	str	r2, [r3, #4]
  return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <_isatty>:

int _isatty(int file)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000722:	b480      	push	{r7}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
	...

0800073c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a14      	ldr	r2, [pc, #80]	; (8000798 <_sbrk+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <_sbrk+0x60>)
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <_sbrk+0x64>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <_sbrk+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d207      	bcs.n	800077c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800076c:	f001 fed4 	bl	8002518 <__errno>
 8000770:	4603      	mov	r3, r0
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	e009      	b.n	8000790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <_sbrk+0x64>)
 800078c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20005000 	.word	0x20005000
 800079c:	00000400 	.word	0x00000400
 80007a0:	200000dc 	.word	0x200000dc
 80007a4:	200000f8 	.word	0x200000f8

080007a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b4:	f7ff fff8 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ba:	490c      	ldr	r1, [pc, #48]	; (80007ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007d0:	4c09      	ldr	r4, [pc, #36]	; (80007f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007de:	f002 f867 	bl	80028b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fd17 	bl	8000214 <main>
  bx lr
 80007e6:	4770      	bx	lr
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007f0:	08003780 	.word	0x08003780
  ldr r2, =_sbss
 80007f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007f8:	200000f4 	.word	0x200000f4

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f947 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff fe78 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f95f 	bl	8000b0e <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f927 	bl	8000aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <HAL_IncTick+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a03      	ldr	r2, [pc, #12]	; (80008ac <HAL_IncTick+0x20>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000008 	.word	0x20000008
 80008ac:	200000e0 	.word	0x200000e0

080008b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <HAL_GetTick+0x10>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	200000e0 	.word	0x200000e0

080008c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008cc:	f7ff fff0 	bl	80008b0 <HAL_GetTick>
 80008d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008dc:	d005      	beq.n	80008ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_Delay+0x44>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ea:	bf00      	nop
 80008ec:	f7ff ffe0 	bl	80008b0 <HAL_GetTick>
 80008f0:	4602      	mov	r2, r0
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d8f7      	bhi.n	80008ec <HAL_Delay+0x28>
  {
  }
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008

0800090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4906      	ldr	r1, [pc, #24]	; (80009a4 <__NVIC_EnableIRQ+0x34>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff90 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff2d 	bl	800090c <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff42 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff90 	bl	80009fc <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5f 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff35 	bl	8000970 <__NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffa2 	bl	8000a60 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b085      	sub	sp, #20
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d008      	beq.n	8000b50 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2204      	movs	r2, #4
 8000b42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e020      	b.n	8000b92 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 020e 	bic.w	r2, r2, #14
 8000b5e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 0201 	bic.w	r2, r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b78:	2101      	movs	r1, #1
 8000b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d005      	beq.n	8000bc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e051      	b.n	8000c64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f022 020e 	bic.w	r2, r2, #14
 8000bce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0201 	bic.w	r2, r2, #1
 8000bde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <HAL_DMA_Abort_IT+0xd4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d029      	beq.n	8000c3e <HAL_DMA_Abort_IT+0xa2>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <HAL_DMA_Abort_IT+0xd8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d022      	beq.n	8000c3a <HAL_DMA_Abort_IT+0x9e>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <HAL_DMA_Abort_IT+0xdc>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d01a      	beq.n	8000c34 <HAL_DMA_Abort_IT+0x98>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_DMA_Abort_IT+0xe0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d012      	beq.n	8000c2e <HAL_DMA_Abort_IT+0x92>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <HAL_DMA_Abort_IT+0xe4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d00a      	beq.n	8000c28 <HAL_DMA_Abort_IT+0x8c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <HAL_DMA_Abort_IT+0xe8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d102      	bne.n	8000c22 <HAL_DMA_Abort_IT+0x86>
 8000c1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c20:	e00e      	b.n	8000c40 <HAL_DMA_Abort_IT+0xa4>
 8000c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c26:	e00b      	b.n	8000c40 <HAL_DMA_Abort_IT+0xa4>
 8000c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2c:	e008      	b.n	8000c40 <HAL_DMA_Abort_IT+0xa4>
 8000c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c32:	e005      	b.n	8000c40 <HAL_DMA_Abort_IT+0xa4>
 8000c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c38:	e002      	b.n	8000c40 <HAL_DMA_Abort_IT+0xa4>
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	e000      	b.n	8000c40 <HAL_DMA_Abort_IT+0xa4>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <HAL_DMA_Abort_IT+0xec>)
 8000c42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2201      	movs	r2, #1
 8000c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	4798      	blx	r3
    } 
  }
  return status;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020008 	.word	0x40020008
 8000c74:	4002001c 	.word	0x4002001c
 8000c78:	40020030 	.word	0x40020030
 8000c7c:	40020044 	.word	0x40020044
 8000c80:	40020058 	.word	0x40020058
 8000c84:	4002006c 	.word	0x4002006c
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b08b      	sub	sp, #44	; 0x2c
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9e:	e169      	b.n	8000f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	f040 8158 	bne.w	8000f6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	4a9a      	ldr	r2, [pc, #616]	; (8000f2c <HAL_GPIO_Init+0x2a0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d05e      	beq.n	8000d86 <HAL_GPIO_Init+0xfa>
 8000cc8:	4a98      	ldr	r2, [pc, #608]	; (8000f2c <HAL_GPIO_Init+0x2a0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d875      	bhi.n	8000dba <HAL_GPIO_Init+0x12e>
 8000cce:	4a98      	ldr	r2, [pc, #608]	; (8000f30 <HAL_GPIO_Init+0x2a4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d058      	beq.n	8000d86 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a96      	ldr	r2, [pc, #600]	; (8000f30 <HAL_GPIO_Init+0x2a4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d86f      	bhi.n	8000dba <HAL_GPIO_Init+0x12e>
 8000cda:	4a96      	ldr	r2, [pc, #600]	; (8000f34 <HAL_GPIO_Init+0x2a8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d052      	beq.n	8000d86 <HAL_GPIO_Init+0xfa>
 8000ce0:	4a94      	ldr	r2, [pc, #592]	; (8000f34 <HAL_GPIO_Init+0x2a8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d869      	bhi.n	8000dba <HAL_GPIO_Init+0x12e>
 8000ce6:	4a94      	ldr	r2, [pc, #592]	; (8000f38 <HAL_GPIO_Init+0x2ac>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d04c      	beq.n	8000d86 <HAL_GPIO_Init+0xfa>
 8000cec:	4a92      	ldr	r2, [pc, #584]	; (8000f38 <HAL_GPIO_Init+0x2ac>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d863      	bhi.n	8000dba <HAL_GPIO_Init+0x12e>
 8000cf2:	4a92      	ldr	r2, [pc, #584]	; (8000f3c <HAL_GPIO_Init+0x2b0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d046      	beq.n	8000d86 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a90      	ldr	r2, [pc, #576]	; (8000f3c <HAL_GPIO_Init+0x2b0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d85d      	bhi.n	8000dba <HAL_GPIO_Init+0x12e>
 8000cfe:	2b12      	cmp	r3, #18
 8000d00:	d82a      	bhi.n	8000d58 <HAL_GPIO_Init+0xcc>
 8000d02:	2b12      	cmp	r3, #18
 8000d04:	d859      	bhi.n	8000dba <HAL_GPIO_Init+0x12e>
 8000d06:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <HAL_GPIO_Init+0x80>)
 8000d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0c:	08000d87 	.word	0x08000d87
 8000d10:	08000d61 	.word	0x08000d61
 8000d14:	08000d73 	.word	0x08000d73
 8000d18:	08000db5 	.word	0x08000db5
 8000d1c:	08000dbb 	.word	0x08000dbb
 8000d20:	08000dbb 	.word	0x08000dbb
 8000d24:	08000dbb 	.word	0x08000dbb
 8000d28:	08000dbb 	.word	0x08000dbb
 8000d2c:	08000dbb 	.word	0x08000dbb
 8000d30:	08000dbb 	.word	0x08000dbb
 8000d34:	08000dbb 	.word	0x08000dbb
 8000d38:	08000dbb 	.word	0x08000dbb
 8000d3c:	08000dbb 	.word	0x08000dbb
 8000d40:	08000dbb 	.word	0x08000dbb
 8000d44:	08000dbb 	.word	0x08000dbb
 8000d48:	08000dbb 	.word	0x08000dbb
 8000d4c:	08000dbb 	.word	0x08000dbb
 8000d50:	08000d69 	.word	0x08000d69
 8000d54:	08000d7d 	.word	0x08000d7d
 8000d58:	4a79      	ldr	r2, [pc, #484]	; (8000f40 <HAL_GPIO_Init+0x2b4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d013      	beq.n	8000d86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5e:	e02c      	b.n	8000dba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	623b      	str	r3, [r7, #32]
          break;
 8000d66:	e029      	b.n	8000dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	623b      	str	r3, [r7, #32]
          break;
 8000d70:	e024      	b.n	8000dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	3308      	adds	r3, #8
 8000d78:	623b      	str	r3, [r7, #32]
          break;
 8000d7a:	e01f      	b.n	8000dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	330c      	adds	r3, #12
 8000d82:	623b      	str	r3, [r7, #32]
          break;
 8000d84:	e01a      	b.n	8000dbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e013      	b.n	8000dbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d105      	bne.n	8000da8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	611a      	str	r2, [r3, #16]
          break;
 8000da6:	e009      	b.n	8000dbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da8:	2308      	movs	r3, #8
 8000daa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	615a      	str	r2, [r3, #20]
          break;
 8000db2:	e003      	b.n	8000dbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e000      	b.n	8000dbc <HAL_GPIO_Init+0x130>
          break;
 8000dba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	2bff      	cmp	r3, #255	; 0xff
 8000dc0:	d801      	bhi.n	8000dc6 <HAL_GPIO_Init+0x13a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	e001      	b.n	8000dca <HAL_GPIO_Init+0x13e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	2bff      	cmp	r3, #255	; 0xff
 8000dd0:	d802      	bhi.n	8000dd8 <HAL_GPIO_Init+0x14c>
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x152>
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	3b08      	subs	r3, #8
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	210f      	movs	r1, #15
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	401a      	ands	r2, r3
 8000df0:	6a39      	ldr	r1, [r7, #32]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 80b1 	beq.w	8000f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0c:	4b4d      	ldr	r3, [pc, #308]	; (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a4c      	ldr	r2, [pc, #304]	; (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <HAL_GPIO_Init+0x2b8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e24:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <HAL_GPIO_Init+0x2bc>)
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a40      	ldr	r2, [pc, #256]	; (8000f4c <HAL_GPIO_Init+0x2c0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d013      	beq.n	8000e78 <HAL_GPIO_Init+0x1ec>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a3f      	ldr	r2, [pc, #252]	; (8000f50 <HAL_GPIO_Init+0x2c4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d00d      	beq.n	8000e74 <HAL_GPIO_Init+0x1e8>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a3e      	ldr	r2, [pc, #248]	; (8000f54 <HAL_GPIO_Init+0x2c8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d007      	beq.n	8000e70 <HAL_GPIO_Init+0x1e4>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a3d      	ldr	r2, [pc, #244]	; (8000f58 <HAL_GPIO_Init+0x2cc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d101      	bne.n	8000e6c <HAL_GPIO_Init+0x1e0>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	e004      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7c:	f002 0203 	and.w	r2, r2, #3
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	4093      	lsls	r3, r2
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e8a:	492f      	ldr	r1, [pc, #188]	; (8000f48 <HAL_GPIO_Init+0x2bc>)
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	492c      	ldr	r1, [pc, #176]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4928      	ldr	r1, [pc, #160]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	4922      	ldr	r1, [pc, #136]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	60cb      	str	r3, [r1, #12]
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	491e      	ldr	r1, [pc, #120]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	4918      	ldr	r1, [pc, #96]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4914      	ldr	r1, [pc, #80]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d021      	beq.n	8000f60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	490e      	ldr	r1, [pc, #56]	; (8000f5c <HAL_GPIO_Init+0x2d0>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
 8000f28:	e021      	b.n	8000f6e <HAL_GPIO_Init+0x2e2>
 8000f2a:	bf00      	nop
 8000f2c:	10320000 	.word	0x10320000
 8000f30:	10310000 	.word	0x10310000
 8000f34:	10220000 	.word	0x10220000
 8000f38:	10210000 	.word	0x10210000
 8000f3c:	10120000 	.word	0x10120000
 8000f40:	10110000 	.word	0x10110000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40011400 	.word	0x40011400
 8000f5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_GPIO_Init+0x304>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4909      	ldr	r1, [pc, #36]	; (8000f90 <HAL_GPIO_Init+0x304>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	3301      	adds	r3, #1
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f47f ae8e 	bne.w	8000ca0 <HAL_GPIO_Init+0x14>
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	372c      	adds	r7, #44	; 0x2c
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40010400 	.word	0x40010400

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fb0:	e003      	b.n	8000fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	041a      	lsls	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	611a      	str	r2, [r3, #16]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f806 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e272      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8087 	beq.w	8001136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001028:	4b92      	ldr	r3, [pc, #584]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b04      	cmp	r3, #4
 8001032:	d00c      	beq.n	800104e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001034:	4b8f      	ldr	r3, [pc, #572]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b08      	cmp	r3, #8
 800103e:	d112      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
 8001040:	4b8c      	ldr	r3, [pc, #560]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104c:	d10b      	bne.n	8001066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	4b89      	ldr	r3, [pc, #548]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d06c      	beq.n	8001134 <HAL_RCC_OscConfig+0x12c>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d168      	bne.n	8001134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e24c      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x76>
 8001070:	4b80      	ldr	r3, [pc, #512]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a7f      	ldr	r2, [pc, #508]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e02e      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x98>
 8001086:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a7a      	ldr	r2, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b78      	ldr	r3, [pc, #480]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a77      	ldr	r2, [pc, #476]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01d      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0xbc>
 80010aa:	4b72      	ldr	r3, [pc, #456]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a71      	ldr	r2, [pc, #452]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b6f      	ldr	r3, [pc, #444]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6e      	ldr	r2, [pc, #440]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0xd4>
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a6a      	ldr	r2, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a67      	ldr	r2, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fbe4 	bl	80008b0 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fbe0 	bl	80008b0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e200      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0xe4>
 800110a:	e014      	b.n	8001136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fbd0 	bl	80008b0 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fbcc 	bl	80008b0 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1ec      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x10c>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d063      	beq.n	800120a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114e:	4b49      	ldr	r3, [pc, #292]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d11c      	bne.n	8001194 <HAL_RCC_OscConfig+0x18c>
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d116      	bne.n	8001194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x176>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e1c0      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4939      	ldr	r1, [pc, #228]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	e03a      	b.n	800120a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <HAL_RCC_OscConfig+0x270>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fb85 	bl	80008b0 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fb81 	bl	80008b0 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e1a1      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4927      	ldr	r1, [pc, #156]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
 80011dc:	e015      	b.n	800120a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <HAL_RCC_OscConfig+0x270>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fb64 	bl	80008b0 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff fb60 	bl	80008b0 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e180      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d03a      	beq.n	800128c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d019      	beq.n	8001252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_RCC_OscConfig+0x274>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001224:	f7ff fb44 	bl	80008b0 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fb40 	bl	80008b0 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e160      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_RCC_OscConfig+0x26c>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 face 	bl	80017ec <RCC_Delay>
 8001250:	e01c      	b.n	800128c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_RCC_OscConfig+0x274>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fb2a 	bl	80008b0 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125e:	e00f      	b.n	8001280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fb26 	bl	80008b0 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d908      	bls.n	8001280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e146      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	42420000 	.word	0x42420000
 800127c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	4b92      	ldr	r3, [pc, #584]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e9      	bne.n	8001260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80a6 	beq.w	80013e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129e:	4b8b      	ldr	r3, [pc, #556]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10d      	bne.n	80012c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b88      	ldr	r3, [pc, #544]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a87      	ldr	r2, [pc, #540]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b85      	ldr	r3, [pc, #532]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b82      	ldr	r3, [pc, #520]	; (80014d0 <HAL_RCC_OscConfig+0x4c8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d118      	bne.n	8001304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b7f      	ldr	r3, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x4c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a7e      	ldr	r2, [pc, #504]	; (80014d0 <HAL_RCC_OscConfig+0x4c8>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff fae7 	bl	80008b0 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e6:	f7ff fae3 	bl	80008b0 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b64      	cmp	r3, #100	; 0x64
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e103      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b75      	ldr	r3, [pc, #468]	; (80014d0 <HAL_RCC_OscConfig+0x4c8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x312>
 800130c:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6213      	str	r3, [r2, #32]
 8001318:	e02d      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x334>
 8001322:	4b6a      	ldr	r3, [pc, #424]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4a69      	ldr	r2, [pc, #420]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6213      	str	r3, [r2, #32]
 800132e:	4b67      	ldr	r3, [pc, #412]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a66      	ldr	r2, [pc, #408]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	e01c      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b05      	cmp	r3, #5
 8001342:	d10c      	bne.n	800135e <HAL_RCC_OscConfig+0x356>
 8001344:	4b61      	ldr	r3, [pc, #388]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4a60      	ldr	r2, [pc, #384]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6213      	str	r3, [r2, #32]
 8001350:	4b5e      	ldr	r3, [pc, #376]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a5d      	ldr	r2, [pc, #372]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	e00b      	b.n	8001376 <HAL_RCC_OscConfig+0x36e>
 800135e:	4b5b      	ldr	r3, [pc, #364]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a5a      	ldr	r2, [pc, #360]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	4b58      	ldr	r3, [pc, #352]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a57      	ldr	r2, [pc, #348]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d015      	beq.n	80013aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fa97 	bl	80008b0 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fa93 	bl	80008b0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0b1      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0ee      	beq.n	8001386 <HAL_RCC_OscConfig+0x37e>
 80013a8:	e014      	b.n	80013d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fa81 	bl	80008b0 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fa7d 	bl	80008b0 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e09b      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	4b40      	ldr	r3, [pc, #256]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ee      	bne.n	80013b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a3b      	ldr	r2, [pc, #236]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8087 	beq.w	80014fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d061      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d146      	bne.n	8001492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_RCC_OscConfig+0x4cc>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff fa51 	bl	80008b0 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001412:	f7ff fa4d 	bl	80008b0 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e06d      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001438:	d108      	bne.n	800144c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	4921      	ldr	r1, [pc, #132]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a19      	ldr	r1, [r3, #32]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	430b      	orrs	r3, r1
 800145e:	491b      	ldr	r1, [pc, #108]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_RCC_OscConfig+0x4cc>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fa21 	bl	80008b0 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff fa1d 	bl	80008b0 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e03d      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x46a>
 8001490:	e035      	b.n	80014fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_RCC_OscConfig+0x4cc>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fa0a 	bl	80008b0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fa06 	bl	80008b0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e026      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x498>
 80014be:	e01e      	b.n	80014fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e019      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40007000 	.word	0x40007000
 80014d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x500>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0d0      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d910      	bls.n	8001550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0207 	bic.w	r2, r3, #7
 8001536:	4965      	ldr	r1, [pc, #404]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0b8      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001580:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a52      	ldr	r2, [pc, #328]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800158a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	494d      	ldr	r1, [pc, #308]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d040      	beq.n	800162c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d115      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e07f      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e073      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06b      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 0203 	bic.w	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4936      	ldr	r1, [pc, #216]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015fc:	f7ff f958 	bl	80008b0 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	e00a      	b.n	800161a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7ff f954 	bl	80008b0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e053      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 020c 	and.w	r2, r3, #12
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d1eb      	bne.n	8001604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d210      	bcs.n	800165c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0207 	bic.w	r2, r3, #7
 8001642:	4922      	ldr	r1, [pc, #136]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e032      	b.n	80016c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4916      	ldr	r1, [pc, #88]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800169a:	f000 f821 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 800169e:	4602      	mov	r2, r0
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	490a      	ldr	r1, [pc, #40]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
 80016ac:	5ccb      	ldrb	r3, [r1, r3]
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1cc>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1d0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f8b6 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	080036b4 	.word	0x080036b4
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_RCC_GetSysClockFreq+0x94>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b04      	cmp	r3, #4
 8001708:	d002      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x30>
 800170a:	2b08      	cmp	r3, #8
 800170c:	d003      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0x36>
 800170e:	e027      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_GetSysClockFreq+0x98>)
 8001712:	613b      	str	r3, [r7, #16]
      break;
 8001714:	e027      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d010      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_RCC_GetSysClockFreq+0x94>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	0c5b      	lsrs	r3, r3, #17
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_RCC_GetSysClockFreq+0xa0>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_RCC_GetSysClockFreq+0x98>)
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	fbb2 f3f3 	udiv	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e004      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	613b      	str	r3, [r7, #16]
      break;
 800175e:	e002      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCC_GetSysClockFreq+0x98>)
 8001762:	613b      	str	r3, [r7, #16]
      break;
 8001764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001766:	693b      	ldr	r3, [r7, #16]
}
 8001768:	4618      	mov	r0, r3
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	007a1200 	.word	0x007a1200
 800177c:	080036cc 	.word	0x080036cc
 8001780:	080036dc 	.word	0x080036dc
 8001784:	003d0900 	.word	0x003d0900

08001788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <HAL_RCC_GetHCLKFreq+0x10>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000000 	.word	0x20000000

0800179c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017a0:	f7ff fff2 	bl	8001788 <HAL_RCC_GetHCLKFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4903      	ldr	r1, [pc, #12]	; (80017c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	080036c4 	.word	0x080036c4

080017c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c8:	f7ff ffde 	bl	8001788 <HAL_RCC_GetHCLKFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0adb      	lsrs	r3, r3, #11
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	4903      	ldr	r1, [pc, #12]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	080036c4 	.word	0x080036c4

080017ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <RCC_Delay+0x34>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <RCC_Delay+0x38>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0a5b      	lsrs	r3, r3, #9
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001808:	bf00      	nop
  }
  while (Delay --);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1e5a      	subs	r2, r3, #1
 800180e:	60fa      	str	r2, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f9      	bne.n	8001808 <RCC_Delay+0x1c>
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	20000000 	.word	0x20000000
 8001824:	10624dd3 	.word	0x10624dd3

08001828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e042      	b.n	80018c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7fe fe80 	bl	8000554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2224      	movs	r2, #36	; 0x24
 8001858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800186a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fdc5 	bl	80023fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d16d      	bne.n	80019c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_UART_Transmit+0x2c>
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e066      	b.n	80019c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2221      	movs	r2, #33	; 0x21
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001906:	f7fe ffd3 	bl	80008b0 <HAL_GetTick>
 800190a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	88fa      	ldrh	r2, [r7, #6]
 8001916:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001920:	d108      	bne.n	8001934 <HAL_UART_Transmit+0x6c>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d104      	bne.n	8001934 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	e003      	b.n	800193c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800193c:	e02a      	b.n	8001994 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2200      	movs	r2, #0
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fb14 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e036      	b.n	80019c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10b      	bne.n	8001976 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800196c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	3302      	adds	r3, #2
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	e007      	b.n	8001986 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3301      	adds	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1cf      	bne.n	800193e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2200      	movs	r2, #0
 80019a6:	2140      	movs	r1, #64	; 0x40
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 fae4 	bl	8001f76 <UART_WaitOnFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e006      	b.n	80019c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80019c4:	2302      	movs	r3, #2
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	4613      	mov	r3, r2
 80019da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d112      	bne.n	8001a0e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_UART_Receive_IT+0x26>
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e00b      	b.n	8001a10 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	461a      	mov	r2, r3
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 fb24 	bl	8002052 <UART_Start_Receive_IT>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	e000      	b.n	8001a10 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
  }
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b0ba      	sub	sp, #232	; 0xe8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HAL_UART_IRQHandler+0x66>
 8001a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fc01 	bl	800227e <UART_Receive_IT>
      return;
 8001a7c:	e25b      	b.n	8001f36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80de 	beq.w	8001c44 <HAL_UART_IRQHandler+0x22c>
 8001a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d106      	bne.n	8001aa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80d1 	beq.w	8001c44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_UART_IRQHandler+0xae>
 8001aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_UART_IRQHandler+0xd2>
 8001ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f043 0202 	orr.w	r2, r3, #2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_UART_IRQHandler+0xf6>
 8001af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f043 0204 	orr.w	r2, r3, #4
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d011      	beq.n	8001b3e <HAL_UART_IRQHandler+0x126>
 8001b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f043 0208 	orr.w	r2, r3, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 81f2 	beq.w	8001f2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_UART_IRQHandler+0x14e>
 8001b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fb8c 	bl	800227e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <HAL_UART_IRQHandler+0x17a>
 8001b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d04f      	beq.n	8001c32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fa96 	bl	80020c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d041      	beq.n	8001c2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3314      	adds	r3, #20
 8001bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bb4:	e853 3f00 	ldrex	r3, [r3]
 8001bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3314      	adds	r3, #20
 8001bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001be2:	e841 2300 	strex	r3, r2, [r1]
 8001be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1d9      	bne.n	8001ba6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d013      	beq.n	8001c22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	; (8001df8 <HAL_UART_IRQHandler+0x3e0>)
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe ffc8 	bl	8000b9c <HAL_DMA_Abort_IT>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c20:	e00e      	b.n	8001c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f993 	bl	8001f4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c28:	e00a      	b.n	8001c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f98f 	bl	8001f4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c30:	e006      	b.n	8001c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f98b 	bl	8001f4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001c3e:	e175      	b.n	8001f2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c40:	bf00      	nop
    return;
 8001c42:	e173      	b.n	8001f2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	f040 814f 	bne.w	8001eec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8148 	beq.w	8001eec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8141 	beq.w	8001eec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80b6 	beq.w	8001dfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8145 	beq.w	8001f30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	f080 813e 	bcs.w	8001f30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001cba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	f000 8088 	beq.w	8001dd8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd6:	e853 3f00 	ldrex	r3, [r3]
 8001cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	330c      	adds	r3, #12
 8001cf0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001cf4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001cf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cfc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d04:	e841 2300 	strex	r3, r2, [r1]
 8001d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1d9      	bne.n	8001cc8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3314      	adds	r3, #20
 8001d1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d1e:	e853 3f00 	ldrex	r3, [r3]
 8001d22:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3314      	adds	r3, #20
 8001d34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001d40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001d44:	e841 2300 	strex	r3, r2, [r1]
 8001d48:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e1      	bne.n	8001d14 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3314      	adds	r3, #20
 8001d56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d5a:	e853 3f00 	ldrex	r3, [r3]
 8001d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3314      	adds	r3, #20
 8001d70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001d74:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d7c:	e841 2300 	strex	r3, r2, [r1]
 8001d80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e3      	bne.n	8001d50 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	330c      	adds	r3, #12
 8001d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da0:	e853 3f00 	ldrex	r3, [r3]
 8001da4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da8:	f023 0310 	bic.w	r3, r3, #16
 8001dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	330c      	adds	r3, #12
 8001db6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001dba:	65ba      	str	r2, [r7, #88]	; 0x58
 8001dbc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dc2:	e841 2300 	strex	r3, r2, [r1]
 8001dc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1e3      	bne.n	8001d96 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fea7 	bl	8000b26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8b6 	bl	8001f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001df4:	e09c      	b.n	8001f30 <HAL_UART_IRQHandler+0x518>
 8001df6:	bf00      	nop
 8001df8:	08002189 	.word	0x08002189
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 808e 	beq.w	8001f34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8089 	beq.w	8001f34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	330c      	adds	r3, #12
 8001e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2c:	e853 3f00 	ldrex	r3, [r3]
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	330c      	adds	r3, #12
 8001e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001e46:	647a      	str	r2, [r7, #68]	; 0x44
 8001e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e4e:	e841 2300 	strex	r3, r2, [r1]
 8001e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1e3      	bne.n	8001e22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3314      	adds	r3, #20
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	e853 3f00 	ldrex	r3, [r3]
 8001e68:	623b      	str	r3, [r7, #32]
   return(result);
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3314      	adds	r3, #20
 8001e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e86:	e841 2300 	strex	r3, r2, [r1]
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e3      	bne.n	8001e5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	e853 3f00 	ldrex	r3, [r3]
 8001eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 0310 	bic.w	r3, r3, #16
 8001eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	330c      	adds	r3, #12
 8001ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001ec4:	61fa      	str	r2, [r7, #28]
 8001ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec8:	69b9      	ldr	r1, [r7, #24]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	e841 2300 	strex	r3, r2, [r1]
 8001ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e3      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f83b 	bl	8001f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001eea:	e023      	b.n	8001f34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_UART_IRQHandler+0x4f4>
 8001ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f953 	bl	80021b0 <UART_Transmit_IT>
    return;
 8001f0a:	e014      	b.n	8001f36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00e      	beq.n	8001f36 <HAL_UART_IRQHandler+0x51e>
 8001f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f992 	bl	800224e <UART_EndTransmit_IT>
    return;
 8001f2a:	e004      	b.n	8001f36 <HAL_UART_IRQHandler+0x51e>
    return;
 8001f2c:	bf00      	nop
 8001f2e:	e002      	b.n	8001f36 <HAL_UART_IRQHandler+0x51e>
      return;
 8001f30:	bf00      	nop
 8001f32:	e000      	b.n	8001f36 <HAL_UART_IRQHandler+0x51e>
      return;
 8001f34:	bf00      	nop
  }
}
 8001f36:	37e8      	adds	r7, #232	; 0xe8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b090      	sub	sp, #64	; 0x40
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f86:	e050      	b.n	800202a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8e:	d04c      	beq.n	800202a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f96:	f7fe fc8b 	bl	80008b0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d241      	bcs.n	800202a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	330c      	adds	r3, #12
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	e853 3f00 	ldrex	r3, [r3]
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	330c      	adds	r3, #12
 8001fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fc6:	637a      	str	r2, [r7, #52]	; 0x34
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fce:	e841 2300 	strex	r3, r2, [r1]
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e5      	bne.n	8001fa6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3314      	adds	r3, #20
 8001fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	e853 3f00 	ldrex	r3, [r3]
 8001fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3314      	adds	r3, #20
 8001ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ffa:	623a      	str	r2, [r7, #32]
 8001ffc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffe:	69f9      	ldr	r1, [r7, #28]
 8002000:	6a3a      	ldr	r2, [r7, #32]
 8002002:	e841 2300 	strex	r3, r2, [r1]
 8002006:	61bb      	str	r3, [r7, #24]
   return(result);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1e5      	bne.n	8001fda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e00f      	b.n	800204a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4013      	ands	r3, r2
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	429a      	cmp	r2, r3
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	429a      	cmp	r2, r3
 8002046:	d09f      	beq.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3740      	adds	r7, #64	; 0x40
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	4613      	mov	r3, r2
 800205e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	88fa      	ldrh	r2, [r7, #6]
 800206a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2222      	movs	r2, #34	; 0x22
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002096:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b095      	sub	sp, #84	; 0x54
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	330c      	adds	r3, #12
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	e853 3f00 	ldrex	r3, [r3]
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	330c      	adds	r3, #12
 80020ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020ec:	643a      	str	r2, [r7, #64]	; 0x40
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020f4:	e841 2300 	strex	r3, r2, [r1]
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80020fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e5      	bne.n	80020cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3314      	adds	r3, #20
 8002106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	e853 3f00 	ldrex	r3, [r3]
 800210e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3314      	adds	r3, #20
 800211e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002128:	e841 2300 	strex	r3, r2, [r1]
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e5      	bne.n	8002100 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	2b01      	cmp	r3, #1
 800213a:	d119      	bne.n	8002170 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	e853 3f00 	ldrex	r3, [r3]
 800214a:	60bb      	str	r3, [r7, #8]
   return(result);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f023 0310 	bic.w	r3, r3, #16
 8002152:	647b      	str	r3, [r7, #68]	; 0x44
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	330c      	adds	r3, #12
 800215a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800215c:	61ba      	str	r2, [r7, #24]
 800215e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002160:	6979      	ldr	r1, [r7, #20]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	e841 2300 	strex	r3, r2, [r1]
 8002168:	613b      	str	r3, [r7, #16]
   return(result);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e5      	bne.n	800213c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800217e:	bf00      	nop
 8002180:	3754      	adds	r7, #84	; 0x54
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff fed3 	bl	8001f4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b21      	cmp	r3, #33	; 0x21
 80021c2:	d13e      	bne.n	8002242 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021cc:	d114      	bne.n	80021f8 <UART_Transmit_IT+0x48>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d110      	bne.n	80021f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	1c9a      	adds	r2, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	621a      	str	r2, [r3, #32]
 80021f6:	e008      	b.n	800220a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	1c59      	adds	r1, r3, #1
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6211      	str	r1, [r2, #32]
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29b      	uxth	r3, r3
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4619      	mov	r1, r3
 8002218:	84d1      	strh	r1, [r2, #38]	; 0x26
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800222c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800223c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
  }
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002264:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fe64 	bl	8001f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b08c      	sub	sp, #48	; 0x30
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b22      	cmp	r3, #34	; 0x22
 8002290:	f040 80ae 	bne.w	80023f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229c:	d117      	bne.n	80022ce <UART_Receive_IT+0x50>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28
 80022cc:	e026      	b.n	800231c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e0:	d007      	beq.n	80022f2 <UART_Receive_IT+0x74>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <UART_Receive_IT+0x82>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	e008      	b.n	8002312 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800230c:	b2da      	uxtb	r2, r3
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29b      	uxth	r3, r3
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4619      	mov	r1, r3
 800232a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800232c:	2b00      	cmp	r3, #0
 800232e:	d15d      	bne.n	80023ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0220 	bic.w	r2, r2, #32
 800233e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800234e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	2b01      	cmp	r3, #1
 8002374:	d135      	bne.n	80023e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	e853 3f00 	ldrex	r3, [r3]
 800238a:	613b      	str	r3, [r7, #16]
   return(result);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f023 0310 	bic.w	r3, r3, #16
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	330c      	adds	r3, #12
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	623a      	str	r2, [r7, #32]
 800239e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a0:	69f9      	ldr	r1, [r7, #28]
 80023a2:	6a3a      	ldr	r2, [r7, #32]
 80023a4:	e841 2300 	strex	r3, r2, [r1]
 80023a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e5      	bne.n	800237c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d10a      	bne.n	80023d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fdc0 	bl	8001f60 <HAL_UARTEx_RxEventCallback>
 80023e0:	e002      	b.n	80023e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe f840 	bl	8000468 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e002      	b.n	80023f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e000      	b.n	80023f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80023f0:	2302      	movs	r3, #2
  }
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3730      	adds	r7, #48	; 0x30
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002436:	f023 030c 	bic.w	r3, r3, #12
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	430b      	orrs	r3, r1
 8002442:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <UART_SetConfig+0x114>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d103      	bne.n	800246c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002464:	f7ff f9ae 	bl	80017c4 <HAL_RCC_GetPCLK2Freq>
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	e002      	b.n	8002472 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800246c:	f7ff f996 	bl	800179c <HAL_RCC_GetPCLK1Freq>
 8002470:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009a      	lsls	r2, r3, #2
 800247c:	441a      	add	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	4a22      	ldr	r2, [pc, #136]	; (8002514 <UART_SetConfig+0x118>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	0119      	lsls	r1, r3, #4
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009a      	lsls	r2, r3, #2
 800249c:	441a      	add	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <UART_SetConfig+0x118>)
 80024aa:	fba3 0302 	umull	r0, r3, r3, r2
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2064      	movs	r0, #100	; 0x64
 80024b2:	fb00 f303 	mul.w	r3, r0, r3
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	3332      	adds	r3, #50	; 0x32
 80024bc:	4a15      	ldr	r2, [pc, #84]	; (8002514 <UART_SetConfig+0x118>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c8:	4419      	add	r1, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	009a      	lsls	r2, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <UART_SetConfig+0x118>)
 80024e2:	fba3 0302 	umull	r0, r3, r3, r2
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2064      	movs	r0, #100	; 0x64
 80024ea:	fb00 f303 	mul.w	r3, r0, r3
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	3332      	adds	r3, #50	; 0x32
 80024f4:	4a07      	ldr	r2, [pc, #28]	; (8002514 <UART_SetConfig+0x118>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	f003 020f 	and.w	r2, r3, #15
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	440a      	add	r2, r1
 8002506:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40013800 	.word	0x40013800
 8002514:	51eb851f 	.word	0x51eb851f

08002518 <__errno>:
 8002518:	4b01      	ldr	r3, [pc, #4]	; (8002520 <__errno+0x8>)
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	2000000c 	.word	0x2000000c

08002524 <__sflush_r>:
 8002524:	898a      	ldrh	r2, [r1, #12]
 8002526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002528:	4605      	mov	r5, r0
 800252a:	0710      	lsls	r0, r2, #28
 800252c:	460c      	mov	r4, r1
 800252e:	d457      	bmi.n	80025e0 <__sflush_r+0xbc>
 8002530:	684b      	ldr	r3, [r1, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	dc04      	bgt.n	8002540 <__sflush_r+0x1c>
 8002536:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	dc01      	bgt.n	8002540 <__sflush_r+0x1c>
 800253c:	2000      	movs	r0, #0
 800253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002542:	2e00      	cmp	r6, #0
 8002544:	d0fa      	beq.n	800253c <__sflush_r+0x18>
 8002546:	2300      	movs	r3, #0
 8002548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800254c:	682f      	ldr	r7, [r5, #0]
 800254e:	602b      	str	r3, [r5, #0]
 8002550:	d032      	beq.n	80025b8 <__sflush_r+0x94>
 8002552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	075a      	lsls	r2, r3, #29
 8002558:	d505      	bpl.n	8002566 <__sflush_r+0x42>
 800255a:	6863      	ldr	r3, [r4, #4]
 800255c:	1ac0      	subs	r0, r0, r3
 800255e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002560:	b10b      	cbz	r3, 8002566 <__sflush_r+0x42>
 8002562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002564:	1ac0      	subs	r0, r0, r3
 8002566:	2300      	movs	r3, #0
 8002568:	4602      	mov	r2, r0
 800256a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800256c:	4628      	mov	r0, r5
 800256e:	6a21      	ldr	r1, [r4, #32]
 8002570:	47b0      	blx	r6
 8002572:	1c43      	adds	r3, r0, #1
 8002574:	89a3      	ldrh	r3, [r4, #12]
 8002576:	d106      	bne.n	8002586 <__sflush_r+0x62>
 8002578:	6829      	ldr	r1, [r5, #0]
 800257a:	291d      	cmp	r1, #29
 800257c:	d82c      	bhi.n	80025d8 <__sflush_r+0xb4>
 800257e:	4a29      	ldr	r2, [pc, #164]	; (8002624 <__sflush_r+0x100>)
 8002580:	40ca      	lsrs	r2, r1
 8002582:	07d6      	lsls	r6, r2, #31
 8002584:	d528      	bpl.n	80025d8 <__sflush_r+0xb4>
 8002586:	2200      	movs	r2, #0
 8002588:	6062      	str	r2, [r4, #4]
 800258a:	6922      	ldr	r2, [r4, #16]
 800258c:	04d9      	lsls	r1, r3, #19
 800258e:	6022      	str	r2, [r4, #0]
 8002590:	d504      	bpl.n	800259c <__sflush_r+0x78>
 8002592:	1c42      	adds	r2, r0, #1
 8002594:	d101      	bne.n	800259a <__sflush_r+0x76>
 8002596:	682b      	ldr	r3, [r5, #0]
 8002598:	b903      	cbnz	r3, 800259c <__sflush_r+0x78>
 800259a:	6560      	str	r0, [r4, #84]	; 0x54
 800259c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800259e:	602f      	str	r7, [r5, #0]
 80025a0:	2900      	cmp	r1, #0
 80025a2:	d0cb      	beq.n	800253c <__sflush_r+0x18>
 80025a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025a8:	4299      	cmp	r1, r3
 80025aa:	d002      	beq.n	80025b2 <__sflush_r+0x8e>
 80025ac:	4628      	mov	r0, r5
 80025ae:	f000 f9af 	bl	8002910 <_free_r>
 80025b2:	2000      	movs	r0, #0
 80025b4:	6360      	str	r0, [r4, #52]	; 0x34
 80025b6:	e7c2      	b.n	800253e <__sflush_r+0x1a>
 80025b8:	6a21      	ldr	r1, [r4, #32]
 80025ba:	2301      	movs	r3, #1
 80025bc:	4628      	mov	r0, r5
 80025be:	47b0      	blx	r6
 80025c0:	1c41      	adds	r1, r0, #1
 80025c2:	d1c7      	bne.n	8002554 <__sflush_r+0x30>
 80025c4:	682b      	ldr	r3, [r5, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0c4      	beq.n	8002554 <__sflush_r+0x30>
 80025ca:	2b1d      	cmp	r3, #29
 80025cc:	d001      	beq.n	80025d2 <__sflush_r+0xae>
 80025ce:	2b16      	cmp	r3, #22
 80025d0:	d101      	bne.n	80025d6 <__sflush_r+0xb2>
 80025d2:	602f      	str	r7, [r5, #0]
 80025d4:	e7b2      	b.n	800253c <__sflush_r+0x18>
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025dc:	81a3      	strh	r3, [r4, #12]
 80025de:	e7ae      	b.n	800253e <__sflush_r+0x1a>
 80025e0:	690f      	ldr	r7, [r1, #16]
 80025e2:	2f00      	cmp	r7, #0
 80025e4:	d0aa      	beq.n	800253c <__sflush_r+0x18>
 80025e6:	0793      	lsls	r3, r2, #30
 80025e8:	bf18      	it	ne
 80025ea:	2300      	movne	r3, #0
 80025ec:	680e      	ldr	r6, [r1, #0]
 80025ee:	bf08      	it	eq
 80025f0:	694b      	ldreq	r3, [r1, #20]
 80025f2:	1bf6      	subs	r6, r6, r7
 80025f4:	600f      	str	r7, [r1, #0]
 80025f6:	608b      	str	r3, [r1, #8]
 80025f8:	2e00      	cmp	r6, #0
 80025fa:	dd9f      	ble.n	800253c <__sflush_r+0x18>
 80025fc:	4633      	mov	r3, r6
 80025fe:	463a      	mov	r2, r7
 8002600:	4628      	mov	r0, r5
 8002602:	6a21      	ldr	r1, [r4, #32]
 8002604:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002608:	47e0      	blx	ip
 800260a:	2800      	cmp	r0, #0
 800260c:	dc06      	bgt.n	800261c <__sflush_r+0xf8>
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002618:	81a3      	strh	r3, [r4, #12]
 800261a:	e790      	b.n	800253e <__sflush_r+0x1a>
 800261c:	4407      	add	r7, r0
 800261e:	1a36      	subs	r6, r6, r0
 8002620:	e7ea      	b.n	80025f8 <__sflush_r+0xd4>
 8002622:	bf00      	nop
 8002624:	20400001 	.word	0x20400001

08002628 <_fflush_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	690b      	ldr	r3, [r1, #16]
 800262c:	4605      	mov	r5, r0
 800262e:	460c      	mov	r4, r1
 8002630:	b913      	cbnz	r3, 8002638 <_fflush_r+0x10>
 8002632:	2500      	movs	r5, #0
 8002634:	4628      	mov	r0, r5
 8002636:	bd38      	pop	{r3, r4, r5, pc}
 8002638:	b118      	cbz	r0, 8002642 <_fflush_r+0x1a>
 800263a:	6983      	ldr	r3, [r0, #24]
 800263c:	b90b      	cbnz	r3, 8002642 <_fflush_r+0x1a>
 800263e:	f000 f899 	bl	8002774 <__sinit>
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <_fflush_r+0x6c>)
 8002644:	429c      	cmp	r4, r3
 8002646:	d11b      	bne.n	8002680 <_fflush_r+0x58>
 8002648:	686c      	ldr	r4, [r5, #4]
 800264a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ef      	beq.n	8002632 <_fflush_r+0xa>
 8002652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002654:	07d0      	lsls	r0, r2, #31
 8002656:	d404      	bmi.n	8002662 <_fflush_r+0x3a>
 8002658:	0599      	lsls	r1, r3, #22
 800265a:	d402      	bmi.n	8002662 <_fflush_r+0x3a>
 800265c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800265e:	f000 f94c 	bl	80028fa <__retarget_lock_acquire_recursive>
 8002662:	4628      	mov	r0, r5
 8002664:	4621      	mov	r1, r4
 8002666:	f7ff ff5d 	bl	8002524 <__sflush_r>
 800266a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800266c:	4605      	mov	r5, r0
 800266e:	07da      	lsls	r2, r3, #31
 8002670:	d4e0      	bmi.n	8002634 <_fflush_r+0xc>
 8002672:	89a3      	ldrh	r3, [r4, #12]
 8002674:	059b      	lsls	r3, r3, #22
 8002676:	d4dd      	bmi.n	8002634 <_fflush_r+0xc>
 8002678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800267a:	f000 f93f 	bl	80028fc <__retarget_lock_release_recursive>
 800267e:	e7d9      	b.n	8002634 <_fflush_r+0xc>
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <_fflush_r+0x70>)
 8002682:	429c      	cmp	r4, r3
 8002684:	d101      	bne.n	800268a <_fflush_r+0x62>
 8002686:	68ac      	ldr	r4, [r5, #8]
 8002688:	e7df      	b.n	800264a <_fflush_r+0x22>
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <_fflush_r+0x74>)
 800268c:	429c      	cmp	r4, r3
 800268e:	bf08      	it	eq
 8002690:	68ec      	ldreq	r4, [r5, #12]
 8002692:	e7da      	b.n	800264a <_fflush_r+0x22>
 8002694:	08003700 	.word	0x08003700
 8002698:	08003720 	.word	0x08003720
 800269c:	080036e0 	.word	0x080036e0

080026a0 <fflush>:
 80026a0:	4601      	mov	r1, r0
 80026a2:	b920      	cbnz	r0, 80026ae <fflush+0xe>
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <fflush+0x18>)
 80026a6:	4905      	ldr	r1, [pc, #20]	; (80026bc <fflush+0x1c>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	f000 b8e1 	b.w	8002870 <_fwalk_reent>
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <fflush+0x20>)
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	f7ff bfb9 	b.w	8002628 <_fflush_r>
 80026b6:	bf00      	nop
 80026b8:	08003740 	.word	0x08003740
 80026bc:	08002629 	.word	0x08002629
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <std>:
 80026c4:	2300      	movs	r3, #0
 80026c6:	b510      	push	{r4, lr}
 80026c8:	4604      	mov	r4, r0
 80026ca:	e9c0 3300 	strd	r3, r3, [r0]
 80026ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026d2:	6083      	str	r3, [r0, #8]
 80026d4:	8181      	strh	r1, [r0, #12]
 80026d6:	6643      	str	r3, [r0, #100]	; 0x64
 80026d8:	81c2      	strh	r2, [r0, #14]
 80026da:	6183      	str	r3, [r0, #24]
 80026dc:	4619      	mov	r1, r3
 80026de:	2208      	movs	r2, #8
 80026e0:	305c      	adds	r0, #92	; 0x5c
 80026e2:	f000 f90c 	bl	80028fe <memset>
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <std+0x38>)
 80026e8:	6224      	str	r4, [r4, #32]
 80026ea:	6263      	str	r3, [r4, #36]	; 0x24
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <std+0x3c>)
 80026ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <std+0x40>)
 80026f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <std+0x44>)
 80026f6:	6323      	str	r3, [r4, #48]	; 0x30
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	bf00      	nop
 80026fc:	08002c05 	.word	0x08002c05
 8002700:	08002c27 	.word	0x08002c27
 8002704:	08002c5f 	.word	0x08002c5f
 8002708:	08002c83 	.word	0x08002c83

0800270c <_cleanup_r>:
 800270c:	4901      	ldr	r1, [pc, #4]	; (8002714 <_cleanup_r+0x8>)
 800270e:	f000 b8af 	b.w	8002870 <_fwalk_reent>
 8002712:	bf00      	nop
 8002714:	08002629 	.word	0x08002629

08002718 <__sfmoreglue>:
 8002718:	2268      	movs	r2, #104	; 0x68
 800271a:	b570      	push	{r4, r5, r6, lr}
 800271c:	1e4d      	subs	r5, r1, #1
 800271e:	4355      	muls	r5, r2
 8002720:	460e      	mov	r6, r1
 8002722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002726:	f000 f95b 	bl	80029e0 <_malloc_r>
 800272a:	4604      	mov	r4, r0
 800272c:	b140      	cbz	r0, 8002740 <__sfmoreglue+0x28>
 800272e:	2100      	movs	r1, #0
 8002730:	e9c0 1600 	strd	r1, r6, [r0]
 8002734:	300c      	adds	r0, #12
 8002736:	60a0      	str	r0, [r4, #8]
 8002738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800273c:	f000 f8df 	bl	80028fe <memset>
 8002740:	4620      	mov	r0, r4
 8002742:	bd70      	pop	{r4, r5, r6, pc}

08002744 <__sfp_lock_acquire>:
 8002744:	4801      	ldr	r0, [pc, #4]	; (800274c <__sfp_lock_acquire+0x8>)
 8002746:	f000 b8d8 	b.w	80028fa <__retarget_lock_acquire_recursive>
 800274a:	bf00      	nop
 800274c:	200000e5 	.word	0x200000e5

08002750 <__sfp_lock_release>:
 8002750:	4801      	ldr	r0, [pc, #4]	; (8002758 <__sfp_lock_release+0x8>)
 8002752:	f000 b8d3 	b.w	80028fc <__retarget_lock_release_recursive>
 8002756:	bf00      	nop
 8002758:	200000e5 	.word	0x200000e5

0800275c <__sinit_lock_acquire>:
 800275c:	4801      	ldr	r0, [pc, #4]	; (8002764 <__sinit_lock_acquire+0x8>)
 800275e:	f000 b8cc 	b.w	80028fa <__retarget_lock_acquire_recursive>
 8002762:	bf00      	nop
 8002764:	200000e6 	.word	0x200000e6

08002768 <__sinit_lock_release>:
 8002768:	4801      	ldr	r0, [pc, #4]	; (8002770 <__sinit_lock_release+0x8>)
 800276a:	f000 b8c7 	b.w	80028fc <__retarget_lock_release_recursive>
 800276e:	bf00      	nop
 8002770:	200000e6 	.word	0x200000e6

08002774 <__sinit>:
 8002774:	b510      	push	{r4, lr}
 8002776:	4604      	mov	r4, r0
 8002778:	f7ff fff0 	bl	800275c <__sinit_lock_acquire>
 800277c:	69a3      	ldr	r3, [r4, #24]
 800277e:	b11b      	cbz	r3, 8002788 <__sinit+0x14>
 8002780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002784:	f7ff bff0 	b.w	8002768 <__sinit_lock_release>
 8002788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800278c:	6523      	str	r3, [r4, #80]	; 0x50
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <__sinit+0x68>)
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <__sinit+0x6c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	62a2      	str	r2, [r4, #40]	; 0x28
 8002796:	42a3      	cmp	r3, r4
 8002798:	bf08      	it	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	4620      	mov	r0, r4
 800279e:	bf08      	it	eq
 80027a0:	61a3      	streq	r3, [r4, #24]
 80027a2:	f000 f81f 	bl	80027e4 <__sfp>
 80027a6:	6060      	str	r0, [r4, #4]
 80027a8:	4620      	mov	r0, r4
 80027aa:	f000 f81b 	bl	80027e4 <__sfp>
 80027ae:	60a0      	str	r0, [r4, #8]
 80027b0:	4620      	mov	r0, r4
 80027b2:	f000 f817 	bl	80027e4 <__sfp>
 80027b6:	2200      	movs	r2, #0
 80027b8:	2104      	movs	r1, #4
 80027ba:	60e0      	str	r0, [r4, #12]
 80027bc:	6860      	ldr	r0, [r4, #4]
 80027be:	f7ff ff81 	bl	80026c4 <std>
 80027c2:	2201      	movs	r2, #1
 80027c4:	2109      	movs	r1, #9
 80027c6:	68a0      	ldr	r0, [r4, #8]
 80027c8:	f7ff ff7c 	bl	80026c4 <std>
 80027cc:	2202      	movs	r2, #2
 80027ce:	2112      	movs	r1, #18
 80027d0:	68e0      	ldr	r0, [r4, #12]
 80027d2:	f7ff ff77 	bl	80026c4 <std>
 80027d6:	2301      	movs	r3, #1
 80027d8:	61a3      	str	r3, [r4, #24]
 80027da:	e7d1      	b.n	8002780 <__sinit+0xc>
 80027dc:	08003740 	.word	0x08003740
 80027e0:	0800270d 	.word	0x0800270d

080027e4 <__sfp>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	4607      	mov	r7, r0
 80027e8:	f7ff ffac 	bl	8002744 <__sfp_lock_acquire>
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <__sfp+0x84>)
 80027ee:	681e      	ldr	r6, [r3, #0]
 80027f0:	69b3      	ldr	r3, [r6, #24]
 80027f2:	b913      	cbnz	r3, 80027fa <__sfp+0x16>
 80027f4:	4630      	mov	r0, r6
 80027f6:	f7ff ffbd 	bl	8002774 <__sinit>
 80027fa:	3648      	adds	r6, #72	; 0x48
 80027fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	d503      	bpl.n	800280c <__sfp+0x28>
 8002804:	6833      	ldr	r3, [r6, #0]
 8002806:	b30b      	cbz	r3, 800284c <__sfp+0x68>
 8002808:	6836      	ldr	r6, [r6, #0]
 800280a:	e7f7      	b.n	80027fc <__sfp+0x18>
 800280c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002810:	b9d5      	cbnz	r5, 8002848 <__sfp+0x64>
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <__sfp+0x88>)
 8002814:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002818:	60e3      	str	r3, [r4, #12]
 800281a:	6665      	str	r5, [r4, #100]	; 0x64
 800281c:	f000 f86c 	bl	80028f8 <__retarget_lock_init_recursive>
 8002820:	f7ff ff96 	bl	8002750 <__sfp_lock_release>
 8002824:	2208      	movs	r2, #8
 8002826:	4629      	mov	r1, r5
 8002828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800282c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002830:	6025      	str	r5, [r4, #0]
 8002832:	61a5      	str	r5, [r4, #24]
 8002834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002838:	f000 f861 	bl	80028fe <memset>
 800283c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002844:	4620      	mov	r0, r4
 8002846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002848:	3468      	adds	r4, #104	; 0x68
 800284a:	e7d9      	b.n	8002800 <__sfp+0x1c>
 800284c:	2104      	movs	r1, #4
 800284e:	4638      	mov	r0, r7
 8002850:	f7ff ff62 	bl	8002718 <__sfmoreglue>
 8002854:	4604      	mov	r4, r0
 8002856:	6030      	str	r0, [r6, #0]
 8002858:	2800      	cmp	r0, #0
 800285a:	d1d5      	bne.n	8002808 <__sfp+0x24>
 800285c:	f7ff ff78 	bl	8002750 <__sfp_lock_release>
 8002860:	230c      	movs	r3, #12
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	e7ee      	b.n	8002844 <__sfp+0x60>
 8002866:	bf00      	nop
 8002868:	08003740 	.word	0x08003740
 800286c:	ffff0001 	.word	0xffff0001

08002870 <_fwalk_reent>:
 8002870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002874:	4606      	mov	r6, r0
 8002876:	4688      	mov	r8, r1
 8002878:	2700      	movs	r7, #0
 800287a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800287e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002882:	f1b9 0901 	subs.w	r9, r9, #1
 8002886:	d505      	bpl.n	8002894 <_fwalk_reent+0x24>
 8002888:	6824      	ldr	r4, [r4, #0]
 800288a:	2c00      	cmp	r4, #0
 800288c:	d1f7      	bne.n	800287e <_fwalk_reent+0xe>
 800288e:	4638      	mov	r0, r7
 8002890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002894:	89ab      	ldrh	r3, [r5, #12]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d907      	bls.n	80028aa <_fwalk_reent+0x3a>
 800289a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800289e:	3301      	adds	r3, #1
 80028a0:	d003      	beq.n	80028aa <_fwalk_reent+0x3a>
 80028a2:	4629      	mov	r1, r5
 80028a4:	4630      	mov	r0, r6
 80028a6:	47c0      	blx	r8
 80028a8:	4307      	orrs	r7, r0
 80028aa:	3568      	adds	r5, #104	; 0x68
 80028ac:	e7e9      	b.n	8002882 <_fwalk_reent+0x12>
	...

080028b0 <__libc_init_array>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	2600      	movs	r6, #0
 80028b4:	4d0c      	ldr	r5, [pc, #48]	; (80028e8 <__libc_init_array+0x38>)
 80028b6:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <__libc_init_array+0x3c>)
 80028b8:	1b64      	subs	r4, r4, r5
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	42a6      	cmp	r6, r4
 80028be:	d109      	bne.n	80028d4 <__libc_init_array+0x24>
 80028c0:	f000 fe7a 	bl	80035b8 <_init>
 80028c4:	2600      	movs	r6, #0
 80028c6:	4d0a      	ldr	r5, [pc, #40]	; (80028f0 <__libc_init_array+0x40>)
 80028c8:	4c0a      	ldr	r4, [pc, #40]	; (80028f4 <__libc_init_array+0x44>)
 80028ca:	1b64      	subs	r4, r4, r5
 80028cc:	10a4      	asrs	r4, r4, #2
 80028ce:	42a6      	cmp	r6, r4
 80028d0:	d105      	bne.n	80028de <__libc_init_array+0x2e>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d8:	4798      	blx	r3
 80028da:	3601      	adds	r6, #1
 80028dc:	e7ee      	b.n	80028bc <__libc_init_array+0xc>
 80028de:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e2:	4798      	blx	r3
 80028e4:	3601      	adds	r6, #1
 80028e6:	e7f2      	b.n	80028ce <__libc_init_array+0x1e>
 80028e8:	08003778 	.word	0x08003778
 80028ec:	08003778 	.word	0x08003778
 80028f0:	08003778 	.word	0x08003778
 80028f4:	0800377c 	.word	0x0800377c

080028f8 <__retarget_lock_init_recursive>:
 80028f8:	4770      	bx	lr

080028fa <__retarget_lock_acquire_recursive>:
 80028fa:	4770      	bx	lr

080028fc <__retarget_lock_release_recursive>:
 80028fc:	4770      	bx	lr

080028fe <memset>:
 80028fe:	4603      	mov	r3, r0
 8002900:	4402      	add	r2, r0
 8002902:	4293      	cmp	r3, r2
 8002904:	d100      	bne.n	8002908 <memset+0xa>
 8002906:	4770      	bx	lr
 8002908:	f803 1b01 	strb.w	r1, [r3], #1
 800290c:	e7f9      	b.n	8002902 <memset+0x4>
	...

08002910 <_free_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4605      	mov	r5, r0
 8002914:	2900      	cmp	r1, #0
 8002916:	d040      	beq.n	800299a <_free_r+0x8a>
 8002918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800291c:	1f0c      	subs	r4, r1, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	bfb8      	it	lt
 8002922:	18e4      	addlt	r4, r4, r3
 8002924:	f000 fb0c 	bl	8002f40 <__malloc_lock>
 8002928:	4a1c      	ldr	r2, [pc, #112]	; (800299c <_free_r+0x8c>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	b933      	cbnz	r3, 800293c <_free_r+0x2c>
 800292e:	6063      	str	r3, [r4, #4]
 8002930:	6014      	str	r4, [r2, #0]
 8002932:	4628      	mov	r0, r5
 8002934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002938:	f000 bb08 	b.w	8002f4c <__malloc_unlock>
 800293c:	42a3      	cmp	r3, r4
 800293e:	d908      	bls.n	8002952 <_free_r+0x42>
 8002940:	6820      	ldr	r0, [r4, #0]
 8002942:	1821      	adds	r1, r4, r0
 8002944:	428b      	cmp	r3, r1
 8002946:	bf01      	itttt	eq
 8002948:	6819      	ldreq	r1, [r3, #0]
 800294a:	685b      	ldreq	r3, [r3, #4]
 800294c:	1809      	addeq	r1, r1, r0
 800294e:	6021      	streq	r1, [r4, #0]
 8002950:	e7ed      	b.n	800292e <_free_r+0x1e>
 8002952:	461a      	mov	r2, r3
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	b10b      	cbz	r3, 800295c <_free_r+0x4c>
 8002958:	42a3      	cmp	r3, r4
 800295a:	d9fa      	bls.n	8002952 <_free_r+0x42>
 800295c:	6811      	ldr	r1, [r2, #0]
 800295e:	1850      	adds	r0, r2, r1
 8002960:	42a0      	cmp	r0, r4
 8002962:	d10b      	bne.n	800297c <_free_r+0x6c>
 8002964:	6820      	ldr	r0, [r4, #0]
 8002966:	4401      	add	r1, r0
 8002968:	1850      	adds	r0, r2, r1
 800296a:	4283      	cmp	r3, r0
 800296c:	6011      	str	r1, [r2, #0]
 800296e:	d1e0      	bne.n	8002932 <_free_r+0x22>
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4401      	add	r1, r0
 8002976:	6011      	str	r1, [r2, #0]
 8002978:	6053      	str	r3, [r2, #4]
 800297a:	e7da      	b.n	8002932 <_free_r+0x22>
 800297c:	d902      	bls.n	8002984 <_free_r+0x74>
 800297e:	230c      	movs	r3, #12
 8002980:	602b      	str	r3, [r5, #0]
 8002982:	e7d6      	b.n	8002932 <_free_r+0x22>
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	1821      	adds	r1, r4, r0
 8002988:	428b      	cmp	r3, r1
 800298a:	bf01      	itttt	eq
 800298c:	6819      	ldreq	r1, [r3, #0]
 800298e:	685b      	ldreq	r3, [r3, #4]
 8002990:	1809      	addeq	r1, r1, r0
 8002992:	6021      	streq	r1, [r4, #0]
 8002994:	6063      	str	r3, [r4, #4]
 8002996:	6054      	str	r4, [r2, #4]
 8002998:	e7cb      	b.n	8002932 <_free_r+0x22>
 800299a:	bd38      	pop	{r3, r4, r5, pc}
 800299c:	200000e8 	.word	0x200000e8

080029a0 <sbrk_aligned>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4e0e      	ldr	r6, [pc, #56]	; (80029dc <sbrk_aligned+0x3c>)
 80029a4:	460c      	mov	r4, r1
 80029a6:	6831      	ldr	r1, [r6, #0]
 80029a8:	4605      	mov	r5, r0
 80029aa:	b911      	cbnz	r1, 80029b2 <sbrk_aligned+0x12>
 80029ac:	f000 f91a 	bl	8002be4 <_sbrk_r>
 80029b0:	6030      	str	r0, [r6, #0]
 80029b2:	4621      	mov	r1, r4
 80029b4:	4628      	mov	r0, r5
 80029b6:	f000 f915 	bl	8002be4 <_sbrk_r>
 80029ba:	1c43      	adds	r3, r0, #1
 80029bc:	d00a      	beq.n	80029d4 <sbrk_aligned+0x34>
 80029be:	1cc4      	adds	r4, r0, #3
 80029c0:	f024 0403 	bic.w	r4, r4, #3
 80029c4:	42a0      	cmp	r0, r4
 80029c6:	d007      	beq.n	80029d8 <sbrk_aligned+0x38>
 80029c8:	1a21      	subs	r1, r4, r0
 80029ca:	4628      	mov	r0, r5
 80029cc:	f000 f90a 	bl	8002be4 <_sbrk_r>
 80029d0:	3001      	adds	r0, #1
 80029d2:	d101      	bne.n	80029d8 <sbrk_aligned+0x38>
 80029d4:	f04f 34ff 	mov.w	r4, #4294967295
 80029d8:	4620      	mov	r0, r4
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	200000ec 	.word	0x200000ec

080029e0 <_malloc_r>:
 80029e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e4:	1ccd      	adds	r5, r1, #3
 80029e6:	f025 0503 	bic.w	r5, r5, #3
 80029ea:	3508      	adds	r5, #8
 80029ec:	2d0c      	cmp	r5, #12
 80029ee:	bf38      	it	cc
 80029f0:	250c      	movcc	r5, #12
 80029f2:	2d00      	cmp	r5, #0
 80029f4:	4607      	mov	r7, r0
 80029f6:	db01      	blt.n	80029fc <_malloc_r+0x1c>
 80029f8:	42a9      	cmp	r1, r5
 80029fa:	d905      	bls.n	8002a08 <_malloc_r+0x28>
 80029fc:	230c      	movs	r3, #12
 80029fe:	2600      	movs	r6, #0
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4630      	mov	r0, r6
 8002a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a08:	4e2e      	ldr	r6, [pc, #184]	; (8002ac4 <_malloc_r+0xe4>)
 8002a0a:	f000 fa99 	bl	8002f40 <__malloc_lock>
 8002a0e:	6833      	ldr	r3, [r6, #0]
 8002a10:	461c      	mov	r4, r3
 8002a12:	bb34      	cbnz	r4, 8002a62 <_malloc_r+0x82>
 8002a14:	4629      	mov	r1, r5
 8002a16:	4638      	mov	r0, r7
 8002a18:	f7ff ffc2 	bl	80029a0 <sbrk_aligned>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	4604      	mov	r4, r0
 8002a20:	d14d      	bne.n	8002abe <_malloc_r+0xde>
 8002a22:	6834      	ldr	r4, [r6, #0]
 8002a24:	4626      	mov	r6, r4
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	d140      	bne.n	8002aac <_malloc_r+0xcc>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	4631      	mov	r1, r6
 8002a2e:	4638      	mov	r0, r7
 8002a30:	eb04 0803 	add.w	r8, r4, r3
 8002a34:	f000 f8d6 	bl	8002be4 <_sbrk_r>
 8002a38:	4580      	cmp	r8, r0
 8002a3a:	d13a      	bne.n	8002ab2 <_malloc_r+0xd2>
 8002a3c:	6821      	ldr	r1, [r4, #0]
 8002a3e:	3503      	adds	r5, #3
 8002a40:	1a6d      	subs	r5, r5, r1
 8002a42:	f025 0503 	bic.w	r5, r5, #3
 8002a46:	3508      	adds	r5, #8
 8002a48:	2d0c      	cmp	r5, #12
 8002a4a:	bf38      	it	cc
 8002a4c:	250c      	movcc	r5, #12
 8002a4e:	4638      	mov	r0, r7
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7ff ffa5 	bl	80029a0 <sbrk_aligned>
 8002a56:	3001      	adds	r0, #1
 8002a58:	d02b      	beq.n	8002ab2 <_malloc_r+0xd2>
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	442b      	add	r3, r5
 8002a5e:	6023      	str	r3, [r4, #0]
 8002a60:	e00e      	b.n	8002a80 <_malloc_r+0xa0>
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	1b52      	subs	r2, r2, r5
 8002a66:	d41e      	bmi.n	8002aa6 <_malloc_r+0xc6>
 8002a68:	2a0b      	cmp	r2, #11
 8002a6a:	d916      	bls.n	8002a9a <_malloc_r+0xba>
 8002a6c:	1961      	adds	r1, r4, r5
 8002a6e:	42a3      	cmp	r3, r4
 8002a70:	6025      	str	r5, [r4, #0]
 8002a72:	bf18      	it	ne
 8002a74:	6059      	strne	r1, [r3, #4]
 8002a76:	6863      	ldr	r3, [r4, #4]
 8002a78:	bf08      	it	eq
 8002a7a:	6031      	streq	r1, [r6, #0]
 8002a7c:	5162      	str	r2, [r4, r5]
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	4638      	mov	r0, r7
 8002a82:	f104 060b 	add.w	r6, r4, #11
 8002a86:	f000 fa61 	bl	8002f4c <__malloc_unlock>
 8002a8a:	f026 0607 	bic.w	r6, r6, #7
 8002a8e:	1d23      	adds	r3, r4, #4
 8002a90:	1af2      	subs	r2, r6, r3
 8002a92:	d0b6      	beq.n	8002a02 <_malloc_r+0x22>
 8002a94:	1b9b      	subs	r3, r3, r6
 8002a96:	50a3      	str	r3, [r4, r2]
 8002a98:	e7b3      	b.n	8002a02 <_malloc_r+0x22>
 8002a9a:	6862      	ldr	r2, [r4, #4]
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	bf0c      	ite	eq
 8002aa0:	6032      	streq	r2, [r6, #0]
 8002aa2:	605a      	strne	r2, [r3, #4]
 8002aa4:	e7ec      	b.n	8002a80 <_malloc_r+0xa0>
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	6864      	ldr	r4, [r4, #4]
 8002aaa:	e7b2      	b.n	8002a12 <_malloc_r+0x32>
 8002aac:	4634      	mov	r4, r6
 8002aae:	6876      	ldr	r6, [r6, #4]
 8002ab0:	e7b9      	b.n	8002a26 <_malloc_r+0x46>
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	4638      	mov	r0, r7
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	f000 fa48 	bl	8002f4c <__malloc_unlock>
 8002abc:	e7a1      	b.n	8002a02 <_malloc_r+0x22>
 8002abe:	6025      	str	r5, [r4, #0]
 8002ac0:	e7de      	b.n	8002a80 <_malloc_r+0xa0>
 8002ac2:	bf00      	nop
 8002ac4:	200000e8 	.word	0x200000e8

08002ac8 <iprintf>:
 8002ac8:	b40f      	push	{r0, r1, r2, r3}
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <iprintf+0x2c>)
 8002acc:	b513      	push	{r0, r1, r4, lr}
 8002ace:	681c      	ldr	r4, [r3, #0]
 8002ad0:	b124      	cbz	r4, 8002adc <iprintf+0x14>
 8002ad2:	69a3      	ldr	r3, [r4, #24]
 8002ad4:	b913      	cbnz	r3, 8002adc <iprintf+0x14>
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f7ff fe4c 	bl	8002774 <__sinit>
 8002adc:	ab05      	add	r3, sp, #20
 8002ade:	4620      	mov	r0, r4
 8002ae0:	9a04      	ldr	r2, [sp, #16]
 8002ae2:	68a1      	ldr	r1, [r4, #8]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	f000 fa5f 	bl	8002fa8 <_vfiprintf_r>
 8002aea:	b002      	add	sp, #8
 8002aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af0:	b004      	add	sp, #16
 8002af2:	4770      	bx	lr
 8002af4:	2000000c 	.word	0x2000000c

08002af8 <_puts_r>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	460e      	mov	r6, r1
 8002afc:	4605      	mov	r5, r0
 8002afe:	b118      	cbz	r0, 8002b08 <_puts_r+0x10>
 8002b00:	6983      	ldr	r3, [r0, #24]
 8002b02:	b90b      	cbnz	r3, 8002b08 <_puts_r+0x10>
 8002b04:	f7ff fe36 	bl	8002774 <__sinit>
 8002b08:	69ab      	ldr	r3, [r5, #24]
 8002b0a:	68ac      	ldr	r4, [r5, #8]
 8002b0c:	b913      	cbnz	r3, 8002b14 <_puts_r+0x1c>
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f7ff fe30 	bl	8002774 <__sinit>
 8002b14:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <_puts_r+0xd0>)
 8002b16:	429c      	cmp	r4, r3
 8002b18:	d120      	bne.n	8002b5c <_puts_r+0x64>
 8002b1a:	686c      	ldr	r4, [r5, #4]
 8002b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b1e:	07db      	lsls	r3, r3, #31
 8002b20:	d405      	bmi.n	8002b2e <_puts_r+0x36>
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	0598      	lsls	r0, r3, #22
 8002b26:	d402      	bmi.n	8002b2e <_puts_r+0x36>
 8002b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b2a:	f7ff fee6 	bl	80028fa <__retarget_lock_acquire_recursive>
 8002b2e:	89a3      	ldrh	r3, [r4, #12]
 8002b30:	0719      	lsls	r1, r3, #28
 8002b32:	d51d      	bpl.n	8002b70 <_puts_r+0x78>
 8002b34:	6923      	ldr	r3, [r4, #16]
 8002b36:	b1db      	cbz	r3, 8002b70 <_puts_r+0x78>
 8002b38:	3e01      	subs	r6, #1
 8002b3a:	68a3      	ldr	r3, [r4, #8]
 8002b3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002b40:	3b01      	subs	r3, #1
 8002b42:	60a3      	str	r3, [r4, #8]
 8002b44:	bb39      	cbnz	r1, 8002b96 <_puts_r+0x9e>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	da38      	bge.n	8002bbc <_puts_r+0xc4>
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	210a      	movs	r1, #10
 8002b4e:	4628      	mov	r0, r5
 8002b50:	f000 f89c 	bl	8002c8c <__swbuf_r>
 8002b54:	3001      	adds	r0, #1
 8002b56:	d011      	beq.n	8002b7c <_puts_r+0x84>
 8002b58:	250a      	movs	r5, #10
 8002b5a:	e011      	b.n	8002b80 <_puts_r+0x88>
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <_puts_r+0xd4>)
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d101      	bne.n	8002b66 <_puts_r+0x6e>
 8002b62:	68ac      	ldr	r4, [r5, #8]
 8002b64:	e7da      	b.n	8002b1c <_puts_r+0x24>
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <_puts_r+0xd8>)
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	bf08      	it	eq
 8002b6c:	68ec      	ldreq	r4, [r5, #12]
 8002b6e:	e7d5      	b.n	8002b1c <_puts_r+0x24>
 8002b70:	4621      	mov	r1, r4
 8002b72:	4628      	mov	r0, r5
 8002b74:	f000 f8ee 	bl	8002d54 <__swsetup_r>
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d0dd      	beq.n	8002b38 <_puts_r+0x40>
 8002b7c:	f04f 35ff 	mov.w	r5, #4294967295
 8002b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b82:	07da      	lsls	r2, r3, #31
 8002b84:	d405      	bmi.n	8002b92 <_puts_r+0x9a>
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	059b      	lsls	r3, r3, #22
 8002b8a:	d402      	bmi.n	8002b92 <_puts_r+0x9a>
 8002b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b8e:	f7ff feb5 	bl	80028fc <__retarget_lock_release_recursive>
 8002b92:	4628      	mov	r0, r5
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da04      	bge.n	8002ba4 <_puts_r+0xac>
 8002b9a:	69a2      	ldr	r2, [r4, #24]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	dc06      	bgt.n	8002bae <_puts_r+0xb6>
 8002ba0:	290a      	cmp	r1, #10
 8002ba2:	d004      	beq.n	8002bae <_puts_r+0xb6>
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	6022      	str	r2, [r4, #0]
 8002baa:	7019      	strb	r1, [r3, #0]
 8002bac:	e7c5      	b.n	8002b3a <_puts_r+0x42>
 8002bae:	4622      	mov	r2, r4
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f000 f86b 	bl	8002c8c <__swbuf_r>
 8002bb6:	3001      	adds	r0, #1
 8002bb8:	d1bf      	bne.n	8002b3a <_puts_r+0x42>
 8002bba:	e7df      	b.n	8002b7c <_puts_r+0x84>
 8002bbc:	250a      	movs	r5, #10
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	6022      	str	r2, [r4, #0]
 8002bc4:	701d      	strb	r5, [r3, #0]
 8002bc6:	e7db      	b.n	8002b80 <_puts_r+0x88>
 8002bc8:	08003700 	.word	0x08003700
 8002bcc:	08003720 	.word	0x08003720
 8002bd0:	080036e0 	.word	0x080036e0

08002bd4 <puts>:
 8002bd4:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <puts+0xc>)
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	f7ff bf8d 	b.w	8002af8 <_puts_r>
 8002bde:	bf00      	nop
 8002be0:	2000000c 	.word	0x2000000c

08002be4 <_sbrk_r>:
 8002be4:	b538      	push	{r3, r4, r5, lr}
 8002be6:	2300      	movs	r3, #0
 8002be8:	4d05      	ldr	r5, [pc, #20]	; (8002c00 <_sbrk_r+0x1c>)
 8002bea:	4604      	mov	r4, r0
 8002bec:	4608      	mov	r0, r1
 8002bee:	602b      	str	r3, [r5, #0]
 8002bf0:	f7fd fda4 	bl	800073c <_sbrk>
 8002bf4:	1c43      	adds	r3, r0, #1
 8002bf6:	d102      	bne.n	8002bfe <_sbrk_r+0x1a>
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	b103      	cbz	r3, 8002bfe <_sbrk_r+0x1a>
 8002bfc:	6023      	str	r3, [r4, #0]
 8002bfe:	bd38      	pop	{r3, r4, r5, pc}
 8002c00:	200000f0 	.word	0x200000f0

08002c04 <__sread>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	460c      	mov	r4, r1
 8002c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c0c:	f000 fc92 	bl	8003534 <_read_r>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	bfab      	itete	ge
 8002c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c16:	89a3      	ldrhlt	r3, [r4, #12]
 8002c18:	181b      	addge	r3, r3, r0
 8002c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c1e:	bfac      	ite	ge
 8002c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c22:	81a3      	strhlt	r3, [r4, #12]
 8002c24:	bd10      	pop	{r4, pc}

08002c26 <__swrite>:
 8002c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c2a:	461f      	mov	r7, r3
 8002c2c:	898b      	ldrh	r3, [r1, #12]
 8002c2e:	4605      	mov	r5, r0
 8002c30:	05db      	lsls	r3, r3, #23
 8002c32:	460c      	mov	r4, r1
 8002c34:	4616      	mov	r6, r2
 8002c36:	d505      	bpl.n	8002c44 <__swrite+0x1e>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c40:	f000 f906 	bl	8002e50 <_lseek_r>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	4632      	mov	r2, r6
 8002c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c4c:	81a3      	strh	r3, [r4, #12]
 8002c4e:	4628      	mov	r0, r5
 8002c50:	463b      	mov	r3, r7
 8002c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5a:	f000 b869 	b.w	8002d30 <_write_r>

08002c5e <__sseek>:
 8002c5e:	b510      	push	{r4, lr}
 8002c60:	460c      	mov	r4, r1
 8002c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c66:	f000 f8f3 	bl	8002e50 <_lseek_r>
 8002c6a:	1c43      	adds	r3, r0, #1
 8002c6c:	89a3      	ldrh	r3, [r4, #12]
 8002c6e:	bf15      	itete	ne
 8002c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c7a:	81a3      	strheq	r3, [r4, #12]
 8002c7c:	bf18      	it	ne
 8002c7e:	81a3      	strhne	r3, [r4, #12]
 8002c80:	bd10      	pop	{r4, pc}

08002c82 <__sclose>:
 8002c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c86:	f000 b8d3 	b.w	8002e30 <_close_r>
	...

08002c8c <__swbuf_r>:
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	460e      	mov	r6, r1
 8002c90:	4614      	mov	r4, r2
 8002c92:	4605      	mov	r5, r0
 8002c94:	b118      	cbz	r0, 8002c9e <__swbuf_r+0x12>
 8002c96:	6983      	ldr	r3, [r0, #24]
 8002c98:	b90b      	cbnz	r3, 8002c9e <__swbuf_r+0x12>
 8002c9a:	f7ff fd6b 	bl	8002774 <__sinit>
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <__swbuf_r+0x98>)
 8002ca0:	429c      	cmp	r4, r3
 8002ca2:	d12b      	bne.n	8002cfc <__swbuf_r+0x70>
 8002ca4:	686c      	ldr	r4, [r5, #4]
 8002ca6:	69a3      	ldr	r3, [r4, #24]
 8002ca8:	60a3      	str	r3, [r4, #8]
 8002caa:	89a3      	ldrh	r3, [r4, #12]
 8002cac:	071a      	lsls	r2, r3, #28
 8002cae:	d52f      	bpl.n	8002d10 <__swbuf_r+0x84>
 8002cb0:	6923      	ldr	r3, [r4, #16]
 8002cb2:	b36b      	cbz	r3, 8002d10 <__swbuf_r+0x84>
 8002cb4:	6923      	ldr	r3, [r4, #16]
 8002cb6:	6820      	ldr	r0, [r4, #0]
 8002cb8:	b2f6      	uxtb	r6, r6
 8002cba:	1ac0      	subs	r0, r0, r3
 8002cbc:	6963      	ldr	r3, [r4, #20]
 8002cbe:	4637      	mov	r7, r6
 8002cc0:	4283      	cmp	r3, r0
 8002cc2:	dc04      	bgt.n	8002cce <__swbuf_r+0x42>
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	f7ff fcae 	bl	8002628 <_fflush_r>
 8002ccc:	bb30      	cbnz	r0, 8002d1c <__swbuf_r+0x90>
 8002cce:	68a3      	ldr	r3, [r4, #8]
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60a3      	str	r3, [r4, #8]
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	6022      	str	r2, [r4, #0]
 8002cdc:	701e      	strb	r6, [r3, #0]
 8002cde:	6963      	ldr	r3, [r4, #20]
 8002ce0:	4283      	cmp	r3, r0
 8002ce2:	d004      	beq.n	8002cee <__swbuf_r+0x62>
 8002ce4:	89a3      	ldrh	r3, [r4, #12]
 8002ce6:	07db      	lsls	r3, r3, #31
 8002ce8:	d506      	bpl.n	8002cf8 <__swbuf_r+0x6c>
 8002cea:	2e0a      	cmp	r6, #10
 8002cec:	d104      	bne.n	8002cf8 <__swbuf_r+0x6c>
 8002cee:	4621      	mov	r1, r4
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	f7ff fc99 	bl	8002628 <_fflush_r>
 8002cf6:	b988      	cbnz	r0, 8002d1c <__swbuf_r+0x90>
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <__swbuf_r+0x9c>)
 8002cfe:	429c      	cmp	r4, r3
 8002d00:	d101      	bne.n	8002d06 <__swbuf_r+0x7a>
 8002d02:	68ac      	ldr	r4, [r5, #8]
 8002d04:	e7cf      	b.n	8002ca6 <__swbuf_r+0x1a>
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <__swbuf_r+0xa0>)
 8002d08:	429c      	cmp	r4, r3
 8002d0a:	bf08      	it	eq
 8002d0c:	68ec      	ldreq	r4, [r5, #12]
 8002d0e:	e7ca      	b.n	8002ca6 <__swbuf_r+0x1a>
 8002d10:	4621      	mov	r1, r4
 8002d12:	4628      	mov	r0, r5
 8002d14:	f000 f81e 	bl	8002d54 <__swsetup_r>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d0cb      	beq.n	8002cb4 <__swbuf_r+0x28>
 8002d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8002d20:	e7ea      	b.n	8002cf8 <__swbuf_r+0x6c>
 8002d22:	bf00      	nop
 8002d24:	08003700 	.word	0x08003700
 8002d28:	08003720 	.word	0x08003720
 8002d2c:	080036e0 	.word	0x080036e0

08002d30 <_write_r>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	4604      	mov	r4, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4d05      	ldr	r5, [pc, #20]	; (8002d50 <_write_r+0x20>)
 8002d3c:	602a      	str	r2, [r5, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f7fd fcaf 	bl	80006a2 <_write>
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d102      	bne.n	8002d4e <_write_r+0x1e>
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	b103      	cbz	r3, 8002d4e <_write_r+0x1e>
 8002d4c:	6023      	str	r3, [r4, #0]
 8002d4e:	bd38      	pop	{r3, r4, r5, pc}
 8002d50:	200000f0 	.word	0x200000f0

08002d54 <__swsetup_r>:
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <__swsetup_r+0xcc>)
 8002d56:	b570      	push	{r4, r5, r6, lr}
 8002d58:	681d      	ldr	r5, [r3, #0]
 8002d5a:	4606      	mov	r6, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	b125      	cbz	r5, 8002d6a <__swsetup_r+0x16>
 8002d60:	69ab      	ldr	r3, [r5, #24]
 8002d62:	b913      	cbnz	r3, 8002d6a <__swsetup_r+0x16>
 8002d64:	4628      	mov	r0, r5
 8002d66:	f7ff fd05 	bl	8002774 <__sinit>
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <__swsetup_r+0xd0>)
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	d10f      	bne.n	8002d90 <__swsetup_r+0x3c>
 8002d70:	686c      	ldr	r4, [r5, #4]
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d78:	0719      	lsls	r1, r3, #28
 8002d7a:	d42c      	bmi.n	8002dd6 <__swsetup_r+0x82>
 8002d7c:	06dd      	lsls	r5, r3, #27
 8002d7e:	d411      	bmi.n	8002da4 <__swsetup_r+0x50>
 8002d80:	2309      	movs	r3, #9
 8002d82:	6033      	str	r3, [r6, #0]
 8002d84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	81a3      	strh	r3, [r4, #12]
 8002d8e:	e03e      	b.n	8002e0e <__swsetup_r+0xba>
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <__swsetup_r+0xd4>)
 8002d92:	429c      	cmp	r4, r3
 8002d94:	d101      	bne.n	8002d9a <__swsetup_r+0x46>
 8002d96:	68ac      	ldr	r4, [r5, #8]
 8002d98:	e7eb      	b.n	8002d72 <__swsetup_r+0x1e>
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <__swsetup_r+0xd8>)
 8002d9c:	429c      	cmp	r4, r3
 8002d9e:	bf08      	it	eq
 8002da0:	68ec      	ldreq	r4, [r5, #12]
 8002da2:	e7e6      	b.n	8002d72 <__swsetup_r+0x1e>
 8002da4:	0758      	lsls	r0, r3, #29
 8002da6:	d512      	bpl.n	8002dce <__swsetup_r+0x7a>
 8002da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002daa:	b141      	cbz	r1, 8002dbe <__swsetup_r+0x6a>
 8002dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002db0:	4299      	cmp	r1, r3
 8002db2:	d002      	beq.n	8002dba <__swsetup_r+0x66>
 8002db4:	4630      	mov	r0, r6
 8002db6:	f7ff fdab 	bl	8002910 <_free_r>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6363      	str	r3, [r4, #52]	; 0x34
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002dc4:	81a3      	strh	r3, [r4, #12]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6063      	str	r3, [r4, #4]
 8002dca:	6923      	ldr	r3, [r4, #16]
 8002dcc:	6023      	str	r3, [r4, #0]
 8002dce:	89a3      	ldrh	r3, [r4, #12]
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	81a3      	strh	r3, [r4, #12]
 8002dd6:	6923      	ldr	r3, [r4, #16]
 8002dd8:	b94b      	cbnz	r3, 8002dee <__swsetup_r+0x9a>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de4:	d003      	beq.n	8002dee <__swsetup_r+0x9a>
 8002de6:	4621      	mov	r1, r4
 8002de8:	4630      	mov	r0, r6
 8002dea:	f000 f869 	bl	8002ec0 <__smakebuf_r>
 8002dee:	89a0      	ldrh	r0, [r4, #12]
 8002df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002df4:	f010 0301 	ands.w	r3, r0, #1
 8002df8:	d00a      	beq.n	8002e10 <__swsetup_r+0xbc>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60a3      	str	r3, [r4, #8]
 8002dfe:	6963      	ldr	r3, [r4, #20]
 8002e00:	425b      	negs	r3, r3
 8002e02:	61a3      	str	r3, [r4, #24]
 8002e04:	6923      	ldr	r3, [r4, #16]
 8002e06:	b943      	cbnz	r3, 8002e1a <__swsetup_r+0xc6>
 8002e08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e0c:	d1ba      	bne.n	8002d84 <__swsetup_r+0x30>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	0781      	lsls	r1, r0, #30
 8002e12:	bf58      	it	pl
 8002e14:	6963      	ldrpl	r3, [r4, #20]
 8002e16:	60a3      	str	r3, [r4, #8]
 8002e18:	e7f4      	b.n	8002e04 <__swsetup_r+0xb0>
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	e7f7      	b.n	8002e0e <__swsetup_r+0xba>
 8002e1e:	bf00      	nop
 8002e20:	2000000c 	.word	0x2000000c
 8002e24:	08003700 	.word	0x08003700
 8002e28:	08003720 	.word	0x08003720
 8002e2c:	080036e0 	.word	0x080036e0

08002e30 <_close_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	2300      	movs	r3, #0
 8002e34:	4d05      	ldr	r5, [pc, #20]	; (8002e4c <_close_r+0x1c>)
 8002e36:	4604      	mov	r4, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	602b      	str	r3, [r5, #0]
 8002e3c:	f7fd fc4d 	bl	80006da <_close>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <_close_r+0x1a>
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	b103      	cbz	r3, 8002e4a <_close_r+0x1a>
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
 8002e4c:	200000f0 	.word	0x200000f0

08002e50 <_lseek_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4d05      	ldr	r5, [pc, #20]	; (8002e70 <_lseek_r+0x20>)
 8002e5c:	602a      	str	r2, [r5, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f7fd fc5f 	bl	8000722 <_lseek>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d102      	bne.n	8002e6e <_lseek_r+0x1e>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	b103      	cbz	r3, 8002e6e <_lseek_r+0x1e>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	200000f0 	.word	0x200000f0

08002e74 <__swhatbuf_r>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	460e      	mov	r6, r1
 8002e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	2900      	cmp	r1, #0
 8002e80:	461d      	mov	r5, r3
 8002e82:	b096      	sub	sp, #88	; 0x58
 8002e84:	da08      	bge.n	8002e98 <__swhatbuf_r+0x24>
 8002e86:	2200      	movs	r2, #0
 8002e88:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002e8c:	602a      	str	r2, [r5, #0]
 8002e8e:	061a      	lsls	r2, r3, #24
 8002e90:	d410      	bmi.n	8002eb4 <__swhatbuf_r+0x40>
 8002e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e96:	e00e      	b.n	8002eb6 <__swhatbuf_r+0x42>
 8002e98:	466a      	mov	r2, sp
 8002e9a:	f000 fb5d 	bl	8003558 <_fstat_r>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	dbf1      	blt.n	8002e86 <__swhatbuf_r+0x12>
 8002ea2:	9a01      	ldr	r2, [sp, #4]
 8002ea4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ea8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002eac:	425a      	negs	r2, r3
 8002eae:	415a      	adcs	r2, r3
 8002eb0:	602a      	str	r2, [r5, #0]
 8002eb2:	e7ee      	b.n	8002e92 <__swhatbuf_r+0x1e>
 8002eb4:	2340      	movs	r3, #64	; 0x40
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	6023      	str	r3, [r4, #0]
 8002eba:	b016      	add	sp, #88	; 0x58
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ec0 <__smakebuf_r>:
 8002ec0:	898b      	ldrh	r3, [r1, #12]
 8002ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ec4:	079d      	lsls	r5, r3, #30
 8002ec6:	4606      	mov	r6, r0
 8002ec8:	460c      	mov	r4, r1
 8002eca:	d507      	bpl.n	8002edc <__smakebuf_r+0x1c>
 8002ecc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	6123      	str	r3, [r4, #16]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	6163      	str	r3, [r4, #20]
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	466a      	mov	r2, sp
 8002ede:	ab01      	add	r3, sp, #4
 8002ee0:	f7ff ffc8 	bl	8002e74 <__swhatbuf_r>
 8002ee4:	9900      	ldr	r1, [sp, #0]
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f7ff fd79 	bl	80029e0 <_malloc_r>
 8002eee:	b948      	cbnz	r0, 8002f04 <__smakebuf_r+0x44>
 8002ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ef4:	059a      	lsls	r2, r3, #22
 8002ef6:	d4ef      	bmi.n	8002ed8 <__smakebuf_r+0x18>
 8002ef8:	f023 0303 	bic.w	r3, r3, #3
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	81a3      	strh	r3, [r4, #12]
 8002f02:	e7e3      	b.n	8002ecc <__smakebuf_r+0xc>
 8002f04:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <__smakebuf_r+0x7c>)
 8002f06:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	6020      	str	r0, [r4, #0]
 8002f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f10:	81a3      	strh	r3, [r4, #12]
 8002f12:	9b00      	ldr	r3, [sp, #0]
 8002f14:	6120      	str	r0, [r4, #16]
 8002f16:	6163      	str	r3, [r4, #20]
 8002f18:	9b01      	ldr	r3, [sp, #4]
 8002f1a:	b15b      	cbz	r3, 8002f34 <__smakebuf_r+0x74>
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f22:	f000 fb2b 	bl	800357c <_isatty_r>
 8002f26:	b128      	cbz	r0, 8002f34 <__smakebuf_r+0x74>
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	81a3      	strh	r3, [r4, #12]
 8002f34:	89a0      	ldrh	r0, [r4, #12]
 8002f36:	4305      	orrs	r5, r0
 8002f38:	81a5      	strh	r5, [r4, #12]
 8002f3a:	e7cd      	b.n	8002ed8 <__smakebuf_r+0x18>
 8002f3c:	0800270d 	.word	0x0800270d

08002f40 <__malloc_lock>:
 8002f40:	4801      	ldr	r0, [pc, #4]	; (8002f48 <__malloc_lock+0x8>)
 8002f42:	f7ff bcda 	b.w	80028fa <__retarget_lock_acquire_recursive>
 8002f46:	bf00      	nop
 8002f48:	200000e4 	.word	0x200000e4

08002f4c <__malloc_unlock>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	; (8002f54 <__malloc_unlock+0x8>)
 8002f4e:	f7ff bcd5 	b.w	80028fc <__retarget_lock_release_recursive>
 8002f52:	bf00      	nop
 8002f54:	200000e4 	.word	0x200000e4

08002f58 <__sfputc_r>:
 8002f58:	6893      	ldr	r3, [r2, #8]
 8002f5a:	b410      	push	{r4}
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	6093      	str	r3, [r2, #8]
 8002f62:	da07      	bge.n	8002f74 <__sfputc_r+0x1c>
 8002f64:	6994      	ldr	r4, [r2, #24]
 8002f66:	42a3      	cmp	r3, r4
 8002f68:	db01      	blt.n	8002f6e <__sfputc_r+0x16>
 8002f6a:	290a      	cmp	r1, #10
 8002f6c:	d102      	bne.n	8002f74 <__sfputc_r+0x1c>
 8002f6e:	bc10      	pop	{r4}
 8002f70:	f7ff be8c 	b.w	8002c8c <__swbuf_r>
 8002f74:	6813      	ldr	r3, [r2, #0]
 8002f76:	1c58      	adds	r0, r3, #1
 8002f78:	6010      	str	r0, [r2, #0]
 8002f7a:	7019      	strb	r1, [r3, #0]
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	bc10      	pop	{r4}
 8002f80:	4770      	bx	lr

08002f82 <__sfputs_r>:
 8002f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f84:	4606      	mov	r6, r0
 8002f86:	460f      	mov	r7, r1
 8002f88:	4614      	mov	r4, r2
 8002f8a:	18d5      	adds	r5, r2, r3
 8002f8c:	42ac      	cmp	r4, r5
 8002f8e:	d101      	bne.n	8002f94 <__sfputs_r+0x12>
 8002f90:	2000      	movs	r0, #0
 8002f92:	e007      	b.n	8002fa4 <__sfputs_r+0x22>
 8002f94:	463a      	mov	r2, r7
 8002f96:	4630      	mov	r0, r6
 8002f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f9c:	f7ff ffdc 	bl	8002f58 <__sfputc_r>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d1f3      	bne.n	8002f8c <__sfputs_r+0xa>
 8002fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fa8 <_vfiprintf_r>:
 8002fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fac:	460d      	mov	r5, r1
 8002fae:	4614      	mov	r4, r2
 8002fb0:	4698      	mov	r8, r3
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	b09d      	sub	sp, #116	; 0x74
 8002fb6:	b118      	cbz	r0, 8002fc0 <_vfiprintf_r+0x18>
 8002fb8:	6983      	ldr	r3, [r0, #24]
 8002fba:	b90b      	cbnz	r3, 8002fc0 <_vfiprintf_r+0x18>
 8002fbc:	f7ff fbda 	bl	8002774 <__sinit>
 8002fc0:	4b89      	ldr	r3, [pc, #548]	; (80031e8 <_vfiprintf_r+0x240>)
 8002fc2:	429d      	cmp	r5, r3
 8002fc4:	d11b      	bne.n	8002ffe <_vfiprintf_r+0x56>
 8002fc6:	6875      	ldr	r5, [r6, #4]
 8002fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fca:	07d9      	lsls	r1, r3, #31
 8002fcc:	d405      	bmi.n	8002fda <_vfiprintf_r+0x32>
 8002fce:	89ab      	ldrh	r3, [r5, #12]
 8002fd0:	059a      	lsls	r2, r3, #22
 8002fd2:	d402      	bmi.n	8002fda <_vfiprintf_r+0x32>
 8002fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fd6:	f7ff fc90 	bl	80028fa <__retarget_lock_acquire_recursive>
 8002fda:	89ab      	ldrh	r3, [r5, #12]
 8002fdc:	071b      	lsls	r3, r3, #28
 8002fde:	d501      	bpl.n	8002fe4 <_vfiprintf_r+0x3c>
 8002fe0:	692b      	ldr	r3, [r5, #16]
 8002fe2:	b9eb      	cbnz	r3, 8003020 <_vfiprintf_r+0x78>
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f7ff feb4 	bl	8002d54 <__swsetup_r>
 8002fec:	b1c0      	cbz	r0, 8003020 <_vfiprintf_r+0x78>
 8002fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ff0:	07dc      	lsls	r4, r3, #31
 8002ff2:	d50e      	bpl.n	8003012 <_vfiprintf_r+0x6a>
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	b01d      	add	sp, #116	; 0x74
 8002ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ffe:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <_vfiprintf_r+0x244>)
 8003000:	429d      	cmp	r5, r3
 8003002:	d101      	bne.n	8003008 <_vfiprintf_r+0x60>
 8003004:	68b5      	ldr	r5, [r6, #8]
 8003006:	e7df      	b.n	8002fc8 <_vfiprintf_r+0x20>
 8003008:	4b79      	ldr	r3, [pc, #484]	; (80031f0 <_vfiprintf_r+0x248>)
 800300a:	429d      	cmp	r5, r3
 800300c:	bf08      	it	eq
 800300e:	68f5      	ldreq	r5, [r6, #12]
 8003010:	e7da      	b.n	8002fc8 <_vfiprintf_r+0x20>
 8003012:	89ab      	ldrh	r3, [r5, #12]
 8003014:	0598      	lsls	r0, r3, #22
 8003016:	d4ed      	bmi.n	8002ff4 <_vfiprintf_r+0x4c>
 8003018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800301a:	f7ff fc6f 	bl	80028fc <__retarget_lock_release_recursive>
 800301e:	e7e9      	b.n	8002ff4 <_vfiprintf_r+0x4c>
 8003020:	2300      	movs	r3, #0
 8003022:	9309      	str	r3, [sp, #36]	; 0x24
 8003024:	2320      	movs	r3, #32
 8003026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800302a:	2330      	movs	r3, #48	; 0x30
 800302c:	f04f 0901 	mov.w	r9, #1
 8003030:	f8cd 800c 	str.w	r8, [sp, #12]
 8003034:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80031f4 <_vfiprintf_r+0x24c>
 8003038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800303c:	4623      	mov	r3, r4
 800303e:	469a      	mov	sl, r3
 8003040:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003044:	b10a      	cbz	r2, 800304a <_vfiprintf_r+0xa2>
 8003046:	2a25      	cmp	r2, #37	; 0x25
 8003048:	d1f9      	bne.n	800303e <_vfiprintf_r+0x96>
 800304a:	ebba 0b04 	subs.w	fp, sl, r4
 800304e:	d00b      	beq.n	8003068 <_vfiprintf_r+0xc0>
 8003050:	465b      	mov	r3, fp
 8003052:	4622      	mov	r2, r4
 8003054:	4629      	mov	r1, r5
 8003056:	4630      	mov	r0, r6
 8003058:	f7ff ff93 	bl	8002f82 <__sfputs_r>
 800305c:	3001      	adds	r0, #1
 800305e:	f000 80aa 	beq.w	80031b6 <_vfiprintf_r+0x20e>
 8003062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003064:	445a      	add	r2, fp
 8003066:	9209      	str	r2, [sp, #36]	; 0x24
 8003068:	f89a 3000 	ldrb.w	r3, [sl]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a2 	beq.w	80031b6 <_vfiprintf_r+0x20e>
 8003072:	2300      	movs	r3, #0
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800307c:	f10a 0a01 	add.w	sl, sl, #1
 8003080:	9304      	str	r3, [sp, #16]
 8003082:	9307      	str	r3, [sp, #28]
 8003084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003088:	931a      	str	r3, [sp, #104]	; 0x68
 800308a:	4654      	mov	r4, sl
 800308c:	2205      	movs	r2, #5
 800308e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003092:	4858      	ldr	r0, [pc, #352]	; (80031f4 <_vfiprintf_r+0x24c>)
 8003094:	f000 fa82 	bl	800359c <memchr>
 8003098:	9a04      	ldr	r2, [sp, #16]
 800309a:	b9d8      	cbnz	r0, 80030d4 <_vfiprintf_r+0x12c>
 800309c:	06d1      	lsls	r1, r2, #27
 800309e:	bf44      	itt	mi
 80030a0:	2320      	movmi	r3, #32
 80030a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030a6:	0713      	lsls	r3, r2, #28
 80030a8:	bf44      	itt	mi
 80030aa:	232b      	movmi	r3, #43	; 0x2b
 80030ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030b0:	f89a 3000 	ldrb.w	r3, [sl]
 80030b4:	2b2a      	cmp	r3, #42	; 0x2a
 80030b6:	d015      	beq.n	80030e4 <_vfiprintf_r+0x13c>
 80030b8:	4654      	mov	r4, sl
 80030ba:	2000      	movs	r0, #0
 80030bc:	f04f 0c0a 	mov.w	ip, #10
 80030c0:	9a07      	ldr	r2, [sp, #28]
 80030c2:	4621      	mov	r1, r4
 80030c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030c8:	3b30      	subs	r3, #48	; 0x30
 80030ca:	2b09      	cmp	r3, #9
 80030cc:	d94e      	bls.n	800316c <_vfiprintf_r+0x1c4>
 80030ce:	b1b0      	cbz	r0, 80030fe <_vfiprintf_r+0x156>
 80030d0:	9207      	str	r2, [sp, #28]
 80030d2:	e014      	b.n	80030fe <_vfiprintf_r+0x156>
 80030d4:	eba0 0308 	sub.w	r3, r0, r8
 80030d8:	fa09 f303 	lsl.w	r3, r9, r3
 80030dc:	4313      	orrs	r3, r2
 80030de:	46a2      	mov	sl, r4
 80030e0:	9304      	str	r3, [sp, #16]
 80030e2:	e7d2      	b.n	800308a <_vfiprintf_r+0xe2>
 80030e4:	9b03      	ldr	r3, [sp, #12]
 80030e6:	1d19      	adds	r1, r3, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	9103      	str	r1, [sp, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bfbb      	ittet	lt
 80030f0:	425b      	neglt	r3, r3
 80030f2:	f042 0202 	orrlt.w	r2, r2, #2
 80030f6:	9307      	strge	r3, [sp, #28]
 80030f8:	9307      	strlt	r3, [sp, #28]
 80030fa:	bfb8      	it	lt
 80030fc:	9204      	strlt	r2, [sp, #16]
 80030fe:	7823      	ldrb	r3, [r4, #0]
 8003100:	2b2e      	cmp	r3, #46	; 0x2e
 8003102:	d10c      	bne.n	800311e <_vfiprintf_r+0x176>
 8003104:	7863      	ldrb	r3, [r4, #1]
 8003106:	2b2a      	cmp	r3, #42	; 0x2a
 8003108:	d135      	bne.n	8003176 <_vfiprintf_r+0x1ce>
 800310a:	9b03      	ldr	r3, [sp, #12]
 800310c:	3402      	adds	r4, #2
 800310e:	1d1a      	adds	r2, r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	9203      	str	r2, [sp, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	bfb8      	it	lt
 8003118:	f04f 33ff 	movlt.w	r3, #4294967295
 800311c:	9305      	str	r3, [sp, #20]
 800311e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80031f8 <_vfiprintf_r+0x250>
 8003122:	2203      	movs	r2, #3
 8003124:	4650      	mov	r0, sl
 8003126:	7821      	ldrb	r1, [r4, #0]
 8003128:	f000 fa38 	bl	800359c <memchr>
 800312c:	b140      	cbz	r0, 8003140 <_vfiprintf_r+0x198>
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	eba0 000a 	sub.w	r0, r0, sl
 8003134:	fa03 f000 	lsl.w	r0, r3, r0
 8003138:	9b04      	ldr	r3, [sp, #16]
 800313a:	3401      	adds	r4, #1
 800313c:	4303      	orrs	r3, r0
 800313e:	9304      	str	r3, [sp, #16]
 8003140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003144:	2206      	movs	r2, #6
 8003146:	482d      	ldr	r0, [pc, #180]	; (80031fc <_vfiprintf_r+0x254>)
 8003148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800314c:	f000 fa26 	bl	800359c <memchr>
 8003150:	2800      	cmp	r0, #0
 8003152:	d03f      	beq.n	80031d4 <_vfiprintf_r+0x22c>
 8003154:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <_vfiprintf_r+0x258>)
 8003156:	bb1b      	cbnz	r3, 80031a0 <_vfiprintf_r+0x1f8>
 8003158:	9b03      	ldr	r3, [sp, #12]
 800315a:	3307      	adds	r3, #7
 800315c:	f023 0307 	bic.w	r3, r3, #7
 8003160:	3308      	adds	r3, #8
 8003162:	9303      	str	r3, [sp, #12]
 8003164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003166:	443b      	add	r3, r7
 8003168:	9309      	str	r3, [sp, #36]	; 0x24
 800316a:	e767      	b.n	800303c <_vfiprintf_r+0x94>
 800316c:	460c      	mov	r4, r1
 800316e:	2001      	movs	r0, #1
 8003170:	fb0c 3202 	mla	r2, ip, r2, r3
 8003174:	e7a5      	b.n	80030c2 <_vfiprintf_r+0x11a>
 8003176:	2300      	movs	r3, #0
 8003178:	f04f 0c0a 	mov.w	ip, #10
 800317c:	4619      	mov	r1, r3
 800317e:	3401      	adds	r4, #1
 8003180:	9305      	str	r3, [sp, #20]
 8003182:	4620      	mov	r0, r4
 8003184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003188:	3a30      	subs	r2, #48	; 0x30
 800318a:	2a09      	cmp	r2, #9
 800318c:	d903      	bls.n	8003196 <_vfiprintf_r+0x1ee>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0c5      	beq.n	800311e <_vfiprintf_r+0x176>
 8003192:	9105      	str	r1, [sp, #20]
 8003194:	e7c3      	b.n	800311e <_vfiprintf_r+0x176>
 8003196:	4604      	mov	r4, r0
 8003198:	2301      	movs	r3, #1
 800319a:	fb0c 2101 	mla	r1, ip, r1, r2
 800319e:	e7f0      	b.n	8003182 <_vfiprintf_r+0x1da>
 80031a0:	ab03      	add	r3, sp, #12
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	462a      	mov	r2, r5
 80031a6:	4630      	mov	r0, r6
 80031a8:	4b16      	ldr	r3, [pc, #88]	; (8003204 <_vfiprintf_r+0x25c>)
 80031aa:	a904      	add	r1, sp, #16
 80031ac:	f3af 8000 	nop.w
 80031b0:	4607      	mov	r7, r0
 80031b2:	1c78      	adds	r0, r7, #1
 80031b4:	d1d6      	bne.n	8003164 <_vfiprintf_r+0x1bc>
 80031b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031b8:	07d9      	lsls	r1, r3, #31
 80031ba:	d405      	bmi.n	80031c8 <_vfiprintf_r+0x220>
 80031bc:	89ab      	ldrh	r3, [r5, #12]
 80031be:	059a      	lsls	r2, r3, #22
 80031c0:	d402      	bmi.n	80031c8 <_vfiprintf_r+0x220>
 80031c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031c4:	f7ff fb9a 	bl	80028fc <__retarget_lock_release_recursive>
 80031c8:	89ab      	ldrh	r3, [r5, #12]
 80031ca:	065b      	lsls	r3, r3, #25
 80031cc:	f53f af12 	bmi.w	8002ff4 <_vfiprintf_r+0x4c>
 80031d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031d2:	e711      	b.n	8002ff8 <_vfiprintf_r+0x50>
 80031d4:	ab03      	add	r3, sp, #12
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	462a      	mov	r2, r5
 80031da:	4630      	mov	r0, r6
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <_vfiprintf_r+0x25c>)
 80031de:	a904      	add	r1, sp, #16
 80031e0:	f000 f882 	bl	80032e8 <_printf_i>
 80031e4:	e7e4      	b.n	80031b0 <_vfiprintf_r+0x208>
 80031e6:	bf00      	nop
 80031e8:	08003700 	.word	0x08003700
 80031ec:	08003720 	.word	0x08003720
 80031f0:	080036e0 	.word	0x080036e0
 80031f4:	08003744 	.word	0x08003744
 80031f8:	0800374a 	.word	0x0800374a
 80031fc:	0800374e 	.word	0x0800374e
 8003200:	00000000 	.word	0x00000000
 8003204:	08002f83 	.word	0x08002f83

08003208 <_printf_common>:
 8003208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800320c:	4616      	mov	r6, r2
 800320e:	4699      	mov	r9, r3
 8003210:	688a      	ldr	r2, [r1, #8]
 8003212:	690b      	ldr	r3, [r1, #16]
 8003214:	4607      	mov	r7, r0
 8003216:	4293      	cmp	r3, r2
 8003218:	bfb8      	it	lt
 800321a:	4613      	movlt	r3, r2
 800321c:	6033      	str	r3, [r6, #0]
 800321e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003222:	460c      	mov	r4, r1
 8003224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003228:	b10a      	cbz	r2, 800322e <_printf_common+0x26>
 800322a:	3301      	adds	r3, #1
 800322c:	6033      	str	r3, [r6, #0]
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	0699      	lsls	r1, r3, #26
 8003232:	bf42      	ittt	mi
 8003234:	6833      	ldrmi	r3, [r6, #0]
 8003236:	3302      	addmi	r3, #2
 8003238:	6033      	strmi	r3, [r6, #0]
 800323a:	6825      	ldr	r5, [r4, #0]
 800323c:	f015 0506 	ands.w	r5, r5, #6
 8003240:	d106      	bne.n	8003250 <_printf_common+0x48>
 8003242:	f104 0a19 	add.w	sl, r4, #25
 8003246:	68e3      	ldr	r3, [r4, #12]
 8003248:	6832      	ldr	r2, [r6, #0]
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	42ab      	cmp	r3, r5
 800324e:	dc28      	bgt.n	80032a2 <_printf_common+0x9a>
 8003250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003254:	1e13      	subs	r3, r2, #0
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	bf18      	it	ne
 800325a:	2301      	movne	r3, #1
 800325c:	0692      	lsls	r2, r2, #26
 800325e:	d42d      	bmi.n	80032bc <_printf_common+0xb4>
 8003260:	4649      	mov	r1, r9
 8003262:	4638      	mov	r0, r7
 8003264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003268:	47c0      	blx	r8
 800326a:	3001      	adds	r0, #1
 800326c:	d020      	beq.n	80032b0 <_printf_common+0xa8>
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	68e5      	ldr	r5, [r4, #12]
 8003272:	f003 0306 	and.w	r3, r3, #6
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf18      	it	ne
 800327a:	2500      	movne	r5, #0
 800327c:	6832      	ldr	r2, [r6, #0]
 800327e:	f04f 0600 	mov.w	r6, #0
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	bf08      	it	eq
 8003286:	1aad      	subeq	r5, r5, r2
 8003288:	6922      	ldr	r2, [r4, #16]
 800328a:	bf08      	it	eq
 800328c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003290:	4293      	cmp	r3, r2
 8003292:	bfc4      	itt	gt
 8003294:	1a9b      	subgt	r3, r3, r2
 8003296:	18ed      	addgt	r5, r5, r3
 8003298:	341a      	adds	r4, #26
 800329a:	42b5      	cmp	r5, r6
 800329c:	d11a      	bne.n	80032d4 <_printf_common+0xcc>
 800329e:	2000      	movs	r0, #0
 80032a0:	e008      	b.n	80032b4 <_printf_common+0xac>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4652      	mov	r2, sl
 80032a6:	4649      	mov	r1, r9
 80032a8:	4638      	mov	r0, r7
 80032aa:	47c0      	blx	r8
 80032ac:	3001      	adds	r0, #1
 80032ae:	d103      	bne.n	80032b8 <_printf_common+0xb0>
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b8:	3501      	adds	r5, #1
 80032ba:	e7c4      	b.n	8003246 <_printf_common+0x3e>
 80032bc:	2030      	movs	r0, #48	; 0x30
 80032be:	18e1      	adds	r1, r4, r3
 80032c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032ca:	4422      	add	r2, r4
 80032cc:	3302      	adds	r3, #2
 80032ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032d2:	e7c5      	b.n	8003260 <_printf_common+0x58>
 80032d4:	2301      	movs	r3, #1
 80032d6:	4622      	mov	r2, r4
 80032d8:	4649      	mov	r1, r9
 80032da:	4638      	mov	r0, r7
 80032dc:	47c0      	blx	r8
 80032de:	3001      	adds	r0, #1
 80032e0:	d0e6      	beq.n	80032b0 <_printf_common+0xa8>
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7d9      	b.n	800329a <_printf_common+0x92>
	...

080032e8 <_printf_i>:
 80032e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032ec:	7e0f      	ldrb	r7, [r1, #24]
 80032ee:	4691      	mov	r9, r2
 80032f0:	2f78      	cmp	r7, #120	; 0x78
 80032f2:	4680      	mov	r8, r0
 80032f4:	460c      	mov	r4, r1
 80032f6:	469a      	mov	sl, r3
 80032f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032fe:	d807      	bhi.n	8003310 <_printf_i+0x28>
 8003300:	2f62      	cmp	r7, #98	; 0x62
 8003302:	d80a      	bhi.n	800331a <_printf_i+0x32>
 8003304:	2f00      	cmp	r7, #0
 8003306:	f000 80d9 	beq.w	80034bc <_printf_i+0x1d4>
 800330a:	2f58      	cmp	r7, #88	; 0x58
 800330c:	f000 80a4 	beq.w	8003458 <_printf_i+0x170>
 8003310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003318:	e03a      	b.n	8003390 <_printf_i+0xa8>
 800331a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800331e:	2b15      	cmp	r3, #21
 8003320:	d8f6      	bhi.n	8003310 <_printf_i+0x28>
 8003322:	a101      	add	r1, pc, #4	; (adr r1, 8003328 <_printf_i+0x40>)
 8003324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003328:	08003381 	.word	0x08003381
 800332c:	08003395 	.word	0x08003395
 8003330:	08003311 	.word	0x08003311
 8003334:	08003311 	.word	0x08003311
 8003338:	08003311 	.word	0x08003311
 800333c:	08003311 	.word	0x08003311
 8003340:	08003395 	.word	0x08003395
 8003344:	08003311 	.word	0x08003311
 8003348:	08003311 	.word	0x08003311
 800334c:	08003311 	.word	0x08003311
 8003350:	08003311 	.word	0x08003311
 8003354:	080034a3 	.word	0x080034a3
 8003358:	080033c5 	.word	0x080033c5
 800335c:	08003485 	.word	0x08003485
 8003360:	08003311 	.word	0x08003311
 8003364:	08003311 	.word	0x08003311
 8003368:	080034c5 	.word	0x080034c5
 800336c:	08003311 	.word	0x08003311
 8003370:	080033c5 	.word	0x080033c5
 8003374:	08003311 	.word	0x08003311
 8003378:	08003311 	.word	0x08003311
 800337c:	0800348d 	.word	0x0800348d
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	1d1a      	adds	r2, r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	602a      	str	r2, [r5, #0]
 8003388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800338c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003390:	2301      	movs	r3, #1
 8003392:	e0a4      	b.n	80034de <_printf_i+0x1f6>
 8003394:	6820      	ldr	r0, [r4, #0]
 8003396:	6829      	ldr	r1, [r5, #0]
 8003398:	0606      	lsls	r6, r0, #24
 800339a:	f101 0304 	add.w	r3, r1, #4
 800339e:	d50a      	bpl.n	80033b6 <_printf_i+0xce>
 80033a0:	680e      	ldr	r6, [r1, #0]
 80033a2:	602b      	str	r3, [r5, #0]
 80033a4:	2e00      	cmp	r6, #0
 80033a6:	da03      	bge.n	80033b0 <_printf_i+0xc8>
 80033a8:	232d      	movs	r3, #45	; 0x2d
 80033aa:	4276      	negs	r6, r6
 80033ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b0:	230a      	movs	r3, #10
 80033b2:	485e      	ldr	r0, [pc, #376]	; (800352c <_printf_i+0x244>)
 80033b4:	e019      	b.n	80033ea <_printf_i+0x102>
 80033b6:	680e      	ldr	r6, [r1, #0]
 80033b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	bf18      	it	ne
 80033c0:	b236      	sxthne	r6, r6
 80033c2:	e7ef      	b.n	80033a4 <_printf_i+0xbc>
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	6820      	ldr	r0, [r4, #0]
 80033c8:	1d19      	adds	r1, r3, #4
 80033ca:	6029      	str	r1, [r5, #0]
 80033cc:	0601      	lsls	r1, r0, #24
 80033ce:	d501      	bpl.n	80033d4 <_printf_i+0xec>
 80033d0:	681e      	ldr	r6, [r3, #0]
 80033d2:	e002      	b.n	80033da <_printf_i+0xf2>
 80033d4:	0646      	lsls	r6, r0, #25
 80033d6:	d5fb      	bpl.n	80033d0 <_printf_i+0xe8>
 80033d8:	881e      	ldrh	r6, [r3, #0]
 80033da:	2f6f      	cmp	r7, #111	; 0x6f
 80033dc:	bf0c      	ite	eq
 80033de:	2308      	moveq	r3, #8
 80033e0:	230a      	movne	r3, #10
 80033e2:	4852      	ldr	r0, [pc, #328]	; (800352c <_printf_i+0x244>)
 80033e4:	2100      	movs	r1, #0
 80033e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033ea:	6865      	ldr	r5, [r4, #4]
 80033ec:	2d00      	cmp	r5, #0
 80033ee:	bfa8      	it	ge
 80033f0:	6821      	ldrge	r1, [r4, #0]
 80033f2:	60a5      	str	r5, [r4, #8]
 80033f4:	bfa4      	itt	ge
 80033f6:	f021 0104 	bicge.w	r1, r1, #4
 80033fa:	6021      	strge	r1, [r4, #0]
 80033fc:	b90e      	cbnz	r6, 8003402 <_printf_i+0x11a>
 80033fe:	2d00      	cmp	r5, #0
 8003400:	d04d      	beq.n	800349e <_printf_i+0x1b6>
 8003402:	4615      	mov	r5, r2
 8003404:	fbb6 f1f3 	udiv	r1, r6, r3
 8003408:	fb03 6711 	mls	r7, r3, r1, r6
 800340c:	5dc7      	ldrb	r7, [r0, r7]
 800340e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003412:	4637      	mov	r7, r6
 8003414:	42bb      	cmp	r3, r7
 8003416:	460e      	mov	r6, r1
 8003418:	d9f4      	bls.n	8003404 <_printf_i+0x11c>
 800341a:	2b08      	cmp	r3, #8
 800341c:	d10b      	bne.n	8003436 <_printf_i+0x14e>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	07de      	lsls	r6, r3, #31
 8003422:	d508      	bpl.n	8003436 <_printf_i+0x14e>
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	6861      	ldr	r1, [r4, #4]
 8003428:	4299      	cmp	r1, r3
 800342a:	bfde      	ittt	le
 800342c:	2330      	movle	r3, #48	; 0x30
 800342e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003432:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003436:	1b52      	subs	r2, r2, r5
 8003438:	6122      	str	r2, [r4, #16]
 800343a:	464b      	mov	r3, r9
 800343c:	4621      	mov	r1, r4
 800343e:	4640      	mov	r0, r8
 8003440:	f8cd a000 	str.w	sl, [sp]
 8003444:	aa03      	add	r2, sp, #12
 8003446:	f7ff fedf 	bl	8003208 <_printf_common>
 800344a:	3001      	adds	r0, #1
 800344c:	d14c      	bne.n	80034e8 <_printf_i+0x200>
 800344e:	f04f 30ff 	mov.w	r0, #4294967295
 8003452:	b004      	add	sp, #16
 8003454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003458:	4834      	ldr	r0, [pc, #208]	; (800352c <_printf_i+0x244>)
 800345a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800345e:	6829      	ldr	r1, [r5, #0]
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	f851 6b04 	ldr.w	r6, [r1], #4
 8003466:	6029      	str	r1, [r5, #0]
 8003468:	061d      	lsls	r5, r3, #24
 800346a:	d514      	bpl.n	8003496 <_printf_i+0x1ae>
 800346c:	07df      	lsls	r7, r3, #31
 800346e:	bf44      	itt	mi
 8003470:	f043 0320 	orrmi.w	r3, r3, #32
 8003474:	6023      	strmi	r3, [r4, #0]
 8003476:	b91e      	cbnz	r6, 8003480 <_printf_i+0x198>
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	f023 0320 	bic.w	r3, r3, #32
 800347e:	6023      	str	r3, [r4, #0]
 8003480:	2310      	movs	r3, #16
 8003482:	e7af      	b.n	80033e4 <_printf_i+0xfc>
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	f043 0320 	orr.w	r3, r3, #32
 800348a:	6023      	str	r3, [r4, #0]
 800348c:	2378      	movs	r3, #120	; 0x78
 800348e:	4828      	ldr	r0, [pc, #160]	; (8003530 <_printf_i+0x248>)
 8003490:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003494:	e7e3      	b.n	800345e <_printf_i+0x176>
 8003496:	0659      	lsls	r1, r3, #25
 8003498:	bf48      	it	mi
 800349a:	b2b6      	uxthmi	r6, r6
 800349c:	e7e6      	b.n	800346c <_printf_i+0x184>
 800349e:	4615      	mov	r5, r2
 80034a0:	e7bb      	b.n	800341a <_printf_i+0x132>
 80034a2:	682b      	ldr	r3, [r5, #0]
 80034a4:	6826      	ldr	r6, [r4, #0]
 80034a6:	1d18      	adds	r0, r3, #4
 80034a8:	6961      	ldr	r1, [r4, #20]
 80034aa:	6028      	str	r0, [r5, #0]
 80034ac:	0635      	lsls	r5, r6, #24
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	d501      	bpl.n	80034b6 <_printf_i+0x1ce>
 80034b2:	6019      	str	r1, [r3, #0]
 80034b4:	e002      	b.n	80034bc <_printf_i+0x1d4>
 80034b6:	0670      	lsls	r0, r6, #25
 80034b8:	d5fb      	bpl.n	80034b2 <_printf_i+0x1ca>
 80034ba:	8019      	strh	r1, [r3, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	4615      	mov	r5, r2
 80034c0:	6123      	str	r3, [r4, #16]
 80034c2:	e7ba      	b.n	800343a <_printf_i+0x152>
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	2100      	movs	r1, #0
 80034c8:	1d1a      	adds	r2, r3, #4
 80034ca:	602a      	str	r2, [r5, #0]
 80034cc:	681d      	ldr	r5, [r3, #0]
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	4628      	mov	r0, r5
 80034d2:	f000 f863 	bl	800359c <memchr>
 80034d6:	b108      	cbz	r0, 80034dc <_printf_i+0x1f4>
 80034d8:	1b40      	subs	r0, r0, r5
 80034da:	6060      	str	r0, [r4, #4]
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	2300      	movs	r3, #0
 80034e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034e6:	e7a8      	b.n	800343a <_printf_i+0x152>
 80034e8:	462a      	mov	r2, r5
 80034ea:	4649      	mov	r1, r9
 80034ec:	4640      	mov	r0, r8
 80034ee:	6923      	ldr	r3, [r4, #16]
 80034f0:	47d0      	blx	sl
 80034f2:	3001      	adds	r0, #1
 80034f4:	d0ab      	beq.n	800344e <_printf_i+0x166>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	079b      	lsls	r3, r3, #30
 80034fa:	d413      	bmi.n	8003524 <_printf_i+0x23c>
 80034fc:	68e0      	ldr	r0, [r4, #12]
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	4298      	cmp	r0, r3
 8003502:	bfb8      	it	lt
 8003504:	4618      	movlt	r0, r3
 8003506:	e7a4      	b.n	8003452 <_printf_i+0x16a>
 8003508:	2301      	movs	r3, #1
 800350a:	4632      	mov	r2, r6
 800350c:	4649      	mov	r1, r9
 800350e:	4640      	mov	r0, r8
 8003510:	47d0      	blx	sl
 8003512:	3001      	adds	r0, #1
 8003514:	d09b      	beq.n	800344e <_printf_i+0x166>
 8003516:	3501      	adds	r5, #1
 8003518:	68e3      	ldr	r3, [r4, #12]
 800351a:	9903      	ldr	r1, [sp, #12]
 800351c:	1a5b      	subs	r3, r3, r1
 800351e:	42ab      	cmp	r3, r5
 8003520:	dcf2      	bgt.n	8003508 <_printf_i+0x220>
 8003522:	e7eb      	b.n	80034fc <_printf_i+0x214>
 8003524:	2500      	movs	r5, #0
 8003526:	f104 0619 	add.w	r6, r4, #25
 800352a:	e7f5      	b.n	8003518 <_printf_i+0x230>
 800352c:	08003755 	.word	0x08003755
 8003530:	08003766 	.word	0x08003766

08003534 <_read_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	2200      	movs	r2, #0
 800353e:	4d05      	ldr	r5, [pc, #20]	; (8003554 <_read_r+0x20>)
 8003540:	602a      	str	r2, [r5, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f7fd f890 	bl	8000668 <_read>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_read_r+0x1e>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b103      	cbz	r3, 8003552 <_read_r+0x1e>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	200000f0 	.word	0x200000f0

08003558 <_fstat_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	2300      	movs	r3, #0
 800355c:	4d06      	ldr	r5, [pc, #24]	; (8003578 <_fstat_r+0x20>)
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	602b      	str	r3, [r5, #0]
 8003566:	f7fd f8c3 	bl	80006f0 <_fstat>
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d102      	bne.n	8003574 <_fstat_r+0x1c>
 800356e:	682b      	ldr	r3, [r5, #0]
 8003570:	b103      	cbz	r3, 8003574 <_fstat_r+0x1c>
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	bd38      	pop	{r3, r4, r5, pc}
 8003576:	bf00      	nop
 8003578:	200000f0 	.word	0x200000f0

0800357c <_isatty_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	2300      	movs	r3, #0
 8003580:	4d05      	ldr	r5, [pc, #20]	; (8003598 <_isatty_r+0x1c>)
 8003582:	4604      	mov	r4, r0
 8003584:	4608      	mov	r0, r1
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	f7fd f8c1 	bl	800070e <_isatty>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_isatty_r+0x1a>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_isatty_r+0x1a>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	200000f0 	.word	0x200000f0

0800359c <memchr>:
 800359c:	4603      	mov	r3, r0
 800359e:	b510      	push	{r4, lr}
 80035a0:	b2c9      	uxtb	r1, r1
 80035a2:	4402      	add	r2, r0
 80035a4:	4293      	cmp	r3, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	d101      	bne.n	80035ae <memchr+0x12>
 80035aa:	2000      	movs	r0, #0
 80035ac:	e003      	b.n	80035b6 <memchr+0x1a>
 80035ae:	7804      	ldrb	r4, [r0, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	428c      	cmp	r4, r1
 80035b4:	d1f6      	bne.n	80035a4 <memchr+0x8>
 80035b6:	bd10      	pop	{r4, pc}

080035b8 <_init>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	bf00      	nop
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr

080035c4 <_fini>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr
