
12_UART_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003698  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a18  08003a18  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08003a18  08003a18  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a18  08003a18  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08003a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  200000b0  08003ad0  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003ad0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087a8  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001895  00000000  00000000  00028881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017873  00000000  00000000  0002af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cf2  00000000  00000000  000427d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b0f  00000000  00000000  0004b4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cefd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e8  00000000  00000000  000cf024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800378c 	.word	0x0800378c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	0800378c 	.word	0x0800378c

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	2364      	movs	r3, #100	; 0x64
 8000158:	2201      	movs	r2, #1
 800015a:	4809      	ldr	r0, [pc, #36]	; (8000180 <__io_putchar+0x34>)
 800015c:	f001 fc9e 	bl	8001a9c <HAL_UART_Transmit>
	if(ch == '\n') {
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b0a      	cmp	r3, #10
 8000164:	d106      	bne.n	8000174 <__io_putchar+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t *)'/r', 1, 100);
 8000166:	2364      	movs	r3, #100	; 0x64
 8000168:	2201      	movs	r2, #1
 800016a:	f642 7172 	movw	r1, #12146	; 0x2f72
 800016e:	4804      	ldr	r0, [pc, #16]	; (8000180 <__io_putchar+0x34>)
 8000170:	f001 fc94 	bl	8001a9c <HAL_UART_Transmit>
	}
	return ch;
 8000174:	687b      	ldr	r3, [r7, #4]
}
 8000176:	4618      	mov	r0, r3
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	200000cc 	.word	0x200000cc

08000184 <display_menu>:

void display_menu() {
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	printf("\n\n***********************\n");
 8000188:	480f      	ldr	r0, [pc, #60]	; (80001c8 <display_menu+0x44>)
 800018a:	f002 fe0d 	bl	8002da8 <puts>
	printf("Emergency Light Control\n");
 800018e:	480f      	ldr	r0, [pc, #60]	; (80001cc <display_menu+0x48>)
 8000190:	f002 fe0a 	bl	8002da8 <puts>
	printf("***********************\n\n");
 8000194:	480e      	ldr	r0, [pc, #56]	; (80001d0 <display_menu+0x4c>)
 8000196:	f002 fe07 	bl	8002da8 <puts>
	printf("1. Set to [Ambulance_A] mode\n");
 800019a:	480e      	ldr	r0, [pc, #56]	; (80001d4 <display_menu+0x50>)
 800019c:	f002 fe04 	bl	8002da8 <puts>
	printf("2. Set to [Ambulance_B] mode\n");
 80001a0:	480d      	ldr	r0, [pc, #52]	; (80001d8 <display_menu+0x54>)
 80001a2:	f002 fe01 	bl	8002da8 <puts>
	printf("3. Set to [Off] mode\n");
 80001a6:	480d      	ldr	r0, [pc, #52]	; (80001dc <display_menu+0x58>)
 80001a8:	f002 fdfe 	bl	8002da8 <puts>
	printf("4. Inquire current Emergency mode\n\n");
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <display_menu+0x5c>)
 80001ae:	f002 fdfb 	bl	8002da8 <puts>
	printf("Type number : ");
 80001b2:	480c      	ldr	r0, [pc, #48]	; (80001e4 <display_menu+0x60>)
 80001b4:	f002 fd72 	bl	8002c9c <iprintf>
	fflush(stdout);
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <display_menu+0x64>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	689b      	ldr	r3, [r3, #8]
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fb58 	bl	8002874 <fflush>
}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	080037a4 	.word	0x080037a4
 80001cc:	080037c0 	.word	0x080037c0
 80001d0:	080037d8 	.word	0x080037d8
 80001d4:	080037f4 	.word	0x080037f4
 80001d8:	08003814 	.word	0x08003814
 80001dc:	08003834 	.word	0x08003834
 80001e0:	0800384c 	.word	0x0800384c
 80001e4:	08003870 	.word	0x08003870
 80001e8:	2000004c 	.word	0x2000004c

080001ec <led_all_off>:
  {GPIOB, GPIO_PIN_15},
  {GPIOB, GPIO_PIN_14},
  {GPIOB, GPIO_PIN_13},
  {GPIOB, GPIO_PIN_12},
};
void led_all_off() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  for (uint8_t k = 0; k < 8; k++) {
 80001f2:	2300      	movs	r3, #0
 80001f4:	71fb      	strb	r3, [r7, #7]
 80001f6:	e00f      	b.n	8000218 <led_all_off+0x2c>
    HAL_GPIO_WritePin(led[k].port, led[k].pin, GPIO_PIN_RESET);
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <led_all_off+0x3c>)
 80001fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	4a09      	ldr	r2, [pc, #36]	; (8000228 <led_all_off+0x3c>)
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	4413      	add	r3, r2
 8000208:	889b      	ldrh	r3, [r3, #4]
 800020a:	2200      	movs	r2, #0
 800020c:	4619      	mov	r1, r3
 800020e:	f000 ffcd 	bl	80011ac <HAL_GPIO_WritePin>
  for (uint8_t k = 0; k < 8; k++) {
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	3301      	adds	r3, #1
 8000216:	71fb      	strb	r3, [r7, #7]
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9ec      	bls.n	80001f8 <led_all_off+0xc>
  }
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <ambulance_a>:
void ambulance_a() {
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < 4; i++)  {
 8000232:	2300      	movs	r3, #0
 8000234:	71fb      	strb	r3, [r7, #7]
 8000236:	e01e      	b.n	8000276 <ambulance_a+0x4a>
    HAL_GPIO_WritePin(led[i].port, led[i].pin, GPIO_PIN_SET);
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	4a35      	ldr	r2, [pc, #212]	; (8000310 <ambulance_a+0xe4>)
 800023c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a33      	ldr	r2, [pc, #204]	; (8000310 <ambulance_a+0xe4>)
 8000244:	00db      	lsls	r3, r3, #3
 8000246:	4413      	add	r3, r2
 8000248:	889b      	ldrh	r3, [r3, #4]
 800024a:	2201      	movs	r2, #1
 800024c:	4619      	mov	r1, r3
 800024e:	f000 ffad 	bl	80011ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(led[i+4].port, led[i+4].pin, GPIO_PIN_RESET);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	3304      	adds	r3, #4
 8000256:	4a2e      	ldr	r2, [pc, #184]	; (8000310 <ambulance_a+0xe4>)
 8000258:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	3304      	adds	r3, #4
 8000260:	4a2b      	ldr	r2, [pc, #172]	; (8000310 <ambulance_a+0xe4>)
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	4413      	add	r3, r2
 8000266:	889b      	ldrh	r3, [r3, #4]
 8000268:	2200      	movs	r2, #0
 800026a:	4619      	mov	r1, r3
 800026c:	f000 ff9e 	bl	80011ac <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++)  {
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	3301      	adds	r3, #1
 8000274:	71fb      	strb	r3, [r7, #7]
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	2b03      	cmp	r3, #3
 800027a:	d9dd      	bls.n	8000238 <ambulance_a+0xc>
    }
  HAL_Delay(500);
 800027c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000280:	f000 fc2c 	bl	8000adc <HAL_Delay>
  if (ambulance_mode == MODE_B || ambulance_mode == MODE_OFF) {
 8000284:	4b23      	ldr	r3, [pc, #140]	; (8000314 <ambulance_a+0xe8>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	2b02      	cmp	r3, #2
 800028c:	d004      	beq.n	8000298 <ambulance_a+0x6c>
 800028e:	4b21      	ldr	r3, [pc, #132]	; (8000314 <ambulance_a+0xe8>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2b03      	cmp	r3, #3
 8000296:	d102      	bne.n	800029e <ambulance_a+0x72>
    led_all_off();
 8000298:	f7ff ffa8 	bl	80001ec <led_all_off>
    return;
 800029c:	e035      	b.n	800030a <ambulance_a+0xde>
  }
  for (uint8_t j = 0; j < 4; j++)  {
 800029e:	2300      	movs	r3, #0
 80002a0:	71bb      	strb	r3, [r7, #6]
 80002a2:	e01e      	b.n	80002e2 <ambulance_a+0xb6>
    HAL_GPIO_WritePin(led[j].port, led[j].pin, GPIO_PIN_RESET);
 80002a4:	79bb      	ldrb	r3, [r7, #6]
 80002a6:	4a1a      	ldr	r2, [pc, #104]	; (8000310 <ambulance_a+0xe4>)
 80002a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80002ac:	79bb      	ldrb	r3, [r7, #6]
 80002ae:	4a18      	ldr	r2, [pc, #96]	; (8000310 <ambulance_a+0xe4>)
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	4413      	add	r3, r2
 80002b4:	889b      	ldrh	r3, [r3, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	4619      	mov	r1, r3
 80002ba:	f000 ff77 	bl	80011ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(led[j+4].port, led[j+4].pin, GPIO_PIN_SET);
 80002be:	79bb      	ldrb	r3, [r7, #6]
 80002c0:	3304      	adds	r3, #4
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <ambulance_a+0xe4>)
 80002c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	3304      	adds	r3, #4
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <ambulance_a+0xe4>)
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	4413      	add	r3, r2
 80002d2:	889b      	ldrh	r3, [r3, #4]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4619      	mov	r1, r3
 80002d8:	f000 ff68 	bl	80011ac <HAL_GPIO_WritePin>
  for (uint8_t j = 0; j < 4; j++)  {
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	3301      	adds	r3, #1
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	d9dd      	bls.n	80002a4 <ambulance_a+0x78>
    }
  HAL_Delay(500);
 80002e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ec:	f000 fbf6 	bl	8000adc <HAL_Delay>
  if (ambulance_mode == MODE_B || ambulance_mode == MODE_OFF) {
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <ambulance_a+0xe8>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d004      	beq.n	8000304 <ambulance_a+0xd8>
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <ambulance_a+0xe8>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2b03      	cmp	r3, #3
 8000302:	d102      	bne.n	800030a <ambulance_a+0xde>
    led_all_off();
 8000304:	f7ff ff72 	bl	80001ec <led_all_off>
    return;
 8000308:	bf00      	nop
  }
}
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000
 8000314:	20000114 	.word	0x20000114

08000318 <ambulance_b>:
void ambulance_b() {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < 8; i++)  {
 800031e:	2300      	movs	r3, #0
 8000320:	71fb      	strb	r3, [r7, #7]
 8000322:	e02f      	b.n	8000384 <ambulance_b+0x6c>
    HAL_GPIO_WritePin(led[i].port, led[i].pin, GPIO_PIN_SET);
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4a35      	ldr	r2, [pc, #212]	; (80003fc <ambulance_b+0xe4>)
 8000328:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	4a33      	ldr	r2, [pc, #204]	; (80003fc <ambulance_b+0xe4>)
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	4413      	add	r3, r2
 8000334:	889b      	ldrh	r3, [r3, #4]
 8000336:	2201      	movs	r2, #1
 8000338:	4619      	mov	r1, r3
 800033a:	f000 ff37 	bl	80011ac <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800033e:	2064      	movs	r0, #100	; 0x64
 8000340:	f000 fbcc 	bl	8000adc <HAL_Delay>
    HAL_GPIO_WritePin(led[i].port, led[i].pin, GPIO_PIN_RESET);
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	4a2d      	ldr	r2, [pc, #180]	; (80003fc <ambulance_b+0xe4>)
 8000348:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4a2b      	ldr	r2, [pc, #172]	; (80003fc <ambulance_b+0xe4>)
 8000350:	00db      	lsls	r3, r3, #3
 8000352:	4413      	add	r3, r2
 8000354:	889b      	ldrh	r3, [r3, #4]
 8000356:	2200      	movs	r2, #0
 8000358:	4619      	mov	r1, r3
 800035a:	f000 ff27 	bl	80011ac <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800035e:	2064      	movs	r0, #100	; 0x64
 8000360:	f000 fbbc 	bl	8000adc <HAL_Delay>
    if (ambulance_mode == MODE_A || ambulance_mode == MODE_OFF) {
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <ambulance_b+0xe8>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b01      	cmp	r3, #1
 800036c:	d004      	beq.n	8000378 <ambulance_b+0x60>
 800036e:	4b24      	ldr	r3, [pc, #144]	; (8000400 <ambulance_b+0xe8>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b03      	cmp	r3, #3
 8000376:	d102      	bne.n	800037e <ambulance_b+0x66>
      led_all_off();
 8000378:	f7ff ff38 	bl	80001ec <led_all_off>
      return;
 800037c:	e03b      	b.n	80003f6 <ambulance_b+0xde>
  for (uint8_t i = 0; i < 8; i++)  {
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	3301      	adds	r3, #1
 8000382:	71fb      	strb	r3, [r7, #7]
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b07      	cmp	r3, #7
 8000388:	d9cc      	bls.n	8000324 <ambulance_b+0xc>
    }
  }
  for (uint8_t j = 6; j > 0; j--)  {
 800038a:	2306      	movs	r3, #6
 800038c:	71bb      	strb	r3, [r7, #6]
 800038e:	e02f      	b.n	80003f0 <ambulance_b+0xd8>
    HAL_GPIO_WritePin(led[j].port, led[j].pin, GPIO_PIN_SET);
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	4a1a      	ldr	r2, [pc, #104]	; (80003fc <ambulance_b+0xe4>)
 8000394:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	4a18      	ldr	r2, [pc, #96]	; (80003fc <ambulance_b+0xe4>)
 800039c:	00db      	lsls	r3, r3, #3
 800039e:	4413      	add	r3, r2
 80003a0:	889b      	ldrh	r3, [r3, #4]
 80003a2:	2201      	movs	r2, #1
 80003a4:	4619      	mov	r1, r3
 80003a6:	f000 ff01 	bl	80011ac <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80003aa:	2064      	movs	r0, #100	; 0x64
 80003ac:	f000 fb96 	bl	8000adc <HAL_Delay>
    HAL_GPIO_WritePin(led[j].port, led[j].pin, GPIO_PIN_RESET);
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	4a12      	ldr	r2, [pc, #72]	; (80003fc <ambulance_b+0xe4>)
 80003b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	4a10      	ldr	r2, [pc, #64]	; (80003fc <ambulance_b+0xe4>)
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4413      	add	r3, r2
 80003c0:	889b      	ldrh	r3, [r3, #4]
 80003c2:	2200      	movs	r2, #0
 80003c4:	4619      	mov	r1, r3
 80003c6:	f000 fef1 	bl	80011ac <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80003ca:	2064      	movs	r0, #100	; 0x64
 80003cc:	f000 fb86 	bl	8000adc <HAL_Delay>
    if (ambulance_mode == MODE_A || ambulance_mode == MODE_OFF) {
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <ambulance_b+0xe8>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d004      	beq.n	80003e4 <ambulance_b+0xcc>
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <ambulance_b+0xe8>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d102      	bne.n	80003ea <ambulance_b+0xd2>
      led_all_off();
 80003e4:	f7ff ff02 	bl	80001ec <led_all_off>
      return;
 80003e8:	e005      	b.n	80003f6 <ambulance_b+0xde>
  for (uint8_t j = 6; j > 0; j--)  {
 80003ea:	79bb      	ldrb	r3, [r7, #6]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	71bb      	strb	r3, [r7, #6]
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1cc      	bne.n	8000390 <ambulance_b+0x78>
    }
  }
}
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000000 	.word	0x20000000
 8000400:	20000114 	.word	0x20000114

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000408:	f000 fb06 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040c:	f000 f824 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000410:	f000 f892 	bl	8000538 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000414:	f000 f866 	bl	80004e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  display_menu();
 8000418:	f7ff feb4 	bl	8000184 <display_menu>
  HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 800041c:	2201      	movs	r2, #1
 800041e:	490b      	ldr	r1, [pc, #44]	; (800044c <main+0x48>)
 8000420:	480b      	ldr	r0, [pc, #44]	; (8000450 <main+0x4c>)
 8000422:	f001 fbbe 	bl	8001ba2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (ambulance_mode == MODE_A)
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <main+0x50>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	2b01      	cmp	r3, #1
 800042e:	d102      	bne.n	8000436 <main+0x32>
		  ambulance_a();
 8000430:	f7ff fefc 	bl	800022c <ambulance_a>
 8000434:	e7f7      	b.n	8000426 <main+0x22>
	  else if (ambulance_mode == MODE_B)
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <main+0x50>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b02      	cmp	r3, #2
 800043e:	d102      	bne.n	8000446 <main+0x42>
		  ambulance_b();
 8000440:	f7ff ff6a 	bl	8000318 <ambulance_b>
 8000444:	e7ef      	b.n	8000426 <main+0x22>
	  else
		  led_all_off();
 8000446:	f7ff fed1 	bl	80001ec <led_all_off>
	  if (ambulance_mode == MODE_A)
 800044a:	e7ec      	b.n	8000426 <main+0x22>
 800044c:	20000118 	.word	0x20000118
 8000450:	200000cc 	.word	0x200000cc
 8000454:	20000114 	.word	0x20000114

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b090      	sub	sp, #64	; 0x40
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fb33 	bl	8002ad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800047e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000482:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	2302      	movs	r3, #2
 800048e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000496:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800049a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	f107 0318 	add.w	r3, r7, #24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fe9b 	bl	80011dc <HAL_RCC_OscConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004ac:	f000 f93c 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b0:	230f      	movs	r3, #15
 80004b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b4:	2302      	movs	r3, #2
 80004b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2102      	movs	r1, #2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 f908 	bl	80016e0 <HAL_RCC_ClockConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004d6:	f000 f927 	bl	8000728 <Error_Handler>
  }
}
 80004da:	bf00      	nop
 80004dc:	3740      	adds	r7, #64	; 0x40
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <MX_USART2_UART_Init+0x50>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 80004f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_USART2_UART_Init+0x4c>)
 800051c:	f001 fa6e 	bl	80019fc <HAL_UART_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000526:	f000 f8ff 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000cc 	.word	0x200000cc
 8000534:	40004400 	.word	0x40004400

08000538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054c:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <MX_GPIO_Init+0xcc>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a2c      	ldr	r2, [pc, #176]	; (8000604 <MX_GPIO_Init+0xcc>)
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <MX_GPIO_Init+0xcc>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0310 	and.w	r3, r3, #16
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_GPIO_Init+0xcc>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a26      	ldr	r2, [pc, #152]	; (8000604 <MX_GPIO_Init+0xcc>)
 800056a:	f043 0320 	orr.w	r3, r3, #32
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <MX_GPIO_Init+0xcc>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0320 	and.w	r3, r3, #32
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <MX_GPIO_Init+0xcc>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <MX_GPIO_Init+0xcc>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_GPIO_Init+0xcc>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_GPIO_Init+0xcc>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <MX_GPIO_Init+0xcc>)
 800059a:	f043 0308 	orr.w	r3, r3, #8
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_GPIO_Init+0xcc>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0308 	and.w	r3, r3, #8
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	210f      	movs	r1, #15
 80005b0:	4815      	ldr	r0, [pc, #84]	; (8000608 <MX_GPIO_Init+0xd0>)
 80005b2:	f000 fdfb 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005bc:	4813      	ldr	r0, [pc, #76]	; (800060c <MX_GPIO_Init+0xd4>)
 80005be:	f000 fdf5 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005c2:	230f      	movs	r3, #15
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	480b      	ldr	r0, [pc, #44]	; (8000608 <MX_GPIO_Init+0xd0>)
 80005da:	f000 fc63 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_GPIO_Init+0xd4>)
 80005f8:	f000 fc54 	bl	8000ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	40011000 	.word	0x40011000
 800060c:	40010c00 	.word	0x40010c00

08000610 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	switch (RxBuffer[0]) {
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <HAL_UART_RxCpltCallback+0xf0>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3b31      	subs	r3, #49	; 0x31
 800061e:	2b03      	cmp	r3, #3
 8000620:	d855      	bhi.n	80006ce <HAL_UART_RxCpltCallback+0xbe>
 8000622:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <HAL_UART_RxCpltCallback+0x18>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000639 	.word	0x08000639
 800062c:	08000657 	.word	0x08000657
 8000630:	08000675 	.word	0x08000675
 8000634:	08000693 	.word	0x08000693
	    case '1':
	      ambulance_mode = MODE_A;
 8000638:	4b32      	ldr	r3, [pc, #200]	; (8000704 <HAL_UART_RxCpltCallback+0xf4>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	2201      	movs	r2, #1
 8000642:	492f      	ldr	r1, [pc, #188]	; (8000700 <HAL_UART_RxCpltCallback+0xf0>)
 8000644:	4830      	ldr	r0, [pc, #192]	; (8000708 <HAL_UART_RxCpltCallback+0xf8>)
 8000646:	f001 fa29 	bl	8001a9c <HAL_UART_Transmit>
	      printf("\n\nNow, [Ambulance_A] mode\n");
 800064a:	4830      	ldr	r0, [pc, #192]	; (800070c <HAL_UART_RxCpltCallback+0xfc>)
 800064c:	f002 fbac 	bl	8002da8 <puts>
	      display_menu();
 8000650:	f7ff fd98 	bl	8000184 <display_menu>
	      break;
 8000654:	e04a      	b.n	80006ec <HAL_UART_RxCpltCallback+0xdc>
	    case '2':
	      ambulance_mode = MODE_B;
 8000656:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <HAL_UART_RxCpltCallback+0xf4>)
 8000658:	2202      	movs	r2, #2
 800065a:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2201      	movs	r2, #1
 8000660:	4927      	ldr	r1, [pc, #156]	; (8000700 <HAL_UART_RxCpltCallback+0xf0>)
 8000662:	4829      	ldr	r0, [pc, #164]	; (8000708 <HAL_UART_RxCpltCallback+0xf8>)
 8000664:	f001 fa1a 	bl	8001a9c <HAL_UART_Transmit>
	      printf("\n\nNow, [Ambulance_B] mode\n");
 8000668:	4829      	ldr	r0, [pc, #164]	; (8000710 <HAL_UART_RxCpltCallback+0x100>)
 800066a:	f002 fb9d 	bl	8002da8 <puts>
	      display_menu();
 800066e:	f7ff fd89 	bl	8000184 <display_menu>
	      break;
 8000672:	e03b      	b.n	80006ec <HAL_UART_RxCpltCallback+0xdc>
	    case '3':
	       ambulance_mode = MODE_OFF;
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <HAL_UART_RxCpltCallback+0xf4>)
 8000676:	2203      	movs	r2, #3
 8000678:	701a      	strb	r2, [r3, #0]
	       HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	2201      	movs	r2, #1
 800067e:	4920      	ldr	r1, [pc, #128]	; (8000700 <HAL_UART_RxCpltCallback+0xf0>)
 8000680:	4821      	ldr	r0, [pc, #132]	; (8000708 <HAL_UART_RxCpltCallback+0xf8>)
 8000682:	f001 fa0b 	bl	8001a9c <HAL_UART_Transmit>
	       printf("\n\nNow, [Off] mode\n");
 8000686:	4823      	ldr	r0, [pc, #140]	; (8000714 <HAL_UART_RxCpltCallback+0x104>)
 8000688:	f002 fb8e 	bl	8002da8 <puts>
	       display_menu();
 800068c:	f7ff fd7a 	bl	8000184 <display_menu>
	       break;
 8000690:	e02c      	b.n	80006ec <HAL_UART_RxCpltCallback+0xdc>
	     case '4':
	       HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 8000692:	2364      	movs	r3, #100	; 0x64
 8000694:	2201      	movs	r2, #1
 8000696:	491a      	ldr	r1, [pc, #104]	; (8000700 <HAL_UART_RxCpltCallback+0xf0>)
 8000698:	481b      	ldr	r0, [pc, #108]	; (8000708 <HAL_UART_RxCpltCallback+0xf8>)
 800069a:	f001 f9ff 	bl	8001a9c <HAL_UART_Transmit>
	         if (ambulance_mode == MODE_A)
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_UART_RxCpltCallback+0xf4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d103      	bne.n	80006b0 <HAL_UART_RxCpltCallback+0xa0>
	        	 printf("\n\nCurrent mode is [Ambulance_A] mode\n");
 80006a8:	481b      	ldr	r0, [pc, #108]	; (8000718 <HAL_UART_RxCpltCallback+0x108>)
 80006aa:	f002 fb7d 	bl	8002da8 <puts>
 80006ae:	e00b      	b.n	80006c8 <HAL_UART_RxCpltCallback+0xb8>
	         else if (ambulance_mode == MODE_B)
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <HAL_UART_RxCpltCallback+0xf4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d103      	bne.n	80006c2 <HAL_UART_RxCpltCallback+0xb2>
	        	 printf("\n\nCurrent mode is [Ambulance_B] mode\n");
 80006ba:	4818      	ldr	r0, [pc, #96]	; (800071c <HAL_UART_RxCpltCallback+0x10c>)
 80006bc:	f002 fb74 	bl	8002da8 <puts>
 80006c0:	e002      	b.n	80006c8 <HAL_UART_RxCpltCallback+0xb8>
	         else
	        	 printf("\n\nCurrent mode is [Off] mode\n");
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <HAL_UART_RxCpltCallback+0x110>)
 80006c4:	f002 fb70 	bl	8002da8 <puts>
	         display_menu();
 80006c8:	f7ff fd5c 	bl	8000184 <display_menu>
	         break;
 80006cc:	e00e      	b.n	80006ec <HAL_UART_RxCpltCallback+0xdc>
	     default :
	       RxBuffer[0] = '\a';
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_UART_RxCpltCallback+0xf0>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	701a      	strb	r2, [r3, #0]
	       HAL_UART_Transmit(&huart2, RxBuffer, sizeof(RxBuffer), 100);
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	2201      	movs	r2, #1
 80006d8:	4909      	ldr	r1, [pc, #36]	; (8000700 <HAL_UART_RxCpltCallback+0xf0>)
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <HAL_UART_RxCpltCallback+0xf8>)
 80006dc:	f001 f9de 	bl	8001a9c <HAL_UART_Transmit>
	       printf("\n\nSelect number : 1 ~ 4\n");
 80006e0:	4810      	ldr	r0, [pc, #64]	; (8000724 <HAL_UART_RxCpltCallback+0x114>)
 80006e2:	f002 fb61 	bl	8002da8 <puts>
	       display_menu();
 80006e6:	f7ff fd4d 	bl	8000184 <display_menu>
	       break;
 80006ea:	bf00      	nop
	   }
	   HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	4904      	ldr	r1, [pc, #16]	; (8000700 <HAL_UART_RxCpltCallback+0xf0>)
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <HAL_UART_RxCpltCallback+0xf8>)
 80006f2:	f001 fa56 	bl	8001ba2 <HAL_UART_Receive_IT>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000118 	.word	0x20000118
 8000704:	20000114 	.word	0x20000114
 8000708:	200000cc 	.word	0x200000cc
 800070c:	08003880 	.word	0x08003880
 8000710:	0800389c 	.word	0x0800389c
 8000714:	080038b8 	.word	0x080038b8
 8000718:	080038cc 	.word	0x080038cc
 800071c:	080038f4 	.word	0x080038f4
 8000720:	0800391c 	.word	0x0800391c
 8000724:	0800393c 	.word	0x0800393c

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_MspInit+0x40>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <HAL_MspInit+0x40>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <HAL_MspInit+0x40>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_MspInit+0x40>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_MspInit+0x40>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_MspInit+0x40>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <HAL_UART_MspInit+0x98>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d137      	bne.n	8000808 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <HAL_UART_MspInit+0x9c>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <HAL_UART_MspInit+0x9c>)
 800079e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a2:	61d3      	str	r3, [r2, #28]
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <HAL_UART_MspInit+0x9c>)
 80007a6:	69db      	ldr	r3, [r3, #28]
 80007a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_UART_MspInit+0x9c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_UART_MspInit+0x9c>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_UART_MspInit+0x9c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c8:	2304      	movs	r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4619      	mov	r1, r3
 80007da:	480f      	ldr	r0, [pc, #60]	; (8000818 <HAL_UART_MspInit+0xa0>)
 80007dc:	f000 fb62 	bl	8000ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007e0:	2308      	movs	r3, #8
 80007e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_UART_MspInit+0xa0>)
 80007f4:	f000 fb56 	bl	8000ea4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2026      	movs	r0, #38	; 0x26
 80007fe:	f000 fa68 	bl	8000cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000802:	2026      	movs	r0, #38	; 0x26
 8000804:	f000 fa81 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40004400 	.word	0x40004400
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 f91f 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <USART2_IRQHandler+0x10>)
 8000872:	f001 f9bb 	bl	8001bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000cc 	.word	0x200000cc

08000880 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e00a      	b.n	80008a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000892:	f3af 8000 	nop.w
 8000896:	4601      	mov	r1, r0
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	60ba      	str	r2, [r7, #8]
 800089e:	b2ca      	uxtb	r2, r1
 80008a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3301      	adds	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	dbf0      	blt.n	8000892 <_read+0x12>
  }

  return len;
 80008b0:	687b      	ldr	r3, [r7, #4]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	60f8      	str	r0, [r7, #12]
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	e009      	b.n	80008e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	60ba      	str	r2, [r7, #8]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fc39 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbf1      	blt.n	80008cc <_write+0x12>
  }
  return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_close>:

int _close(int file)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000918:	605a      	str	r2, [r3, #4]
  return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <_isatty>:

int _isatty(int file)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800093a:	b480      	push	{r7}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
	...

08000954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <_sbrk+0x5c>)
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <_sbrk+0x60>)
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <_sbrk+0x64>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <_sbrk+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d207      	bcs.n	8000994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000984:	f001 feb2 	bl	80026ec <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	e009      	b.n	80009a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_sbrk+0x64>)
 80009a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20005000 	.word	0x20005000
 80009b4:	00000400 	.word	0x00000400
 80009b8:	2000011c 	.word	0x2000011c
 80009bc:	20000138 	.word	0x20000138

080009c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009cc:	f7ff fff8 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009d2:	490c      	ldr	r1, [pc, #48]	; (8000a04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009e8:	4c09      	ldr	r4, [pc, #36]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f6:	f002 f845 	bl	8002a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fd03 	bl	8000404 <main>
  bx lr
 80009fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000a08:	08003a20 	.word	0x08003a20
  ldr r2, =_sbss
 8000a0c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000a10:	20000134 	.word	0x20000134

08000a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_2_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x28>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_Init+0x28>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f947 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 f808 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fe7e 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40022000 	.word	0x40022000

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f95f 	bl	8000d26 <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f927 	bl	8000cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000040 	.word	0x20000040
 8000a9c:	20000048 	.word	0x20000048
 8000aa0:	20000044 	.word	0x20000044

08000aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x1c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	20000048 	.word	0x20000048
 8000ac4:	20000120 	.word	0x20000120

08000ac8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <HAL_GetTick+0x10>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	20000120 	.word	0x20000120

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff fff0 	bl	8000ac8 <HAL_GetTick>
 8000ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b02:	bf00      	nop
 8000b04:	f7ff ffe0 	bl	8000ac8 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000048 	.word	0x20000048

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4906      	ldr	r1, [pc, #24]	; (8000bbc <__NVIC_EnableIRQ+0x34>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f7ff ff90 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff2d 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff42 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff90 	bl	8000c14 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5f 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff35 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffa2 	bl	8000c78 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b085      	sub	sp, #20
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d008      	beq.n	8000d68 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2204      	movs	r2, #4
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e020      	b.n	8000daa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 020e 	bic.w	r2, r2, #14
 8000d76:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d005      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2204      	movs	r2, #4
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e051      	b.n	8000e7c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 020e 	bic.w	r2, r2, #14
 8000de6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0201 	bic.w	r2, r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <HAL_DMA_Abort_IT+0xd4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d029      	beq.n	8000e56 <HAL_DMA_Abort_IT+0xa2>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <HAL_DMA_Abort_IT+0xd8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d022      	beq.n	8000e52 <HAL_DMA_Abort_IT+0x9e>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <HAL_DMA_Abort_IT+0xdc>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d01a      	beq.n	8000e4c <HAL_DMA_Abort_IT+0x98>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_DMA_Abort_IT+0xe0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d012      	beq.n	8000e46 <HAL_DMA_Abort_IT+0x92>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <HAL_DMA_Abort_IT+0xe4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00a      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x8c>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <HAL_DMA_Abort_IT+0xe8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d102      	bne.n	8000e3a <HAL_DMA_Abort_IT+0x86>
 8000e34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e38:	e00e      	b.n	8000e58 <HAL_DMA_Abort_IT+0xa4>
 8000e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e3e:	e00b      	b.n	8000e58 <HAL_DMA_Abort_IT+0xa4>
 8000e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e44:	e008      	b.n	8000e58 <HAL_DMA_Abort_IT+0xa4>
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	e005      	b.n	8000e58 <HAL_DMA_Abort_IT+0xa4>
 8000e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e50:	e002      	b.n	8000e58 <HAL_DMA_Abort_IT+0xa4>
 8000e52:	2310      	movs	r3, #16
 8000e54:	e000      	b.n	8000e58 <HAL_DMA_Abort_IT+0xa4>
 8000e56:	2301      	movs	r3, #1
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_DMA_Abort_IT+0xec>)
 8000e5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	4798      	blx	r3
    } 
  }
  return status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40020008 	.word	0x40020008
 8000e8c:	4002001c 	.word	0x4002001c
 8000e90:	40020030 	.word	0x40020030
 8000e94:	40020044 	.word	0x40020044
 8000e98:	40020058 	.word	0x40020058
 8000e9c:	4002006c 	.word	0x4002006c
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b08b      	sub	sp, #44	; 0x2c
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e169      	b.n	800118c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8158 	bne.w	8001186 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4a9a      	ldr	r2, [pc, #616]	; (8001144 <HAL_GPIO_Init+0x2a0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d05e      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000ee0:	4a98      	ldr	r2, [pc, #608]	; (8001144 <HAL_GPIO_Init+0x2a0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d875      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000ee6:	4a98      	ldr	r2, [pc, #608]	; (8001148 <HAL_GPIO_Init+0x2a4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d058      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000eec:	4a96      	ldr	r2, [pc, #600]	; (8001148 <HAL_GPIO_Init+0x2a4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d86f      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000ef2:	4a96      	ldr	r2, [pc, #600]	; (800114c <HAL_GPIO_Init+0x2a8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d052      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000ef8:	4a94      	ldr	r2, [pc, #592]	; (800114c <HAL_GPIO_Init+0x2a8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d869      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000efe:	4a94      	ldr	r2, [pc, #592]	; (8001150 <HAL_GPIO_Init+0x2ac>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d04c      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000f04:	4a92      	ldr	r2, [pc, #584]	; (8001150 <HAL_GPIO_Init+0x2ac>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d863      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f0a:	4a92      	ldr	r2, [pc, #584]	; (8001154 <HAL_GPIO_Init+0x2b0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d046      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000f10:	4a90      	ldr	r2, [pc, #576]	; (8001154 <HAL_GPIO_Init+0x2b0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d85d      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d82a      	bhi.n	8000f70 <HAL_GPIO_Init+0xcc>
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d859      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <HAL_GPIO_Init+0x80>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f79 	.word	0x08000f79
 8000f2c:	08000f8b 	.word	0x08000f8b
 8000f30:	08000fcd 	.word	0x08000fcd
 8000f34:	08000fd3 	.word	0x08000fd3
 8000f38:	08000fd3 	.word	0x08000fd3
 8000f3c:	08000fd3 	.word	0x08000fd3
 8000f40:	08000fd3 	.word	0x08000fd3
 8000f44:	08000fd3 	.word	0x08000fd3
 8000f48:	08000fd3 	.word	0x08000fd3
 8000f4c:	08000fd3 	.word	0x08000fd3
 8000f50:	08000fd3 	.word	0x08000fd3
 8000f54:	08000fd3 	.word	0x08000fd3
 8000f58:	08000fd3 	.word	0x08000fd3
 8000f5c:	08000fd3 	.word	0x08000fd3
 8000f60:	08000fd3 	.word	0x08000fd3
 8000f64:	08000fd3 	.word	0x08000fd3
 8000f68:	08000f81 	.word	0x08000f81
 8000f6c:	08000f95 	.word	0x08000f95
 8000f70:	4a79      	ldr	r2, [pc, #484]	; (8001158 <HAL_GPIO_Init+0x2b4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f76:	e02c      	b.n	8000fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e029      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	3304      	adds	r3, #4
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e024      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	623b      	str	r3, [r7, #32]
          break;
 8000f92:	e01f      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e01a      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e013      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d105      	bne.n	8000fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	611a      	str	r2, [r3, #16]
          break;
 8000fbe:	e009      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	615a      	str	r2, [r3, #20]
          break;
 8000fca:	e003      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          break;
 8000fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d801      	bhi.n	8000fde <HAL_GPIO_Init+0x13a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	e001      	b.n	8000fe2 <HAL_GPIO_Init+0x13e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d802      	bhi.n	8000ff0 <HAL_GPIO_Init+0x14c>
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x152>
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3b08      	subs	r3, #8
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	401a      	ands	r2, r3
 8001008:	6a39      	ldr	r1, [r7, #32]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	431a      	orrs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80b1 	beq.w	8001186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001024:	4b4d      	ldr	r3, [pc, #308]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x2b8>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b4a      	ldr	r3, [pc, #296]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800103c:	4a48      	ldr	r2, [pc, #288]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a40      	ldr	r2, [pc, #256]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d013      	beq.n	8001090 <HAL_GPIO_Init+0x1ec>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <HAL_GPIO_Init+0x2c4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d00d      	beq.n	800108c <HAL_GPIO_Init+0x1e8>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a3e      	ldr	r2, [pc, #248]	; (800116c <HAL_GPIO_Init+0x2c8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x1e4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <HAL_GPIO_Init+0x1e0>
 8001080:	2303      	movs	r3, #3
 8001082:	e006      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001084:	2304      	movs	r3, #4
 8001086:	e004      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001088:	2302      	movs	r3, #2
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001090:	2300      	movs	r3, #0
 8001092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001094:	f002 0203 	and.w	r2, r2, #3
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	4093      	lsls	r3, r2
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010a2:	492f      	ldr	r1, [pc, #188]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	492c      	ldr	r1, [pc, #176]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	608b      	str	r3, [r1, #8]
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4928      	ldr	r1, [pc, #160]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	4922      	ldr	r1, [pc, #136]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	60cb      	str	r3, [r1, #12]
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	491e      	ldr	r1, [pc, #120]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4918      	ldr	r1, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	4914      	ldr	r1, [pc, #80]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 8001124:	4013      	ands	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d021      	beq.n	8001178 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	490e      	ldr	r1, [pc, #56]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e021      	b.n	8001186 <HAL_GPIO_Init+0x2e2>
 8001142:	bf00      	nop
 8001144:	10320000 	.word	0x10320000
 8001148:	10310000 	.word	0x10310000
 800114c:	10220000 	.word	0x10220000
 8001150:	10210000 	.word	0x10210000
 8001154:	10120000 	.word	0x10120000
 8001158:	10110000 	.word	0x10110000
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000
 8001164:	40010800 	.word	0x40010800
 8001168:	40010c00 	.word	0x40010c00
 800116c:	40011000 	.word	0x40011000
 8001170:	40011400 	.word	0x40011400
 8001174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_GPIO_Init+0x304>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	43db      	mvns	r3, r3
 8001180:	4909      	ldr	r1, [pc, #36]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001182:	4013      	ands	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3301      	adds	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f ae8e 	bne.w	8000eb8 <HAL_GPIO_Init+0x14>
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	372c      	adds	r7, #44	; 0x2c
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	611a      	str	r2, [r3, #16]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e272      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8087 	beq.w	800130a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011fc:	4b92      	ldr	r3, [pc, #584]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b04      	cmp	r3, #4
 8001206:	d00c      	beq.n	8001222 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001208:	4b8f      	ldr	r3, [pc, #572]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b08      	cmp	r3, #8
 8001212:	d112      	bne.n	800123a <HAL_RCC_OscConfig+0x5e>
 8001214:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d10b      	bne.n	800123a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001222:	4b89      	ldr	r3, [pc, #548]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d06c      	beq.n	8001308 <HAL_RCC_OscConfig+0x12c>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d168      	bne.n	8001308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e24c      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x76>
 8001244:	4b80      	ldr	r3, [pc, #512]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a7f      	ldr	r2, [pc, #508]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800124a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e02e      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b7b      	ldr	r3, [pc, #492]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a7a      	ldr	r2, [pc, #488]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b78      	ldr	r3, [pc, #480]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a77      	ldr	r2, [pc, #476]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800126c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0xbc>
 800127e:	4b72      	ldr	r3, [pc, #456]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a71      	ldr	r2, [pc, #452]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b6f      	ldr	r3, [pc, #444]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6e      	ldr	r2, [pc, #440]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xd4>
 8001298:	4b6b      	ldr	r3, [pc, #428]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a6a      	ldr	r2, [pc, #424]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b68      	ldr	r3, [pc, #416]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a67      	ldr	r2, [pc, #412]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc06 	bl	8000ac8 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fc02 	bl	8000ac8 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e200      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b5d      	ldr	r3, [pc, #372]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xe4>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbf2 	bl	8000ac8 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fbee 	bl	8000ac8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1ec      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b53      	ldr	r3, [pc, #332]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x10c>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001316:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001322:	4b49      	ldr	r3, [pc, #292]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x18c>
 800132e:	4b46      	ldr	r3, [pc, #280]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x176>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1c0      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4939      	ldr	r1, [pc, #228]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x270>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fba7 	bl	8000ac8 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fba3 	bl	8000ac8 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1a1      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4927      	ldr	r1, [pc, #156]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_RCC_OscConfig+0x270>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb86 	bl	8000ac8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fb82 	bl	8000ac8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e180      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d03a      	beq.n	8001460 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d019      	beq.n	8001426 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb66 	bl	8000ac8 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fb62 	bl	8000ac8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e160      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_RCC_OscConfig+0x26c>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800141e:	2001      	movs	r0, #1
 8001420:	f000 face 	bl	80019c0 <RCC_Delay>
 8001424:	e01c      	b.n	8001460 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_RCC_OscConfig+0x274>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142c:	f7ff fb4c 	bl	8000ac8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001432:	e00f      	b.n	8001454 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fb48 	bl	8000ac8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d908      	bls.n	8001454 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e146      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	42420000 	.word	0x42420000
 8001450:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e9      	bne.n	8001434 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a6 	beq.w	80015ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10d      	bne.n	800149a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a87      	ldr	r2, [pc, #540]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <HAL_RCC_OscConfig+0x4c8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d118      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b7f      	ldr	r3, [pc, #508]	; (80016a4 <HAL_RCC_OscConfig+0x4c8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a7e      	ldr	r2, [pc, #504]	; (80016a4 <HAL_RCC_OscConfig+0x4c8>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fb09 	bl	8000ac8 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ba:	f7ff fb05 	bl	8000ac8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b64      	cmp	r3, #100	; 0x64
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e103      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b75      	ldr	r3, [pc, #468]	; (80016a4 <HAL_RCC_OscConfig+0x4c8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x312>
 80014e0:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6213      	str	r3, [r2, #32]
 80014ec:	e02d      	b.n	800154a <HAL_RCC_OscConfig+0x36e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x334>
 80014f6:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a69      	ldr	r2, [pc, #420]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6213      	str	r3, [r2, #32]
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4a66      	ldr	r2, [pc, #408]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	6213      	str	r3, [r2, #32]
 800150e:	e01c      	b.n	800154a <HAL_RCC_OscConfig+0x36e>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d10c      	bne.n	8001532 <HAL_RCC_OscConfig+0x356>
 8001518:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a60      	ldr	r2, [pc, #384]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	4b5e      	ldr	r3, [pc, #376]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a5d      	ldr	r2, [pc, #372]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	e00b      	b.n	800154a <HAL_RCC_OscConfig+0x36e>
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a5a      	ldr	r2, [pc, #360]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d015      	beq.n	800157e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fab9 	bl	8000ac8 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fab5 	bl	8000ac8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	; 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e0b1      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	4b4b      	ldr	r3, [pc, #300]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ee      	beq.n	800155a <HAL_RCC_OscConfig+0x37e>
 800157c:	e014      	b.n	80015a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff faa3 	bl	8000ac8 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fa9f 	bl	8000ac8 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e09b      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1ee      	bne.n	8001586 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ae:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a3b      	ldr	r2, [pc, #236]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8087 	beq.w	80016d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c4:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d061      	beq.n	8001694 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d146      	bne.n	8001666 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d8:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fa73 	bl	8000ac8 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fa6f 	bl	8000ac8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e06d      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d108      	bne.n	8001620 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	4921      	ldr	r1, [pc, #132]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a19      	ldr	r1, [r3, #32]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	430b      	orrs	r3, r1
 8001632:	491b      	ldr	r1, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fa43 	bl	8000ac8 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fa3f 	bl	8000ac8 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e03d      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x46a>
 8001664:	e035      	b.n	80016d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_OscConfig+0x4cc>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fa2c 	bl	8000ac8 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fa28 	bl	8000ac8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e026      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x498>
 8001692:	e01e      	b.n	80016d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e019      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40007000 	.word	0x40007000
 80016a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_OscConfig+0x500>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d106      	bne.n	80016ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0d0      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d910      	bls.n	8001724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0207 	bic.w	r2, r3, #7
 800170a:	4965      	ldr	r1, [pc, #404]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0b8      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800175e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	494d      	ldr	r1, [pc, #308]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d040      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d115      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e07f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e073      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06b      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff f97a 	bl	8000ac8 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff f976 	bl	8000ac8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e053      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d210      	bcs.n	8001830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	4922      	ldr	r1, [pc, #136]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e032      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4916      	ldr	r1, [pc, #88]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	490e      	ldr	r1, [pc, #56]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800186e:	f000 f821 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8001872:	4602      	mov	r2, r0
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	490a      	ldr	r1, [pc, #40]	; (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	5ccb      	ldrb	r3, [r1, r3]
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1cc>)
 8001888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1d0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f8d8 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40021000 	.word	0x40021000
 80018a8:	08003954 	.word	0x08003954
 80018ac:	20000040 	.word	0x20000040
 80018b0:	20000044 	.word	0x20000044

080018b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_RCC_GetSysClockFreq+0x94>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x30>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x36>
 80018e2:	e027      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_GetSysClockFreq+0x98>)
 80018e6:	613b      	str	r3, [r7, #16]
      break;
 80018e8:	e027      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	0c9b      	lsrs	r3, r3, #18
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d010      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_RCC_GetSysClockFreq+0x94>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0c5b      	lsrs	r3, r3, #17
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_RCC_GetSysClockFreq+0xa0>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_RCC_GetSysClockFreq+0x98>)
 8001916:	fb03 f202 	mul.w	r2, r3, r2
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e004      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	613b      	str	r3, [r7, #16]
      break;
 8001932:	e002      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetSysClockFreq+0x98>)
 8001936:	613b      	str	r3, [r7, #16]
      break;
 8001938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193a:	693b      	ldr	r3, [r7, #16]
}
 800193c:	4618      	mov	r0, r3
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	007a1200 	.word	0x007a1200
 8001950:	0800396c 	.word	0x0800396c
 8001954:	0800397c 	.word	0x0800397c
 8001958:	003d0900 	.word	0x003d0900

0800195c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001960:	4b02      	ldr	r3, [pc, #8]	; (800196c <HAL_RCC_GetHCLKFreq+0x10>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000040 	.word	0x20000040

08001970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001974:	f7ff fff2 	bl	800195c <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	08003964 	.word	0x08003964

08001998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800199c:	f7ff ffde 	bl	800195c <HAL_RCC_GetHCLKFreq>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	0adb      	lsrs	r3, r3, #11
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4903      	ldr	r1, [pc, #12]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	08003964 	.word	0x08003964

080019c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <RCC_Delay+0x34>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <RCC_Delay+0x38>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0a5b      	lsrs	r3, r3, #9
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019dc:	bf00      	nop
  }
  while (Delay --);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	60fa      	str	r2, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f9      	bne.n	80019dc <RCC_Delay+0x1c>
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	20000040 	.word	0x20000040
 80019f8:	10624dd3 	.word	0x10624dd3

080019fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e042      	b.n	8001a94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7fe fea8 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fdc5 	bl	80025d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	d16d      	bne.n	8001b98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_UART_Transmit+0x2c>
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e066      	b.n	8001b9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2221      	movs	r2, #33	; 0x21
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ada:	f7fe fff5 	bl	8000ac8 <HAL_GetTick>
 8001ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af4:	d108      	bne.n	8001b08 <HAL_UART_Transmit+0x6c>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d104      	bne.n	8001b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	e003      	b.n	8001b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b10:	e02a      	b.n	8001b68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fb14 	bl	800214a <UART_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e036      	b.n	8001b9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10b      	bne.n	8001b4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	3302      	adds	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	e007      	b.n	8001b5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	3301      	adds	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1cf      	bne.n	8001b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fae4 	bl	800214a <UART_WaitOnFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e006      	b.n	8001b9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e000      	b.n	8001b9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b98:	2302      	movs	r3, #2
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	4613      	mov	r3, r2
 8001bae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d112      	bne.n	8001be2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_UART_Receive_IT+0x26>
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e00b      	b.n	8001be4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fb24 	bl	8002226 <UART_Start_Receive_IT>
 8001bde:	4603      	mov	r3, r0
 8001be0:	e000      	b.n	8001be4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
  }
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ba      	sub	sp, #232	; 0xe8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_UART_IRQHandler+0x66>
 8001c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fc01 	bl	8002452 <UART_Receive_IT>
      return;
 8001c50:	e25b      	b.n	800210a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80de 	beq.w	8001e18 <HAL_UART_IRQHandler+0x22c>
 8001c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d106      	bne.n	8001c76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80d1 	beq.w	8001e18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_UART_IRQHandler+0xae>
 8001c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_UART_IRQHandler+0xd2>
 8001ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xf6>
 8001cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f043 0204 	orr.w	r2, r3, #4
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d011      	beq.n	8001d12 <HAL_UART_IRQHandler+0x126>
 8001cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f043 0208 	orr.w	r2, r3, #8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 81f2 	beq.w	8002100 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_UART_IRQHandler+0x14e>
 8001d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fb8c 	bl	8002452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <HAL_UART_IRQHandler+0x17a>
 8001d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d04f      	beq.n	8001e06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fa96 	bl	8002298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d041      	beq.n	8001dfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3314      	adds	r3, #20
 8001d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d88:	e853 3f00 	ldrex	r3, [r3]
 8001d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3314      	adds	r3, #20
 8001da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001da6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001db6:	e841 2300 	strex	r3, r2, [r1]
 8001dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1d9      	bne.n	8001d7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d013      	beq.n	8001df6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	4a7e      	ldr	r2, [pc, #504]	; (8001fcc <HAL_UART_IRQHandler+0x3e0>)
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe ffea 	bl	8000db4 <HAL_DMA_Abort_IT>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001df0:	4610      	mov	r0, r2
 8001df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df4:	e00e      	b.n	8001e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f993 	bl	8002122 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dfc:	e00a      	b.n	8001e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f98f 	bl	8002122 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e04:	e006      	b.n	8001e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f98b 	bl	8002122 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001e12:	e175      	b.n	8002100 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e14:	bf00      	nop
    return;
 8001e16:	e173      	b.n	8002100 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	f040 814f 	bne.w	80020c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8148 	beq.w	80020c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8141 	beq.w	80020c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80b6 	beq.w	8001fd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8145 	beq.w	8002104 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e82:	429a      	cmp	r2, r3
 8001e84:	f080 813e 	bcs.w	8002104 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	f000 8088 	beq.w	8001fac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eaa:	e853 3f00 	ldrex	r3, [r3]
 8001eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ec8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001ed4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ed8:	e841 2300 	strex	r3, r2, [r1]
 8001edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1d9      	bne.n	8001e9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3314      	adds	r3, #20
 8001eee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef2:	e853 3f00 	ldrex	r3, [r3]
 8001ef6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001efa:	f023 0301 	bic.w	r3, r3, #1
 8001efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3314      	adds	r3, #20
 8001f08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001f10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f18:	e841 2300 	strex	r3, r2, [r1]
 8001f1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e1      	bne.n	8001ee8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f2e:	e853 3f00 	ldrex	r3, [r3]
 8001f32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3314      	adds	r3, #20
 8001f44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001f48:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f50:	e841 2300 	strex	r3, r2, [r1]
 8001f54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e3      	bne.n	8001f24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	330c      	adds	r3, #12
 8001f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f74:	e853 3f00 	ldrex	r3, [r3]
 8001f78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7c:	f023 0310 	bic.w	r3, r3, #16
 8001f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	330c      	adds	r3, #12
 8001f8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f96:	e841 2300 	strex	r3, r2, [r1]
 8001f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1e3      	bne.n	8001f6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fec9 	bl	8000d3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8b6 	bl	8002134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fc8:	e09c      	b.n	8002104 <HAL_UART_IRQHandler+0x518>
 8001fca:	bf00      	nop
 8001fcc:	0800235d 	.word	0x0800235d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 808e 	beq.w	8002108 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8089 	beq.w	8002108 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	e853 3f00 	ldrex	r3, [r3]
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800200c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	330c      	adds	r3, #12
 8002016:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800201a:	647a      	str	r2, [r7, #68]	; 0x44
 800201c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002022:	e841 2300 	strex	r3, r2, [r1]
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1e3      	bne.n	8001ff6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3314      	adds	r3, #20
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	e853 3f00 	ldrex	r3, [r3]
 800203c:	623b      	str	r3, [r7, #32]
   return(result);
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	3314      	adds	r3, #20
 800204e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002052:	633a      	str	r2, [r7, #48]	; 0x30
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205a:	e841 2300 	strex	r3, r2, [r1]
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1e3      	bne.n	800202e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	330c      	adds	r3, #12
 800207a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	e853 3f00 	ldrex	r3, [r3]
 8002082:	60fb      	str	r3, [r7, #12]
   return(result);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0310 	bic.w	r3, r3, #16
 800208a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	330c      	adds	r3, #12
 8002094:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002098:	61fa      	str	r2, [r7, #28]
 800209a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209c:	69b9      	ldr	r1, [r7, #24]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	e841 2300 	strex	r3, r2, [r1]
 80020a4:	617b      	str	r3, [r7, #20]
   return(result);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e3      	bne.n	8002074 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f83b 	bl	8002134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020be:	e023      	b.n	8002108 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_UART_IRQHandler+0x4f4>
 80020cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f953 	bl	8002384 <UART_Transmit_IT>
    return;
 80020de:	e014      	b.n	800210a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <HAL_UART_IRQHandler+0x51e>
 80020ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f992 	bl	8002422 <UART_EndTransmit_IT>
    return;
 80020fe:	e004      	b.n	800210a <HAL_UART_IRQHandler+0x51e>
    return;
 8002100:	bf00      	nop
 8002102:	e002      	b.n	800210a <HAL_UART_IRQHandler+0x51e>
      return;
 8002104:	bf00      	nop
 8002106:	e000      	b.n	800210a <HAL_UART_IRQHandler+0x51e>
      return;
 8002108:	bf00      	nop
  }
}
 800210a:	37e8      	adds	r7, #232	; 0xe8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b090      	sub	sp, #64	; 0x40
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800215a:	e050      	b.n	80021fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002162:	d04c      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <UART_WaitOnFlagUntilTimeout+0x30>
 800216a:	f7fe fcad 	bl	8000ac8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002176:	429a      	cmp	r2, r3
 8002178:	d241      	bcs.n	80021fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	330c      	adds	r3, #12
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	e853 3f00 	ldrex	r3, [r3]
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	330c      	adds	r3, #12
 8002198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800219a:	637a      	str	r2, [r7, #52]	; 0x34
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021a2:	e841 2300 	strex	r3, r2, [r1]
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e5      	bne.n	800217a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3314      	adds	r3, #20
 80021b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	e853 3f00 	ldrex	r3, [r3]
 80021bc:	613b      	str	r3, [r7, #16]
   return(result);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3314      	adds	r3, #20
 80021cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ce:	623a      	str	r2, [r7, #32]
 80021d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d2:	69f9      	ldr	r1, [r7, #28]
 80021d4:	6a3a      	ldr	r2, [r7, #32]
 80021d6:	e841 2300 	strex	r3, r2, [r1]
 80021da:	61bb      	str	r3, [r7, #24]
   return(result);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e5      	bne.n	80021ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e00f      	b.n	800221e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4013      	ands	r3, r2
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	429a      	cmp	r2, r3
 800220c:	bf0c      	ite	eq
 800220e:	2301      	moveq	r3, #1
 8002210:	2300      	movne	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	429a      	cmp	r2, r3
 800221a:	d09f      	beq.n	800215c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3740      	adds	r7, #64	; 0x40
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	4613      	mov	r3, r2
 8002232:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	88fa      	ldrh	r2, [r7, #6]
 8002244:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2222      	movs	r2, #34	; 0x22
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002298:	b480      	push	{r7}
 800229a:	b095      	sub	sp, #84	; 0x54
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	330c      	adds	r3, #12
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	e853 3f00 	ldrex	r3, [r3]
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022c0:	643a      	str	r2, [r7, #64]	; 0x40
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80022c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022c8:	e841 2300 	strex	r3, r2, [r1]
 80022cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e5      	bne.n	80022a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3314      	adds	r3, #20
 80022da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	e853 3f00 	ldrex	r3, [r3]
 80022e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3314      	adds	r3, #20
 80022f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fc:	e841 2300 	strex	r3, r2, [r1]
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e5      	bne.n	80022d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	2b01      	cmp	r3, #1
 800230e:	d119      	bne.n	8002344 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f023 0310 	bic.w	r3, r3, #16
 8002326:	647b      	str	r3, [r7, #68]	; 0x44
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002330:	61ba      	str	r2, [r7, #24]
 8002332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	6979      	ldr	r1, [r7, #20]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	e841 2300 	strex	r3, r2, [r1]
 800233c:	613b      	str	r3, [r7, #16]
   return(result);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002352:	bf00      	nop
 8002354:	3754      	adds	r7, #84	; 0x54
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f7ff fed3 	bl	8002122 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b21      	cmp	r3, #33	; 0x21
 8002396:	d13e      	bne.n	8002416 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a0:	d114      	bne.n	80023cc <UART_Transmit_IT+0x48>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d110      	bne.n	80023cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	1c9a      	adds	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	621a      	str	r2, [r3, #32]
 80023ca:	e008      	b.n	80023de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	1c59      	adds	r1, r3, #1
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6211      	str	r1, [r2, #32]
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4619      	mov	r1, r3
 80023ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002400:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002410:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fe64 	bl	8002110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b08c      	sub	sp, #48	; 0x30
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b22      	cmp	r3, #34	; 0x22
 8002464:	f040 80ae 	bne.w	80025c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002470:	d117      	bne.n	80024a2 <UART_Receive_IT+0x50>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d113      	bne.n	80024a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	b29b      	uxth	r3, r3
 800248c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002490:	b29a      	uxth	r2, r3
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	1c9a      	adds	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
 80024a0:	e026      	b.n	80024f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b4:	d007      	beq.n	80024c6 <UART_Receive_IT+0x74>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10a      	bne.n	80024d4 <UART_Receive_IT+0x82>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e008      	b.n	80024e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4619      	mov	r1, r3
 80024fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002500:	2b00      	cmp	r3, #0
 8002502:	d15d      	bne.n	80025c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0220 	bic.w	r2, r2, #32
 8002512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	2b01      	cmp	r3, #1
 8002548:	d135      	bne.n	80025b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	330c      	adds	r3, #12
 8002556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	e853 3f00 	ldrex	r3, [r3]
 800255e:	613b      	str	r3, [r7, #16]
   return(result);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f023 0310 	bic.w	r3, r3, #16
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	330c      	adds	r3, #12
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	623a      	str	r2, [r7, #32]
 8002572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002574:	69f9      	ldr	r1, [r7, #28]
 8002576:	6a3a      	ldr	r2, [r7, #32]
 8002578:	e841 2300 	strex	r3, r2, [r1]
 800257c:	61bb      	str	r3, [r7, #24]
   return(result);
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e5      	bne.n	8002550 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b10      	cmp	r3, #16
 8002590:	d10a      	bne.n	80025a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fdc0 	bl	8002134 <HAL_UARTEx_RxEventCallback>
 80025b4:	e002      	b.n	80025bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe f82a 	bl	8000610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e002      	b.n	80025c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e000      	b.n	80025c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3730      	adds	r7, #48	; 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800260a:	f023 030c 	bic.w	r3, r3, #12
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	430b      	orrs	r3, r1
 8002616:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2c      	ldr	r2, [pc, #176]	; (80026e4 <UART_SetConfig+0x114>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d103      	bne.n	8002640 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002638:	f7ff f9ae 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	e002      	b.n	8002646 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002640:	f7ff f996 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8002644:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <UART_SetConfig+0x118>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	0119      	lsls	r1, r3, #4
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	009a      	lsls	r2, r3, #2
 8002670:	441a      	add	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fbb2 f2f3 	udiv	r2, r2, r3
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <UART_SetConfig+0x118>)
 800267e:	fba3 0302 	umull	r0, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2064      	movs	r0, #100	; 0x64
 8002686:	fb00 f303 	mul.w	r3, r0, r3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	3332      	adds	r3, #50	; 0x32
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <UART_SetConfig+0x118>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269c:	4419      	add	r1, r3
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009a      	lsls	r2, r3, #2
 80026a8:	441a      	add	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <UART_SetConfig+0x118>)
 80026b6:	fba3 0302 	umull	r0, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2064      	movs	r0, #100	; 0x64
 80026be:	fb00 f303 	mul.w	r3, r0, r3
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	3332      	adds	r3, #50	; 0x32
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <UART_SetConfig+0x118>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	f003 020f 	and.w	r2, r3, #15
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	440a      	add	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40013800 	.word	0x40013800
 80026e8:	51eb851f 	.word	0x51eb851f

080026ec <__errno>:
 80026ec:	4b01      	ldr	r3, [pc, #4]	; (80026f4 <__errno+0x8>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	2000004c 	.word	0x2000004c

080026f8 <__sflush_r>:
 80026f8:	898a      	ldrh	r2, [r1, #12]
 80026fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fc:	4605      	mov	r5, r0
 80026fe:	0710      	lsls	r0, r2, #28
 8002700:	460c      	mov	r4, r1
 8002702:	d457      	bmi.n	80027b4 <__sflush_r+0xbc>
 8002704:	684b      	ldr	r3, [r1, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	dc04      	bgt.n	8002714 <__sflush_r+0x1c>
 800270a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	dc01      	bgt.n	8002714 <__sflush_r+0x1c>
 8002710:	2000      	movs	r0, #0
 8002712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002716:	2e00      	cmp	r6, #0
 8002718:	d0fa      	beq.n	8002710 <__sflush_r+0x18>
 800271a:	2300      	movs	r3, #0
 800271c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002720:	682f      	ldr	r7, [r5, #0]
 8002722:	602b      	str	r3, [r5, #0]
 8002724:	d032      	beq.n	800278c <__sflush_r+0x94>
 8002726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	075a      	lsls	r2, r3, #29
 800272c:	d505      	bpl.n	800273a <__sflush_r+0x42>
 800272e:	6863      	ldr	r3, [r4, #4]
 8002730:	1ac0      	subs	r0, r0, r3
 8002732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002734:	b10b      	cbz	r3, 800273a <__sflush_r+0x42>
 8002736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002738:	1ac0      	subs	r0, r0, r3
 800273a:	2300      	movs	r3, #0
 800273c:	4602      	mov	r2, r0
 800273e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002740:	4628      	mov	r0, r5
 8002742:	6a21      	ldr	r1, [r4, #32]
 8002744:	47b0      	blx	r6
 8002746:	1c43      	adds	r3, r0, #1
 8002748:	89a3      	ldrh	r3, [r4, #12]
 800274a:	d106      	bne.n	800275a <__sflush_r+0x62>
 800274c:	6829      	ldr	r1, [r5, #0]
 800274e:	291d      	cmp	r1, #29
 8002750:	d82c      	bhi.n	80027ac <__sflush_r+0xb4>
 8002752:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <__sflush_r+0x100>)
 8002754:	40ca      	lsrs	r2, r1
 8002756:	07d6      	lsls	r6, r2, #31
 8002758:	d528      	bpl.n	80027ac <__sflush_r+0xb4>
 800275a:	2200      	movs	r2, #0
 800275c:	6062      	str	r2, [r4, #4]
 800275e:	6922      	ldr	r2, [r4, #16]
 8002760:	04d9      	lsls	r1, r3, #19
 8002762:	6022      	str	r2, [r4, #0]
 8002764:	d504      	bpl.n	8002770 <__sflush_r+0x78>
 8002766:	1c42      	adds	r2, r0, #1
 8002768:	d101      	bne.n	800276e <__sflush_r+0x76>
 800276a:	682b      	ldr	r3, [r5, #0]
 800276c:	b903      	cbnz	r3, 8002770 <__sflush_r+0x78>
 800276e:	6560      	str	r0, [r4, #84]	; 0x54
 8002770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002772:	602f      	str	r7, [r5, #0]
 8002774:	2900      	cmp	r1, #0
 8002776:	d0cb      	beq.n	8002710 <__sflush_r+0x18>
 8002778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800277c:	4299      	cmp	r1, r3
 800277e:	d002      	beq.n	8002786 <__sflush_r+0x8e>
 8002780:	4628      	mov	r0, r5
 8002782:	f000 f9af 	bl	8002ae4 <_free_r>
 8002786:	2000      	movs	r0, #0
 8002788:	6360      	str	r0, [r4, #52]	; 0x34
 800278a:	e7c2      	b.n	8002712 <__sflush_r+0x1a>
 800278c:	6a21      	ldr	r1, [r4, #32]
 800278e:	2301      	movs	r3, #1
 8002790:	4628      	mov	r0, r5
 8002792:	47b0      	blx	r6
 8002794:	1c41      	adds	r1, r0, #1
 8002796:	d1c7      	bne.n	8002728 <__sflush_r+0x30>
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0c4      	beq.n	8002728 <__sflush_r+0x30>
 800279e:	2b1d      	cmp	r3, #29
 80027a0:	d001      	beq.n	80027a6 <__sflush_r+0xae>
 80027a2:	2b16      	cmp	r3, #22
 80027a4:	d101      	bne.n	80027aa <__sflush_r+0xb2>
 80027a6:	602f      	str	r7, [r5, #0]
 80027a8:	e7b2      	b.n	8002710 <__sflush_r+0x18>
 80027aa:	89a3      	ldrh	r3, [r4, #12]
 80027ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	e7ae      	b.n	8002712 <__sflush_r+0x1a>
 80027b4:	690f      	ldr	r7, [r1, #16]
 80027b6:	2f00      	cmp	r7, #0
 80027b8:	d0aa      	beq.n	8002710 <__sflush_r+0x18>
 80027ba:	0793      	lsls	r3, r2, #30
 80027bc:	bf18      	it	ne
 80027be:	2300      	movne	r3, #0
 80027c0:	680e      	ldr	r6, [r1, #0]
 80027c2:	bf08      	it	eq
 80027c4:	694b      	ldreq	r3, [r1, #20]
 80027c6:	1bf6      	subs	r6, r6, r7
 80027c8:	600f      	str	r7, [r1, #0]
 80027ca:	608b      	str	r3, [r1, #8]
 80027cc:	2e00      	cmp	r6, #0
 80027ce:	dd9f      	ble.n	8002710 <__sflush_r+0x18>
 80027d0:	4633      	mov	r3, r6
 80027d2:	463a      	mov	r2, r7
 80027d4:	4628      	mov	r0, r5
 80027d6:	6a21      	ldr	r1, [r4, #32]
 80027d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80027dc:	47e0      	blx	ip
 80027de:	2800      	cmp	r0, #0
 80027e0:	dc06      	bgt.n	80027f0 <__sflush_r+0xf8>
 80027e2:	89a3      	ldrh	r3, [r4, #12]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ec:	81a3      	strh	r3, [r4, #12]
 80027ee:	e790      	b.n	8002712 <__sflush_r+0x1a>
 80027f0:	4407      	add	r7, r0
 80027f2:	1a36      	subs	r6, r6, r0
 80027f4:	e7ea      	b.n	80027cc <__sflush_r+0xd4>
 80027f6:	bf00      	nop
 80027f8:	20400001 	.word	0x20400001

080027fc <_fflush_r>:
 80027fc:	b538      	push	{r3, r4, r5, lr}
 80027fe:	690b      	ldr	r3, [r1, #16]
 8002800:	4605      	mov	r5, r0
 8002802:	460c      	mov	r4, r1
 8002804:	b913      	cbnz	r3, 800280c <_fflush_r+0x10>
 8002806:	2500      	movs	r5, #0
 8002808:	4628      	mov	r0, r5
 800280a:	bd38      	pop	{r3, r4, r5, pc}
 800280c:	b118      	cbz	r0, 8002816 <_fflush_r+0x1a>
 800280e:	6983      	ldr	r3, [r0, #24]
 8002810:	b90b      	cbnz	r3, 8002816 <_fflush_r+0x1a>
 8002812:	f000 f899 	bl	8002948 <__sinit>
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <_fflush_r+0x6c>)
 8002818:	429c      	cmp	r4, r3
 800281a:	d11b      	bne.n	8002854 <_fflush_r+0x58>
 800281c:	686c      	ldr	r4, [r5, #4]
 800281e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0ef      	beq.n	8002806 <_fflush_r+0xa>
 8002826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002828:	07d0      	lsls	r0, r2, #31
 800282a:	d404      	bmi.n	8002836 <_fflush_r+0x3a>
 800282c:	0599      	lsls	r1, r3, #22
 800282e:	d402      	bmi.n	8002836 <_fflush_r+0x3a>
 8002830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002832:	f000 f94c 	bl	8002ace <__retarget_lock_acquire_recursive>
 8002836:	4628      	mov	r0, r5
 8002838:	4621      	mov	r1, r4
 800283a:	f7ff ff5d 	bl	80026f8 <__sflush_r>
 800283e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002840:	4605      	mov	r5, r0
 8002842:	07da      	lsls	r2, r3, #31
 8002844:	d4e0      	bmi.n	8002808 <_fflush_r+0xc>
 8002846:	89a3      	ldrh	r3, [r4, #12]
 8002848:	059b      	lsls	r3, r3, #22
 800284a:	d4dd      	bmi.n	8002808 <_fflush_r+0xc>
 800284c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800284e:	f000 f93f 	bl	8002ad0 <__retarget_lock_release_recursive>
 8002852:	e7d9      	b.n	8002808 <_fflush_r+0xc>
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <_fflush_r+0x70>)
 8002856:	429c      	cmp	r4, r3
 8002858:	d101      	bne.n	800285e <_fflush_r+0x62>
 800285a:	68ac      	ldr	r4, [r5, #8]
 800285c:	e7df      	b.n	800281e <_fflush_r+0x22>
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <_fflush_r+0x74>)
 8002860:	429c      	cmp	r4, r3
 8002862:	bf08      	it	eq
 8002864:	68ec      	ldreq	r4, [r5, #12]
 8002866:	e7da      	b.n	800281e <_fflush_r+0x22>
 8002868:	080039a0 	.word	0x080039a0
 800286c:	080039c0 	.word	0x080039c0
 8002870:	08003980 	.word	0x08003980

08002874 <fflush>:
 8002874:	4601      	mov	r1, r0
 8002876:	b920      	cbnz	r0, 8002882 <fflush+0xe>
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <fflush+0x18>)
 800287a:	4905      	ldr	r1, [pc, #20]	; (8002890 <fflush+0x1c>)
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	f000 b8e1 	b.w	8002a44 <_fwalk_reent>
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <fflush+0x20>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f7ff bfb9 	b.w	80027fc <_fflush_r>
 800288a:	bf00      	nop
 800288c:	080039e0 	.word	0x080039e0
 8002890:	080027fd 	.word	0x080027fd
 8002894:	2000004c 	.word	0x2000004c

08002898 <std>:
 8002898:	2300      	movs	r3, #0
 800289a:	b510      	push	{r4, lr}
 800289c:	4604      	mov	r4, r0
 800289e:	e9c0 3300 	strd	r3, r3, [r0]
 80028a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028a6:	6083      	str	r3, [r0, #8]
 80028a8:	8181      	strh	r1, [r0, #12]
 80028aa:	6643      	str	r3, [r0, #100]	; 0x64
 80028ac:	81c2      	strh	r2, [r0, #14]
 80028ae:	6183      	str	r3, [r0, #24]
 80028b0:	4619      	mov	r1, r3
 80028b2:	2208      	movs	r2, #8
 80028b4:	305c      	adds	r0, #92	; 0x5c
 80028b6:	f000 f90c 	bl	8002ad2 <memset>
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <std+0x38>)
 80028bc:	6224      	str	r4, [r4, #32]
 80028be:	6263      	str	r3, [r4, #36]	; 0x24
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <std+0x3c>)
 80028c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <std+0x40>)
 80028c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <std+0x44>)
 80028ca:	6323      	str	r3, [r4, #48]	; 0x30
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	bf00      	nop
 80028d0:	08002dd9 	.word	0x08002dd9
 80028d4:	08002dfb 	.word	0x08002dfb
 80028d8:	08002e33 	.word	0x08002e33
 80028dc:	08002e57 	.word	0x08002e57

080028e0 <_cleanup_r>:
 80028e0:	4901      	ldr	r1, [pc, #4]	; (80028e8 <_cleanup_r+0x8>)
 80028e2:	f000 b8af 	b.w	8002a44 <_fwalk_reent>
 80028e6:	bf00      	nop
 80028e8:	080027fd 	.word	0x080027fd

080028ec <__sfmoreglue>:
 80028ec:	2268      	movs	r2, #104	; 0x68
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	1e4d      	subs	r5, r1, #1
 80028f2:	4355      	muls	r5, r2
 80028f4:	460e      	mov	r6, r1
 80028f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80028fa:	f000 f95b 	bl	8002bb4 <_malloc_r>
 80028fe:	4604      	mov	r4, r0
 8002900:	b140      	cbz	r0, 8002914 <__sfmoreglue+0x28>
 8002902:	2100      	movs	r1, #0
 8002904:	e9c0 1600 	strd	r1, r6, [r0]
 8002908:	300c      	adds	r0, #12
 800290a:	60a0      	str	r0, [r4, #8]
 800290c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002910:	f000 f8df 	bl	8002ad2 <memset>
 8002914:	4620      	mov	r0, r4
 8002916:	bd70      	pop	{r4, r5, r6, pc}

08002918 <__sfp_lock_acquire>:
 8002918:	4801      	ldr	r0, [pc, #4]	; (8002920 <__sfp_lock_acquire+0x8>)
 800291a:	f000 b8d8 	b.w	8002ace <__retarget_lock_acquire_recursive>
 800291e:	bf00      	nop
 8002920:	20000125 	.word	0x20000125

08002924 <__sfp_lock_release>:
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <__sfp_lock_release+0x8>)
 8002926:	f000 b8d3 	b.w	8002ad0 <__retarget_lock_release_recursive>
 800292a:	bf00      	nop
 800292c:	20000125 	.word	0x20000125

08002930 <__sinit_lock_acquire>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__sinit_lock_acquire+0x8>)
 8002932:	f000 b8cc 	b.w	8002ace <__retarget_lock_acquire_recursive>
 8002936:	bf00      	nop
 8002938:	20000126 	.word	0x20000126

0800293c <__sinit_lock_release>:
 800293c:	4801      	ldr	r0, [pc, #4]	; (8002944 <__sinit_lock_release+0x8>)
 800293e:	f000 b8c7 	b.w	8002ad0 <__retarget_lock_release_recursive>
 8002942:	bf00      	nop
 8002944:	20000126 	.word	0x20000126

08002948 <__sinit>:
 8002948:	b510      	push	{r4, lr}
 800294a:	4604      	mov	r4, r0
 800294c:	f7ff fff0 	bl	8002930 <__sinit_lock_acquire>
 8002950:	69a3      	ldr	r3, [r4, #24]
 8002952:	b11b      	cbz	r3, 800295c <__sinit+0x14>
 8002954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002958:	f7ff bff0 	b.w	800293c <__sinit_lock_release>
 800295c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002960:	6523      	str	r3, [r4, #80]	; 0x50
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <__sinit+0x68>)
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <__sinit+0x6c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	62a2      	str	r2, [r4, #40]	; 0x28
 800296a:	42a3      	cmp	r3, r4
 800296c:	bf08      	it	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	4620      	mov	r0, r4
 8002972:	bf08      	it	eq
 8002974:	61a3      	streq	r3, [r4, #24]
 8002976:	f000 f81f 	bl	80029b8 <__sfp>
 800297a:	6060      	str	r0, [r4, #4]
 800297c:	4620      	mov	r0, r4
 800297e:	f000 f81b 	bl	80029b8 <__sfp>
 8002982:	60a0      	str	r0, [r4, #8]
 8002984:	4620      	mov	r0, r4
 8002986:	f000 f817 	bl	80029b8 <__sfp>
 800298a:	2200      	movs	r2, #0
 800298c:	2104      	movs	r1, #4
 800298e:	60e0      	str	r0, [r4, #12]
 8002990:	6860      	ldr	r0, [r4, #4]
 8002992:	f7ff ff81 	bl	8002898 <std>
 8002996:	2201      	movs	r2, #1
 8002998:	2109      	movs	r1, #9
 800299a:	68a0      	ldr	r0, [r4, #8]
 800299c:	f7ff ff7c 	bl	8002898 <std>
 80029a0:	2202      	movs	r2, #2
 80029a2:	2112      	movs	r1, #18
 80029a4:	68e0      	ldr	r0, [r4, #12]
 80029a6:	f7ff ff77 	bl	8002898 <std>
 80029aa:	2301      	movs	r3, #1
 80029ac:	61a3      	str	r3, [r4, #24]
 80029ae:	e7d1      	b.n	8002954 <__sinit+0xc>
 80029b0:	080039e0 	.word	0x080039e0
 80029b4:	080028e1 	.word	0x080028e1

080029b8 <__sfp>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	4607      	mov	r7, r0
 80029bc:	f7ff ffac 	bl	8002918 <__sfp_lock_acquire>
 80029c0:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <__sfp+0x84>)
 80029c2:	681e      	ldr	r6, [r3, #0]
 80029c4:	69b3      	ldr	r3, [r6, #24]
 80029c6:	b913      	cbnz	r3, 80029ce <__sfp+0x16>
 80029c8:	4630      	mov	r0, r6
 80029ca:	f7ff ffbd 	bl	8002948 <__sinit>
 80029ce:	3648      	adds	r6, #72	; 0x48
 80029d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	d503      	bpl.n	80029e0 <__sfp+0x28>
 80029d8:	6833      	ldr	r3, [r6, #0]
 80029da:	b30b      	cbz	r3, 8002a20 <__sfp+0x68>
 80029dc:	6836      	ldr	r6, [r6, #0]
 80029de:	e7f7      	b.n	80029d0 <__sfp+0x18>
 80029e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80029e4:	b9d5      	cbnz	r5, 8002a1c <__sfp+0x64>
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <__sfp+0x88>)
 80029e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80029ec:	60e3      	str	r3, [r4, #12]
 80029ee:	6665      	str	r5, [r4, #100]	; 0x64
 80029f0:	f000 f86c 	bl	8002acc <__retarget_lock_init_recursive>
 80029f4:	f7ff ff96 	bl	8002924 <__sfp_lock_release>
 80029f8:	2208      	movs	r2, #8
 80029fa:	4629      	mov	r1, r5
 80029fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a04:	6025      	str	r5, [r4, #0]
 8002a06:	61a5      	str	r5, [r4, #24]
 8002a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a0c:	f000 f861 	bl	8002ad2 <memset>
 8002a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a18:	4620      	mov	r0, r4
 8002a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a1c:	3468      	adds	r4, #104	; 0x68
 8002a1e:	e7d9      	b.n	80029d4 <__sfp+0x1c>
 8002a20:	2104      	movs	r1, #4
 8002a22:	4638      	mov	r0, r7
 8002a24:	f7ff ff62 	bl	80028ec <__sfmoreglue>
 8002a28:	4604      	mov	r4, r0
 8002a2a:	6030      	str	r0, [r6, #0]
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1d5      	bne.n	80029dc <__sfp+0x24>
 8002a30:	f7ff ff78 	bl	8002924 <__sfp_lock_release>
 8002a34:	230c      	movs	r3, #12
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	e7ee      	b.n	8002a18 <__sfp+0x60>
 8002a3a:	bf00      	nop
 8002a3c:	080039e0 	.word	0x080039e0
 8002a40:	ffff0001 	.word	0xffff0001

08002a44 <_fwalk_reent>:
 8002a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a48:	4606      	mov	r6, r0
 8002a4a:	4688      	mov	r8, r1
 8002a4c:	2700      	movs	r7, #0
 8002a4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a56:	f1b9 0901 	subs.w	r9, r9, #1
 8002a5a:	d505      	bpl.n	8002a68 <_fwalk_reent+0x24>
 8002a5c:	6824      	ldr	r4, [r4, #0]
 8002a5e:	2c00      	cmp	r4, #0
 8002a60:	d1f7      	bne.n	8002a52 <_fwalk_reent+0xe>
 8002a62:	4638      	mov	r0, r7
 8002a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a68:	89ab      	ldrh	r3, [r5, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d907      	bls.n	8002a7e <_fwalk_reent+0x3a>
 8002a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a72:	3301      	adds	r3, #1
 8002a74:	d003      	beq.n	8002a7e <_fwalk_reent+0x3a>
 8002a76:	4629      	mov	r1, r5
 8002a78:	4630      	mov	r0, r6
 8002a7a:	47c0      	blx	r8
 8002a7c:	4307      	orrs	r7, r0
 8002a7e:	3568      	adds	r5, #104	; 0x68
 8002a80:	e7e9      	b.n	8002a56 <_fwalk_reent+0x12>
	...

08002a84 <__libc_init_array>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	2600      	movs	r6, #0
 8002a88:	4d0c      	ldr	r5, [pc, #48]	; (8002abc <__libc_init_array+0x38>)
 8002a8a:	4c0d      	ldr	r4, [pc, #52]	; (8002ac0 <__libc_init_array+0x3c>)
 8002a8c:	1b64      	subs	r4, r4, r5
 8002a8e:	10a4      	asrs	r4, r4, #2
 8002a90:	42a6      	cmp	r6, r4
 8002a92:	d109      	bne.n	8002aa8 <__libc_init_array+0x24>
 8002a94:	f000 fe7a 	bl	800378c <_init>
 8002a98:	2600      	movs	r6, #0
 8002a9a:	4d0a      	ldr	r5, [pc, #40]	; (8002ac4 <__libc_init_array+0x40>)
 8002a9c:	4c0a      	ldr	r4, [pc, #40]	; (8002ac8 <__libc_init_array+0x44>)
 8002a9e:	1b64      	subs	r4, r4, r5
 8002aa0:	10a4      	asrs	r4, r4, #2
 8002aa2:	42a6      	cmp	r6, r4
 8002aa4:	d105      	bne.n	8002ab2 <__libc_init_array+0x2e>
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aac:	4798      	blx	r3
 8002aae:	3601      	adds	r6, #1
 8002ab0:	e7ee      	b.n	8002a90 <__libc_init_array+0xc>
 8002ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab6:	4798      	blx	r3
 8002ab8:	3601      	adds	r6, #1
 8002aba:	e7f2      	b.n	8002aa2 <__libc_init_array+0x1e>
 8002abc:	08003a18 	.word	0x08003a18
 8002ac0:	08003a18 	.word	0x08003a18
 8002ac4:	08003a18 	.word	0x08003a18
 8002ac8:	08003a1c 	.word	0x08003a1c

08002acc <__retarget_lock_init_recursive>:
 8002acc:	4770      	bx	lr

08002ace <__retarget_lock_acquire_recursive>:
 8002ace:	4770      	bx	lr

08002ad0 <__retarget_lock_release_recursive>:
 8002ad0:	4770      	bx	lr

08002ad2 <memset>:
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4402      	add	r2, r0
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d100      	bne.n	8002adc <memset+0xa>
 8002ada:	4770      	bx	lr
 8002adc:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae0:	e7f9      	b.n	8002ad6 <memset+0x4>
	...

08002ae4 <_free_r>:
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4605      	mov	r5, r0
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	d040      	beq.n	8002b6e <_free_r+0x8a>
 8002aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002af0:	1f0c      	subs	r4, r1, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bfb8      	it	lt
 8002af6:	18e4      	addlt	r4, r4, r3
 8002af8:	f000 fb0c 	bl	8003114 <__malloc_lock>
 8002afc:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <_free_r+0x8c>)
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	b933      	cbnz	r3, 8002b10 <_free_r+0x2c>
 8002b02:	6063      	str	r3, [r4, #4]
 8002b04:	6014      	str	r4, [r2, #0]
 8002b06:	4628      	mov	r0, r5
 8002b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b0c:	f000 bb08 	b.w	8003120 <__malloc_unlock>
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d908      	bls.n	8002b26 <_free_r+0x42>
 8002b14:	6820      	ldr	r0, [r4, #0]
 8002b16:	1821      	adds	r1, r4, r0
 8002b18:	428b      	cmp	r3, r1
 8002b1a:	bf01      	itttt	eq
 8002b1c:	6819      	ldreq	r1, [r3, #0]
 8002b1e:	685b      	ldreq	r3, [r3, #4]
 8002b20:	1809      	addeq	r1, r1, r0
 8002b22:	6021      	streq	r1, [r4, #0]
 8002b24:	e7ed      	b.n	8002b02 <_free_r+0x1e>
 8002b26:	461a      	mov	r2, r3
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	b10b      	cbz	r3, 8002b30 <_free_r+0x4c>
 8002b2c:	42a3      	cmp	r3, r4
 8002b2e:	d9fa      	bls.n	8002b26 <_free_r+0x42>
 8002b30:	6811      	ldr	r1, [r2, #0]
 8002b32:	1850      	adds	r0, r2, r1
 8002b34:	42a0      	cmp	r0, r4
 8002b36:	d10b      	bne.n	8002b50 <_free_r+0x6c>
 8002b38:	6820      	ldr	r0, [r4, #0]
 8002b3a:	4401      	add	r1, r0
 8002b3c:	1850      	adds	r0, r2, r1
 8002b3e:	4283      	cmp	r3, r0
 8002b40:	6011      	str	r1, [r2, #0]
 8002b42:	d1e0      	bne.n	8002b06 <_free_r+0x22>
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4401      	add	r1, r0
 8002b4a:	6011      	str	r1, [r2, #0]
 8002b4c:	6053      	str	r3, [r2, #4]
 8002b4e:	e7da      	b.n	8002b06 <_free_r+0x22>
 8002b50:	d902      	bls.n	8002b58 <_free_r+0x74>
 8002b52:	230c      	movs	r3, #12
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	e7d6      	b.n	8002b06 <_free_r+0x22>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	1821      	adds	r1, r4, r0
 8002b5c:	428b      	cmp	r3, r1
 8002b5e:	bf01      	itttt	eq
 8002b60:	6819      	ldreq	r1, [r3, #0]
 8002b62:	685b      	ldreq	r3, [r3, #4]
 8002b64:	1809      	addeq	r1, r1, r0
 8002b66:	6021      	streq	r1, [r4, #0]
 8002b68:	6063      	str	r3, [r4, #4]
 8002b6a:	6054      	str	r4, [r2, #4]
 8002b6c:	e7cb      	b.n	8002b06 <_free_r+0x22>
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
 8002b70:	20000128 	.word	0x20000128

08002b74 <sbrk_aligned>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	4e0e      	ldr	r6, [pc, #56]	; (8002bb0 <sbrk_aligned+0x3c>)
 8002b78:	460c      	mov	r4, r1
 8002b7a:	6831      	ldr	r1, [r6, #0]
 8002b7c:	4605      	mov	r5, r0
 8002b7e:	b911      	cbnz	r1, 8002b86 <sbrk_aligned+0x12>
 8002b80:	f000 f91a 	bl	8002db8 <_sbrk_r>
 8002b84:	6030      	str	r0, [r6, #0]
 8002b86:	4621      	mov	r1, r4
 8002b88:	4628      	mov	r0, r5
 8002b8a:	f000 f915 	bl	8002db8 <_sbrk_r>
 8002b8e:	1c43      	adds	r3, r0, #1
 8002b90:	d00a      	beq.n	8002ba8 <sbrk_aligned+0x34>
 8002b92:	1cc4      	adds	r4, r0, #3
 8002b94:	f024 0403 	bic.w	r4, r4, #3
 8002b98:	42a0      	cmp	r0, r4
 8002b9a:	d007      	beq.n	8002bac <sbrk_aligned+0x38>
 8002b9c:	1a21      	subs	r1, r4, r0
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	f000 f90a 	bl	8002db8 <_sbrk_r>
 8002ba4:	3001      	adds	r0, #1
 8002ba6:	d101      	bne.n	8002bac <sbrk_aligned+0x38>
 8002ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8002bac:	4620      	mov	r0, r4
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	2000012c 	.word	0x2000012c

08002bb4 <_malloc_r>:
 8002bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb8:	1ccd      	adds	r5, r1, #3
 8002bba:	f025 0503 	bic.w	r5, r5, #3
 8002bbe:	3508      	adds	r5, #8
 8002bc0:	2d0c      	cmp	r5, #12
 8002bc2:	bf38      	it	cc
 8002bc4:	250c      	movcc	r5, #12
 8002bc6:	2d00      	cmp	r5, #0
 8002bc8:	4607      	mov	r7, r0
 8002bca:	db01      	blt.n	8002bd0 <_malloc_r+0x1c>
 8002bcc:	42a9      	cmp	r1, r5
 8002bce:	d905      	bls.n	8002bdc <_malloc_r+0x28>
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4630      	mov	r0, r6
 8002bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bdc:	4e2e      	ldr	r6, [pc, #184]	; (8002c98 <_malloc_r+0xe4>)
 8002bde:	f000 fa99 	bl	8003114 <__malloc_lock>
 8002be2:	6833      	ldr	r3, [r6, #0]
 8002be4:	461c      	mov	r4, r3
 8002be6:	bb34      	cbnz	r4, 8002c36 <_malloc_r+0x82>
 8002be8:	4629      	mov	r1, r5
 8002bea:	4638      	mov	r0, r7
 8002bec:	f7ff ffc2 	bl	8002b74 <sbrk_aligned>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	d14d      	bne.n	8002c92 <_malloc_r+0xde>
 8002bf6:	6834      	ldr	r4, [r6, #0]
 8002bf8:	4626      	mov	r6, r4
 8002bfa:	2e00      	cmp	r6, #0
 8002bfc:	d140      	bne.n	8002c80 <_malloc_r+0xcc>
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	4631      	mov	r1, r6
 8002c02:	4638      	mov	r0, r7
 8002c04:	eb04 0803 	add.w	r8, r4, r3
 8002c08:	f000 f8d6 	bl	8002db8 <_sbrk_r>
 8002c0c:	4580      	cmp	r8, r0
 8002c0e:	d13a      	bne.n	8002c86 <_malloc_r+0xd2>
 8002c10:	6821      	ldr	r1, [r4, #0]
 8002c12:	3503      	adds	r5, #3
 8002c14:	1a6d      	subs	r5, r5, r1
 8002c16:	f025 0503 	bic.w	r5, r5, #3
 8002c1a:	3508      	adds	r5, #8
 8002c1c:	2d0c      	cmp	r5, #12
 8002c1e:	bf38      	it	cc
 8002c20:	250c      	movcc	r5, #12
 8002c22:	4638      	mov	r0, r7
 8002c24:	4629      	mov	r1, r5
 8002c26:	f7ff ffa5 	bl	8002b74 <sbrk_aligned>
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d02b      	beq.n	8002c86 <_malloc_r+0xd2>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	442b      	add	r3, r5
 8002c32:	6023      	str	r3, [r4, #0]
 8002c34:	e00e      	b.n	8002c54 <_malloc_r+0xa0>
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	1b52      	subs	r2, r2, r5
 8002c3a:	d41e      	bmi.n	8002c7a <_malloc_r+0xc6>
 8002c3c:	2a0b      	cmp	r2, #11
 8002c3e:	d916      	bls.n	8002c6e <_malloc_r+0xba>
 8002c40:	1961      	adds	r1, r4, r5
 8002c42:	42a3      	cmp	r3, r4
 8002c44:	6025      	str	r5, [r4, #0]
 8002c46:	bf18      	it	ne
 8002c48:	6059      	strne	r1, [r3, #4]
 8002c4a:	6863      	ldr	r3, [r4, #4]
 8002c4c:	bf08      	it	eq
 8002c4e:	6031      	streq	r1, [r6, #0]
 8002c50:	5162      	str	r2, [r4, r5]
 8002c52:	604b      	str	r3, [r1, #4]
 8002c54:	4638      	mov	r0, r7
 8002c56:	f104 060b 	add.w	r6, r4, #11
 8002c5a:	f000 fa61 	bl	8003120 <__malloc_unlock>
 8002c5e:	f026 0607 	bic.w	r6, r6, #7
 8002c62:	1d23      	adds	r3, r4, #4
 8002c64:	1af2      	subs	r2, r6, r3
 8002c66:	d0b6      	beq.n	8002bd6 <_malloc_r+0x22>
 8002c68:	1b9b      	subs	r3, r3, r6
 8002c6a:	50a3      	str	r3, [r4, r2]
 8002c6c:	e7b3      	b.n	8002bd6 <_malloc_r+0x22>
 8002c6e:	6862      	ldr	r2, [r4, #4]
 8002c70:	42a3      	cmp	r3, r4
 8002c72:	bf0c      	ite	eq
 8002c74:	6032      	streq	r2, [r6, #0]
 8002c76:	605a      	strne	r2, [r3, #4]
 8002c78:	e7ec      	b.n	8002c54 <_malloc_r+0xa0>
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	6864      	ldr	r4, [r4, #4]
 8002c7e:	e7b2      	b.n	8002be6 <_malloc_r+0x32>
 8002c80:	4634      	mov	r4, r6
 8002c82:	6876      	ldr	r6, [r6, #4]
 8002c84:	e7b9      	b.n	8002bfa <_malloc_r+0x46>
 8002c86:	230c      	movs	r3, #12
 8002c88:	4638      	mov	r0, r7
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	f000 fa48 	bl	8003120 <__malloc_unlock>
 8002c90:	e7a1      	b.n	8002bd6 <_malloc_r+0x22>
 8002c92:	6025      	str	r5, [r4, #0]
 8002c94:	e7de      	b.n	8002c54 <_malloc_r+0xa0>
 8002c96:	bf00      	nop
 8002c98:	20000128 	.word	0x20000128

08002c9c <iprintf>:
 8002c9c:	b40f      	push	{r0, r1, r2, r3}
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <iprintf+0x2c>)
 8002ca0:	b513      	push	{r0, r1, r4, lr}
 8002ca2:	681c      	ldr	r4, [r3, #0]
 8002ca4:	b124      	cbz	r4, 8002cb0 <iprintf+0x14>
 8002ca6:	69a3      	ldr	r3, [r4, #24]
 8002ca8:	b913      	cbnz	r3, 8002cb0 <iprintf+0x14>
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff fe4c 	bl	8002948 <__sinit>
 8002cb0:	ab05      	add	r3, sp, #20
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	9a04      	ldr	r2, [sp, #16]
 8002cb6:	68a1      	ldr	r1, [r4, #8]
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	f000 fa5f 	bl	800317c <_vfiprintf_r>
 8002cbe:	b002      	add	sp, #8
 8002cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cc4:	b004      	add	sp, #16
 8002cc6:	4770      	bx	lr
 8002cc8:	2000004c 	.word	0x2000004c

08002ccc <_puts_r>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	460e      	mov	r6, r1
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	b118      	cbz	r0, 8002cdc <_puts_r+0x10>
 8002cd4:	6983      	ldr	r3, [r0, #24]
 8002cd6:	b90b      	cbnz	r3, 8002cdc <_puts_r+0x10>
 8002cd8:	f7ff fe36 	bl	8002948 <__sinit>
 8002cdc:	69ab      	ldr	r3, [r5, #24]
 8002cde:	68ac      	ldr	r4, [r5, #8]
 8002ce0:	b913      	cbnz	r3, 8002ce8 <_puts_r+0x1c>
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f7ff fe30 	bl	8002948 <__sinit>
 8002ce8:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <_puts_r+0xd0>)
 8002cea:	429c      	cmp	r4, r3
 8002cec:	d120      	bne.n	8002d30 <_puts_r+0x64>
 8002cee:	686c      	ldr	r4, [r5, #4]
 8002cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cf2:	07db      	lsls	r3, r3, #31
 8002cf4:	d405      	bmi.n	8002d02 <_puts_r+0x36>
 8002cf6:	89a3      	ldrh	r3, [r4, #12]
 8002cf8:	0598      	lsls	r0, r3, #22
 8002cfa:	d402      	bmi.n	8002d02 <_puts_r+0x36>
 8002cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cfe:	f7ff fee6 	bl	8002ace <__retarget_lock_acquire_recursive>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	0719      	lsls	r1, r3, #28
 8002d06:	d51d      	bpl.n	8002d44 <_puts_r+0x78>
 8002d08:	6923      	ldr	r3, [r4, #16]
 8002d0a:	b1db      	cbz	r3, 8002d44 <_puts_r+0x78>
 8002d0c:	3e01      	subs	r6, #1
 8002d0e:	68a3      	ldr	r3, [r4, #8]
 8002d10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60a3      	str	r3, [r4, #8]
 8002d18:	bb39      	cbnz	r1, 8002d6a <_puts_r+0x9e>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da38      	bge.n	8002d90 <_puts_r+0xc4>
 8002d1e:	4622      	mov	r2, r4
 8002d20:	210a      	movs	r1, #10
 8002d22:	4628      	mov	r0, r5
 8002d24:	f000 f89c 	bl	8002e60 <__swbuf_r>
 8002d28:	3001      	adds	r0, #1
 8002d2a:	d011      	beq.n	8002d50 <_puts_r+0x84>
 8002d2c:	250a      	movs	r5, #10
 8002d2e:	e011      	b.n	8002d54 <_puts_r+0x88>
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <_puts_r+0xd4>)
 8002d32:	429c      	cmp	r4, r3
 8002d34:	d101      	bne.n	8002d3a <_puts_r+0x6e>
 8002d36:	68ac      	ldr	r4, [r5, #8]
 8002d38:	e7da      	b.n	8002cf0 <_puts_r+0x24>
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <_puts_r+0xd8>)
 8002d3c:	429c      	cmp	r4, r3
 8002d3e:	bf08      	it	eq
 8002d40:	68ec      	ldreq	r4, [r5, #12]
 8002d42:	e7d5      	b.n	8002cf0 <_puts_r+0x24>
 8002d44:	4621      	mov	r1, r4
 8002d46:	4628      	mov	r0, r5
 8002d48:	f000 f8ee 	bl	8002f28 <__swsetup_r>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d0dd      	beq.n	8002d0c <_puts_r+0x40>
 8002d50:	f04f 35ff 	mov.w	r5, #4294967295
 8002d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d56:	07da      	lsls	r2, r3, #31
 8002d58:	d405      	bmi.n	8002d66 <_puts_r+0x9a>
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	059b      	lsls	r3, r3, #22
 8002d5e:	d402      	bmi.n	8002d66 <_puts_r+0x9a>
 8002d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d62:	f7ff feb5 	bl	8002ad0 <__retarget_lock_release_recursive>
 8002d66:	4628      	mov	r0, r5
 8002d68:	bd70      	pop	{r4, r5, r6, pc}
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da04      	bge.n	8002d78 <_puts_r+0xac>
 8002d6e:	69a2      	ldr	r2, [r4, #24]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	dc06      	bgt.n	8002d82 <_puts_r+0xb6>
 8002d74:	290a      	cmp	r1, #10
 8002d76:	d004      	beq.n	8002d82 <_puts_r+0xb6>
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	6022      	str	r2, [r4, #0]
 8002d7e:	7019      	strb	r1, [r3, #0]
 8002d80:	e7c5      	b.n	8002d0e <_puts_r+0x42>
 8002d82:	4622      	mov	r2, r4
 8002d84:	4628      	mov	r0, r5
 8002d86:	f000 f86b 	bl	8002e60 <__swbuf_r>
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	d1bf      	bne.n	8002d0e <_puts_r+0x42>
 8002d8e:	e7df      	b.n	8002d50 <_puts_r+0x84>
 8002d90:	250a      	movs	r5, #10
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	6022      	str	r2, [r4, #0]
 8002d98:	701d      	strb	r5, [r3, #0]
 8002d9a:	e7db      	b.n	8002d54 <_puts_r+0x88>
 8002d9c:	080039a0 	.word	0x080039a0
 8002da0:	080039c0 	.word	0x080039c0
 8002da4:	08003980 	.word	0x08003980

08002da8 <puts>:
 8002da8:	4b02      	ldr	r3, [pc, #8]	; (8002db4 <puts+0xc>)
 8002daa:	4601      	mov	r1, r0
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	f7ff bf8d 	b.w	8002ccc <_puts_r>
 8002db2:	bf00      	nop
 8002db4:	2000004c 	.word	0x2000004c

08002db8 <_sbrk_r>:
 8002db8:	b538      	push	{r3, r4, r5, lr}
 8002dba:	2300      	movs	r3, #0
 8002dbc:	4d05      	ldr	r5, [pc, #20]	; (8002dd4 <_sbrk_r+0x1c>)
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	602b      	str	r3, [r5, #0]
 8002dc4:	f7fd fdc6 	bl	8000954 <_sbrk>
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d102      	bne.n	8002dd2 <_sbrk_r+0x1a>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	b103      	cbz	r3, 8002dd2 <_sbrk_r+0x1a>
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	bd38      	pop	{r3, r4, r5, pc}
 8002dd4:	20000130 	.word	0x20000130

08002dd8 <__sread>:
 8002dd8:	b510      	push	{r4, lr}
 8002dda:	460c      	mov	r4, r1
 8002ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de0:	f000 fc92 	bl	8003708 <_read_r>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	bfab      	itete	ge
 8002de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002dea:	89a3      	ldrhlt	r3, [r4, #12]
 8002dec:	181b      	addge	r3, r3, r0
 8002dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002df2:	bfac      	ite	ge
 8002df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002df6:	81a3      	strhlt	r3, [r4, #12]
 8002df8:	bd10      	pop	{r4, pc}

08002dfa <__swrite>:
 8002dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfe:	461f      	mov	r7, r3
 8002e00:	898b      	ldrh	r3, [r1, #12]
 8002e02:	4605      	mov	r5, r0
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	460c      	mov	r4, r1
 8002e08:	4616      	mov	r6, r2
 8002e0a:	d505      	bpl.n	8002e18 <__swrite+0x1e>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e14:	f000 f906 	bl	8003024 <_lseek_r>
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	4632      	mov	r2, r6
 8002e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e20:	81a3      	strh	r3, [r4, #12]
 8002e22:	4628      	mov	r0, r5
 8002e24:	463b      	mov	r3, r7
 8002e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e2e:	f000 b869 	b.w	8002f04 <_write_r>

08002e32 <__sseek>:
 8002e32:	b510      	push	{r4, lr}
 8002e34:	460c      	mov	r4, r1
 8002e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e3a:	f000 f8f3 	bl	8003024 <_lseek_r>
 8002e3e:	1c43      	adds	r3, r0, #1
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	bf15      	itete	ne
 8002e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e4e:	81a3      	strheq	r3, [r4, #12]
 8002e50:	bf18      	it	ne
 8002e52:	81a3      	strhne	r3, [r4, #12]
 8002e54:	bd10      	pop	{r4, pc}

08002e56 <__sclose>:
 8002e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e5a:	f000 b8d3 	b.w	8003004 <_close_r>
	...

08002e60 <__swbuf_r>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	460e      	mov	r6, r1
 8002e64:	4614      	mov	r4, r2
 8002e66:	4605      	mov	r5, r0
 8002e68:	b118      	cbz	r0, 8002e72 <__swbuf_r+0x12>
 8002e6a:	6983      	ldr	r3, [r0, #24]
 8002e6c:	b90b      	cbnz	r3, 8002e72 <__swbuf_r+0x12>
 8002e6e:	f7ff fd6b 	bl	8002948 <__sinit>
 8002e72:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <__swbuf_r+0x98>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d12b      	bne.n	8002ed0 <__swbuf_r+0x70>
 8002e78:	686c      	ldr	r4, [r5, #4]
 8002e7a:	69a3      	ldr	r3, [r4, #24]
 8002e7c:	60a3      	str	r3, [r4, #8]
 8002e7e:	89a3      	ldrh	r3, [r4, #12]
 8002e80:	071a      	lsls	r2, r3, #28
 8002e82:	d52f      	bpl.n	8002ee4 <__swbuf_r+0x84>
 8002e84:	6923      	ldr	r3, [r4, #16]
 8002e86:	b36b      	cbz	r3, 8002ee4 <__swbuf_r+0x84>
 8002e88:	6923      	ldr	r3, [r4, #16]
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	b2f6      	uxtb	r6, r6
 8002e8e:	1ac0      	subs	r0, r0, r3
 8002e90:	6963      	ldr	r3, [r4, #20]
 8002e92:	4637      	mov	r7, r6
 8002e94:	4283      	cmp	r3, r0
 8002e96:	dc04      	bgt.n	8002ea2 <__swbuf_r+0x42>
 8002e98:	4621      	mov	r1, r4
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f7ff fcae 	bl	80027fc <_fflush_r>
 8002ea0:	bb30      	cbnz	r0, 8002ef0 <__swbuf_r+0x90>
 8002ea2:	68a3      	ldr	r3, [r4, #8]
 8002ea4:	3001      	adds	r0, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	60a3      	str	r3, [r4, #8]
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	6022      	str	r2, [r4, #0]
 8002eb0:	701e      	strb	r6, [r3, #0]
 8002eb2:	6963      	ldr	r3, [r4, #20]
 8002eb4:	4283      	cmp	r3, r0
 8002eb6:	d004      	beq.n	8002ec2 <__swbuf_r+0x62>
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	07db      	lsls	r3, r3, #31
 8002ebc:	d506      	bpl.n	8002ecc <__swbuf_r+0x6c>
 8002ebe:	2e0a      	cmp	r6, #10
 8002ec0:	d104      	bne.n	8002ecc <__swbuf_r+0x6c>
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f7ff fc99 	bl	80027fc <_fflush_r>
 8002eca:	b988      	cbnz	r0, 8002ef0 <__swbuf_r+0x90>
 8002ecc:	4638      	mov	r0, r7
 8002ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <__swbuf_r+0x9c>)
 8002ed2:	429c      	cmp	r4, r3
 8002ed4:	d101      	bne.n	8002eda <__swbuf_r+0x7a>
 8002ed6:	68ac      	ldr	r4, [r5, #8]
 8002ed8:	e7cf      	b.n	8002e7a <__swbuf_r+0x1a>
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <__swbuf_r+0xa0>)
 8002edc:	429c      	cmp	r4, r3
 8002ede:	bf08      	it	eq
 8002ee0:	68ec      	ldreq	r4, [r5, #12]
 8002ee2:	e7ca      	b.n	8002e7a <__swbuf_r+0x1a>
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f000 f81e 	bl	8002f28 <__swsetup_r>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d0cb      	beq.n	8002e88 <__swbuf_r+0x28>
 8002ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8002ef4:	e7ea      	b.n	8002ecc <__swbuf_r+0x6c>
 8002ef6:	bf00      	nop
 8002ef8:	080039a0 	.word	0x080039a0
 8002efc:	080039c0 	.word	0x080039c0
 8002f00:	08003980 	.word	0x08003980

08002f04 <_write_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	4604      	mov	r4, r0
 8002f08:	4608      	mov	r0, r1
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4d05      	ldr	r5, [pc, #20]	; (8002f24 <_write_r+0x20>)
 8002f10:	602a      	str	r2, [r5, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f7fd fcd1 	bl	80008ba <_write>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d102      	bne.n	8002f22 <_write_r+0x1e>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	b103      	cbz	r3, 8002f22 <_write_r+0x1e>
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	20000130 	.word	0x20000130

08002f28 <__swsetup_r>:
 8002f28:	4b32      	ldr	r3, [pc, #200]	; (8002ff4 <__swsetup_r+0xcc>)
 8002f2a:	b570      	push	{r4, r5, r6, lr}
 8002f2c:	681d      	ldr	r5, [r3, #0]
 8002f2e:	4606      	mov	r6, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	b125      	cbz	r5, 8002f3e <__swsetup_r+0x16>
 8002f34:	69ab      	ldr	r3, [r5, #24]
 8002f36:	b913      	cbnz	r3, 8002f3e <__swsetup_r+0x16>
 8002f38:	4628      	mov	r0, r5
 8002f3a:	f7ff fd05 	bl	8002948 <__sinit>
 8002f3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <__swsetup_r+0xd0>)
 8002f40:	429c      	cmp	r4, r3
 8002f42:	d10f      	bne.n	8002f64 <__swsetup_r+0x3c>
 8002f44:	686c      	ldr	r4, [r5, #4]
 8002f46:	89a3      	ldrh	r3, [r4, #12]
 8002f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f4c:	0719      	lsls	r1, r3, #28
 8002f4e:	d42c      	bmi.n	8002faa <__swsetup_r+0x82>
 8002f50:	06dd      	lsls	r5, r3, #27
 8002f52:	d411      	bmi.n	8002f78 <__swsetup_r+0x50>
 8002f54:	2309      	movs	r3, #9
 8002f56:	6033      	str	r3, [r6, #0]
 8002f58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	81a3      	strh	r3, [r4, #12]
 8002f62:	e03e      	b.n	8002fe2 <__swsetup_r+0xba>
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <__swsetup_r+0xd4>)
 8002f66:	429c      	cmp	r4, r3
 8002f68:	d101      	bne.n	8002f6e <__swsetup_r+0x46>
 8002f6a:	68ac      	ldr	r4, [r5, #8]
 8002f6c:	e7eb      	b.n	8002f46 <__swsetup_r+0x1e>
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <__swsetup_r+0xd8>)
 8002f70:	429c      	cmp	r4, r3
 8002f72:	bf08      	it	eq
 8002f74:	68ec      	ldreq	r4, [r5, #12]
 8002f76:	e7e6      	b.n	8002f46 <__swsetup_r+0x1e>
 8002f78:	0758      	lsls	r0, r3, #29
 8002f7a:	d512      	bpl.n	8002fa2 <__swsetup_r+0x7a>
 8002f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f7e:	b141      	cbz	r1, 8002f92 <__swsetup_r+0x6a>
 8002f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f84:	4299      	cmp	r1, r3
 8002f86:	d002      	beq.n	8002f8e <__swsetup_r+0x66>
 8002f88:	4630      	mov	r0, r6
 8002f8a:	f7ff fdab 	bl	8002ae4 <_free_r>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6363      	str	r3, [r4, #52]	; 0x34
 8002f92:	89a3      	ldrh	r3, [r4, #12]
 8002f94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f98:	81a3      	strh	r3, [r4, #12]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	6923      	ldr	r3, [r4, #16]
 8002fa0:	6023      	str	r3, [r4, #0]
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	f043 0308 	orr.w	r3, r3, #8
 8002fa8:	81a3      	strh	r3, [r4, #12]
 8002faa:	6923      	ldr	r3, [r4, #16]
 8002fac:	b94b      	cbnz	r3, 8002fc2 <__swsetup_r+0x9a>
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb8:	d003      	beq.n	8002fc2 <__swsetup_r+0x9a>
 8002fba:	4621      	mov	r1, r4
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f000 f869 	bl	8003094 <__smakebuf_r>
 8002fc2:	89a0      	ldrh	r0, [r4, #12]
 8002fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fc8:	f010 0301 	ands.w	r3, r0, #1
 8002fcc:	d00a      	beq.n	8002fe4 <__swsetup_r+0xbc>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60a3      	str	r3, [r4, #8]
 8002fd2:	6963      	ldr	r3, [r4, #20]
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	61a3      	str	r3, [r4, #24]
 8002fd8:	6923      	ldr	r3, [r4, #16]
 8002fda:	b943      	cbnz	r3, 8002fee <__swsetup_r+0xc6>
 8002fdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002fe0:	d1ba      	bne.n	8002f58 <__swsetup_r+0x30>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	0781      	lsls	r1, r0, #30
 8002fe6:	bf58      	it	pl
 8002fe8:	6963      	ldrpl	r3, [r4, #20]
 8002fea:	60a3      	str	r3, [r4, #8]
 8002fec:	e7f4      	b.n	8002fd8 <__swsetup_r+0xb0>
 8002fee:	2000      	movs	r0, #0
 8002ff0:	e7f7      	b.n	8002fe2 <__swsetup_r+0xba>
 8002ff2:	bf00      	nop
 8002ff4:	2000004c 	.word	0x2000004c
 8002ff8:	080039a0 	.word	0x080039a0
 8002ffc:	080039c0 	.word	0x080039c0
 8003000:	08003980 	.word	0x08003980

08003004 <_close_r>:
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	2300      	movs	r3, #0
 8003008:	4d05      	ldr	r5, [pc, #20]	; (8003020 <_close_r+0x1c>)
 800300a:	4604      	mov	r4, r0
 800300c:	4608      	mov	r0, r1
 800300e:	602b      	str	r3, [r5, #0]
 8003010:	f7fd fc6f 	bl	80008f2 <_close>
 8003014:	1c43      	adds	r3, r0, #1
 8003016:	d102      	bne.n	800301e <_close_r+0x1a>
 8003018:	682b      	ldr	r3, [r5, #0]
 800301a:	b103      	cbz	r3, 800301e <_close_r+0x1a>
 800301c:	6023      	str	r3, [r4, #0]
 800301e:	bd38      	pop	{r3, r4, r5, pc}
 8003020:	20000130 	.word	0x20000130

08003024 <_lseek_r>:
 8003024:	b538      	push	{r3, r4, r5, lr}
 8003026:	4604      	mov	r4, r0
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	2200      	movs	r2, #0
 800302e:	4d05      	ldr	r5, [pc, #20]	; (8003044 <_lseek_r+0x20>)
 8003030:	602a      	str	r2, [r5, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	f7fd fc81 	bl	800093a <_lseek>
 8003038:	1c43      	adds	r3, r0, #1
 800303a:	d102      	bne.n	8003042 <_lseek_r+0x1e>
 800303c:	682b      	ldr	r3, [r5, #0]
 800303e:	b103      	cbz	r3, 8003042 <_lseek_r+0x1e>
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	bd38      	pop	{r3, r4, r5, pc}
 8003044:	20000130 	.word	0x20000130

08003048 <__swhatbuf_r>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	460e      	mov	r6, r1
 800304c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003050:	4614      	mov	r4, r2
 8003052:	2900      	cmp	r1, #0
 8003054:	461d      	mov	r5, r3
 8003056:	b096      	sub	sp, #88	; 0x58
 8003058:	da08      	bge.n	800306c <__swhatbuf_r+0x24>
 800305a:	2200      	movs	r2, #0
 800305c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003060:	602a      	str	r2, [r5, #0]
 8003062:	061a      	lsls	r2, r3, #24
 8003064:	d410      	bmi.n	8003088 <__swhatbuf_r+0x40>
 8003066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306a:	e00e      	b.n	800308a <__swhatbuf_r+0x42>
 800306c:	466a      	mov	r2, sp
 800306e:	f000 fb5d 	bl	800372c <_fstat_r>
 8003072:	2800      	cmp	r0, #0
 8003074:	dbf1      	blt.n	800305a <__swhatbuf_r+0x12>
 8003076:	9a01      	ldr	r2, [sp, #4]
 8003078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800307c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003080:	425a      	negs	r2, r3
 8003082:	415a      	adcs	r2, r3
 8003084:	602a      	str	r2, [r5, #0]
 8003086:	e7ee      	b.n	8003066 <__swhatbuf_r+0x1e>
 8003088:	2340      	movs	r3, #64	; 0x40
 800308a:	2000      	movs	r0, #0
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	b016      	add	sp, #88	; 0x58
 8003090:	bd70      	pop	{r4, r5, r6, pc}
	...

08003094 <__smakebuf_r>:
 8003094:	898b      	ldrh	r3, [r1, #12]
 8003096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003098:	079d      	lsls	r5, r3, #30
 800309a:	4606      	mov	r6, r0
 800309c:	460c      	mov	r4, r1
 800309e:	d507      	bpl.n	80030b0 <__smakebuf_r+0x1c>
 80030a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	6123      	str	r3, [r4, #16]
 80030a8:	2301      	movs	r3, #1
 80030aa:	6163      	str	r3, [r4, #20]
 80030ac:	b002      	add	sp, #8
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	466a      	mov	r2, sp
 80030b2:	ab01      	add	r3, sp, #4
 80030b4:	f7ff ffc8 	bl	8003048 <__swhatbuf_r>
 80030b8:	9900      	ldr	r1, [sp, #0]
 80030ba:	4605      	mov	r5, r0
 80030bc:	4630      	mov	r0, r6
 80030be:	f7ff fd79 	bl	8002bb4 <_malloc_r>
 80030c2:	b948      	cbnz	r0, 80030d8 <__smakebuf_r+0x44>
 80030c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030c8:	059a      	lsls	r2, r3, #22
 80030ca:	d4ef      	bmi.n	80030ac <__smakebuf_r+0x18>
 80030cc:	f023 0303 	bic.w	r3, r3, #3
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	81a3      	strh	r3, [r4, #12]
 80030d6:	e7e3      	b.n	80030a0 <__smakebuf_r+0xc>
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <__smakebuf_r+0x7c>)
 80030da:	62b3      	str	r3, [r6, #40]	; 0x28
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	6020      	str	r0, [r4, #0]
 80030e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e4:	81a3      	strh	r3, [r4, #12]
 80030e6:	9b00      	ldr	r3, [sp, #0]
 80030e8:	6120      	str	r0, [r4, #16]
 80030ea:	6163      	str	r3, [r4, #20]
 80030ec:	9b01      	ldr	r3, [sp, #4]
 80030ee:	b15b      	cbz	r3, 8003108 <__smakebuf_r+0x74>
 80030f0:	4630      	mov	r0, r6
 80030f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030f6:	f000 fb2b 	bl	8003750 <_isatty_r>
 80030fa:	b128      	cbz	r0, 8003108 <__smakebuf_r+0x74>
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	89a0      	ldrh	r0, [r4, #12]
 800310a:	4305      	orrs	r5, r0
 800310c:	81a5      	strh	r5, [r4, #12]
 800310e:	e7cd      	b.n	80030ac <__smakebuf_r+0x18>
 8003110:	080028e1 	.word	0x080028e1

08003114 <__malloc_lock>:
 8003114:	4801      	ldr	r0, [pc, #4]	; (800311c <__malloc_lock+0x8>)
 8003116:	f7ff bcda 	b.w	8002ace <__retarget_lock_acquire_recursive>
 800311a:	bf00      	nop
 800311c:	20000124 	.word	0x20000124

08003120 <__malloc_unlock>:
 8003120:	4801      	ldr	r0, [pc, #4]	; (8003128 <__malloc_unlock+0x8>)
 8003122:	f7ff bcd5 	b.w	8002ad0 <__retarget_lock_release_recursive>
 8003126:	bf00      	nop
 8003128:	20000124 	.word	0x20000124

0800312c <__sfputc_r>:
 800312c:	6893      	ldr	r3, [r2, #8]
 800312e:	b410      	push	{r4}
 8003130:	3b01      	subs	r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	6093      	str	r3, [r2, #8]
 8003136:	da07      	bge.n	8003148 <__sfputc_r+0x1c>
 8003138:	6994      	ldr	r4, [r2, #24]
 800313a:	42a3      	cmp	r3, r4
 800313c:	db01      	blt.n	8003142 <__sfputc_r+0x16>
 800313e:	290a      	cmp	r1, #10
 8003140:	d102      	bne.n	8003148 <__sfputc_r+0x1c>
 8003142:	bc10      	pop	{r4}
 8003144:	f7ff be8c 	b.w	8002e60 <__swbuf_r>
 8003148:	6813      	ldr	r3, [r2, #0]
 800314a:	1c58      	adds	r0, r3, #1
 800314c:	6010      	str	r0, [r2, #0]
 800314e:	7019      	strb	r1, [r3, #0]
 8003150:	4608      	mov	r0, r1
 8003152:	bc10      	pop	{r4}
 8003154:	4770      	bx	lr

08003156 <__sfputs_r>:
 8003156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003158:	4606      	mov	r6, r0
 800315a:	460f      	mov	r7, r1
 800315c:	4614      	mov	r4, r2
 800315e:	18d5      	adds	r5, r2, r3
 8003160:	42ac      	cmp	r4, r5
 8003162:	d101      	bne.n	8003168 <__sfputs_r+0x12>
 8003164:	2000      	movs	r0, #0
 8003166:	e007      	b.n	8003178 <__sfputs_r+0x22>
 8003168:	463a      	mov	r2, r7
 800316a:	4630      	mov	r0, r6
 800316c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003170:	f7ff ffdc 	bl	800312c <__sfputc_r>
 8003174:	1c43      	adds	r3, r0, #1
 8003176:	d1f3      	bne.n	8003160 <__sfputs_r+0xa>
 8003178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800317c <_vfiprintf_r>:
 800317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003180:	460d      	mov	r5, r1
 8003182:	4614      	mov	r4, r2
 8003184:	4698      	mov	r8, r3
 8003186:	4606      	mov	r6, r0
 8003188:	b09d      	sub	sp, #116	; 0x74
 800318a:	b118      	cbz	r0, 8003194 <_vfiprintf_r+0x18>
 800318c:	6983      	ldr	r3, [r0, #24]
 800318e:	b90b      	cbnz	r3, 8003194 <_vfiprintf_r+0x18>
 8003190:	f7ff fbda 	bl	8002948 <__sinit>
 8003194:	4b89      	ldr	r3, [pc, #548]	; (80033bc <_vfiprintf_r+0x240>)
 8003196:	429d      	cmp	r5, r3
 8003198:	d11b      	bne.n	80031d2 <_vfiprintf_r+0x56>
 800319a:	6875      	ldr	r5, [r6, #4]
 800319c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800319e:	07d9      	lsls	r1, r3, #31
 80031a0:	d405      	bmi.n	80031ae <_vfiprintf_r+0x32>
 80031a2:	89ab      	ldrh	r3, [r5, #12]
 80031a4:	059a      	lsls	r2, r3, #22
 80031a6:	d402      	bmi.n	80031ae <_vfiprintf_r+0x32>
 80031a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031aa:	f7ff fc90 	bl	8002ace <__retarget_lock_acquire_recursive>
 80031ae:	89ab      	ldrh	r3, [r5, #12]
 80031b0:	071b      	lsls	r3, r3, #28
 80031b2:	d501      	bpl.n	80031b8 <_vfiprintf_r+0x3c>
 80031b4:	692b      	ldr	r3, [r5, #16]
 80031b6:	b9eb      	cbnz	r3, 80031f4 <_vfiprintf_r+0x78>
 80031b8:	4629      	mov	r1, r5
 80031ba:	4630      	mov	r0, r6
 80031bc:	f7ff feb4 	bl	8002f28 <__swsetup_r>
 80031c0:	b1c0      	cbz	r0, 80031f4 <_vfiprintf_r+0x78>
 80031c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031c4:	07dc      	lsls	r4, r3, #31
 80031c6:	d50e      	bpl.n	80031e6 <_vfiprintf_r+0x6a>
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	b01d      	add	sp, #116	; 0x74
 80031ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d2:	4b7b      	ldr	r3, [pc, #492]	; (80033c0 <_vfiprintf_r+0x244>)
 80031d4:	429d      	cmp	r5, r3
 80031d6:	d101      	bne.n	80031dc <_vfiprintf_r+0x60>
 80031d8:	68b5      	ldr	r5, [r6, #8]
 80031da:	e7df      	b.n	800319c <_vfiprintf_r+0x20>
 80031dc:	4b79      	ldr	r3, [pc, #484]	; (80033c4 <_vfiprintf_r+0x248>)
 80031de:	429d      	cmp	r5, r3
 80031e0:	bf08      	it	eq
 80031e2:	68f5      	ldreq	r5, [r6, #12]
 80031e4:	e7da      	b.n	800319c <_vfiprintf_r+0x20>
 80031e6:	89ab      	ldrh	r3, [r5, #12]
 80031e8:	0598      	lsls	r0, r3, #22
 80031ea:	d4ed      	bmi.n	80031c8 <_vfiprintf_r+0x4c>
 80031ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031ee:	f7ff fc6f 	bl	8002ad0 <__retarget_lock_release_recursive>
 80031f2:	e7e9      	b.n	80031c8 <_vfiprintf_r+0x4c>
 80031f4:	2300      	movs	r3, #0
 80031f6:	9309      	str	r3, [sp, #36]	; 0x24
 80031f8:	2320      	movs	r3, #32
 80031fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031fe:	2330      	movs	r3, #48	; 0x30
 8003200:	f04f 0901 	mov.w	r9, #1
 8003204:	f8cd 800c 	str.w	r8, [sp, #12]
 8003208:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80033c8 <_vfiprintf_r+0x24c>
 800320c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003210:	4623      	mov	r3, r4
 8003212:	469a      	mov	sl, r3
 8003214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003218:	b10a      	cbz	r2, 800321e <_vfiprintf_r+0xa2>
 800321a:	2a25      	cmp	r2, #37	; 0x25
 800321c:	d1f9      	bne.n	8003212 <_vfiprintf_r+0x96>
 800321e:	ebba 0b04 	subs.w	fp, sl, r4
 8003222:	d00b      	beq.n	800323c <_vfiprintf_r+0xc0>
 8003224:	465b      	mov	r3, fp
 8003226:	4622      	mov	r2, r4
 8003228:	4629      	mov	r1, r5
 800322a:	4630      	mov	r0, r6
 800322c:	f7ff ff93 	bl	8003156 <__sfputs_r>
 8003230:	3001      	adds	r0, #1
 8003232:	f000 80aa 	beq.w	800338a <_vfiprintf_r+0x20e>
 8003236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003238:	445a      	add	r2, fp
 800323a:	9209      	str	r2, [sp, #36]	; 0x24
 800323c:	f89a 3000 	ldrb.w	r3, [sl]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80a2 	beq.w	800338a <_vfiprintf_r+0x20e>
 8003246:	2300      	movs	r3, #0
 8003248:	f04f 32ff 	mov.w	r2, #4294967295
 800324c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003250:	f10a 0a01 	add.w	sl, sl, #1
 8003254:	9304      	str	r3, [sp, #16]
 8003256:	9307      	str	r3, [sp, #28]
 8003258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800325c:	931a      	str	r3, [sp, #104]	; 0x68
 800325e:	4654      	mov	r4, sl
 8003260:	2205      	movs	r2, #5
 8003262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003266:	4858      	ldr	r0, [pc, #352]	; (80033c8 <_vfiprintf_r+0x24c>)
 8003268:	f000 fa82 	bl	8003770 <memchr>
 800326c:	9a04      	ldr	r2, [sp, #16]
 800326e:	b9d8      	cbnz	r0, 80032a8 <_vfiprintf_r+0x12c>
 8003270:	06d1      	lsls	r1, r2, #27
 8003272:	bf44      	itt	mi
 8003274:	2320      	movmi	r3, #32
 8003276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800327a:	0713      	lsls	r3, r2, #28
 800327c:	bf44      	itt	mi
 800327e:	232b      	movmi	r3, #43	; 0x2b
 8003280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003284:	f89a 3000 	ldrb.w	r3, [sl]
 8003288:	2b2a      	cmp	r3, #42	; 0x2a
 800328a:	d015      	beq.n	80032b8 <_vfiprintf_r+0x13c>
 800328c:	4654      	mov	r4, sl
 800328e:	2000      	movs	r0, #0
 8003290:	f04f 0c0a 	mov.w	ip, #10
 8003294:	9a07      	ldr	r2, [sp, #28]
 8003296:	4621      	mov	r1, r4
 8003298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800329c:	3b30      	subs	r3, #48	; 0x30
 800329e:	2b09      	cmp	r3, #9
 80032a0:	d94e      	bls.n	8003340 <_vfiprintf_r+0x1c4>
 80032a2:	b1b0      	cbz	r0, 80032d2 <_vfiprintf_r+0x156>
 80032a4:	9207      	str	r2, [sp, #28]
 80032a6:	e014      	b.n	80032d2 <_vfiprintf_r+0x156>
 80032a8:	eba0 0308 	sub.w	r3, r0, r8
 80032ac:	fa09 f303 	lsl.w	r3, r9, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	46a2      	mov	sl, r4
 80032b4:	9304      	str	r3, [sp, #16]
 80032b6:	e7d2      	b.n	800325e <_vfiprintf_r+0xe2>
 80032b8:	9b03      	ldr	r3, [sp, #12]
 80032ba:	1d19      	adds	r1, r3, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	9103      	str	r1, [sp, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bfbb      	ittet	lt
 80032c4:	425b      	neglt	r3, r3
 80032c6:	f042 0202 	orrlt.w	r2, r2, #2
 80032ca:	9307      	strge	r3, [sp, #28]
 80032cc:	9307      	strlt	r3, [sp, #28]
 80032ce:	bfb8      	it	lt
 80032d0:	9204      	strlt	r2, [sp, #16]
 80032d2:	7823      	ldrb	r3, [r4, #0]
 80032d4:	2b2e      	cmp	r3, #46	; 0x2e
 80032d6:	d10c      	bne.n	80032f2 <_vfiprintf_r+0x176>
 80032d8:	7863      	ldrb	r3, [r4, #1]
 80032da:	2b2a      	cmp	r3, #42	; 0x2a
 80032dc:	d135      	bne.n	800334a <_vfiprintf_r+0x1ce>
 80032de:	9b03      	ldr	r3, [sp, #12]
 80032e0:	3402      	adds	r4, #2
 80032e2:	1d1a      	adds	r2, r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	9203      	str	r2, [sp, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bfb8      	it	lt
 80032ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80032f0:	9305      	str	r3, [sp, #20]
 80032f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80033cc <_vfiprintf_r+0x250>
 80032f6:	2203      	movs	r2, #3
 80032f8:	4650      	mov	r0, sl
 80032fa:	7821      	ldrb	r1, [r4, #0]
 80032fc:	f000 fa38 	bl	8003770 <memchr>
 8003300:	b140      	cbz	r0, 8003314 <_vfiprintf_r+0x198>
 8003302:	2340      	movs	r3, #64	; 0x40
 8003304:	eba0 000a 	sub.w	r0, r0, sl
 8003308:	fa03 f000 	lsl.w	r0, r3, r0
 800330c:	9b04      	ldr	r3, [sp, #16]
 800330e:	3401      	adds	r4, #1
 8003310:	4303      	orrs	r3, r0
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003318:	2206      	movs	r2, #6
 800331a:	482d      	ldr	r0, [pc, #180]	; (80033d0 <_vfiprintf_r+0x254>)
 800331c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003320:	f000 fa26 	bl	8003770 <memchr>
 8003324:	2800      	cmp	r0, #0
 8003326:	d03f      	beq.n	80033a8 <_vfiprintf_r+0x22c>
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <_vfiprintf_r+0x258>)
 800332a:	bb1b      	cbnz	r3, 8003374 <_vfiprintf_r+0x1f8>
 800332c:	9b03      	ldr	r3, [sp, #12]
 800332e:	3307      	adds	r3, #7
 8003330:	f023 0307 	bic.w	r3, r3, #7
 8003334:	3308      	adds	r3, #8
 8003336:	9303      	str	r3, [sp, #12]
 8003338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800333a:	443b      	add	r3, r7
 800333c:	9309      	str	r3, [sp, #36]	; 0x24
 800333e:	e767      	b.n	8003210 <_vfiprintf_r+0x94>
 8003340:	460c      	mov	r4, r1
 8003342:	2001      	movs	r0, #1
 8003344:	fb0c 3202 	mla	r2, ip, r2, r3
 8003348:	e7a5      	b.n	8003296 <_vfiprintf_r+0x11a>
 800334a:	2300      	movs	r3, #0
 800334c:	f04f 0c0a 	mov.w	ip, #10
 8003350:	4619      	mov	r1, r3
 8003352:	3401      	adds	r4, #1
 8003354:	9305      	str	r3, [sp, #20]
 8003356:	4620      	mov	r0, r4
 8003358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800335c:	3a30      	subs	r2, #48	; 0x30
 800335e:	2a09      	cmp	r2, #9
 8003360:	d903      	bls.n	800336a <_vfiprintf_r+0x1ee>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0c5      	beq.n	80032f2 <_vfiprintf_r+0x176>
 8003366:	9105      	str	r1, [sp, #20]
 8003368:	e7c3      	b.n	80032f2 <_vfiprintf_r+0x176>
 800336a:	4604      	mov	r4, r0
 800336c:	2301      	movs	r3, #1
 800336e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003372:	e7f0      	b.n	8003356 <_vfiprintf_r+0x1da>
 8003374:	ab03      	add	r3, sp, #12
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	462a      	mov	r2, r5
 800337a:	4630      	mov	r0, r6
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <_vfiprintf_r+0x25c>)
 800337e:	a904      	add	r1, sp, #16
 8003380:	f3af 8000 	nop.w
 8003384:	4607      	mov	r7, r0
 8003386:	1c78      	adds	r0, r7, #1
 8003388:	d1d6      	bne.n	8003338 <_vfiprintf_r+0x1bc>
 800338a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800338c:	07d9      	lsls	r1, r3, #31
 800338e:	d405      	bmi.n	800339c <_vfiprintf_r+0x220>
 8003390:	89ab      	ldrh	r3, [r5, #12]
 8003392:	059a      	lsls	r2, r3, #22
 8003394:	d402      	bmi.n	800339c <_vfiprintf_r+0x220>
 8003396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003398:	f7ff fb9a 	bl	8002ad0 <__retarget_lock_release_recursive>
 800339c:	89ab      	ldrh	r3, [r5, #12]
 800339e:	065b      	lsls	r3, r3, #25
 80033a0:	f53f af12 	bmi.w	80031c8 <_vfiprintf_r+0x4c>
 80033a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033a6:	e711      	b.n	80031cc <_vfiprintf_r+0x50>
 80033a8:	ab03      	add	r3, sp, #12
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	462a      	mov	r2, r5
 80033ae:	4630      	mov	r0, r6
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <_vfiprintf_r+0x25c>)
 80033b2:	a904      	add	r1, sp, #16
 80033b4:	f000 f882 	bl	80034bc <_printf_i>
 80033b8:	e7e4      	b.n	8003384 <_vfiprintf_r+0x208>
 80033ba:	bf00      	nop
 80033bc:	080039a0 	.word	0x080039a0
 80033c0:	080039c0 	.word	0x080039c0
 80033c4:	08003980 	.word	0x08003980
 80033c8:	080039e4 	.word	0x080039e4
 80033cc:	080039ea 	.word	0x080039ea
 80033d0:	080039ee 	.word	0x080039ee
 80033d4:	00000000 	.word	0x00000000
 80033d8:	08003157 	.word	0x08003157

080033dc <_printf_common>:
 80033dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e0:	4616      	mov	r6, r2
 80033e2:	4699      	mov	r9, r3
 80033e4:	688a      	ldr	r2, [r1, #8]
 80033e6:	690b      	ldr	r3, [r1, #16]
 80033e8:	4607      	mov	r7, r0
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bfb8      	it	lt
 80033ee:	4613      	movlt	r3, r2
 80033f0:	6033      	str	r3, [r6, #0]
 80033f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033f6:	460c      	mov	r4, r1
 80033f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033fc:	b10a      	cbz	r2, 8003402 <_printf_common+0x26>
 80033fe:	3301      	adds	r3, #1
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	0699      	lsls	r1, r3, #26
 8003406:	bf42      	ittt	mi
 8003408:	6833      	ldrmi	r3, [r6, #0]
 800340a:	3302      	addmi	r3, #2
 800340c:	6033      	strmi	r3, [r6, #0]
 800340e:	6825      	ldr	r5, [r4, #0]
 8003410:	f015 0506 	ands.w	r5, r5, #6
 8003414:	d106      	bne.n	8003424 <_printf_common+0x48>
 8003416:	f104 0a19 	add.w	sl, r4, #25
 800341a:	68e3      	ldr	r3, [r4, #12]
 800341c:	6832      	ldr	r2, [r6, #0]
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	42ab      	cmp	r3, r5
 8003422:	dc28      	bgt.n	8003476 <_printf_common+0x9a>
 8003424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003428:	1e13      	subs	r3, r2, #0
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	bf18      	it	ne
 800342e:	2301      	movne	r3, #1
 8003430:	0692      	lsls	r2, r2, #26
 8003432:	d42d      	bmi.n	8003490 <_printf_common+0xb4>
 8003434:	4649      	mov	r1, r9
 8003436:	4638      	mov	r0, r7
 8003438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800343c:	47c0      	blx	r8
 800343e:	3001      	adds	r0, #1
 8003440:	d020      	beq.n	8003484 <_printf_common+0xa8>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	68e5      	ldr	r5, [r4, #12]
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf18      	it	ne
 800344e:	2500      	movne	r5, #0
 8003450:	6832      	ldr	r2, [r6, #0]
 8003452:	f04f 0600 	mov.w	r6, #0
 8003456:	68a3      	ldr	r3, [r4, #8]
 8003458:	bf08      	it	eq
 800345a:	1aad      	subeq	r5, r5, r2
 800345c:	6922      	ldr	r2, [r4, #16]
 800345e:	bf08      	it	eq
 8003460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003464:	4293      	cmp	r3, r2
 8003466:	bfc4      	itt	gt
 8003468:	1a9b      	subgt	r3, r3, r2
 800346a:	18ed      	addgt	r5, r5, r3
 800346c:	341a      	adds	r4, #26
 800346e:	42b5      	cmp	r5, r6
 8003470:	d11a      	bne.n	80034a8 <_printf_common+0xcc>
 8003472:	2000      	movs	r0, #0
 8003474:	e008      	b.n	8003488 <_printf_common+0xac>
 8003476:	2301      	movs	r3, #1
 8003478:	4652      	mov	r2, sl
 800347a:	4649      	mov	r1, r9
 800347c:	4638      	mov	r0, r7
 800347e:	47c0      	blx	r8
 8003480:	3001      	adds	r0, #1
 8003482:	d103      	bne.n	800348c <_printf_common+0xb0>
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348c:	3501      	adds	r5, #1
 800348e:	e7c4      	b.n	800341a <_printf_common+0x3e>
 8003490:	2030      	movs	r0, #48	; 0x30
 8003492:	18e1      	adds	r1, r4, r3
 8003494:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800349e:	4422      	add	r2, r4
 80034a0:	3302      	adds	r3, #2
 80034a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034a6:	e7c5      	b.n	8003434 <_printf_common+0x58>
 80034a8:	2301      	movs	r3, #1
 80034aa:	4622      	mov	r2, r4
 80034ac:	4649      	mov	r1, r9
 80034ae:	4638      	mov	r0, r7
 80034b0:	47c0      	blx	r8
 80034b2:	3001      	adds	r0, #1
 80034b4:	d0e6      	beq.n	8003484 <_printf_common+0xa8>
 80034b6:	3601      	adds	r6, #1
 80034b8:	e7d9      	b.n	800346e <_printf_common+0x92>
	...

080034bc <_printf_i>:
 80034bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c0:	7e0f      	ldrb	r7, [r1, #24]
 80034c2:	4691      	mov	r9, r2
 80034c4:	2f78      	cmp	r7, #120	; 0x78
 80034c6:	4680      	mov	r8, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	469a      	mov	sl, r3
 80034cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034d2:	d807      	bhi.n	80034e4 <_printf_i+0x28>
 80034d4:	2f62      	cmp	r7, #98	; 0x62
 80034d6:	d80a      	bhi.n	80034ee <_printf_i+0x32>
 80034d8:	2f00      	cmp	r7, #0
 80034da:	f000 80d9 	beq.w	8003690 <_printf_i+0x1d4>
 80034de:	2f58      	cmp	r7, #88	; 0x58
 80034e0:	f000 80a4 	beq.w	800362c <_printf_i+0x170>
 80034e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034ec:	e03a      	b.n	8003564 <_printf_i+0xa8>
 80034ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034f2:	2b15      	cmp	r3, #21
 80034f4:	d8f6      	bhi.n	80034e4 <_printf_i+0x28>
 80034f6:	a101      	add	r1, pc, #4	; (adr r1, 80034fc <_printf_i+0x40>)
 80034f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034fc:	08003555 	.word	0x08003555
 8003500:	08003569 	.word	0x08003569
 8003504:	080034e5 	.word	0x080034e5
 8003508:	080034e5 	.word	0x080034e5
 800350c:	080034e5 	.word	0x080034e5
 8003510:	080034e5 	.word	0x080034e5
 8003514:	08003569 	.word	0x08003569
 8003518:	080034e5 	.word	0x080034e5
 800351c:	080034e5 	.word	0x080034e5
 8003520:	080034e5 	.word	0x080034e5
 8003524:	080034e5 	.word	0x080034e5
 8003528:	08003677 	.word	0x08003677
 800352c:	08003599 	.word	0x08003599
 8003530:	08003659 	.word	0x08003659
 8003534:	080034e5 	.word	0x080034e5
 8003538:	080034e5 	.word	0x080034e5
 800353c:	08003699 	.word	0x08003699
 8003540:	080034e5 	.word	0x080034e5
 8003544:	08003599 	.word	0x08003599
 8003548:	080034e5 	.word	0x080034e5
 800354c:	080034e5 	.word	0x080034e5
 8003550:	08003661 	.word	0x08003661
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	1d1a      	adds	r2, r3, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	602a      	str	r2, [r5, #0]
 800355c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003564:	2301      	movs	r3, #1
 8003566:	e0a4      	b.n	80036b2 <_printf_i+0x1f6>
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	6829      	ldr	r1, [r5, #0]
 800356c:	0606      	lsls	r6, r0, #24
 800356e:	f101 0304 	add.w	r3, r1, #4
 8003572:	d50a      	bpl.n	800358a <_printf_i+0xce>
 8003574:	680e      	ldr	r6, [r1, #0]
 8003576:	602b      	str	r3, [r5, #0]
 8003578:	2e00      	cmp	r6, #0
 800357a:	da03      	bge.n	8003584 <_printf_i+0xc8>
 800357c:	232d      	movs	r3, #45	; 0x2d
 800357e:	4276      	negs	r6, r6
 8003580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003584:	230a      	movs	r3, #10
 8003586:	485e      	ldr	r0, [pc, #376]	; (8003700 <_printf_i+0x244>)
 8003588:	e019      	b.n	80035be <_printf_i+0x102>
 800358a:	680e      	ldr	r6, [r1, #0]
 800358c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	bf18      	it	ne
 8003594:	b236      	sxthne	r6, r6
 8003596:	e7ef      	b.n	8003578 <_printf_i+0xbc>
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	1d19      	adds	r1, r3, #4
 800359e:	6029      	str	r1, [r5, #0]
 80035a0:	0601      	lsls	r1, r0, #24
 80035a2:	d501      	bpl.n	80035a8 <_printf_i+0xec>
 80035a4:	681e      	ldr	r6, [r3, #0]
 80035a6:	e002      	b.n	80035ae <_printf_i+0xf2>
 80035a8:	0646      	lsls	r6, r0, #25
 80035aa:	d5fb      	bpl.n	80035a4 <_printf_i+0xe8>
 80035ac:	881e      	ldrh	r6, [r3, #0]
 80035ae:	2f6f      	cmp	r7, #111	; 0x6f
 80035b0:	bf0c      	ite	eq
 80035b2:	2308      	moveq	r3, #8
 80035b4:	230a      	movne	r3, #10
 80035b6:	4852      	ldr	r0, [pc, #328]	; (8003700 <_printf_i+0x244>)
 80035b8:	2100      	movs	r1, #0
 80035ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035be:	6865      	ldr	r5, [r4, #4]
 80035c0:	2d00      	cmp	r5, #0
 80035c2:	bfa8      	it	ge
 80035c4:	6821      	ldrge	r1, [r4, #0]
 80035c6:	60a5      	str	r5, [r4, #8]
 80035c8:	bfa4      	itt	ge
 80035ca:	f021 0104 	bicge.w	r1, r1, #4
 80035ce:	6021      	strge	r1, [r4, #0]
 80035d0:	b90e      	cbnz	r6, 80035d6 <_printf_i+0x11a>
 80035d2:	2d00      	cmp	r5, #0
 80035d4:	d04d      	beq.n	8003672 <_printf_i+0x1b6>
 80035d6:	4615      	mov	r5, r2
 80035d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80035dc:	fb03 6711 	mls	r7, r3, r1, r6
 80035e0:	5dc7      	ldrb	r7, [r0, r7]
 80035e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035e6:	4637      	mov	r7, r6
 80035e8:	42bb      	cmp	r3, r7
 80035ea:	460e      	mov	r6, r1
 80035ec:	d9f4      	bls.n	80035d8 <_printf_i+0x11c>
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d10b      	bne.n	800360a <_printf_i+0x14e>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	07de      	lsls	r6, r3, #31
 80035f6:	d508      	bpl.n	800360a <_printf_i+0x14e>
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	6861      	ldr	r1, [r4, #4]
 80035fc:	4299      	cmp	r1, r3
 80035fe:	bfde      	ittt	le
 8003600:	2330      	movle	r3, #48	; 0x30
 8003602:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003606:	f105 35ff 	addle.w	r5, r5, #4294967295
 800360a:	1b52      	subs	r2, r2, r5
 800360c:	6122      	str	r2, [r4, #16]
 800360e:	464b      	mov	r3, r9
 8003610:	4621      	mov	r1, r4
 8003612:	4640      	mov	r0, r8
 8003614:	f8cd a000 	str.w	sl, [sp]
 8003618:	aa03      	add	r2, sp, #12
 800361a:	f7ff fedf 	bl	80033dc <_printf_common>
 800361e:	3001      	adds	r0, #1
 8003620:	d14c      	bne.n	80036bc <_printf_i+0x200>
 8003622:	f04f 30ff 	mov.w	r0, #4294967295
 8003626:	b004      	add	sp, #16
 8003628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362c:	4834      	ldr	r0, [pc, #208]	; (8003700 <_printf_i+0x244>)
 800362e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003632:	6829      	ldr	r1, [r5, #0]
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	f851 6b04 	ldr.w	r6, [r1], #4
 800363a:	6029      	str	r1, [r5, #0]
 800363c:	061d      	lsls	r5, r3, #24
 800363e:	d514      	bpl.n	800366a <_printf_i+0x1ae>
 8003640:	07df      	lsls	r7, r3, #31
 8003642:	bf44      	itt	mi
 8003644:	f043 0320 	orrmi.w	r3, r3, #32
 8003648:	6023      	strmi	r3, [r4, #0]
 800364a:	b91e      	cbnz	r6, 8003654 <_printf_i+0x198>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	f023 0320 	bic.w	r3, r3, #32
 8003652:	6023      	str	r3, [r4, #0]
 8003654:	2310      	movs	r3, #16
 8003656:	e7af      	b.n	80035b8 <_printf_i+0xfc>
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	f043 0320 	orr.w	r3, r3, #32
 800365e:	6023      	str	r3, [r4, #0]
 8003660:	2378      	movs	r3, #120	; 0x78
 8003662:	4828      	ldr	r0, [pc, #160]	; (8003704 <_printf_i+0x248>)
 8003664:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003668:	e7e3      	b.n	8003632 <_printf_i+0x176>
 800366a:	0659      	lsls	r1, r3, #25
 800366c:	bf48      	it	mi
 800366e:	b2b6      	uxthmi	r6, r6
 8003670:	e7e6      	b.n	8003640 <_printf_i+0x184>
 8003672:	4615      	mov	r5, r2
 8003674:	e7bb      	b.n	80035ee <_printf_i+0x132>
 8003676:	682b      	ldr	r3, [r5, #0]
 8003678:	6826      	ldr	r6, [r4, #0]
 800367a:	1d18      	adds	r0, r3, #4
 800367c:	6961      	ldr	r1, [r4, #20]
 800367e:	6028      	str	r0, [r5, #0]
 8003680:	0635      	lsls	r5, r6, #24
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	d501      	bpl.n	800368a <_printf_i+0x1ce>
 8003686:	6019      	str	r1, [r3, #0]
 8003688:	e002      	b.n	8003690 <_printf_i+0x1d4>
 800368a:	0670      	lsls	r0, r6, #25
 800368c:	d5fb      	bpl.n	8003686 <_printf_i+0x1ca>
 800368e:	8019      	strh	r1, [r3, #0]
 8003690:	2300      	movs	r3, #0
 8003692:	4615      	mov	r5, r2
 8003694:	6123      	str	r3, [r4, #16]
 8003696:	e7ba      	b.n	800360e <_printf_i+0x152>
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	2100      	movs	r1, #0
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	602a      	str	r2, [r5, #0]
 80036a0:	681d      	ldr	r5, [r3, #0]
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	4628      	mov	r0, r5
 80036a6:	f000 f863 	bl	8003770 <memchr>
 80036aa:	b108      	cbz	r0, 80036b0 <_printf_i+0x1f4>
 80036ac:	1b40      	subs	r0, r0, r5
 80036ae:	6060      	str	r0, [r4, #4]
 80036b0:	6863      	ldr	r3, [r4, #4]
 80036b2:	6123      	str	r3, [r4, #16]
 80036b4:	2300      	movs	r3, #0
 80036b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ba:	e7a8      	b.n	800360e <_printf_i+0x152>
 80036bc:	462a      	mov	r2, r5
 80036be:	4649      	mov	r1, r9
 80036c0:	4640      	mov	r0, r8
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	47d0      	blx	sl
 80036c6:	3001      	adds	r0, #1
 80036c8:	d0ab      	beq.n	8003622 <_printf_i+0x166>
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	079b      	lsls	r3, r3, #30
 80036ce:	d413      	bmi.n	80036f8 <_printf_i+0x23c>
 80036d0:	68e0      	ldr	r0, [r4, #12]
 80036d2:	9b03      	ldr	r3, [sp, #12]
 80036d4:	4298      	cmp	r0, r3
 80036d6:	bfb8      	it	lt
 80036d8:	4618      	movlt	r0, r3
 80036da:	e7a4      	b.n	8003626 <_printf_i+0x16a>
 80036dc:	2301      	movs	r3, #1
 80036de:	4632      	mov	r2, r6
 80036e0:	4649      	mov	r1, r9
 80036e2:	4640      	mov	r0, r8
 80036e4:	47d0      	blx	sl
 80036e6:	3001      	adds	r0, #1
 80036e8:	d09b      	beq.n	8003622 <_printf_i+0x166>
 80036ea:	3501      	adds	r5, #1
 80036ec:	68e3      	ldr	r3, [r4, #12]
 80036ee:	9903      	ldr	r1, [sp, #12]
 80036f0:	1a5b      	subs	r3, r3, r1
 80036f2:	42ab      	cmp	r3, r5
 80036f4:	dcf2      	bgt.n	80036dc <_printf_i+0x220>
 80036f6:	e7eb      	b.n	80036d0 <_printf_i+0x214>
 80036f8:	2500      	movs	r5, #0
 80036fa:	f104 0619 	add.w	r6, r4, #25
 80036fe:	e7f5      	b.n	80036ec <_printf_i+0x230>
 8003700:	080039f5 	.word	0x080039f5
 8003704:	08003a06 	.word	0x08003a06

08003708 <_read_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4604      	mov	r4, r0
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	2200      	movs	r2, #0
 8003712:	4d05      	ldr	r5, [pc, #20]	; (8003728 <_read_r+0x20>)
 8003714:	602a      	str	r2, [r5, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	f7fd f8b2 	bl	8000880 <_read>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_read_r+0x1e>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_read_r+0x1e>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	20000130 	.word	0x20000130

0800372c <_fstat_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	2300      	movs	r3, #0
 8003730:	4d06      	ldr	r5, [pc, #24]	; (800374c <_fstat_r+0x20>)
 8003732:	4604      	mov	r4, r0
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	602b      	str	r3, [r5, #0]
 800373a:	f7fd f8e5 	bl	8000908 <_fstat>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	d102      	bne.n	8003748 <_fstat_r+0x1c>
 8003742:	682b      	ldr	r3, [r5, #0]
 8003744:	b103      	cbz	r3, 8003748 <_fstat_r+0x1c>
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	bd38      	pop	{r3, r4, r5, pc}
 800374a:	bf00      	nop
 800374c:	20000130 	.word	0x20000130

08003750 <_isatty_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	2300      	movs	r3, #0
 8003754:	4d05      	ldr	r5, [pc, #20]	; (800376c <_isatty_r+0x1c>)
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	f7fd f8e3 	bl	8000926 <_isatty>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_isatty_r+0x1a>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	b103      	cbz	r3, 800376a <_isatty_r+0x1a>
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	20000130 	.word	0x20000130

08003770 <memchr>:
 8003770:	4603      	mov	r3, r0
 8003772:	b510      	push	{r4, lr}
 8003774:	b2c9      	uxtb	r1, r1
 8003776:	4402      	add	r2, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	4618      	mov	r0, r3
 800377c:	d101      	bne.n	8003782 <memchr+0x12>
 800377e:	2000      	movs	r0, #0
 8003780:	e003      	b.n	800378a <memchr+0x1a>
 8003782:	7804      	ldrb	r4, [r0, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	428c      	cmp	r4, r1
 8003788:	d1f6      	bne.n	8003778 <memchr+0x8>
 800378a:	bd10      	pop	{r4, pc}

0800378c <_init>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr

08003798 <_fini>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr
