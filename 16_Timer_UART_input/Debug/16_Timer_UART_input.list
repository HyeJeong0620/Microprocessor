
16_Timer_UART_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec8  08003ec8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec8  08003ec8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec8  08003ec8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003f40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003f40  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce44  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d26  00000000  00000000  0002cedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  0002f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018579  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da5f  00000000  00000000  00048a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb74  00000000  00000000  000564b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e202c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d54  00000000  00000000  000e207c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003da0 	.word	0x08003da0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003da0 	.word	0x08003da0

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	2364      	movs	r3, #100	; 0x64
 8000158:	2201      	movs	r2, #1
 800015a:	4809      	ldr	r0, [pc, #36]	; (8000180 <__io_putchar+0x34>)
 800015c:	f002 f810 	bl	8002180 <HAL_UART_Transmit>
	if(ch =='\n') {
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b0a      	cmp	r3, #10
 8000164:	d106      	bne.n	8000174 <__io_putchar+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t *)'/r', 1, 100);
 8000166:	2364      	movs	r3, #100	; 0x64
 8000168:	2201      	movs	r2, #1
 800016a:	f642 7172 	movw	r1, #12146	; 0x2f72
 800016e:	4804      	ldr	r0, [pc, #16]	; (8000180 <__io_putchar+0x34>)
 8000170:	f002 f806 	bl	8002180 <HAL_UART_Transmit>
	}
	return ch;
 8000174:	687b      	ldr	r3, [r7, #4]
}
 8000176:	4618      	mov	r0, r3
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	200000d4 	.word	0x200000d4

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000188:	f000 fb80 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018c:	f000 f807 	bl	800019e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000190:	f000 f8ba 	bl	8000308 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000194:	f000 f840 	bl	8000218 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f88c 	bl	80002b4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800019c:	e7fe      	b.n	800019c <main+0x18>

0800019e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019e:	b580      	push	{r7, lr}
 80001a0:	b090      	sub	sp, #64	; 0x40
 80001a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a4:	f107 0318 	add.w	r3, r7, #24
 80001a8:	2228      	movs	r2, #40	; 0x28
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f002 fde5 	bl	8002d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b2:	1d3b      	adds	r3, r7, #4
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	605a      	str	r2, [r3, #4]
 80001ba:	609a      	str	r2, [r3, #8]
 80001bc:	60da      	str	r2, [r3, #12]
 80001be:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c0:	2302      	movs	r3, #2
 80001c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c8:	2310      	movs	r3, #16
 80001ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001cc:	2300      	movs	r3, #0
 80001ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d0:	f107 0318 	add.w	r3, r7, #24
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 ff47 	bl	8001068 <HAL_RCC_OscConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e0:	f000 f992 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e4:	230f      	movs	r3, #15
 80001e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80001f0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80001f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 f9b4 	bl	800156c <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x70>
  {
    Error_Handler();
 800020a:	f000 f97d 	bl	8000508 <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	; 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000234:	4b1e      	ldr	r3, [pc, #120]	; (80002b0 <MX_TIM2_Init+0x98>)
 8000236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 800023c:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <MX_TIM2_Init+0x98>)
 800023e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000242:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <MX_TIM2_Init+0x98>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800024a:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <MX_TIM2_Init+0x98>)
 800024c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000250:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <MX_TIM2_Init+0x98>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000258:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <MX_TIM2_Init+0x98>)
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800025e:	4814      	ldr	r0, [pc, #80]	; (80002b0 <MX_TIM2_Init+0x98>)
 8000260:	f001 fb12 	bl	8001888 <HAL_TIM_Base_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800026a:	f000 f94d 	bl	8000508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800026e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000272:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000274:	f107 0308 	add.w	r3, r7, #8
 8000278:	4619      	mov	r1, r3
 800027a:	480d      	ldr	r0, [pc, #52]	; (80002b0 <MX_TIM2_Init+0x98>)
 800027c:	f001 fcdc 	bl	8001c38 <HAL_TIM_ConfigClockSource>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000286:	f000 f93f 	bl	8000508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800028a:	2300      	movs	r3, #0
 800028c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000292:	463b      	mov	r3, r7
 8000294:	4619      	mov	r1, r3
 8000296:	4806      	ldr	r0, [pc, #24]	; (80002b0 <MX_TIM2_Init+0x98>)
 8000298:	f001 feb2 	bl	8002000 <HAL_TIMEx_MasterConfigSynchronization>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80002a2:	f000 f931 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	3718      	adds	r7, #24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000008c 	.word	0x2000008c

080002b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART2_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002da:	220c      	movs	r2, #12
 80002dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ec:	f001 fef8 	bl	80020e0 <HAL_UART_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002f6:	f000 f907 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200000d4 	.word	0x200000d4
 8000304:	40004400 	.word	0x40004400

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0310 	add.w	r3, r7, #16
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031c:	4b38      	ldr	r3, [pc, #224]	; (8000400 <MX_GPIO_Init+0xf8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a37      	ldr	r2, [pc, #220]	; (8000400 <MX_GPIO_Init+0xf8>)
 8000322:	f043 0310 	orr.w	r3, r3, #16
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b35      	ldr	r3, [pc, #212]	; (8000400 <MX_GPIO_Init+0xf8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0310 	and.w	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000334:	4b32      	ldr	r3, [pc, #200]	; (8000400 <MX_GPIO_Init+0xf8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a31      	ldr	r2, [pc, #196]	; (8000400 <MX_GPIO_Init+0xf8>)
 800033a:	f043 0320 	orr.w	r3, r3, #32
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b2f      	ldr	r3, [pc, #188]	; (8000400 <MX_GPIO_Init+0xf8>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0320 	and.w	r3, r3, #32
 8000348:	60bb      	str	r3, [r7, #8]
 800034a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034c:	4b2c      	ldr	r3, [pc, #176]	; (8000400 <MX_GPIO_Init+0xf8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a2b      	ldr	r2, [pc, #172]	; (8000400 <MX_GPIO_Init+0xf8>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b29      	ldr	r3, [pc, #164]	; (8000400 <MX_GPIO_Init+0xf8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <MX_GPIO_Init+0xf8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a25      	ldr	r2, [pc, #148]	; (8000400 <MX_GPIO_Init+0xf8>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <MX_GPIO_Init+0xf8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0308 	and.w	r3, r3, #8
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000382:	4820      	ldr	r0, [pc, #128]	; (8000404 <MX_GPIO_Init+0xfc>)
 8000384:	f000 fe3f 	bl	8001006 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000388:	2310      	movs	r3, #16
 800038a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <MX_GPIO_Init+0x100>)
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	481c      	ldr	r0, [pc, #112]	; (800040c <MX_GPIO_Init+0x104>)
 800039c:	f000 fc98 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80003a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	4812      	ldr	r0, [pc, #72]	; (8000404 <MX_GPIO_Init+0xfc>)
 80003ba:	f000 fc89 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003be:	2304      	movs	r3, #4
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_GPIO_Init+0x100>)
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	480f      	ldr	r0, [pc, #60]	; (8000410 <MX_GPIO_Init+0x108>)
 80003d2:	f000 fc7d 	bl	8000cd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2100      	movs	r1, #0
 80003da:	2008      	movs	r0, #8
 80003dc:	f000 fb8f 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80003e0:	2008      	movs	r0, #8
 80003e2:	f000 fba8 	bl	8000b36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	200a      	movs	r0, #10
 80003ec:	f000 fb87 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80003f0:	200a      	movs	r0, #10
 80003f2:	f000 fba0 	bl	8000b36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40010c00 	.word	0x40010c00
 8000408:	10210000 	.word	0x10210000
 800040c:	40010800 	.word	0x40010800
 8000410:	40011400 	.word	0x40011400

08000414 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	80fb      	strh	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){ // ON sw
 800041e:	2104      	movs	r1, #4
 8000420:	481f      	ldr	r0, [pc, #124]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000422:	f000 fdd9 	bl	8000fd8 <HAL_GPIO_ReadPin>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d116      	bne.n	800045a <HAL_GPIO_EXTI_Callback+0x46>
		if(state == STATE_IDLE){
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x90>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d112      	bne.n	800045a <HAL_GPIO_EXTI_Callback+0x46>
			state = STATE_RUN;
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <HAL_GPIO_EXTI_Callback+0x94>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 8000442:	4819      	ldr	r0, [pc, #100]	; (80004a8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000444:	f001 fa70 	bl	8001928 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800044e:	4817      	ldr	r0, [pc, #92]	; (80004ac <HAL_GPIO_EXTI_Callback+0x98>)
 8000450:	f000 fdd9 	bl	8001006 <HAL_GPIO_WritePin>
			printf("LED ON!\n");
 8000454:	4816      	ldr	r0, [pc, #88]	; (80004b0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000456:	f002 fd1f 	bl	8002e98 <puts>
		}
	}
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){ // OFF sw
 800045a:	2110      	movs	r1, #16
 800045c:	4815      	ldr	r0, [pc, #84]	; (80004b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800045e:	f000 fdbb 	bl	8000fd8 <HAL_GPIO_ReadPin>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d116      	bne.n	8000496 <HAL_GPIO_EXTI_Callback+0x82>
		if(state == STATE_RUN){
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x90>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d112      	bne.n	8000496 <HAL_GPIO_EXTI_Callback+0x82>
			state = STATE_IDLE;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8000476:	480c      	ldr	r0, [pc, #48]	; (80004a8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000478:	f001 faa8 	bl	80019cc <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000482:	480a      	ldr	r0, [pc, #40]	; (80004ac <HAL_GPIO_EXTI_Callback+0x98>)
 8000484:	f000 fdbf 	bl	8001006 <HAL_GPIO_WritePin>
			printf("LED OFF! LED ON Time = %ld(ms)\n\n",__HAL_TIM_GET_COUNTER(&htim2));
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <HAL_GPIO_EXTI_Callback+0x94>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048e:	4619      	mov	r1, r3
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000492:	f002 fc7b 	bl	8002d8c <iprintf>
		}
	}
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40011400 	.word	0x40011400
 80004a4:	2000011c 	.word	0x2000011c
 80004a8:	2000008c 	.word	0x2000008c
 80004ac:	40010c00 	.word	0x40010c00
 80004b0:	08003db8 	.word	0x08003db8
 80004b4:	40010800 	.word	0x40010800
 80004b8:	08003dc0 	.word	0x08003dc0

080004bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d110      	bne.n	80004ee <HAL_TIM_PeriodElapsedCallback+0x32>
		state = STATE_IDLE;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 80004d2:	4809      	ldr	r0, [pc, #36]	; (80004f8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004d4:	f001 fa7a 	bl	80019cc <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004e0:	f000 fd91 	bl	8001006 <HAL_GPIO_WritePin>
		printf("LED OFF! LED ON Time = %d(ms)\n\n",5000);
 80004e4:	f241 3188 	movw	r1, #5000	; 0x1388
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004ea:	f002 fc4f 	bl	8002d8c <iprintf>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2000008c 	.word	0x2000008c
 80004fc:	2000011c 	.word	0x2000011c
 8000500:	40010c00 	.word	0x40010c00
 8000504:	08003de4 	.word	0x08003de4

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_MspInit+0x50>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <HAL_MspInit+0x50>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x50>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x50>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_MspInit+0x50>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x50>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2005      	movs	r0, #5
 8000550:	f000 fad5 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000554:	2005      	movs	r0, #5
 8000556:	f000 faee 	bl	8000b36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000578:	d113      	bne.n	80005a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_TIM_Base_MspInit+0x44>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <HAL_TIM_Base_MspInit+0x44>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_TIM_Base_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	201c      	movs	r0, #28
 8000598:	f000 fab1 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800059c:	201c      	movs	r0, #28
 800059e:	f000 faca 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <HAL_UART_MspInit+0x98>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d137      	bne.n	8000640 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <HAL_UART_MspInit+0x9c>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <HAL_UART_MspInit+0x9c>)
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	61d3      	str	r3, [r2, #28]
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <HAL_UART_MspInit+0x9c>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_UART_MspInit+0x9c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <HAL_UART_MspInit+0x9c>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_UART_MspInit+0x9c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000600:	2304      	movs	r3, #4
 8000602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4619      	mov	r1, r3
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <HAL_UART_MspInit+0xa0>)
 8000614:	f000 fb5c 	bl	8000cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000618:	2308      	movs	r3, #8
 800061a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <HAL_UART_MspInit+0xa0>)
 800062c:	f000 fb50 	bl	8000cd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2026      	movs	r0, #38	; 0x26
 8000636:	f000 fa62 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800063a:	2026      	movs	r0, #38	; 0x26
 800063c:	f000 fa7b 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40004400 	.word	0x40004400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f93d 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80006b2:	2004      	movs	r0, #4
 80006b4:	f000 fcc0 	bl	8001038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80006c0:	2010      	movs	r0, #16
 80006c2:	f000 fcb9 	bl	8001038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <TIM2_IRQHandler+0x10>)
 80006d2:	f001 f9a9 	bl	8001a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000008c 	.word	0x2000008c

080006e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <USART2_IRQHandler+0x10>)
 80006e6:	f001 fdcf 	bl	8002288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000d4 	.word	0x200000d4

080006f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e00a      	b.n	800071c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000706:	f3af 8000 	nop.w
 800070a:	4601      	mov	r1, r0
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	60ba      	str	r2, [r7, #8]
 8000712:	b2ca      	uxtb	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbf0      	blt.n	8000706 <_read+0x12>
  }

  return len;
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e009      	b.n	8000754 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	60ba      	str	r2, [r7, #8]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fcff 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf1      	blt.n	8000740 <_write+0x12>
  }
  return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_close>:

int _close(int file)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078c:	605a      	str	r2, [r3, #4]
  return 0;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <_isatty>:

int _isatty(int file)
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f002 fa96 	bl	8002d28 <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20005000 	.word	0x20005000
 8000828:	00000400 	.word	0x00000400
 800082c:	20000120 	.word	0x20000120
 8000830:	20000138 	.word	0x20000138

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000840:	f7ff fff8 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000846:	490c      	ldr	r1, [pc, #48]	; (8000878 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <LoopFillZerobss+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a09      	ldr	r2, [pc, #36]	; (8000880 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800085c:	4c09      	ldr	r4, [pc, #36]	; (8000884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f002 fa63 	bl	8002d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fc89 	bl	8000184 <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800087c:	08003ed0 	.word	0x08003ed0
  ldr r2, =_sbss
 8000880:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000884:	20000138 	.word	0x20000138

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f923 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff fe34 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f93b 	bl	8000b52 <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f903 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	; (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a03      	ldr	r2, [pc, #12]	; (8000938 <HAL_IncTick+0x20>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000008 	.word	0x20000008
 8000938:	20000124 	.word	0x20000124

0800093c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000124 	.word	0x20000124

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db0b      	blt.n	80009de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	4906      	ldr	r1, [pc, #24]	; (80009e8 <__NVIC_EnableIRQ+0x34>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	; 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff90 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff2d 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff42 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff90 	bl	8000a40 <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5f 	bl	80009ec <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff35 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d008      	beq.n	8000b94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2204      	movs	r2, #4
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e020      	b.n	8000bd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 020e 	bic.w	r2, r2, #14
 8000ba2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0201 	bic.w	r2, r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d005      	beq.n	8000c04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e051      	b.n	8000ca8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 020e 	bic.w	r2, r2, #14
 8000c12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0201 	bic.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <HAL_DMA_Abort_IT+0xd4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d029      	beq.n	8000c82 <HAL_DMA_Abort_IT+0xa2>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <HAL_DMA_Abort_IT+0xd8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d022      	beq.n	8000c7e <HAL_DMA_Abort_IT+0x9e>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <HAL_DMA_Abort_IT+0xdc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d01a      	beq.n	8000c78 <HAL_DMA_Abort_IT+0x98>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <HAL_DMA_Abort_IT+0xe0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d012      	beq.n	8000c72 <HAL_DMA_Abort_IT+0x92>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_DMA_Abort_IT+0xe4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d00a      	beq.n	8000c6c <HAL_DMA_Abort_IT+0x8c>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <HAL_DMA_Abort_IT+0xe8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d102      	bne.n	8000c66 <HAL_DMA_Abort_IT+0x86>
 8000c60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c64:	e00e      	b.n	8000c84 <HAL_DMA_Abort_IT+0xa4>
 8000c66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c6a:	e00b      	b.n	8000c84 <HAL_DMA_Abort_IT+0xa4>
 8000c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c70:	e008      	b.n	8000c84 <HAL_DMA_Abort_IT+0xa4>
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c76:	e005      	b.n	8000c84 <HAL_DMA_Abort_IT+0xa4>
 8000c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7c:	e002      	b.n	8000c84 <HAL_DMA_Abort_IT+0xa4>
 8000c7e:	2310      	movs	r3, #16
 8000c80:	e000      	b.n	8000c84 <HAL_DMA_Abort_IT+0xa4>
 8000c82:	2301      	movs	r3, #1
 8000c84:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <HAL_DMA_Abort_IT+0xec>)
 8000c86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	4798      	blx	r3
    } 
  }
  return status;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40020008 	.word	0x40020008
 8000cb8:	4002001c 	.word	0x4002001c
 8000cbc:	40020030 	.word	0x40020030
 8000cc0:	40020044 	.word	0x40020044
 8000cc4:	40020058 	.word	0x40020058
 8000cc8:	4002006c 	.word	0x4002006c
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b08b      	sub	sp, #44	; 0x2c
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e169      	b.n	8000fb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 8158 	bne.w	8000fb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	4a9a      	ldr	r2, [pc, #616]	; (8000f70 <HAL_GPIO_Init+0x2a0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d05e      	beq.n	8000dca <HAL_GPIO_Init+0xfa>
 8000d0c:	4a98      	ldr	r2, [pc, #608]	; (8000f70 <HAL_GPIO_Init+0x2a0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d875      	bhi.n	8000dfe <HAL_GPIO_Init+0x12e>
 8000d12:	4a98      	ldr	r2, [pc, #608]	; (8000f74 <HAL_GPIO_Init+0x2a4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d058      	beq.n	8000dca <HAL_GPIO_Init+0xfa>
 8000d18:	4a96      	ldr	r2, [pc, #600]	; (8000f74 <HAL_GPIO_Init+0x2a4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d86f      	bhi.n	8000dfe <HAL_GPIO_Init+0x12e>
 8000d1e:	4a96      	ldr	r2, [pc, #600]	; (8000f78 <HAL_GPIO_Init+0x2a8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d052      	beq.n	8000dca <HAL_GPIO_Init+0xfa>
 8000d24:	4a94      	ldr	r2, [pc, #592]	; (8000f78 <HAL_GPIO_Init+0x2a8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d869      	bhi.n	8000dfe <HAL_GPIO_Init+0x12e>
 8000d2a:	4a94      	ldr	r2, [pc, #592]	; (8000f7c <HAL_GPIO_Init+0x2ac>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d04c      	beq.n	8000dca <HAL_GPIO_Init+0xfa>
 8000d30:	4a92      	ldr	r2, [pc, #584]	; (8000f7c <HAL_GPIO_Init+0x2ac>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d863      	bhi.n	8000dfe <HAL_GPIO_Init+0x12e>
 8000d36:	4a92      	ldr	r2, [pc, #584]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d046      	beq.n	8000dca <HAL_GPIO_Init+0xfa>
 8000d3c:	4a90      	ldr	r2, [pc, #576]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d85d      	bhi.n	8000dfe <HAL_GPIO_Init+0x12e>
 8000d42:	2b12      	cmp	r3, #18
 8000d44:	d82a      	bhi.n	8000d9c <HAL_GPIO_Init+0xcc>
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d859      	bhi.n	8000dfe <HAL_GPIO_Init+0x12e>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <HAL_GPIO_Init+0x80>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000dcb 	.word	0x08000dcb
 8000d54:	08000da5 	.word	0x08000da5
 8000d58:	08000db7 	.word	0x08000db7
 8000d5c:	08000df9 	.word	0x08000df9
 8000d60:	08000dff 	.word	0x08000dff
 8000d64:	08000dff 	.word	0x08000dff
 8000d68:	08000dff 	.word	0x08000dff
 8000d6c:	08000dff 	.word	0x08000dff
 8000d70:	08000dff 	.word	0x08000dff
 8000d74:	08000dff 	.word	0x08000dff
 8000d78:	08000dff 	.word	0x08000dff
 8000d7c:	08000dff 	.word	0x08000dff
 8000d80:	08000dff 	.word	0x08000dff
 8000d84:	08000dff 	.word	0x08000dff
 8000d88:	08000dff 	.word	0x08000dff
 8000d8c:	08000dff 	.word	0x08000dff
 8000d90:	08000dff 	.word	0x08000dff
 8000d94:	08000dad 	.word	0x08000dad
 8000d98:	08000dc1 	.word	0x08000dc1
 8000d9c:	4a79      	ldr	r2, [pc, #484]	; (8000f84 <HAL_GPIO_Init+0x2b4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d013      	beq.n	8000dca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000da2:	e02c      	b.n	8000dfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e029      	b.n	8000e00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	3304      	adds	r3, #4
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e024      	b.n	8000e00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	3308      	adds	r3, #8
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e01f      	b.n	8000e00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	330c      	adds	r3, #12
 8000dc6:	623b      	str	r3, [r7, #32]
          break;
 8000dc8:	e01a      	b.n	8000e00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	623b      	str	r3, [r7, #32]
          break;
 8000dd6:	e013      	b.n	8000e00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d105      	bne.n	8000dec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de0:	2308      	movs	r3, #8
 8000de2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	611a      	str	r2, [r3, #16]
          break;
 8000dea:	e009      	b.n	8000e00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dec:	2308      	movs	r3, #8
 8000dee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	615a      	str	r2, [r3, #20]
          break;
 8000df6:	e003      	b.n	8000e00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
          break;
 8000dfc:	e000      	b.n	8000e00 <HAL_GPIO_Init+0x130>
          break;
 8000dfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	2bff      	cmp	r3, #255	; 0xff
 8000e04:	d801      	bhi.n	8000e0a <HAL_GPIO_Init+0x13a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	e001      	b.n	8000e0e <HAL_GPIO_Init+0x13e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2bff      	cmp	r3, #255	; 0xff
 8000e14:	d802      	bhi.n	8000e1c <HAL_GPIO_Init+0x14c>
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	e002      	b.n	8000e22 <HAL_GPIO_Init+0x152>
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	3b08      	subs	r3, #8
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	210f      	movs	r1, #15
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	6a39      	ldr	r1, [r7, #32]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 80b1 	beq.w	8000fb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e50:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <HAL_GPIO_Init+0x2b8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e68:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <HAL_GPIO_Init+0x2bc>)
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a40      	ldr	r2, [pc, #256]	; (8000f90 <HAL_GPIO_Init+0x2c0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_Init+0x1ec>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3f      	ldr	r2, [pc, #252]	; (8000f94 <HAL_GPIO_Init+0x2c4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_Init+0x1e8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a3e      	ldr	r2, [pc, #248]	; (8000f98 <HAL_GPIO_Init+0x2c8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0x1e4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3d      	ldr	r2, [pc, #244]	; (8000f9c <HAL_GPIO_Init+0x2cc>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_Init+0x1e0>
 8000eac:	2303      	movs	r3, #3
 8000eae:	e006      	b.n	8000ebe <HAL_GPIO_Init+0x1ee>
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e004      	b.n	8000ebe <HAL_GPIO_Init+0x1ee>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e002      	b.n	8000ebe <HAL_GPIO_Init+0x1ee>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <HAL_GPIO_Init+0x1ee>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec0:	f002 0203 	and.w	r2, r2, #3
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	4093      	lsls	r3, r2
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ece:	492f      	ldr	r1, [pc, #188]	; (8000f8c <HAL_GPIO_Init+0x2bc>)
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	492c      	ldr	r1, [pc, #176]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4928      	ldr	r1, [pc, #160]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	4922      	ldr	r1, [pc, #136]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60cb      	str	r3, [r1, #12]
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	491e      	ldr	r1, [pc, #120]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	4918      	ldr	r1, [pc, #96]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4914      	ldr	r1, [pc, #80]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d021      	beq.n	8000fa4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]
 8000f6c:	e021      	b.n	8000fb2 <HAL_GPIO_Init+0x2e2>
 8000f6e:	bf00      	nop
 8000f70:	10320000 	.word	0x10320000
 8000f74:	10310000 	.word	0x10310000
 8000f78:	10220000 	.word	0x10220000
 8000f7c:	10210000 	.word	0x10210000
 8000f80:	10120000 	.word	0x10120000
 8000f84:	10110000 	.word	0x10110000
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	40010800 	.word	0x40010800
 8000f94:	40010c00 	.word	0x40010c00
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	40011400 	.word	0x40011400
 8000fa0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4909      	ldr	r1, [pc, #36]	; (8000fd4 <HAL_GPIO_Init+0x304>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f47f ae8e 	bne.w	8000ce4 <HAL_GPIO_Init+0x14>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	372c      	adds	r7, #44	; 0x2c
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e001      	b.n	8000ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]
 8001012:	4613      	mov	r3, r2
 8001014:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001016:	787b      	ldrb	r3, [r7, #1]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101c:	887a      	ldrh	r2, [r7, #2]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001022:	e003      	b.n	800102c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	041a      	lsls	r2, r3, #16
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	611a      	str	r2, [r3, #16]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
	...

08001038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f9dc 	bl	8000414 <HAL_GPIO_EXTI_Callback>
  }
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40010400 	.word	0x40010400

08001068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e272      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 8087 	beq.w	8001196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001088:	4b92      	ldr	r3, [pc, #584]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b04      	cmp	r3, #4
 8001092:	d00c      	beq.n	80010ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001094:	4b8f      	ldr	r3, [pc, #572]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b08      	cmp	r3, #8
 800109e:	d112      	bne.n	80010c6 <HAL_RCC_OscConfig+0x5e>
 80010a0:	4b8c      	ldr	r3, [pc, #560]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ac:	d10b      	bne.n	80010c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ae:	4b89      	ldr	r3, [pc, #548]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d06c      	beq.n	8001194 <HAL_RCC_OscConfig+0x12c>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d168      	bne.n	8001194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e24c      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ce:	d106      	bne.n	80010de <HAL_RCC_OscConfig+0x76>
 80010d0:	4b80      	ldr	r3, [pc, #512]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a7f      	ldr	r2, [pc, #508]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	e02e      	b.n	800113c <HAL_RCC_OscConfig+0xd4>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x98>
 80010e6:	4b7b      	ldr	r3, [pc, #492]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a7a      	ldr	r2, [pc, #488]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b78      	ldr	r3, [pc, #480]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a77      	ldr	r2, [pc, #476]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e01d      	b.n	800113c <HAL_RCC_OscConfig+0xd4>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0xbc>
 800110a:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a71      	ldr	r2, [pc, #452]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6e      	ldr	r2, [pc, #440]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0xd4>
 8001124:	4b6b      	ldr	r3, [pc, #428]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a6a      	ldr	r2, [pc, #424]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 800112a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a67      	ldr	r2, [pc, #412]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d013      	beq.n	800116c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fbfa 	bl	800093c <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fbf6 	bl	800093c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	; 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e200      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0xe4>
 800116a:	e014      	b.n	8001196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fbe6 	bl	800093c <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fbe2 	bl	800093c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	; 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e1ec      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x10c>
 8001192:	e000      	b.n	8001196 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d063      	beq.n	800126a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a2:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00b      	beq.n	80011c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d11c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x18c>
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d116      	bne.n	80011f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_RCC_OscConfig+0x176>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d001      	beq.n	80011de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e1c0      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4939      	ldr	r1, [pc, #228]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f2:	e03a      	b.n	800126a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <HAL_RCC_OscConfig+0x270>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fb9b 	bl	800093c <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120a:	f7ff fb97 	bl	800093c <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e1a1      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4927      	ldr	r1, [pc, #156]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001238:	4313      	orrs	r3, r2
 800123a:	600b      	str	r3, [r1, #0]
 800123c:	e015      	b.n	800126a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_RCC_OscConfig+0x270>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fb7a 	bl	800093c <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff fb76 	bl	800093c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e180      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d03a      	beq.n	80012ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d019      	beq.n	80012b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001284:	f7ff fb5a 	bl	800093c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff fb56 	bl	800093c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e160      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 face 	bl	800184c <RCC_Delay>
 80012b0:	e01c      	b.n	80012ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_RCC_OscConfig+0x274>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fb40 	bl	800093c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012be:	e00f      	b.n	80012e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fb3c 	bl	800093c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d908      	bls.n	80012e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e146      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	42420000 	.word	0x42420000
 80012dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	4b92      	ldr	r3, [pc, #584]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1e9      	bne.n	80012c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80a6 	beq.w	8001446 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fe:	4b8b      	ldr	r3, [pc, #556]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10d      	bne.n	8001326 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b88      	ldr	r3, [pc, #544]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a87      	ldr	r2, [pc, #540]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b85      	ldr	r3, [pc, #532]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001322:	2301      	movs	r3, #1
 8001324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001326:	4b82      	ldr	r3, [pc, #520]	; (8001530 <HAL_RCC_OscConfig+0x4c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d118      	bne.n	8001364 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001332:	4b7f      	ldr	r3, [pc, #508]	; (8001530 <HAL_RCC_OscConfig+0x4c8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a7e      	ldr	r2, [pc, #504]	; (8001530 <HAL_RCC_OscConfig+0x4c8>)
 8001338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133e:	f7ff fafd 	bl	800093c <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001346:	f7ff faf9 	bl	800093c <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b64      	cmp	r3, #100	; 0x64
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e103      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	4b75      	ldr	r3, [pc, #468]	; (8001530 <HAL_RCC_OscConfig+0x4c8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x312>
 800136c:	4b6f      	ldr	r3, [pc, #444]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4a6e      	ldr	r2, [pc, #440]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6213      	str	r3, [r2, #32]
 8001378:	e02d      	b.n	80013d6 <HAL_RCC_OscConfig+0x36e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x334>
 8001382:	4b6a      	ldr	r3, [pc, #424]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4a69      	ldr	r2, [pc, #420]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6213      	str	r3, [r2, #32]
 800138e:	4b67      	ldr	r3, [pc, #412]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4a66      	ldr	r2, [pc, #408]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001394:	f023 0304 	bic.w	r3, r3, #4
 8001398:	6213      	str	r3, [r2, #32]
 800139a:	e01c      	b.n	80013d6 <HAL_RCC_OscConfig+0x36e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0x356>
 80013a4:	4b61      	ldr	r3, [pc, #388]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4a60      	ldr	r2, [pc, #384]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6213      	str	r3, [r2, #32]
 80013b0:	4b5e      	ldr	r3, [pc, #376]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4a5d      	ldr	r2, [pc, #372]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	e00b      	b.n	80013d6 <HAL_RCC_OscConfig+0x36e>
 80013be:	4b5b      	ldr	r3, [pc, #364]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4a5a      	ldr	r2, [pc, #360]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6213      	str	r3, [r2, #32]
 80013ca:	4b58      	ldr	r3, [pc, #352]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a57      	ldr	r2, [pc, #348]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d015      	beq.n	800140a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff faad 	bl	800093c <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff faa9 	bl	800093c <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0b1      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fc:	4b4b      	ldr	r3, [pc, #300]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0ee      	beq.n	80013e6 <HAL_RCC_OscConfig+0x37e>
 8001408:	e014      	b.n	8001434 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fa97 	bl	800093c <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001412:	f7ff fa93 	bl	800093c <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001420:	4293      	cmp	r3, r2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e09b      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1ee      	bne.n	8001412 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d105      	bne.n	8001446 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a3b      	ldr	r2, [pc, #236]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001444:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8087 	beq.w	800155e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001450:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d061      	beq.n	8001520 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d146      	bne.n	80014f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <HAL_RCC_OscConfig+0x4cc>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fa67 	bl	800093c <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff fa63 	bl	800093c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e06d      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001484:	4b29      	ldr	r3, [pc, #164]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d108      	bne.n	80014ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4921      	ldr	r1, [pc, #132]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a19      	ldr	r1, [r3, #32]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	430b      	orrs	r3, r1
 80014be:	491b      	ldr	r1, [pc, #108]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_OscConfig+0x4cc>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fa37 	bl	800093c <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d2:	f7ff fa33 	bl	800093c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e03d      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x46a>
 80014f0:	e035      	b.n	800155e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_RCC_OscConfig+0x4cc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fa20 	bl	800093c <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001500:	f7ff fa1c 	bl	800093c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e026      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_RCC_OscConfig+0x4c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x498>
 800151e:	e01e      	b.n	800155e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d107      	bne.n	8001538 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e019      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
 800152c:	40021000 	.word	0x40021000
 8001530:	40007000 	.word	0x40007000
 8001534:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_RCC_OscConfig+0x500>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	429a      	cmp	r2, r3
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0d0      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001580:	4b6a      	ldr	r3, [pc, #424]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d910      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 0207 	bic.w	r2, r3, #7
 8001596:	4965      	ldr	r1, [pc, #404]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0b8      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a58      	ldr	r2, [pc, #352]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	494d      	ldr	r1, [pc, #308]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d040      	beq.n	800168c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d115      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e073      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163a:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e06b      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f023 0203 	bic.w	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4936      	ldr	r1, [pc, #216]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800165c:	f7ff f96e 	bl	800093c <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	e00a      	b.n	800167a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001664:	f7ff f96a 	bl	800093c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e053      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 020c 	and.w	r2, r3, #12
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	429a      	cmp	r2, r3
 800168a:	d1eb      	bne.n	8001664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d210      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 0207 	bic.w	r2, r3, #7
 80016a2:	4922      	ldr	r1, [pc, #136]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e032      	b.n	8001722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4916      	ldr	r1, [pc, #88]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f821 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x1c8>)
 800170c:	5ccb      	ldrb	r3, [r1, r3]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_RCC_ClockConfig+0x1cc>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1d0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f8cc 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40022000 	.word	0x40022000
 8001730:	40021000 	.word	0x40021000
 8001734:	08003e04 	.word	0x08003e04
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b04      	cmp	r3, #4
 8001768:	d002      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x30>
 800176a:	2b08      	cmp	r3, #8
 800176c:	d003      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x36>
 800176e:	e027      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001772:	613b      	str	r3, [r7, #16]
      break;
 8001774:	e027      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001780:	5cd3      	ldrb	r3, [r2, r3]
 8001782:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d010      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	0c5b      	lsrs	r3, r3, #17
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800179a:	5cd3      	ldrb	r3, [r2, r3]
 800179c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017a2:	fb03 f202 	mul.w	r2, r3, r2
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e004      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	613b      	str	r3, [r7, #16]
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017c2:	613b      	str	r3, [r7, #16]
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	693b      	ldr	r3, [r7, #16]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	007a1200 	.word	0x007a1200
 80017dc:	08003e1c 	.word	0x08003e1c
 80017e0:	08003e2c 	.word	0x08003e2c
 80017e4:	003d0900 	.word	0x003d0900

080017e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017ec:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000000 	.word	0x20000000

080017fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001800:	f7ff fff2 	bl	80017e8 <HAL_RCC_GetHCLKFreq>
 8001804:	4602      	mov	r2, r0
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	4903      	ldr	r1, [pc, #12]	; (8001820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001812:	5ccb      	ldrb	r3, [r1, r3]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	08003e14 	.word	0x08003e14

08001824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001828:	f7ff ffde 	bl	80017e8 <HAL_RCC_GetHCLKFreq>
 800182c:	4602      	mov	r2, r0
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	0adb      	lsrs	r3, r3, #11
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	4903      	ldr	r1, [pc, #12]	; (8001848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800183a:	5ccb      	ldrb	r3, [r1, r3]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001840:	4618      	mov	r0, r3
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	08003e14 	.word	0x08003e14

0800184c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <RCC_Delay+0x34>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <RCC_Delay+0x38>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0a5b      	lsrs	r3, r3, #9
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001868:	bf00      	nop
  }
  while (Delay --);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	60fa      	str	r2, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f9      	bne.n	8001868 <RCC_Delay+0x1c>
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000000 	.word	0x20000000
 8001884:	10624dd3 	.word	0x10624dd3

08001888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e041      	b.n	800191e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7fe fe5a 	bl	8000568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3304      	adds	r3, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f000 faa2 	bl	8001e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d001      	beq.n	8001940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e03a      	b.n	80019b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_TIM_Base_Start_IT+0x98>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00e      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x58>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196a:	d009      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x58>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x58>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d010      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a2:	e007      	b.n	80019b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40000800 	.word	0x40000800

080019cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10f      	bne.n	8001a14 <HAL_TIM_Base_Stop_IT+0x48>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a1a      	ldr	r2, [r3, #32]
 80019fa:	f240 4344 	movw	r3, #1092	; 0x444
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_TIM_Base_Stop_IT+0x48>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d122      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d11b      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0202 	mvn.w	r2, #2
 8001a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f9b4 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001a70:	e005      	b.n	8001a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f9a7 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f9b6 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d122      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0204 	mvn.w	r2, #4
 8001aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2202      	movs	r2, #2
 8001aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f98a 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f97d 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f98c 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0208 	mvn.w	r2, #8
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2204      	movs	r2, #4
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f960 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f953 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f962 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0210 	mvn.w	r2, #16
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2208      	movs	r2, #8
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f936 	bl	8001dd8 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f929 	bl	8001dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f938 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d10e      	bne.n	8001bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0201 	mvn.w	r2, #1
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe fc88 	bl	80004bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb6:	2b80      	cmp	r3, #128	; 0x80
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc4:	2b80      	cmp	r3, #128	; 0x80
 8001bc6:	d107      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fa7b 	bl	80020ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8fc 	bl	8001dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d107      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0220 	mvn.w	r2, #32
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fa46 	bl	80020bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_TIM_ConfigClockSource+0x1c>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e0b4      	b.n	8001dbe <HAL_TIM_ConfigClockSource+0x186>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c8c:	d03e      	beq.n	8001d0c <HAL_TIM_ConfigClockSource+0xd4>
 8001c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c92:	f200 8087 	bhi.w	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
 8001c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9a:	f000 8086 	beq.w	8001daa <HAL_TIM_ConfigClockSource+0x172>
 8001c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca2:	d87f      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ca4:	2b70      	cmp	r3, #112	; 0x70
 8001ca6:	d01a      	beq.n	8001cde <HAL_TIM_ConfigClockSource+0xa6>
 8001ca8:	2b70      	cmp	r3, #112	; 0x70
 8001caa:	d87b      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cac:	2b60      	cmp	r3, #96	; 0x60
 8001cae:	d050      	beq.n	8001d52 <HAL_TIM_ConfigClockSource+0x11a>
 8001cb0:	2b60      	cmp	r3, #96	; 0x60
 8001cb2:	d877      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cb4:	2b50      	cmp	r3, #80	; 0x50
 8001cb6:	d03c      	beq.n	8001d32 <HAL_TIM_ConfigClockSource+0xfa>
 8001cb8:	2b50      	cmp	r3, #80	; 0x50
 8001cba:	d873      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cbc:	2b40      	cmp	r3, #64	; 0x40
 8001cbe:	d058      	beq.n	8001d72 <HAL_TIM_ConfigClockSource+0x13a>
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d86f      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cc4:	2b30      	cmp	r3, #48	; 0x30
 8001cc6:	d064      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x15a>
 8001cc8:	2b30      	cmp	r3, #48	; 0x30
 8001cca:	d86b      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d060      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x15a>
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d867      	bhi.n	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d05c      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x15a>
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d05a      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x15a>
 8001cdc:	e062      	b.n	8001da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6899      	ldr	r1, [r3, #8]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f000 f968 	bl	8001fc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	609a      	str	r2, [r3, #8]
      break;
 8001d0a:	e04f      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f000 f951 	bl	8001fc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d2e:	609a      	str	r2, [r3, #8]
      break;
 8001d30:	e03c      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6859      	ldr	r1, [r3, #4]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f000 f8c8 	bl	8001ed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2150      	movs	r1, #80	; 0x50
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f91f 	bl	8001f8e <TIM_ITRx_SetConfig>
      break;
 8001d50:	e02c      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f000 f8e6 	bl	8001f30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2160      	movs	r1, #96	; 0x60
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f90f 	bl	8001f8e <TIM_ITRx_SetConfig>
      break;
 8001d70:	e01c      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f000 f8a8 	bl	8001ed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2140      	movs	r1, #64	; 0x40
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f8ff 	bl	8001f8e <TIM_ITRx_SetConfig>
      break;
 8001d90:	e00c      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f000 f8f6 	bl	8001f8e <TIM_ITRx_SetConfig>
      break;
 8001da2:	e003      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      break;
 8001da8:	e000      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
	...

08001e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <TIM_Base_SetConfig+0xb8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00b      	beq.n	8001e40 <TIM_Base_SetConfig+0x30>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d007      	beq.n	8001e40 <TIM_Base_SetConfig+0x30>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <TIM_Base_SetConfig+0xbc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d003      	beq.n	8001e40 <TIM_Base_SetConfig+0x30>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <TIM_Base_SetConfig+0xc0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d108      	bne.n	8001e52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <TIM_Base_SetConfig+0xb8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00b      	beq.n	8001e72 <TIM_Base_SetConfig+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d007      	beq.n	8001e72 <TIM_Base_SetConfig+0x62>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <TIM_Base_SetConfig+0xbc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0x62>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <TIM_Base_SetConfig+0xc0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d108      	bne.n	8001e84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <TIM_Base_SetConfig+0xb8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d103      	bne.n	8001eb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	615a      	str	r2, [r3, #20]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40000800 	.word	0x40000800

08001ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	f023 0201 	bic.w	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f023 030a 	bic.w	r3, r3, #10
 8001f10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	621a      	str	r2, [r3, #32]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	f023 0210 	bic.w	r2, r3, #16
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	031b      	lsls	r3, r3, #12
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	621a      	str	r2, [r3, #32]
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f043 0307 	orr.w	r3, r3, #7
 8001fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	609a      	str	r2, [r3, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	021a      	lsls	r2, r3, #8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	609a      	str	r2, [r3, #8]
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002014:	2302      	movs	r3, #2
 8002016:	e046      	b.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00e      	beq.n	800207a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d009      	beq.n	800207a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d004      	beq.n	800207a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10c      	bne.n	8002094 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4313      	orrs	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800

080020bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e042      	b.n	8002178 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fa52 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2224      	movs	r2, #36	; 0x24
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fd71 	bl	8002c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b20      	cmp	r3, #32
 800219e:	d16d      	bne.n	800227c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <HAL_UART_Transmit+0x2c>
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e066      	b.n	800227e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2221      	movs	r2, #33	; 0x21
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021be:	f7fe fbbd 	bl	800093c <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	88fa      	ldrh	r2, [r7, #6]
 80021c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d8:	d108      	bne.n	80021ec <HAL_UART_Transmit+0x6c>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d104      	bne.n	80021ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	e003      	b.n	80021f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021f4:	e02a      	b.n	800224c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 faf9 	bl	80027f8 <UART_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e036      	b.n	800227e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	3302      	adds	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	e007      	b.n	800223e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3301      	adds	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1cf      	bne.n	80021f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2200      	movs	r2, #0
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fac9 	bl	80027f8 <UART_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e006      	b.n	800227e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800227c:	2302      	movs	r3, #2
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0ba      	sub	sp, #232	; 0xe8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <HAL_UART_IRQHandler+0x66>
 80022da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fbd1 	bl	8002a8e <UART_Receive_IT>
      return;
 80022ec:	e25b      	b.n	80027a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80de 	beq.w	80024b4 <HAL_UART_IRQHandler+0x22c>
 80022f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d106      	bne.n	8002312 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002308:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80d1 	beq.w	80024b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_UART_IRQHandler+0xae>
 800231e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_UART_IRQHandler+0xd2>
 8002342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f043 0202 	orr.w	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800235a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_UART_IRQHandler+0xf6>
 8002366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d011      	beq.n	80023ae <HAL_UART_IRQHandler+0x126>
 800238a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f043 0208 	orr.w	r2, r3, #8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 81f2 	beq.w	800279c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_UART_IRQHandler+0x14e>
 80023c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fb5c 	bl	8002a8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <HAL_UART_IRQHandler+0x17a>
 80023fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d04f      	beq.n	80024a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fa66 	bl	80028d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d041      	beq.n	800249a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3314      	adds	r3, #20
 800241c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002424:	e853 3f00 	ldrex	r3, [r3]
 8002428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800242c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3314      	adds	r3, #20
 800243e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002442:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800244e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002452:	e841 2300 	strex	r3, r2, [r1]
 8002456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800245a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1d9      	bne.n	8002416 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d013      	beq.n	8002492 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	4a7e      	ldr	r2, [pc, #504]	; (8002668 <HAL_UART_IRQHandler+0x3e0>)
 8002470:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fbb2 	bl	8000be0 <HAL_DMA_Abort_IT>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800248c:	4610      	mov	r0, r2
 800248e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002490:	e00e      	b.n	80024b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f99c 	bl	80027d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	e00a      	b.n	80024b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f998 	bl	80027d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a0:	e006      	b.n	80024b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f994 	bl	80027d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80024ae:	e175      	b.n	800279c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b0:	bf00      	nop
    return;
 80024b2:	e173      	b.n	800279c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	f040 814f 	bne.w	800275c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8148 	beq.w	800275c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8141 	beq.w	800275c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80b6 	beq.w	800266c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800250c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8145 	beq.w	80027a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800251a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800251e:	429a      	cmp	r2, r3
 8002520:	f080 813e 	bcs.w	80027a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800252a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b20      	cmp	r3, #32
 8002534:	f000 8088 	beq.w	8002648 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	330c      	adds	r3, #12
 800253e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002546:	e853 3f00 	ldrex	r3, [r3]
 800254a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800254e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002556:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002564:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002568:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002570:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002574:	e841 2300 	strex	r3, r2, [r1]
 8002578:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800257c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1d9      	bne.n	8002538 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3314      	adds	r3, #20
 800258a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258e:	e853 3f00 	ldrex	r3, [r3]
 8002592:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3314      	adds	r3, #20
 80025a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025b4:	e841 2300 	strex	r3, r2, [r1]
 80025b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e1      	bne.n	8002584 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3314      	adds	r3, #20
 80025c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ca:	e853 3f00 	ldrex	r3, [r3]
 80025ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3314      	adds	r3, #20
 80025e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025ec:	e841 2300 	strex	r3, r2, [r1]
 80025f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e3      	bne.n	80025c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002618:	f023 0310 	bic.w	r3, r3, #16
 800261c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800262a:	65ba      	str	r2, [r7, #88]	; 0x58
 800262c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002632:	e841 2300 	strex	r3, r2, [r1]
 8002636:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e3      	bne.n	8002606 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fa91 	bl	8000b6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002656:	b29b      	uxth	r3, r3
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	b29b      	uxth	r3, r3
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8bf 	bl	80027e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002664:	e09c      	b.n	80027a0 <HAL_UART_IRQHandler+0x518>
 8002666:	bf00      	nop
 8002668:	08002999 	.word	0x08002999
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002674:	b29b      	uxth	r3, r3
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 808e 	beq.w	80027a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8089 	beq.w	80027a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	e853 3f00 	ldrex	r3, [r3]
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026b6:	647a      	str	r2, [r7, #68]	; 0x44
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026be:	e841 2300 	strex	r3, r2, [r1]
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e3      	bne.n	8002692 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3314      	adds	r3, #20
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	623b      	str	r3, [r7, #32]
   return(result);
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3314      	adds	r3, #20
 80026ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026ee:	633a      	str	r2, [r7, #48]	; 0x30
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f6:	e841 2300 	strex	r3, r2, [r1]
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e3      	bne.n	80026ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	330c      	adds	r3, #12
 8002716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	e853 3f00 	ldrex	r3, [r3]
 800271e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0310 	bic.w	r3, r3, #16
 8002726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	330c      	adds	r3, #12
 8002730:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002734:	61fa      	str	r2, [r7, #28]
 8002736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002738:	69b9      	ldr	r1, [r7, #24]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	e841 2300 	strex	r3, r2, [r1]
 8002740:	617b      	str	r3, [r7, #20]
   return(result);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e3      	bne.n	8002710 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800274e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002752:	4619      	mov	r1, r3
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f844 	bl	80027e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800275a:	e023      	b.n	80027a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800275c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <HAL_UART_IRQHandler+0x4f4>
 8002768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f923 	bl	80029c0 <UART_Transmit_IT>
    return;
 800277a:	e014      	b.n	80027a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800277c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <HAL_UART_IRQHandler+0x51e>
 8002788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f962 	bl	8002a5e <UART_EndTransmit_IT>
    return;
 800279a:	e004      	b.n	80027a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800279c:	bf00      	nop
 800279e:	e002      	b.n	80027a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80027a4:	bf00      	nop
  }
}
 80027a6:	37e8      	adds	r7, #232	; 0xe8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b090      	sub	sp, #64	; 0x40
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002808:	e050      	b.n	80028ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d04c      	beq.n	80028ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x30>
 8002818:	f7fe f890 	bl	800093c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002824:	429a      	cmp	r2, r3
 8002826:	d241      	bcs.n	80028ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	e853 3f00 	ldrex	r3, [r3]
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002848:	637a      	str	r2, [r7, #52]	; 0x34
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800284e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002850:	e841 2300 	strex	r3, r2, [r1]
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e5      	bne.n	8002828 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3314      	adds	r3, #20
 8002862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	e853 3f00 	ldrex	r3, [r3]
 800286a:	613b      	str	r3, [r7, #16]
   return(result);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	63bb      	str	r3, [r7, #56]	; 0x38
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3314      	adds	r3, #20
 800287a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800287c:	623a      	str	r2, [r7, #32]
 800287e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002880:	69f9      	ldr	r1, [r7, #28]
 8002882:	6a3a      	ldr	r2, [r7, #32]
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	61bb      	str	r3, [r7, #24]
   return(result);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e5      	bne.n	800285c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e00f      	b.n	80028cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4013      	ands	r3, r2
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d09f      	beq.n	800280a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3740      	adds	r7, #64	; 0x40
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b095      	sub	sp, #84	; 0x54
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	330c      	adds	r3, #12
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	e853 3f00 	ldrex	r3, [r3]
 80028ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	330c      	adds	r3, #12
 80028fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028fc:	643a      	str	r2, [r7, #64]	; 0x40
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002904:	e841 2300 	strex	r3, r2, [r1]
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1e5      	bne.n	80028dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3314      	adds	r3, #20
 8002916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	e853 3f00 	ldrex	r3, [r3]
 800291e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	64bb      	str	r3, [r7, #72]	; 0x48
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3314      	adds	r3, #20
 800292e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002930:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002938:	e841 2300 	strex	r3, r2, [r1]
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e5      	bne.n	8002910 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	2b01      	cmp	r3, #1
 800294a:	d119      	bne.n	8002980 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	330c      	adds	r3, #12
 8002952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	e853 3f00 	ldrex	r3, [r3]
 800295a:	60bb      	str	r3, [r7, #8]
   return(result);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f023 0310 	bic.w	r3, r3, #16
 8002962:	647b      	str	r3, [r7, #68]	; 0x44
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	330c      	adds	r3, #12
 800296a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800296c:	61ba      	str	r2, [r7, #24]
 800296e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	6979      	ldr	r1, [r7, #20]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	613b      	str	r3, [r7, #16]
   return(result);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e5      	bne.n	800294c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800298e:	bf00      	nop
 8002990:	3754      	adds	r7, #84	; 0x54
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff ff0c 	bl	80027d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b21      	cmp	r3, #33	; 0x21
 80029d2:	d13e      	bne.n	8002a52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d114      	bne.n	8002a08 <UART_Transmit_IT+0x48>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d110      	bne.n	8002a08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	1c9a      	adds	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	621a      	str	r2, [r3, #32]
 8002a06:	e008      	b.n	8002a1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	1c59      	adds	r1, r3, #1
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6211      	str	r1, [r2, #32]
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4619      	mov	r1, r3
 8002a28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fe94 	bl	80027ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b08c      	sub	sp, #48	; 0x30
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b22      	cmp	r3, #34	; 0x22
 8002aa0:	f040 80ae 	bne.w	8002c00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aac:	d117      	bne.n	8002ade <UART_Receive_IT+0x50>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	1c9a      	adds	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
 8002adc:	e026      	b.n	8002b2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d007      	beq.n	8002b02 <UART_Receive_IT+0x74>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <UART_Receive_IT+0x82>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e008      	b.n	8002b22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d15d      	bne.n	8002bfc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0220 	bic.w	r2, r2, #32
 8002b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d135      	bne.n	8002bf2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f023 0310 	bic.w	r3, r3, #16
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	623a      	str	r2, [r7, #32]
 8002bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	69f9      	ldr	r1, [r7, #28]
 8002bb2:	6a3a      	ldr	r2, [r7, #32]
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d10a      	bne.n	8002be4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff fdf9 	bl	80027e2 <HAL_UARTEx_RxEventCallback>
 8002bf0:	e002      	b.n	8002bf8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fde3 	bl	80027be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e002      	b.n	8002c02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3730      	adds	r7, #48	; 0x30
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c46:	f023 030c 	bic.w	r3, r3, #12
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <UART_SetConfig+0x114>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d103      	bne.n	8002c7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c74:	f7fe fdd6 	bl	8001824 <HAL_RCC_GetPCLK2Freq>
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	e002      	b.n	8002c82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7fe fdbe 	bl	80017fc <HAL_RCC_GetPCLK1Freq>
 8002c80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009a      	lsls	r2, r3, #2
 8002c8c:	441a      	add	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <UART_SetConfig+0x118>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	0119      	lsls	r1, r3, #4
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <UART_SetConfig+0x118>)
 8002cba:	fba3 0302 	umull	r0, r3, r3, r2
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2064      	movs	r0, #100	; 0x64
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	3332      	adds	r3, #50	; 0x32
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <UART_SetConfig+0x118>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd8:	4419      	add	r1, r3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <UART_SetConfig+0x118>)
 8002cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2064      	movs	r0, #100	; 0x64
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	3332      	adds	r3, #50	; 0x32
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <UART_SetConfig+0x118>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	f003 020f 	and.w	r2, r3, #15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	440a      	add	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40013800 	.word	0x40013800
 8002d24:	51eb851f 	.word	0x51eb851f

08002d28 <__errno>:
 8002d28:	4b01      	ldr	r3, [pc, #4]	; (8002d30 <__errno+0x8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	2000000c 	.word	0x2000000c

08002d34 <__libc_init_array>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	2600      	movs	r6, #0
 8002d38:	4d0c      	ldr	r5, [pc, #48]	; (8002d6c <__libc_init_array+0x38>)
 8002d3a:	4c0d      	ldr	r4, [pc, #52]	; (8002d70 <__libc_init_array+0x3c>)
 8002d3c:	1b64      	subs	r4, r4, r5
 8002d3e:	10a4      	asrs	r4, r4, #2
 8002d40:	42a6      	cmp	r6, r4
 8002d42:	d109      	bne.n	8002d58 <__libc_init_array+0x24>
 8002d44:	f001 f82c 	bl	8003da0 <_init>
 8002d48:	2600      	movs	r6, #0
 8002d4a:	4d0a      	ldr	r5, [pc, #40]	; (8002d74 <__libc_init_array+0x40>)
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	; (8002d78 <__libc_init_array+0x44>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	42a6      	cmp	r6, r4
 8002d54:	d105      	bne.n	8002d62 <__libc_init_array+0x2e>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5c:	4798      	blx	r3
 8002d5e:	3601      	adds	r6, #1
 8002d60:	e7ee      	b.n	8002d40 <__libc_init_array+0xc>
 8002d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d66:	4798      	blx	r3
 8002d68:	3601      	adds	r6, #1
 8002d6a:	e7f2      	b.n	8002d52 <__libc_init_array+0x1e>
 8002d6c:	08003ec8 	.word	0x08003ec8
 8002d70:	08003ec8 	.word	0x08003ec8
 8002d74:	08003ec8 	.word	0x08003ec8
 8002d78:	08003ecc 	.word	0x08003ecc

08002d7c <memset>:
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4402      	add	r2, r0
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d100      	bne.n	8002d86 <memset+0xa>
 8002d84:	4770      	bx	lr
 8002d86:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8a:	e7f9      	b.n	8002d80 <memset+0x4>

08002d8c <iprintf>:
 8002d8c:	b40f      	push	{r0, r1, r2, r3}
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <iprintf+0x2c>)
 8002d90:	b513      	push	{r0, r1, r4, lr}
 8002d92:	681c      	ldr	r4, [r3, #0]
 8002d94:	b124      	cbz	r4, 8002da0 <iprintf+0x14>
 8002d96:	69a3      	ldr	r3, [r4, #24]
 8002d98:	b913      	cbnz	r3, 8002da0 <iprintf+0x14>
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f000 fa5a 	bl	8003254 <__sinit>
 8002da0:	ab05      	add	r3, sp, #20
 8002da2:	4620      	mov	r0, r4
 8002da4:	9a04      	ldr	r2, [sp, #16]
 8002da6:	68a1      	ldr	r1, [r4, #8]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	f000 fc5d 	bl	8003668 <_vfiprintf_r>
 8002dae:	b002      	add	sp, #8
 8002db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002db4:	b004      	add	sp, #16
 8002db6:	4770      	bx	lr
 8002db8:	2000000c 	.word	0x2000000c

08002dbc <_puts_r>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	460e      	mov	r6, r1
 8002dc0:	4605      	mov	r5, r0
 8002dc2:	b118      	cbz	r0, 8002dcc <_puts_r+0x10>
 8002dc4:	6983      	ldr	r3, [r0, #24]
 8002dc6:	b90b      	cbnz	r3, 8002dcc <_puts_r+0x10>
 8002dc8:	f000 fa44 	bl	8003254 <__sinit>
 8002dcc:	69ab      	ldr	r3, [r5, #24]
 8002dce:	68ac      	ldr	r4, [r5, #8]
 8002dd0:	b913      	cbnz	r3, 8002dd8 <_puts_r+0x1c>
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f000 fa3e 	bl	8003254 <__sinit>
 8002dd8:	4b2c      	ldr	r3, [pc, #176]	; (8002e8c <_puts_r+0xd0>)
 8002dda:	429c      	cmp	r4, r3
 8002ddc:	d120      	bne.n	8002e20 <_puts_r+0x64>
 8002dde:	686c      	ldr	r4, [r5, #4]
 8002de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002de2:	07db      	lsls	r3, r3, #31
 8002de4:	d405      	bmi.n	8002df2 <_puts_r+0x36>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	0598      	lsls	r0, r3, #22
 8002dea:	d402      	bmi.n	8002df2 <_puts_r+0x36>
 8002dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dee:	f000 facf 	bl	8003390 <__retarget_lock_acquire_recursive>
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	0719      	lsls	r1, r3, #28
 8002df6:	d51d      	bpl.n	8002e34 <_puts_r+0x78>
 8002df8:	6923      	ldr	r3, [r4, #16]
 8002dfa:	b1db      	cbz	r3, 8002e34 <_puts_r+0x78>
 8002dfc:	3e01      	subs	r6, #1
 8002dfe:	68a3      	ldr	r3, [r4, #8]
 8002e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e04:	3b01      	subs	r3, #1
 8002e06:	60a3      	str	r3, [r4, #8]
 8002e08:	bb39      	cbnz	r1, 8002e5a <_puts_r+0x9e>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da38      	bge.n	8002e80 <_puts_r+0xc4>
 8002e0e:	4622      	mov	r2, r4
 8002e10:	210a      	movs	r1, #10
 8002e12:	4628      	mov	r0, r5
 8002e14:	f000 f848 	bl	8002ea8 <__swbuf_r>
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d011      	beq.n	8002e40 <_puts_r+0x84>
 8002e1c:	250a      	movs	r5, #10
 8002e1e:	e011      	b.n	8002e44 <_puts_r+0x88>
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <_puts_r+0xd4>)
 8002e22:	429c      	cmp	r4, r3
 8002e24:	d101      	bne.n	8002e2a <_puts_r+0x6e>
 8002e26:	68ac      	ldr	r4, [r5, #8]
 8002e28:	e7da      	b.n	8002de0 <_puts_r+0x24>
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <_puts_r+0xd8>)
 8002e2c:	429c      	cmp	r4, r3
 8002e2e:	bf08      	it	eq
 8002e30:	68ec      	ldreq	r4, [r5, #12]
 8002e32:	e7d5      	b.n	8002de0 <_puts_r+0x24>
 8002e34:	4621      	mov	r1, r4
 8002e36:	4628      	mov	r0, r5
 8002e38:	f000 f888 	bl	8002f4c <__swsetup_r>
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d0dd      	beq.n	8002dfc <_puts_r+0x40>
 8002e40:	f04f 35ff 	mov.w	r5, #4294967295
 8002e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e46:	07da      	lsls	r2, r3, #31
 8002e48:	d405      	bmi.n	8002e56 <_puts_r+0x9a>
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	059b      	lsls	r3, r3, #22
 8002e4e:	d402      	bmi.n	8002e56 <_puts_r+0x9a>
 8002e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e52:	f000 fa9e 	bl	8003392 <__retarget_lock_release_recursive>
 8002e56:	4628      	mov	r0, r5
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	da04      	bge.n	8002e68 <_puts_r+0xac>
 8002e5e:	69a2      	ldr	r2, [r4, #24]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	dc06      	bgt.n	8002e72 <_puts_r+0xb6>
 8002e64:	290a      	cmp	r1, #10
 8002e66:	d004      	beq.n	8002e72 <_puts_r+0xb6>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	6022      	str	r2, [r4, #0]
 8002e6e:	7019      	strb	r1, [r3, #0]
 8002e70:	e7c5      	b.n	8002dfe <_puts_r+0x42>
 8002e72:	4622      	mov	r2, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	f000 f817 	bl	8002ea8 <__swbuf_r>
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	d1bf      	bne.n	8002dfe <_puts_r+0x42>
 8002e7e:	e7df      	b.n	8002e40 <_puts_r+0x84>
 8002e80:	250a      	movs	r5, #10
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	6022      	str	r2, [r4, #0]
 8002e88:	701d      	strb	r5, [r3, #0]
 8002e8a:	e7db      	b.n	8002e44 <_puts_r+0x88>
 8002e8c:	08003e54 	.word	0x08003e54
 8002e90:	08003e74 	.word	0x08003e74
 8002e94:	08003e34 	.word	0x08003e34

08002e98 <puts>:
 8002e98:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <puts+0xc>)
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f7ff bf8d 	b.w	8002dbc <_puts_r>
 8002ea2:	bf00      	nop
 8002ea4:	2000000c 	.word	0x2000000c

08002ea8 <__swbuf_r>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	460e      	mov	r6, r1
 8002eac:	4614      	mov	r4, r2
 8002eae:	4605      	mov	r5, r0
 8002eb0:	b118      	cbz	r0, 8002eba <__swbuf_r+0x12>
 8002eb2:	6983      	ldr	r3, [r0, #24]
 8002eb4:	b90b      	cbnz	r3, 8002eba <__swbuf_r+0x12>
 8002eb6:	f000 f9cd 	bl	8003254 <__sinit>
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <__swbuf_r+0x98>)
 8002ebc:	429c      	cmp	r4, r3
 8002ebe:	d12b      	bne.n	8002f18 <__swbuf_r+0x70>
 8002ec0:	686c      	ldr	r4, [r5, #4]
 8002ec2:	69a3      	ldr	r3, [r4, #24]
 8002ec4:	60a3      	str	r3, [r4, #8]
 8002ec6:	89a3      	ldrh	r3, [r4, #12]
 8002ec8:	071a      	lsls	r2, r3, #28
 8002eca:	d52f      	bpl.n	8002f2c <__swbuf_r+0x84>
 8002ecc:	6923      	ldr	r3, [r4, #16]
 8002ece:	b36b      	cbz	r3, 8002f2c <__swbuf_r+0x84>
 8002ed0:	6923      	ldr	r3, [r4, #16]
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	b2f6      	uxtb	r6, r6
 8002ed6:	1ac0      	subs	r0, r0, r3
 8002ed8:	6963      	ldr	r3, [r4, #20]
 8002eda:	4637      	mov	r7, r6
 8002edc:	4283      	cmp	r3, r0
 8002ede:	dc04      	bgt.n	8002eea <__swbuf_r+0x42>
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f000 f922 	bl	800312c <_fflush_r>
 8002ee8:	bb30      	cbnz	r0, 8002f38 <__swbuf_r+0x90>
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	3001      	adds	r0, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60a3      	str	r3, [r4, #8]
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	6022      	str	r2, [r4, #0]
 8002ef8:	701e      	strb	r6, [r3, #0]
 8002efa:	6963      	ldr	r3, [r4, #20]
 8002efc:	4283      	cmp	r3, r0
 8002efe:	d004      	beq.n	8002f0a <__swbuf_r+0x62>
 8002f00:	89a3      	ldrh	r3, [r4, #12]
 8002f02:	07db      	lsls	r3, r3, #31
 8002f04:	d506      	bpl.n	8002f14 <__swbuf_r+0x6c>
 8002f06:	2e0a      	cmp	r6, #10
 8002f08:	d104      	bne.n	8002f14 <__swbuf_r+0x6c>
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f000 f90d 	bl	800312c <_fflush_r>
 8002f12:	b988      	cbnz	r0, 8002f38 <__swbuf_r+0x90>
 8002f14:	4638      	mov	r0, r7
 8002f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <__swbuf_r+0x9c>)
 8002f1a:	429c      	cmp	r4, r3
 8002f1c:	d101      	bne.n	8002f22 <__swbuf_r+0x7a>
 8002f1e:	68ac      	ldr	r4, [r5, #8]
 8002f20:	e7cf      	b.n	8002ec2 <__swbuf_r+0x1a>
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <__swbuf_r+0xa0>)
 8002f24:	429c      	cmp	r4, r3
 8002f26:	bf08      	it	eq
 8002f28:	68ec      	ldreq	r4, [r5, #12]
 8002f2a:	e7ca      	b.n	8002ec2 <__swbuf_r+0x1a>
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f000 f80c 	bl	8002f4c <__swsetup_r>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d0cb      	beq.n	8002ed0 <__swbuf_r+0x28>
 8002f38:	f04f 37ff 	mov.w	r7, #4294967295
 8002f3c:	e7ea      	b.n	8002f14 <__swbuf_r+0x6c>
 8002f3e:	bf00      	nop
 8002f40:	08003e54 	.word	0x08003e54
 8002f44:	08003e74 	.word	0x08003e74
 8002f48:	08003e34 	.word	0x08003e34

08002f4c <__swsetup_r>:
 8002f4c:	4b32      	ldr	r3, [pc, #200]	; (8003018 <__swsetup_r+0xcc>)
 8002f4e:	b570      	push	{r4, r5, r6, lr}
 8002f50:	681d      	ldr	r5, [r3, #0]
 8002f52:	4606      	mov	r6, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	b125      	cbz	r5, 8002f62 <__swsetup_r+0x16>
 8002f58:	69ab      	ldr	r3, [r5, #24]
 8002f5a:	b913      	cbnz	r3, 8002f62 <__swsetup_r+0x16>
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 f979 	bl	8003254 <__sinit>
 8002f62:	4b2e      	ldr	r3, [pc, #184]	; (800301c <__swsetup_r+0xd0>)
 8002f64:	429c      	cmp	r4, r3
 8002f66:	d10f      	bne.n	8002f88 <__swsetup_r+0x3c>
 8002f68:	686c      	ldr	r4, [r5, #4]
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f70:	0719      	lsls	r1, r3, #28
 8002f72:	d42c      	bmi.n	8002fce <__swsetup_r+0x82>
 8002f74:	06dd      	lsls	r5, r3, #27
 8002f76:	d411      	bmi.n	8002f9c <__swsetup_r+0x50>
 8002f78:	2309      	movs	r3, #9
 8002f7a:	6033      	str	r3, [r6, #0]
 8002f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	81a3      	strh	r3, [r4, #12]
 8002f86:	e03e      	b.n	8003006 <__swsetup_r+0xba>
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <__swsetup_r+0xd4>)
 8002f8a:	429c      	cmp	r4, r3
 8002f8c:	d101      	bne.n	8002f92 <__swsetup_r+0x46>
 8002f8e:	68ac      	ldr	r4, [r5, #8]
 8002f90:	e7eb      	b.n	8002f6a <__swsetup_r+0x1e>
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <__swsetup_r+0xd8>)
 8002f94:	429c      	cmp	r4, r3
 8002f96:	bf08      	it	eq
 8002f98:	68ec      	ldreq	r4, [r5, #12]
 8002f9a:	e7e6      	b.n	8002f6a <__swsetup_r+0x1e>
 8002f9c:	0758      	lsls	r0, r3, #29
 8002f9e:	d512      	bpl.n	8002fc6 <__swsetup_r+0x7a>
 8002fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fa2:	b141      	cbz	r1, 8002fb6 <__swsetup_r+0x6a>
 8002fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fa8:	4299      	cmp	r1, r3
 8002faa:	d002      	beq.n	8002fb2 <__swsetup_r+0x66>
 8002fac:	4630      	mov	r0, r6
 8002fae:	f000 fa57 	bl	8003460 <_free_r>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fbc:	81a3      	strh	r3, [r4, #12]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	6063      	str	r3, [r4, #4]
 8002fc2:	6923      	ldr	r3, [r4, #16]
 8002fc4:	6023      	str	r3, [r4, #0]
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	81a3      	strh	r3, [r4, #12]
 8002fce:	6923      	ldr	r3, [r4, #16]
 8002fd0:	b94b      	cbnz	r3, 8002fe6 <__swsetup_r+0x9a>
 8002fd2:	89a3      	ldrh	r3, [r4, #12]
 8002fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fdc:	d003      	beq.n	8002fe6 <__swsetup_r+0x9a>
 8002fde:	4621      	mov	r1, r4
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	f000 f9fd 	bl	80033e0 <__smakebuf_r>
 8002fe6:	89a0      	ldrh	r0, [r4, #12]
 8002fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fec:	f010 0301 	ands.w	r3, r0, #1
 8002ff0:	d00a      	beq.n	8003008 <__swsetup_r+0xbc>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60a3      	str	r3, [r4, #8]
 8002ff6:	6963      	ldr	r3, [r4, #20]
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	61a3      	str	r3, [r4, #24]
 8002ffc:	6923      	ldr	r3, [r4, #16]
 8002ffe:	b943      	cbnz	r3, 8003012 <__swsetup_r+0xc6>
 8003000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003004:	d1ba      	bne.n	8002f7c <__swsetup_r+0x30>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	0781      	lsls	r1, r0, #30
 800300a:	bf58      	it	pl
 800300c:	6963      	ldrpl	r3, [r4, #20]
 800300e:	60a3      	str	r3, [r4, #8]
 8003010:	e7f4      	b.n	8002ffc <__swsetup_r+0xb0>
 8003012:	2000      	movs	r0, #0
 8003014:	e7f7      	b.n	8003006 <__swsetup_r+0xba>
 8003016:	bf00      	nop
 8003018:	2000000c 	.word	0x2000000c
 800301c:	08003e54 	.word	0x08003e54
 8003020:	08003e74 	.word	0x08003e74
 8003024:	08003e34 	.word	0x08003e34

08003028 <__sflush_r>:
 8003028:	898a      	ldrh	r2, [r1, #12]
 800302a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302c:	4605      	mov	r5, r0
 800302e:	0710      	lsls	r0, r2, #28
 8003030:	460c      	mov	r4, r1
 8003032:	d457      	bmi.n	80030e4 <__sflush_r+0xbc>
 8003034:	684b      	ldr	r3, [r1, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	dc04      	bgt.n	8003044 <__sflush_r+0x1c>
 800303a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	dc01      	bgt.n	8003044 <__sflush_r+0x1c>
 8003040:	2000      	movs	r0, #0
 8003042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003046:	2e00      	cmp	r6, #0
 8003048:	d0fa      	beq.n	8003040 <__sflush_r+0x18>
 800304a:	2300      	movs	r3, #0
 800304c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003050:	682f      	ldr	r7, [r5, #0]
 8003052:	602b      	str	r3, [r5, #0]
 8003054:	d032      	beq.n	80030bc <__sflush_r+0x94>
 8003056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003058:	89a3      	ldrh	r3, [r4, #12]
 800305a:	075a      	lsls	r2, r3, #29
 800305c:	d505      	bpl.n	800306a <__sflush_r+0x42>
 800305e:	6863      	ldr	r3, [r4, #4]
 8003060:	1ac0      	subs	r0, r0, r3
 8003062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003064:	b10b      	cbz	r3, 800306a <__sflush_r+0x42>
 8003066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003068:	1ac0      	subs	r0, r0, r3
 800306a:	2300      	movs	r3, #0
 800306c:	4602      	mov	r2, r0
 800306e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003070:	4628      	mov	r0, r5
 8003072:	6a21      	ldr	r1, [r4, #32]
 8003074:	47b0      	blx	r6
 8003076:	1c43      	adds	r3, r0, #1
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	d106      	bne.n	800308a <__sflush_r+0x62>
 800307c:	6829      	ldr	r1, [r5, #0]
 800307e:	291d      	cmp	r1, #29
 8003080:	d82c      	bhi.n	80030dc <__sflush_r+0xb4>
 8003082:	4a29      	ldr	r2, [pc, #164]	; (8003128 <__sflush_r+0x100>)
 8003084:	40ca      	lsrs	r2, r1
 8003086:	07d6      	lsls	r6, r2, #31
 8003088:	d528      	bpl.n	80030dc <__sflush_r+0xb4>
 800308a:	2200      	movs	r2, #0
 800308c:	6062      	str	r2, [r4, #4]
 800308e:	6922      	ldr	r2, [r4, #16]
 8003090:	04d9      	lsls	r1, r3, #19
 8003092:	6022      	str	r2, [r4, #0]
 8003094:	d504      	bpl.n	80030a0 <__sflush_r+0x78>
 8003096:	1c42      	adds	r2, r0, #1
 8003098:	d101      	bne.n	800309e <__sflush_r+0x76>
 800309a:	682b      	ldr	r3, [r5, #0]
 800309c:	b903      	cbnz	r3, 80030a0 <__sflush_r+0x78>
 800309e:	6560      	str	r0, [r4, #84]	; 0x54
 80030a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030a2:	602f      	str	r7, [r5, #0]
 80030a4:	2900      	cmp	r1, #0
 80030a6:	d0cb      	beq.n	8003040 <__sflush_r+0x18>
 80030a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030ac:	4299      	cmp	r1, r3
 80030ae:	d002      	beq.n	80030b6 <__sflush_r+0x8e>
 80030b0:	4628      	mov	r0, r5
 80030b2:	f000 f9d5 	bl	8003460 <_free_r>
 80030b6:	2000      	movs	r0, #0
 80030b8:	6360      	str	r0, [r4, #52]	; 0x34
 80030ba:	e7c2      	b.n	8003042 <__sflush_r+0x1a>
 80030bc:	6a21      	ldr	r1, [r4, #32]
 80030be:	2301      	movs	r3, #1
 80030c0:	4628      	mov	r0, r5
 80030c2:	47b0      	blx	r6
 80030c4:	1c41      	adds	r1, r0, #1
 80030c6:	d1c7      	bne.n	8003058 <__sflush_r+0x30>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0c4      	beq.n	8003058 <__sflush_r+0x30>
 80030ce:	2b1d      	cmp	r3, #29
 80030d0:	d001      	beq.n	80030d6 <__sflush_r+0xae>
 80030d2:	2b16      	cmp	r3, #22
 80030d4:	d101      	bne.n	80030da <__sflush_r+0xb2>
 80030d6:	602f      	str	r7, [r5, #0]
 80030d8:	e7b2      	b.n	8003040 <__sflush_r+0x18>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e0:	81a3      	strh	r3, [r4, #12]
 80030e2:	e7ae      	b.n	8003042 <__sflush_r+0x1a>
 80030e4:	690f      	ldr	r7, [r1, #16]
 80030e6:	2f00      	cmp	r7, #0
 80030e8:	d0aa      	beq.n	8003040 <__sflush_r+0x18>
 80030ea:	0793      	lsls	r3, r2, #30
 80030ec:	bf18      	it	ne
 80030ee:	2300      	movne	r3, #0
 80030f0:	680e      	ldr	r6, [r1, #0]
 80030f2:	bf08      	it	eq
 80030f4:	694b      	ldreq	r3, [r1, #20]
 80030f6:	1bf6      	subs	r6, r6, r7
 80030f8:	600f      	str	r7, [r1, #0]
 80030fa:	608b      	str	r3, [r1, #8]
 80030fc:	2e00      	cmp	r6, #0
 80030fe:	dd9f      	ble.n	8003040 <__sflush_r+0x18>
 8003100:	4633      	mov	r3, r6
 8003102:	463a      	mov	r2, r7
 8003104:	4628      	mov	r0, r5
 8003106:	6a21      	ldr	r1, [r4, #32]
 8003108:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800310c:	47e0      	blx	ip
 800310e:	2800      	cmp	r0, #0
 8003110:	dc06      	bgt.n	8003120 <__sflush_r+0xf8>
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311c:	81a3      	strh	r3, [r4, #12]
 800311e:	e790      	b.n	8003042 <__sflush_r+0x1a>
 8003120:	4407      	add	r7, r0
 8003122:	1a36      	subs	r6, r6, r0
 8003124:	e7ea      	b.n	80030fc <__sflush_r+0xd4>
 8003126:	bf00      	nop
 8003128:	20400001 	.word	0x20400001

0800312c <_fflush_r>:
 800312c:	b538      	push	{r3, r4, r5, lr}
 800312e:	690b      	ldr	r3, [r1, #16]
 8003130:	4605      	mov	r5, r0
 8003132:	460c      	mov	r4, r1
 8003134:	b913      	cbnz	r3, 800313c <_fflush_r+0x10>
 8003136:	2500      	movs	r5, #0
 8003138:	4628      	mov	r0, r5
 800313a:	bd38      	pop	{r3, r4, r5, pc}
 800313c:	b118      	cbz	r0, 8003146 <_fflush_r+0x1a>
 800313e:	6983      	ldr	r3, [r0, #24]
 8003140:	b90b      	cbnz	r3, 8003146 <_fflush_r+0x1a>
 8003142:	f000 f887 	bl	8003254 <__sinit>
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <_fflush_r+0x6c>)
 8003148:	429c      	cmp	r4, r3
 800314a:	d11b      	bne.n	8003184 <_fflush_r+0x58>
 800314c:	686c      	ldr	r4, [r5, #4]
 800314e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ef      	beq.n	8003136 <_fflush_r+0xa>
 8003156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003158:	07d0      	lsls	r0, r2, #31
 800315a:	d404      	bmi.n	8003166 <_fflush_r+0x3a>
 800315c:	0599      	lsls	r1, r3, #22
 800315e:	d402      	bmi.n	8003166 <_fflush_r+0x3a>
 8003160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003162:	f000 f915 	bl	8003390 <__retarget_lock_acquire_recursive>
 8003166:	4628      	mov	r0, r5
 8003168:	4621      	mov	r1, r4
 800316a:	f7ff ff5d 	bl	8003028 <__sflush_r>
 800316e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003170:	4605      	mov	r5, r0
 8003172:	07da      	lsls	r2, r3, #31
 8003174:	d4e0      	bmi.n	8003138 <_fflush_r+0xc>
 8003176:	89a3      	ldrh	r3, [r4, #12]
 8003178:	059b      	lsls	r3, r3, #22
 800317a:	d4dd      	bmi.n	8003138 <_fflush_r+0xc>
 800317c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800317e:	f000 f908 	bl	8003392 <__retarget_lock_release_recursive>
 8003182:	e7d9      	b.n	8003138 <_fflush_r+0xc>
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <_fflush_r+0x70>)
 8003186:	429c      	cmp	r4, r3
 8003188:	d101      	bne.n	800318e <_fflush_r+0x62>
 800318a:	68ac      	ldr	r4, [r5, #8]
 800318c:	e7df      	b.n	800314e <_fflush_r+0x22>
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <_fflush_r+0x74>)
 8003190:	429c      	cmp	r4, r3
 8003192:	bf08      	it	eq
 8003194:	68ec      	ldreq	r4, [r5, #12]
 8003196:	e7da      	b.n	800314e <_fflush_r+0x22>
 8003198:	08003e54 	.word	0x08003e54
 800319c:	08003e74 	.word	0x08003e74
 80031a0:	08003e34 	.word	0x08003e34

080031a4 <std>:
 80031a4:	2300      	movs	r3, #0
 80031a6:	b510      	push	{r4, lr}
 80031a8:	4604      	mov	r4, r0
 80031aa:	e9c0 3300 	strd	r3, r3, [r0]
 80031ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031b2:	6083      	str	r3, [r0, #8]
 80031b4:	8181      	strh	r1, [r0, #12]
 80031b6:	6643      	str	r3, [r0, #100]	; 0x64
 80031b8:	81c2      	strh	r2, [r0, #14]
 80031ba:	6183      	str	r3, [r0, #24]
 80031bc:	4619      	mov	r1, r3
 80031be:	2208      	movs	r2, #8
 80031c0:	305c      	adds	r0, #92	; 0x5c
 80031c2:	f7ff fddb 	bl	8002d7c <memset>
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <std+0x38>)
 80031c8:	6224      	str	r4, [r4, #32]
 80031ca:	6263      	str	r3, [r4, #36]	; 0x24
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <std+0x3c>)
 80031ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <std+0x40>)
 80031d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <std+0x44>)
 80031d6:	6323      	str	r3, [r4, #48]	; 0x30
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	bf00      	nop
 80031dc:	08003c15 	.word	0x08003c15
 80031e0:	08003c37 	.word	0x08003c37
 80031e4:	08003c6f 	.word	0x08003c6f
 80031e8:	08003c93 	.word	0x08003c93

080031ec <_cleanup_r>:
 80031ec:	4901      	ldr	r1, [pc, #4]	; (80031f4 <_cleanup_r+0x8>)
 80031ee:	f000 b8af 	b.w	8003350 <_fwalk_reent>
 80031f2:	bf00      	nop
 80031f4:	0800312d 	.word	0x0800312d

080031f8 <__sfmoreglue>:
 80031f8:	2268      	movs	r2, #104	; 0x68
 80031fa:	b570      	push	{r4, r5, r6, lr}
 80031fc:	1e4d      	subs	r5, r1, #1
 80031fe:	4355      	muls	r5, r2
 8003200:	460e      	mov	r6, r1
 8003202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003206:	f000 f993 	bl	8003530 <_malloc_r>
 800320a:	4604      	mov	r4, r0
 800320c:	b140      	cbz	r0, 8003220 <__sfmoreglue+0x28>
 800320e:	2100      	movs	r1, #0
 8003210:	e9c0 1600 	strd	r1, r6, [r0]
 8003214:	300c      	adds	r0, #12
 8003216:	60a0      	str	r0, [r4, #8]
 8003218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800321c:	f7ff fdae 	bl	8002d7c <memset>
 8003220:	4620      	mov	r0, r4
 8003222:	bd70      	pop	{r4, r5, r6, pc}

08003224 <__sfp_lock_acquire>:
 8003224:	4801      	ldr	r0, [pc, #4]	; (800322c <__sfp_lock_acquire+0x8>)
 8003226:	f000 b8b3 	b.w	8003390 <__retarget_lock_acquire_recursive>
 800322a:	bf00      	nop
 800322c:	20000129 	.word	0x20000129

08003230 <__sfp_lock_release>:
 8003230:	4801      	ldr	r0, [pc, #4]	; (8003238 <__sfp_lock_release+0x8>)
 8003232:	f000 b8ae 	b.w	8003392 <__retarget_lock_release_recursive>
 8003236:	bf00      	nop
 8003238:	20000129 	.word	0x20000129

0800323c <__sinit_lock_acquire>:
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__sinit_lock_acquire+0x8>)
 800323e:	f000 b8a7 	b.w	8003390 <__retarget_lock_acquire_recursive>
 8003242:	bf00      	nop
 8003244:	2000012a 	.word	0x2000012a

08003248 <__sinit_lock_release>:
 8003248:	4801      	ldr	r0, [pc, #4]	; (8003250 <__sinit_lock_release+0x8>)
 800324a:	f000 b8a2 	b.w	8003392 <__retarget_lock_release_recursive>
 800324e:	bf00      	nop
 8003250:	2000012a 	.word	0x2000012a

08003254 <__sinit>:
 8003254:	b510      	push	{r4, lr}
 8003256:	4604      	mov	r4, r0
 8003258:	f7ff fff0 	bl	800323c <__sinit_lock_acquire>
 800325c:	69a3      	ldr	r3, [r4, #24]
 800325e:	b11b      	cbz	r3, 8003268 <__sinit+0x14>
 8003260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003264:	f7ff bff0 	b.w	8003248 <__sinit_lock_release>
 8003268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800326c:	6523      	str	r3, [r4, #80]	; 0x50
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <__sinit+0x68>)
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <__sinit+0x6c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	62a2      	str	r2, [r4, #40]	; 0x28
 8003276:	42a3      	cmp	r3, r4
 8003278:	bf08      	it	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	4620      	mov	r0, r4
 800327e:	bf08      	it	eq
 8003280:	61a3      	streq	r3, [r4, #24]
 8003282:	f000 f81f 	bl	80032c4 <__sfp>
 8003286:	6060      	str	r0, [r4, #4]
 8003288:	4620      	mov	r0, r4
 800328a:	f000 f81b 	bl	80032c4 <__sfp>
 800328e:	60a0      	str	r0, [r4, #8]
 8003290:	4620      	mov	r0, r4
 8003292:	f000 f817 	bl	80032c4 <__sfp>
 8003296:	2200      	movs	r2, #0
 8003298:	2104      	movs	r1, #4
 800329a:	60e0      	str	r0, [r4, #12]
 800329c:	6860      	ldr	r0, [r4, #4]
 800329e:	f7ff ff81 	bl	80031a4 <std>
 80032a2:	2201      	movs	r2, #1
 80032a4:	2109      	movs	r1, #9
 80032a6:	68a0      	ldr	r0, [r4, #8]
 80032a8:	f7ff ff7c 	bl	80031a4 <std>
 80032ac:	2202      	movs	r2, #2
 80032ae:	2112      	movs	r1, #18
 80032b0:	68e0      	ldr	r0, [r4, #12]
 80032b2:	f7ff ff77 	bl	80031a4 <std>
 80032b6:	2301      	movs	r3, #1
 80032b8:	61a3      	str	r3, [r4, #24]
 80032ba:	e7d1      	b.n	8003260 <__sinit+0xc>
 80032bc:	08003e30 	.word	0x08003e30
 80032c0:	080031ed 	.word	0x080031ed

080032c4 <__sfp>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	4607      	mov	r7, r0
 80032c8:	f7ff ffac 	bl	8003224 <__sfp_lock_acquire>
 80032cc:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <__sfp+0x84>)
 80032ce:	681e      	ldr	r6, [r3, #0]
 80032d0:	69b3      	ldr	r3, [r6, #24]
 80032d2:	b913      	cbnz	r3, 80032da <__sfp+0x16>
 80032d4:	4630      	mov	r0, r6
 80032d6:	f7ff ffbd 	bl	8003254 <__sinit>
 80032da:	3648      	adds	r6, #72	; 0x48
 80032dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	d503      	bpl.n	80032ec <__sfp+0x28>
 80032e4:	6833      	ldr	r3, [r6, #0]
 80032e6:	b30b      	cbz	r3, 800332c <__sfp+0x68>
 80032e8:	6836      	ldr	r6, [r6, #0]
 80032ea:	e7f7      	b.n	80032dc <__sfp+0x18>
 80032ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032f0:	b9d5      	cbnz	r5, 8003328 <__sfp+0x64>
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <__sfp+0x88>)
 80032f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032f8:	60e3      	str	r3, [r4, #12]
 80032fa:	6665      	str	r5, [r4, #100]	; 0x64
 80032fc:	f000 f847 	bl	800338e <__retarget_lock_init_recursive>
 8003300:	f7ff ff96 	bl	8003230 <__sfp_lock_release>
 8003304:	2208      	movs	r2, #8
 8003306:	4629      	mov	r1, r5
 8003308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800330c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003310:	6025      	str	r5, [r4, #0]
 8003312:	61a5      	str	r5, [r4, #24]
 8003314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003318:	f7ff fd30 	bl	8002d7c <memset>
 800331c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003324:	4620      	mov	r0, r4
 8003326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003328:	3468      	adds	r4, #104	; 0x68
 800332a:	e7d9      	b.n	80032e0 <__sfp+0x1c>
 800332c:	2104      	movs	r1, #4
 800332e:	4638      	mov	r0, r7
 8003330:	f7ff ff62 	bl	80031f8 <__sfmoreglue>
 8003334:	4604      	mov	r4, r0
 8003336:	6030      	str	r0, [r6, #0]
 8003338:	2800      	cmp	r0, #0
 800333a:	d1d5      	bne.n	80032e8 <__sfp+0x24>
 800333c:	f7ff ff78 	bl	8003230 <__sfp_lock_release>
 8003340:	230c      	movs	r3, #12
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	e7ee      	b.n	8003324 <__sfp+0x60>
 8003346:	bf00      	nop
 8003348:	08003e30 	.word	0x08003e30
 800334c:	ffff0001 	.word	0xffff0001

08003350 <_fwalk_reent>:
 8003350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003354:	4606      	mov	r6, r0
 8003356:	4688      	mov	r8, r1
 8003358:	2700      	movs	r7, #0
 800335a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800335e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003362:	f1b9 0901 	subs.w	r9, r9, #1
 8003366:	d505      	bpl.n	8003374 <_fwalk_reent+0x24>
 8003368:	6824      	ldr	r4, [r4, #0]
 800336a:	2c00      	cmp	r4, #0
 800336c:	d1f7      	bne.n	800335e <_fwalk_reent+0xe>
 800336e:	4638      	mov	r0, r7
 8003370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003374:	89ab      	ldrh	r3, [r5, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d907      	bls.n	800338a <_fwalk_reent+0x3a>
 800337a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800337e:	3301      	adds	r3, #1
 8003380:	d003      	beq.n	800338a <_fwalk_reent+0x3a>
 8003382:	4629      	mov	r1, r5
 8003384:	4630      	mov	r0, r6
 8003386:	47c0      	blx	r8
 8003388:	4307      	orrs	r7, r0
 800338a:	3568      	adds	r5, #104	; 0x68
 800338c:	e7e9      	b.n	8003362 <_fwalk_reent+0x12>

0800338e <__retarget_lock_init_recursive>:
 800338e:	4770      	bx	lr

08003390 <__retarget_lock_acquire_recursive>:
 8003390:	4770      	bx	lr

08003392 <__retarget_lock_release_recursive>:
 8003392:	4770      	bx	lr

08003394 <__swhatbuf_r>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	460e      	mov	r6, r1
 8003398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800339c:	4614      	mov	r4, r2
 800339e:	2900      	cmp	r1, #0
 80033a0:	461d      	mov	r5, r3
 80033a2:	b096      	sub	sp, #88	; 0x58
 80033a4:	da08      	bge.n	80033b8 <__swhatbuf_r+0x24>
 80033a6:	2200      	movs	r2, #0
 80033a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80033ac:	602a      	str	r2, [r5, #0]
 80033ae:	061a      	lsls	r2, r3, #24
 80033b0:	d410      	bmi.n	80033d4 <__swhatbuf_r+0x40>
 80033b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b6:	e00e      	b.n	80033d6 <__swhatbuf_r+0x42>
 80033b8:	466a      	mov	r2, sp
 80033ba:	f000 fc91 	bl	8003ce0 <_fstat_r>
 80033be:	2800      	cmp	r0, #0
 80033c0:	dbf1      	blt.n	80033a6 <__swhatbuf_r+0x12>
 80033c2:	9a01      	ldr	r2, [sp, #4]
 80033c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033cc:	425a      	negs	r2, r3
 80033ce:	415a      	adcs	r2, r3
 80033d0:	602a      	str	r2, [r5, #0]
 80033d2:	e7ee      	b.n	80033b2 <__swhatbuf_r+0x1e>
 80033d4:	2340      	movs	r3, #64	; 0x40
 80033d6:	2000      	movs	r0, #0
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	b016      	add	sp, #88	; 0x58
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080033e0 <__smakebuf_r>:
 80033e0:	898b      	ldrh	r3, [r1, #12]
 80033e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033e4:	079d      	lsls	r5, r3, #30
 80033e6:	4606      	mov	r6, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	d507      	bpl.n	80033fc <__smakebuf_r+0x1c>
 80033ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	6123      	str	r3, [r4, #16]
 80033f4:	2301      	movs	r3, #1
 80033f6:	6163      	str	r3, [r4, #20]
 80033f8:	b002      	add	sp, #8
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	466a      	mov	r2, sp
 80033fe:	ab01      	add	r3, sp, #4
 8003400:	f7ff ffc8 	bl	8003394 <__swhatbuf_r>
 8003404:	9900      	ldr	r1, [sp, #0]
 8003406:	4605      	mov	r5, r0
 8003408:	4630      	mov	r0, r6
 800340a:	f000 f891 	bl	8003530 <_malloc_r>
 800340e:	b948      	cbnz	r0, 8003424 <__smakebuf_r+0x44>
 8003410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003414:	059a      	lsls	r2, r3, #22
 8003416:	d4ef      	bmi.n	80033f8 <__smakebuf_r+0x18>
 8003418:	f023 0303 	bic.w	r3, r3, #3
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	81a3      	strh	r3, [r4, #12]
 8003422:	e7e3      	b.n	80033ec <__smakebuf_r+0xc>
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <__smakebuf_r+0x7c>)
 8003426:	62b3      	str	r3, [r6, #40]	; 0x28
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	6020      	str	r0, [r4, #0]
 800342c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003430:	81a3      	strh	r3, [r4, #12]
 8003432:	9b00      	ldr	r3, [sp, #0]
 8003434:	6120      	str	r0, [r4, #16]
 8003436:	6163      	str	r3, [r4, #20]
 8003438:	9b01      	ldr	r3, [sp, #4]
 800343a:	b15b      	cbz	r3, 8003454 <__smakebuf_r+0x74>
 800343c:	4630      	mov	r0, r6
 800343e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003442:	f000 fc5f 	bl	8003d04 <_isatty_r>
 8003446:	b128      	cbz	r0, 8003454 <__smakebuf_r+0x74>
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	81a3      	strh	r3, [r4, #12]
 8003454:	89a0      	ldrh	r0, [r4, #12]
 8003456:	4305      	orrs	r5, r0
 8003458:	81a5      	strh	r5, [r4, #12]
 800345a:	e7cd      	b.n	80033f8 <__smakebuf_r+0x18>
 800345c:	080031ed 	.word	0x080031ed

08003460 <_free_r>:
 8003460:	b538      	push	{r3, r4, r5, lr}
 8003462:	4605      	mov	r5, r0
 8003464:	2900      	cmp	r1, #0
 8003466:	d040      	beq.n	80034ea <_free_r+0x8a>
 8003468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800346c:	1f0c      	subs	r4, r1, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	bfb8      	it	lt
 8003472:	18e4      	addlt	r4, r4, r3
 8003474:	f000 fc76 	bl	8003d64 <__malloc_lock>
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <_free_r+0x8c>)
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	b933      	cbnz	r3, 800348c <_free_r+0x2c>
 800347e:	6063      	str	r3, [r4, #4]
 8003480:	6014      	str	r4, [r2, #0]
 8003482:	4628      	mov	r0, r5
 8003484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003488:	f000 bc72 	b.w	8003d70 <__malloc_unlock>
 800348c:	42a3      	cmp	r3, r4
 800348e:	d908      	bls.n	80034a2 <_free_r+0x42>
 8003490:	6820      	ldr	r0, [r4, #0]
 8003492:	1821      	adds	r1, r4, r0
 8003494:	428b      	cmp	r3, r1
 8003496:	bf01      	itttt	eq
 8003498:	6819      	ldreq	r1, [r3, #0]
 800349a:	685b      	ldreq	r3, [r3, #4]
 800349c:	1809      	addeq	r1, r1, r0
 800349e:	6021      	streq	r1, [r4, #0]
 80034a0:	e7ed      	b.n	800347e <_free_r+0x1e>
 80034a2:	461a      	mov	r2, r3
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b10b      	cbz	r3, 80034ac <_free_r+0x4c>
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	d9fa      	bls.n	80034a2 <_free_r+0x42>
 80034ac:	6811      	ldr	r1, [r2, #0]
 80034ae:	1850      	adds	r0, r2, r1
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d10b      	bne.n	80034cc <_free_r+0x6c>
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	4401      	add	r1, r0
 80034b8:	1850      	adds	r0, r2, r1
 80034ba:	4283      	cmp	r3, r0
 80034bc:	6011      	str	r1, [r2, #0]
 80034be:	d1e0      	bne.n	8003482 <_free_r+0x22>
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4401      	add	r1, r0
 80034c6:	6011      	str	r1, [r2, #0]
 80034c8:	6053      	str	r3, [r2, #4]
 80034ca:	e7da      	b.n	8003482 <_free_r+0x22>
 80034cc:	d902      	bls.n	80034d4 <_free_r+0x74>
 80034ce:	230c      	movs	r3, #12
 80034d0:	602b      	str	r3, [r5, #0]
 80034d2:	e7d6      	b.n	8003482 <_free_r+0x22>
 80034d4:	6820      	ldr	r0, [r4, #0]
 80034d6:	1821      	adds	r1, r4, r0
 80034d8:	428b      	cmp	r3, r1
 80034da:	bf01      	itttt	eq
 80034dc:	6819      	ldreq	r1, [r3, #0]
 80034de:	685b      	ldreq	r3, [r3, #4]
 80034e0:	1809      	addeq	r1, r1, r0
 80034e2:	6021      	streq	r1, [r4, #0]
 80034e4:	6063      	str	r3, [r4, #4]
 80034e6:	6054      	str	r4, [r2, #4]
 80034e8:	e7cb      	b.n	8003482 <_free_r+0x22>
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	2000012c 	.word	0x2000012c

080034f0 <sbrk_aligned>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	4e0e      	ldr	r6, [pc, #56]	; (800352c <sbrk_aligned+0x3c>)
 80034f4:	460c      	mov	r4, r1
 80034f6:	6831      	ldr	r1, [r6, #0]
 80034f8:	4605      	mov	r5, r0
 80034fa:	b911      	cbnz	r1, 8003502 <sbrk_aligned+0x12>
 80034fc:	f000 fb7a 	bl	8003bf4 <_sbrk_r>
 8003500:	6030      	str	r0, [r6, #0]
 8003502:	4621      	mov	r1, r4
 8003504:	4628      	mov	r0, r5
 8003506:	f000 fb75 	bl	8003bf4 <_sbrk_r>
 800350a:	1c43      	adds	r3, r0, #1
 800350c:	d00a      	beq.n	8003524 <sbrk_aligned+0x34>
 800350e:	1cc4      	adds	r4, r0, #3
 8003510:	f024 0403 	bic.w	r4, r4, #3
 8003514:	42a0      	cmp	r0, r4
 8003516:	d007      	beq.n	8003528 <sbrk_aligned+0x38>
 8003518:	1a21      	subs	r1, r4, r0
 800351a:	4628      	mov	r0, r5
 800351c:	f000 fb6a 	bl	8003bf4 <_sbrk_r>
 8003520:	3001      	adds	r0, #1
 8003522:	d101      	bne.n	8003528 <sbrk_aligned+0x38>
 8003524:	f04f 34ff 	mov.w	r4, #4294967295
 8003528:	4620      	mov	r0, r4
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	20000130 	.word	0x20000130

08003530 <_malloc_r>:
 8003530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003534:	1ccd      	adds	r5, r1, #3
 8003536:	f025 0503 	bic.w	r5, r5, #3
 800353a:	3508      	adds	r5, #8
 800353c:	2d0c      	cmp	r5, #12
 800353e:	bf38      	it	cc
 8003540:	250c      	movcc	r5, #12
 8003542:	2d00      	cmp	r5, #0
 8003544:	4607      	mov	r7, r0
 8003546:	db01      	blt.n	800354c <_malloc_r+0x1c>
 8003548:	42a9      	cmp	r1, r5
 800354a:	d905      	bls.n	8003558 <_malloc_r+0x28>
 800354c:	230c      	movs	r3, #12
 800354e:	2600      	movs	r6, #0
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4630      	mov	r0, r6
 8003554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003558:	4e2e      	ldr	r6, [pc, #184]	; (8003614 <_malloc_r+0xe4>)
 800355a:	f000 fc03 	bl	8003d64 <__malloc_lock>
 800355e:	6833      	ldr	r3, [r6, #0]
 8003560:	461c      	mov	r4, r3
 8003562:	bb34      	cbnz	r4, 80035b2 <_malloc_r+0x82>
 8003564:	4629      	mov	r1, r5
 8003566:	4638      	mov	r0, r7
 8003568:	f7ff ffc2 	bl	80034f0 <sbrk_aligned>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	4604      	mov	r4, r0
 8003570:	d14d      	bne.n	800360e <_malloc_r+0xde>
 8003572:	6834      	ldr	r4, [r6, #0]
 8003574:	4626      	mov	r6, r4
 8003576:	2e00      	cmp	r6, #0
 8003578:	d140      	bne.n	80035fc <_malloc_r+0xcc>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	4631      	mov	r1, r6
 800357e:	4638      	mov	r0, r7
 8003580:	eb04 0803 	add.w	r8, r4, r3
 8003584:	f000 fb36 	bl	8003bf4 <_sbrk_r>
 8003588:	4580      	cmp	r8, r0
 800358a:	d13a      	bne.n	8003602 <_malloc_r+0xd2>
 800358c:	6821      	ldr	r1, [r4, #0]
 800358e:	3503      	adds	r5, #3
 8003590:	1a6d      	subs	r5, r5, r1
 8003592:	f025 0503 	bic.w	r5, r5, #3
 8003596:	3508      	adds	r5, #8
 8003598:	2d0c      	cmp	r5, #12
 800359a:	bf38      	it	cc
 800359c:	250c      	movcc	r5, #12
 800359e:	4638      	mov	r0, r7
 80035a0:	4629      	mov	r1, r5
 80035a2:	f7ff ffa5 	bl	80034f0 <sbrk_aligned>
 80035a6:	3001      	adds	r0, #1
 80035a8:	d02b      	beq.n	8003602 <_malloc_r+0xd2>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	442b      	add	r3, r5
 80035ae:	6023      	str	r3, [r4, #0]
 80035b0:	e00e      	b.n	80035d0 <_malloc_r+0xa0>
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	1b52      	subs	r2, r2, r5
 80035b6:	d41e      	bmi.n	80035f6 <_malloc_r+0xc6>
 80035b8:	2a0b      	cmp	r2, #11
 80035ba:	d916      	bls.n	80035ea <_malloc_r+0xba>
 80035bc:	1961      	adds	r1, r4, r5
 80035be:	42a3      	cmp	r3, r4
 80035c0:	6025      	str	r5, [r4, #0]
 80035c2:	bf18      	it	ne
 80035c4:	6059      	strne	r1, [r3, #4]
 80035c6:	6863      	ldr	r3, [r4, #4]
 80035c8:	bf08      	it	eq
 80035ca:	6031      	streq	r1, [r6, #0]
 80035cc:	5162      	str	r2, [r4, r5]
 80035ce:	604b      	str	r3, [r1, #4]
 80035d0:	4638      	mov	r0, r7
 80035d2:	f104 060b 	add.w	r6, r4, #11
 80035d6:	f000 fbcb 	bl	8003d70 <__malloc_unlock>
 80035da:	f026 0607 	bic.w	r6, r6, #7
 80035de:	1d23      	adds	r3, r4, #4
 80035e0:	1af2      	subs	r2, r6, r3
 80035e2:	d0b6      	beq.n	8003552 <_malloc_r+0x22>
 80035e4:	1b9b      	subs	r3, r3, r6
 80035e6:	50a3      	str	r3, [r4, r2]
 80035e8:	e7b3      	b.n	8003552 <_malloc_r+0x22>
 80035ea:	6862      	ldr	r2, [r4, #4]
 80035ec:	42a3      	cmp	r3, r4
 80035ee:	bf0c      	ite	eq
 80035f0:	6032      	streq	r2, [r6, #0]
 80035f2:	605a      	strne	r2, [r3, #4]
 80035f4:	e7ec      	b.n	80035d0 <_malloc_r+0xa0>
 80035f6:	4623      	mov	r3, r4
 80035f8:	6864      	ldr	r4, [r4, #4]
 80035fa:	e7b2      	b.n	8003562 <_malloc_r+0x32>
 80035fc:	4634      	mov	r4, r6
 80035fe:	6876      	ldr	r6, [r6, #4]
 8003600:	e7b9      	b.n	8003576 <_malloc_r+0x46>
 8003602:	230c      	movs	r3, #12
 8003604:	4638      	mov	r0, r7
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	f000 fbb2 	bl	8003d70 <__malloc_unlock>
 800360c:	e7a1      	b.n	8003552 <_malloc_r+0x22>
 800360e:	6025      	str	r5, [r4, #0]
 8003610:	e7de      	b.n	80035d0 <_malloc_r+0xa0>
 8003612:	bf00      	nop
 8003614:	2000012c 	.word	0x2000012c

08003618 <__sfputc_r>:
 8003618:	6893      	ldr	r3, [r2, #8]
 800361a:	b410      	push	{r4}
 800361c:	3b01      	subs	r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	6093      	str	r3, [r2, #8]
 8003622:	da07      	bge.n	8003634 <__sfputc_r+0x1c>
 8003624:	6994      	ldr	r4, [r2, #24]
 8003626:	42a3      	cmp	r3, r4
 8003628:	db01      	blt.n	800362e <__sfputc_r+0x16>
 800362a:	290a      	cmp	r1, #10
 800362c:	d102      	bne.n	8003634 <__sfputc_r+0x1c>
 800362e:	bc10      	pop	{r4}
 8003630:	f7ff bc3a 	b.w	8002ea8 <__swbuf_r>
 8003634:	6813      	ldr	r3, [r2, #0]
 8003636:	1c58      	adds	r0, r3, #1
 8003638:	6010      	str	r0, [r2, #0]
 800363a:	7019      	strb	r1, [r3, #0]
 800363c:	4608      	mov	r0, r1
 800363e:	bc10      	pop	{r4}
 8003640:	4770      	bx	lr

08003642 <__sfputs_r>:
 8003642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003644:	4606      	mov	r6, r0
 8003646:	460f      	mov	r7, r1
 8003648:	4614      	mov	r4, r2
 800364a:	18d5      	adds	r5, r2, r3
 800364c:	42ac      	cmp	r4, r5
 800364e:	d101      	bne.n	8003654 <__sfputs_r+0x12>
 8003650:	2000      	movs	r0, #0
 8003652:	e007      	b.n	8003664 <__sfputs_r+0x22>
 8003654:	463a      	mov	r2, r7
 8003656:	4630      	mov	r0, r6
 8003658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365c:	f7ff ffdc 	bl	8003618 <__sfputc_r>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d1f3      	bne.n	800364c <__sfputs_r+0xa>
 8003664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003668 <_vfiprintf_r>:
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	460d      	mov	r5, r1
 800366e:	4614      	mov	r4, r2
 8003670:	4698      	mov	r8, r3
 8003672:	4606      	mov	r6, r0
 8003674:	b09d      	sub	sp, #116	; 0x74
 8003676:	b118      	cbz	r0, 8003680 <_vfiprintf_r+0x18>
 8003678:	6983      	ldr	r3, [r0, #24]
 800367a:	b90b      	cbnz	r3, 8003680 <_vfiprintf_r+0x18>
 800367c:	f7ff fdea 	bl	8003254 <__sinit>
 8003680:	4b89      	ldr	r3, [pc, #548]	; (80038a8 <_vfiprintf_r+0x240>)
 8003682:	429d      	cmp	r5, r3
 8003684:	d11b      	bne.n	80036be <_vfiprintf_r+0x56>
 8003686:	6875      	ldr	r5, [r6, #4]
 8003688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800368a:	07d9      	lsls	r1, r3, #31
 800368c:	d405      	bmi.n	800369a <_vfiprintf_r+0x32>
 800368e:	89ab      	ldrh	r3, [r5, #12]
 8003690:	059a      	lsls	r2, r3, #22
 8003692:	d402      	bmi.n	800369a <_vfiprintf_r+0x32>
 8003694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003696:	f7ff fe7b 	bl	8003390 <__retarget_lock_acquire_recursive>
 800369a:	89ab      	ldrh	r3, [r5, #12]
 800369c:	071b      	lsls	r3, r3, #28
 800369e:	d501      	bpl.n	80036a4 <_vfiprintf_r+0x3c>
 80036a0:	692b      	ldr	r3, [r5, #16]
 80036a2:	b9eb      	cbnz	r3, 80036e0 <_vfiprintf_r+0x78>
 80036a4:	4629      	mov	r1, r5
 80036a6:	4630      	mov	r0, r6
 80036a8:	f7ff fc50 	bl	8002f4c <__swsetup_r>
 80036ac:	b1c0      	cbz	r0, 80036e0 <_vfiprintf_r+0x78>
 80036ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036b0:	07dc      	lsls	r4, r3, #31
 80036b2:	d50e      	bpl.n	80036d2 <_vfiprintf_r+0x6a>
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	b01d      	add	sp, #116	; 0x74
 80036ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036be:	4b7b      	ldr	r3, [pc, #492]	; (80038ac <_vfiprintf_r+0x244>)
 80036c0:	429d      	cmp	r5, r3
 80036c2:	d101      	bne.n	80036c8 <_vfiprintf_r+0x60>
 80036c4:	68b5      	ldr	r5, [r6, #8]
 80036c6:	e7df      	b.n	8003688 <_vfiprintf_r+0x20>
 80036c8:	4b79      	ldr	r3, [pc, #484]	; (80038b0 <_vfiprintf_r+0x248>)
 80036ca:	429d      	cmp	r5, r3
 80036cc:	bf08      	it	eq
 80036ce:	68f5      	ldreq	r5, [r6, #12]
 80036d0:	e7da      	b.n	8003688 <_vfiprintf_r+0x20>
 80036d2:	89ab      	ldrh	r3, [r5, #12]
 80036d4:	0598      	lsls	r0, r3, #22
 80036d6:	d4ed      	bmi.n	80036b4 <_vfiprintf_r+0x4c>
 80036d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036da:	f7ff fe5a 	bl	8003392 <__retarget_lock_release_recursive>
 80036de:	e7e9      	b.n	80036b4 <_vfiprintf_r+0x4c>
 80036e0:	2300      	movs	r3, #0
 80036e2:	9309      	str	r3, [sp, #36]	; 0x24
 80036e4:	2320      	movs	r3, #32
 80036e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036ea:	2330      	movs	r3, #48	; 0x30
 80036ec:	f04f 0901 	mov.w	r9, #1
 80036f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80036f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80038b4 <_vfiprintf_r+0x24c>
 80036f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036fc:	4623      	mov	r3, r4
 80036fe:	469a      	mov	sl, r3
 8003700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003704:	b10a      	cbz	r2, 800370a <_vfiprintf_r+0xa2>
 8003706:	2a25      	cmp	r2, #37	; 0x25
 8003708:	d1f9      	bne.n	80036fe <_vfiprintf_r+0x96>
 800370a:	ebba 0b04 	subs.w	fp, sl, r4
 800370e:	d00b      	beq.n	8003728 <_vfiprintf_r+0xc0>
 8003710:	465b      	mov	r3, fp
 8003712:	4622      	mov	r2, r4
 8003714:	4629      	mov	r1, r5
 8003716:	4630      	mov	r0, r6
 8003718:	f7ff ff93 	bl	8003642 <__sfputs_r>
 800371c:	3001      	adds	r0, #1
 800371e:	f000 80aa 	beq.w	8003876 <_vfiprintf_r+0x20e>
 8003722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003724:	445a      	add	r2, fp
 8003726:	9209      	str	r2, [sp, #36]	; 0x24
 8003728:	f89a 3000 	ldrb.w	r3, [sl]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a2 	beq.w	8003876 <_vfiprintf_r+0x20e>
 8003732:	2300      	movs	r3, #0
 8003734:	f04f 32ff 	mov.w	r2, #4294967295
 8003738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800373c:	f10a 0a01 	add.w	sl, sl, #1
 8003740:	9304      	str	r3, [sp, #16]
 8003742:	9307      	str	r3, [sp, #28]
 8003744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003748:	931a      	str	r3, [sp, #104]	; 0x68
 800374a:	4654      	mov	r4, sl
 800374c:	2205      	movs	r2, #5
 800374e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003752:	4858      	ldr	r0, [pc, #352]	; (80038b4 <_vfiprintf_r+0x24c>)
 8003754:	f000 faf8 	bl	8003d48 <memchr>
 8003758:	9a04      	ldr	r2, [sp, #16]
 800375a:	b9d8      	cbnz	r0, 8003794 <_vfiprintf_r+0x12c>
 800375c:	06d1      	lsls	r1, r2, #27
 800375e:	bf44      	itt	mi
 8003760:	2320      	movmi	r3, #32
 8003762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003766:	0713      	lsls	r3, r2, #28
 8003768:	bf44      	itt	mi
 800376a:	232b      	movmi	r3, #43	; 0x2b
 800376c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003770:	f89a 3000 	ldrb.w	r3, [sl]
 8003774:	2b2a      	cmp	r3, #42	; 0x2a
 8003776:	d015      	beq.n	80037a4 <_vfiprintf_r+0x13c>
 8003778:	4654      	mov	r4, sl
 800377a:	2000      	movs	r0, #0
 800377c:	f04f 0c0a 	mov.w	ip, #10
 8003780:	9a07      	ldr	r2, [sp, #28]
 8003782:	4621      	mov	r1, r4
 8003784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003788:	3b30      	subs	r3, #48	; 0x30
 800378a:	2b09      	cmp	r3, #9
 800378c:	d94e      	bls.n	800382c <_vfiprintf_r+0x1c4>
 800378e:	b1b0      	cbz	r0, 80037be <_vfiprintf_r+0x156>
 8003790:	9207      	str	r2, [sp, #28]
 8003792:	e014      	b.n	80037be <_vfiprintf_r+0x156>
 8003794:	eba0 0308 	sub.w	r3, r0, r8
 8003798:	fa09 f303 	lsl.w	r3, r9, r3
 800379c:	4313      	orrs	r3, r2
 800379e:	46a2      	mov	sl, r4
 80037a0:	9304      	str	r3, [sp, #16]
 80037a2:	e7d2      	b.n	800374a <_vfiprintf_r+0xe2>
 80037a4:	9b03      	ldr	r3, [sp, #12]
 80037a6:	1d19      	adds	r1, r3, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	9103      	str	r1, [sp, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bfbb      	ittet	lt
 80037b0:	425b      	neglt	r3, r3
 80037b2:	f042 0202 	orrlt.w	r2, r2, #2
 80037b6:	9307      	strge	r3, [sp, #28]
 80037b8:	9307      	strlt	r3, [sp, #28]
 80037ba:	bfb8      	it	lt
 80037bc:	9204      	strlt	r2, [sp, #16]
 80037be:	7823      	ldrb	r3, [r4, #0]
 80037c0:	2b2e      	cmp	r3, #46	; 0x2e
 80037c2:	d10c      	bne.n	80037de <_vfiprintf_r+0x176>
 80037c4:	7863      	ldrb	r3, [r4, #1]
 80037c6:	2b2a      	cmp	r3, #42	; 0x2a
 80037c8:	d135      	bne.n	8003836 <_vfiprintf_r+0x1ce>
 80037ca:	9b03      	ldr	r3, [sp, #12]
 80037cc:	3402      	adds	r4, #2
 80037ce:	1d1a      	adds	r2, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	9203      	str	r2, [sp, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bfb8      	it	lt
 80037d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80037dc:	9305      	str	r3, [sp, #20]
 80037de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80038b8 <_vfiprintf_r+0x250>
 80037e2:	2203      	movs	r2, #3
 80037e4:	4650      	mov	r0, sl
 80037e6:	7821      	ldrb	r1, [r4, #0]
 80037e8:	f000 faae 	bl	8003d48 <memchr>
 80037ec:	b140      	cbz	r0, 8003800 <_vfiprintf_r+0x198>
 80037ee:	2340      	movs	r3, #64	; 0x40
 80037f0:	eba0 000a 	sub.w	r0, r0, sl
 80037f4:	fa03 f000 	lsl.w	r0, r3, r0
 80037f8:	9b04      	ldr	r3, [sp, #16]
 80037fa:	3401      	adds	r4, #1
 80037fc:	4303      	orrs	r3, r0
 80037fe:	9304      	str	r3, [sp, #16]
 8003800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003804:	2206      	movs	r2, #6
 8003806:	482d      	ldr	r0, [pc, #180]	; (80038bc <_vfiprintf_r+0x254>)
 8003808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800380c:	f000 fa9c 	bl	8003d48 <memchr>
 8003810:	2800      	cmp	r0, #0
 8003812:	d03f      	beq.n	8003894 <_vfiprintf_r+0x22c>
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <_vfiprintf_r+0x258>)
 8003816:	bb1b      	cbnz	r3, 8003860 <_vfiprintf_r+0x1f8>
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	3307      	adds	r3, #7
 800381c:	f023 0307 	bic.w	r3, r3, #7
 8003820:	3308      	adds	r3, #8
 8003822:	9303      	str	r3, [sp, #12]
 8003824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003826:	443b      	add	r3, r7
 8003828:	9309      	str	r3, [sp, #36]	; 0x24
 800382a:	e767      	b.n	80036fc <_vfiprintf_r+0x94>
 800382c:	460c      	mov	r4, r1
 800382e:	2001      	movs	r0, #1
 8003830:	fb0c 3202 	mla	r2, ip, r2, r3
 8003834:	e7a5      	b.n	8003782 <_vfiprintf_r+0x11a>
 8003836:	2300      	movs	r3, #0
 8003838:	f04f 0c0a 	mov.w	ip, #10
 800383c:	4619      	mov	r1, r3
 800383e:	3401      	adds	r4, #1
 8003840:	9305      	str	r3, [sp, #20]
 8003842:	4620      	mov	r0, r4
 8003844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003848:	3a30      	subs	r2, #48	; 0x30
 800384a:	2a09      	cmp	r2, #9
 800384c:	d903      	bls.n	8003856 <_vfiprintf_r+0x1ee>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0c5      	beq.n	80037de <_vfiprintf_r+0x176>
 8003852:	9105      	str	r1, [sp, #20]
 8003854:	e7c3      	b.n	80037de <_vfiprintf_r+0x176>
 8003856:	4604      	mov	r4, r0
 8003858:	2301      	movs	r3, #1
 800385a:	fb0c 2101 	mla	r1, ip, r1, r2
 800385e:	e7f0      	b.n	8003842 <_vfiprintf_r+0x1da>
 8003860:	ab03      	add	r3, sp, #12
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	462a      	mov	r2, r5
 8003866:	4630      	mov	r0, r6
 8003868:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <_vfiprintf_r+0x25c>)
 800386a:	a904      	add	r1, sp, #16
 800386c:	f3af 8000 	nop.w
 8003870:	4607      	mov	r7, r0
 8003872:	1c78      	adds	r0, r7, #1
 8003874:	d1d6      	bne.n	8003824 <_vfiprintf_r+0x1bc>
 8003876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003878:	07d9      	lsls	r1, r3, #31
 800387a:	d405      	bmi.n	8003888 <_vfiprintf_r+0x220>
 800387c:	89ab      	ldrh	r3, [r5, #12]
 800387e:	059a      	lsls	r2, r3, #22
 8003880:	d402      	bmi.n	8003888 <_vfiprintf_r+0x220>
 8003882:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003884:	f7ff fd85 	bl	8003392 <__retarget_lock_release_recursive>
 8003888:	89ab      	ldrh	r3, [r5, #12]
 800388a:	065b      	lsls	r3, r3, #25
 800388c:	f53f af12 	bmi.w	80036b4 <_vfiprintf_r+0x4c>
 8003890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003892:	e711      	b.n	80036b8 <_vfiprintf_r+0x50>
 8003894:	ab03      	add	r3, sp, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	462a      	mov	r2, r5
 800389a:	4630      	mov	r0, r6
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <_vfiprintf_r+0x25c>)
 800389e:	a904      	add	r1, sp, #16
 80038a0:	f000 f882 	bl	80039a8 <_printf_i>
 80038a4:	e7e4      	b.n	8003870 <_vfiprintf_r+0x208>
 80038a6:	bf00      	nop
 80038a8:	08003e54 	.word	0x08003e54
 80038ac:	08003e74 	.word	0x08003e74
 80038b0:	08003e34 	.word	0x08003e34
 80038b4:	08003e94 	.word	0x08003e94
 80038b8:	08003e9a 	.word	0x08003e9a
 80038bc:	08003e9e 	.word	0x08003e9e
 80038c0:	00000000 	.word	0x00000000
 80038c4:	08003643 	.word	0x08003643

080038c8 <_printf_common>:
 80038c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038cc:	4616      	mov	r6, r2
 80038ce:	4699      	mov	r9, r3
 80038d0:	688a      	ldr	r2, [r1, #8]
 80038d2:	690b      	ldr	r3, [r1, #16]
 80038d4:	4607      	mov	r7, r0
 80038d6:	4293      	cmp	r3, r2
 80038d8:	bfb8      	it	lt
 80038da:	4613      	movlt	r3, r2
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038e2:	460c      	mov	r4, r1
 80038e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e8:	b10a      	cbz	r2, 80038ee <_printf_common+0x26>
 80038ea:	3301      	adds	r3, #1
 80038ec:	6033      	str	r3, [r6, #0]
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	0699      	lsls	r1, r3, #26
 80038f2:	bf42      	ittt	mi
 80038f4:	6833      	ldrmi	r3, [r6, #0]
 80038f6:	3302      	addmi	r3, #2
 80038f8:	6033      	strmi	r3, [r6, #0]
 80038fa:	6825      	ldr	r5, [r4, #0]
 80038fc:	f015 0506 	ands.w	r5, r5, #6
 8003900:	d106      	bne.n	8003910 <_printf_common+0x48>
 8003902:	f104 0a19 	add.w	sl, r4, #25
 8003906:	68e3      	ldr	r3, [r4, #12]
 8003908:	6832      	ldr	r2, [r6, #0]
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	42ab      	cmp	r3, r5
 800390e:	dc28      	bgt.n	8003962 <_printf_common+0x9a>
 8003910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003914:	1e13      	subs	r3, r2, #0
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	bf18      	it	ne
 800391a:	2301      	movne	r3, #1
 800391c:	0692      	lsls	r2, r2, #26
 800391e:	d42d      	bmi.n	800397c <_printf_common+0xb4>
 8003920:	4649      	mov	r1, r9
 8003922:	4638      	mov	r0, r7
 8003924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003928:	47c0      	blx	r8
 800392a:	3001      	adds	r0, #1
 800392c:	d020      	beq.n	8003970 <_printf_common+0xa8>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	68e5      	ldr	r5, [r4, #12]
 8003932:	f003 0306 	and.w	r3, r3, #6
 8003936:	2b04      	cmp	r3, #4
 8003938:	bf18      	it	ne
 800393a:	2500      	movne	r5, #0
 800393c:	6832      	ldr	r2, [r6, #0]
 800393e:	f04f 0600 	mov.w	r6, #0
 8003942:	68a3      	ldr	r3, [r4, #8]
 8003944:	bf08      	it	eq
 8003946:	1aad      	subeq	r5, r5, r2
 8003948:	6922      	ldr	r2, [r4, #16]
 800394a:	bf08      	it	eq
 800394c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003950:	4293      	cmp	r3, r2
 8003952:	bfc4      	itt	gt
 8003954:	1a9b      	subgt	r3, r3, r2
 8003956:	18ed      	addgt	r5, r5, r3
 8003958:	341a      	adds	r4, #26
 800395a:	42b5      	cmp	r5, r6
 800395c:	d11a      	bne.n	8003994 <_printf_common+0xcc>
 800395e:	2000      	movs	r0, #0
 8003960:	e008      	b.n	8003974 <_printf_common+0xac>
 8003962:	2301      	movs	r3, #1
 8003964:	4652      	mov	r2, sl
 8003966:	4649      	mov	r1, r9
 8003968:	4638      	mov	r0, r7
 800396a:	47c0      	blx	r8
 800396c:	3001      	adds	r0, #1
 800396e:	d103      	bne.n	8003978 <_printf_common+0xb0>
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003978:	3501      	adds	r5, #1
 800397a:	e7c4      	b.n	8003906 <_printf_common+0x3e>
 800397c:	2030      	movs	r0, #48	; 0x30
 800397e:	18e1      	adds	r1, r4, r3
 8003980:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800398a:	4422      	add	r2, r4
 800398c:	3302      	adds	r3, #2
 800398e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003992:	e7c5      	b.n	8003920 <_printf_common+0x58>
 8003994:	2301      	movs	r3, #1
 8003996:	4622      	mov	r2, r4
 8003998:	4649      	mov	r1, r9
 800399a:	4638      	mov	r0, r7
 800399c:	47c0      	blx	r8
 800399e:	3001      	adds	r0, #1
 80039a0:	d0e6      	beq.n	8003970 <_printf_common+0xa8>
 80039a2:	3601      	adds	r6, #1
 80039a4:	e7d9      	b.n	800395a <_printf_common+0x92>
	...

080039a8 <_printf_i>:
 80039a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039ac:	7e0f      	ldrb	r7, [r1, #24]
 80039ae:	4691      	mov	r9, r2
 80039b0:	2f78      	cmp	r7, #120	; 0x78
 80039b2:	4680      	mov	r8, r0
 80039b4:	460c      	mov	r4, r1
 80039b6:	469a      	mov	sl, r3
 80039b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039be:	d807      	bhi.n	80039d0 <_printf_i+0x28>
 80039c0:	2f62      	cmp	r7, #98	; 0x62
 80039c2:	d80a      	bhi.n	80039da <_printf_i+0x32>
 80039c4:	2f00      	cmp	r7, #0
 80039c6:	f000 80d9 	beq.w	8003b7c <_printf_i+0x1d4>
 80039ca:	2f58      	cmp	r7, #88	; 0x58
 80039cc:	f000 80a4 	beq.w	8003b18 <_printf_i+0x170>
 80039d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039d8:	e03a      	b.n	8003a50 <_printf_i+0xa8>
 80039da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039de:	2b15      	cmp	r3, #21
 80039e0:	d8f6      	bhi.n	80039d0 <_printf_i+0x28>
 80039e2:	a101      	add	r1, pc, #4	; (adr r1, 80039e8 <_printf_i+0x40>)
 80039e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039e8:	08003a41 	.word	0x08003a41
 80039ec:	08003a55 	.word	0x08003a55
 80039f0:	080039d1 	.word	0x080039d1
 80039f4:	080039d1 	.word	0x080039d1
 80039f8:	080039d1 	.word	0x080039d1
 80039fc:	080039d1 	.word	0x080039d1
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	080039d1 	.word	0x080039d1
 8003a08:	080039d1 	.word	0x080039d1
 8003a0c:	080039d1 	.word	0x080039d1
 8003a10:	080039d1 	.word	0x080039d1
 8003a14:	08003b63 	.word	0x08003b63
 8003a18:	08003a85 	.word	0x08003a85
 8003a1c:	08003b45 	.word	0x08003b45
 8003a20:	080039d1 	.word	0x080039d1
 8003a24:	080039d1 	.word	0x080039d1
 8003a28:	08003b85 	.word	0x08003b85
 8003a2c:	080039d1 	.word	0x080039d1
 8003a30:	08003a85 	.word	0x08003a85
 8003a34:	080039d1 	.word	0x080039d1
 8003a38:	080039d1 	.word	0x080039d1
 8003a3c:	08003b4d 	.word	0x08003b4d
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	1d1a      	adds	r2, r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	602a      	str	r2, [r5, #0]
 8003a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0a4      	b.n	8003b9e <_printf_i+0x1f6>
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	6829      	ldr	r1, [r5, #0]
 8003a58:	0606      	lsls	r6, r0, #24
 8003a5a:	f101 0304 	add.w	r3, r1, #4
 8003a5e:	d50a      	bpl.n	8003a76 <_printf_i+0xce>
 8003a60:	680e      	ldr	r6, [r1, #0]
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	2e00      	cmp	r6, #0
 8003a66:	da03      	bge.n	8003a70 <_printf_i+0xc8>
 8003a68:	232d      	movs	r3, #45	; 0x2d
 8003a6a:	4276      	negs	r6, r6
 8003a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a70:	230a      	movs	r3, #10
 8003a72:	485e      	ldr	r0, [pc, #376]	; (8003bec <_printf_i+0x244>)
 8003a74:	e019      	b.n	8003aaa <_printf_i+0x102>
 8003a76:	680e      	ldr	r6, [r1, #0]
 8003a78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a7c:	602b      	str	r3, [r5, #0]
 8003a7e:	bf18      	it	ne
 8003a80:	b236      	sxthne	r6, r6
 8003a82:	e7ef      	b.n	8003a64 <_printf_i+0xbc>
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	6820      	ldr	r0, [r4, #0]
 8003a88:	1d19      	adds	r1, r3, #4
 8003a8a:	6029      	str	r1, [r5, #0]
 8003a8c:	0601      	lsls	r1, r0, #24
 8003a8e:	d501      	bpl.n	8003a94 <_printf_i+0xec>
 8003a90:	681e      	ldr	r6, [r3, #0]
 8003a92:	e002      	b.n	8003a9a <_printf_i+0xf2>
 8003a94:	0646      	lsls	r6, r0, #25
 8003a96:	d5fb      	bpl.n	8003a90 <_printf_i+0xe8>
 8003a98:	881e      	ldrh	r6, [r3, #0]
 8003a9a:	2f6f      	cmp	r7, #111	; 0x6f
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2308      	moveq	r3, #8
 8003aa0:	230a      	movne	r3, #10
 8003aa2:	4852      	ldr	r0, [pc, #328]	; (8003bec <_printf_i+0x244>)
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aaa:	6865      	ldr	r5, [r4, #4]
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	bfa8      	it	ge
 8003ab0:	6821      	ldrge	r1, [r4, #0]
 8003ab2:	60a5      	str	r5, [r4, #8]
 8003ab4:	bfa4      	itt	ge
 8003ab6:	f021 0104 	bicge.w	r1, r1, #4
 8003aba:	6021      	strge	r1, [r4, #0]
 8003abc:	b90e      	cbnz	r6, 8003ac2 <_printf_i+0x11a>
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	d04d      	beq.n	8003b5e <_printf_i+0x1b6>
 8003ac2:	4615      	mov	r5, r2
 8003ac4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ac8:	fb03 6711 	mls	r7, r3, r1, r6
 8003acc:	5dc7      	ldrb	r7, [r0, r7]
 8003ace:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ad2:	4637      	mov	r7, r6
 8003ad4:	42bb      	cmp	r3, r7
 8003ad6:	460e      	mov	r6, r1
 8003ad8:	d9f4      	bls.n	8003ac4 <_printf_i+0x11c>
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d10b      	bne.n	8003af6 <_printf_i+0x14e>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	07de      	lsls	r6, r3, #31
 8003ae2:	d508      	bpl.n	8003af6 <_printf_i+0x14e>
 8003ae4:	6923      	ldr	r3, [r4, #16]
 8003ae6:	6861      	ldr	r1, [r4, #4]
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	bfde      	ittt	le
 8003aec:	2330      	movle	r3, #48	; 0x30
 8003aee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003af2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003af6:	1b52      	subs	r2, r2, r5
 8003af8:	6122      	str	r2, [r4, #16]
 8003afa:	464b      	mov	r3, r9
 8003afc:	4621      	mov	r1, r4
 8003afe:	4640      	mov	r0, r8
 8003b00:	f8cd a000 	str.w	sl, [sp]
 8003b04:	aa03      	add	r2, sp, #12
 8003b06:	f7ff fedf 	bl	80038c8 <_printf_common>
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d14c      	bne.n	8003ba8 <_printf_i+0x200>
 8003b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b12:	b004      	add	sp, #16
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	4834      	ldr	r0, [pc, #208]	; (8003bec <_printf_i+0x244>)
 8003b1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b1e:	6829      	ldr	r1, [r5, #0]
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b26:	6029      	str	r1, [r5, #0]
 8003b28:	061d      	lsls	r5, r3, #24
 8003b2a:	d514      	bpl.n	8003b56 <_printf_i+0x1ae>
 8003b2c:	07df      	lsls	r7, r3, #31
 8003b2e:	bf44      	itt	mi
 8003b30:	f043 0320 	orrmi.w	r3, r3, #32
 8003b34:	6023      	strmi	r3, [r4, #0]
 8003b36:	b91e      	cbnz	r6, 8003b40 <_printf_i+0x198>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	f023 0320 	bic.w	r3, r3, #32
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	2310      	movs	r3, #16
 8003b42:	e7af      	b.n	8003aa4 <_printf_i+0xfc>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	f043 0320 	orr.w	r3, r3, #32
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	2378      	movs	r3, #120	; 0x78
 8003b4e:	4828      	ldr	r0, [pc, #160]	; (8003bf0 <_printf_i+0x248>)
 8003b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b54:	e7e3      	b.n	8003b1e <_printf_i+0x176>
 8003b56:	0659      	lsls	r1, r3, #25
 8003b58:	bf48      	it	mi
 8003b5a:	b2b6      	uxthmi	r6, r6
 8003b5c:	e7e6      	b.n	8003b2c <_printf_i+0x184>
 8003b5e:	4615      	mov	r5, r2
 8003b60:	e7bb      	b.n	8003ada <_printf_i+0x132>
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	6826      	ldr	r6, [r4, #0]
 8003b66:	1d18      	adds	r0, r3, #4
 8003b68:	6961      	ldr	r1, [r4, #20]
 8003b6a:	6028      	str	r0, [r5, #0]
 8003b6c:	0635      	lsls	r5, r6, #24
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	d501      	bpl.n	8003b76 <_printf_i+0x1ce>
 8003b72:	6019      	str	r1, [r3, #0]
 8003b74:	e002      	b.n	8003b7c <_printf_i+0x1d4>
 8003b76:	0670      	lsls	r0, r6, #25
 8003b78:	d5fb      	bpl.n	8003b72 <_printf_i+0x1ca>
 8003b7a:	8019      	strh	r1, [r3, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4615      	mov	r5, r2
 8003b80:	6123      	str	r3, [r4, #16]
 8003b82:	e7ba      	b.n	8003afa <_printf_i+0x152>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	2100      	movs	r1, #0
 8003b88:	1d1a      	adds	r2, r3, #4
 8003b8a:	602a      	str	r2, [r5, #0]
 8003b8c:	681d      	ldr	r5, [r3, #0]
 8003b8e:	6862      	ldr	r2, [r4, #4]
 8003b90:	4628      	mov	r0, r5
 8003b92:	f000 f8d9 	bl	8003d48 <memchr>
 8003b96:	b108      	cbz	r0, 8003b9c <_printf_i+0x1f4>
 8003b98:	1b40      	subs	r0, r0, r5
 8003b9a:	6060      	str	r0, [r4, #4]
 8003b9c:	6863      	ldr	r3, [r4, #4]
 8003b9e:	6123      	str	r3, [r4, #16]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba6:	e7a8      	b.n	8003afa <_printf_i+0x152>
 8003ba8:	462a      	mov	r2, r5
 8003baa:	4649      	mov	r1, r9
 8003bac:	4640      	mov	r0, r8
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	47d0      	blx	sl
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d0ab      	beq.n	8003b0e <_printf_i+0x166>
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	079b      	lsls	r3, r3, #30
 8003bba:	d413      	bmi.n	8003be4 <_printf_i+0x23c>
 8003bbc:	68e0      	ldr	r0, [r4, #12]
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	4298      	cmp	r0, r3
 8003bc2:	bfb8      	it	lt
 8003bc4:	4618      	movlt	r0, r3
 8003bc6:	e7a4      	b.n	8003b12 <_printf_i+0x16a>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	4632      	mov	r2, r6
 8003bcc:	4649      	mov	r1, r9
 8003bce:	4640      	mov	r0, r8
 8003bd0:	47d0      	blx	sl
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d09b      	beq.n	8003b0e <_printf_i+0x166>
 8003bd6:	3501      	adds	r5, #1
 8003bd8:	68e3      	ldr	r3, [r4, #12]
 8003bda:	9903      	ldr	r1, [sp, #12]
 8003bdc:	1a5b      	subs	r3, r3, r1
 8003bde:	42ab      	cmp	r3, r5
 8003be0:	dcf2      	bgt.n	8003bc8 <_printf_i+0x220>
 8003be2:	e7eb      	b.n	8003bbc <_printf_i+0x214>
 8003be4:	2500      	movs	r5, #0
 8003be6:	f104 0619 	add.w	r6, r4, #25
 8003bea:	e7f5      	b.n	8003bd8 <_printf_i+0x230>
 8003bec:	08003ea5 	.word	0x08003ea5
 8003bf0:	08003eb6 	.word	0x08003eb6

08003bf4 <_sbrk_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4d05      	ldr	r5, [pc, #20]	; (8003c10 <_sbrk_r+0x1c>)
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	f7fc fde2 	bl	80007c8 <_sbrk>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_sbrk_r+0x1a>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_sbrk_r+0x1a>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20000134 	.word	0x20000134

08003c14 <__sread>:
 8003c14:	b510      	push	{r4, lr}
 8003c16:	460c      	mov	r4, r1
 8003c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c1c:	f000 f8ae 	bl	8003d7c <_read_r>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	bfab      	itete	ge
 8003c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c26:	89a3      	ldrhlt	r3, [r4, #12]
 8003c28:	181b      	addge	r3, r3, r0
 8003c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c2e:	bfac      	ite	ge
 8003c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c32:	81a3      	strhlt	r3, [r4, #12]
 8003c34:	bd10      	pop	{r4, pc}

08003c36 <__swrite>:
 8003c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c3a:	461f      	mov	r7, r3
 8003c3c:	898b      	ldrh	r3, [r1, #12]
 8003c3e:	4605      	mov	r5, r0
 8003c40:	05db      	lsls	r3, r3, #23
 8003c42:	460c      	mov	r4, r1
 8003c44:	4616      	mov	r6, r2
 8003c46:	d505      	bpl.n	8003c54 <__swrite+0x1e>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c50:	f000 f868 	bl	8003d24 <_lseek_r>
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	4632      	mov	r2, r6
 8003c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	4628      	mov	r0, r5
 8003c60:	463b      	mov	r3, r7
 8003c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6a:	f000 b817 	b.w	8003c9c <_write_r>

08003c6e <__sseek>:
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	460c      	mov	r4, r1
 8003c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c76:	f000 f855 	bl	8003d24 <_lseek_r>
 8003c7a:	1c43      	adds	r3, r0, #1
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	bf15      	itete	ne
 8003c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c8a:	81a3      	strheq	r3, [r4, #12]
 8003c8c:	bf18      	it	ne
 8003c8e:	81a3      	strhne	r3, [r4, #12]
 8003c90:	bd10      	pop	{r4, pc}

08003c92 <__sclose>:
 8003c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c96:	f000 b813 	b.w	8003cc0 <_close_r>
	...

08003c9c <_write_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4d05      	ldr	r5, [pc, #20]	; (8003cbc <_write_r+0x20>)
 8003ca8:	602a      	str	r2, [r5, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f7fc fd3f 	bl	800072e <_write>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_write_r+0x1e>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_write_r+0x1e>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	20000134 	.word	0x20000134

08003cc0 <_close_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4d05      	ldr	r5, [pc, #20]	; (8003cdc <_close_r+0x1c>)
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	4608      	mov	r0, r1
 8003cca:	602b      	str	r3, [r5, #0]
 8003ccc:	f7fc fd4b 	bl	8000766 <_close>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_close_r+0x1a>
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_close_r+0x1a>
 8003cd8:	6023      	str	r3, [r4, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	20000134 	.word	0x20000134

08003ce0 <_fstat_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	4d06      	ldr	r5, [pc, #24]	; (8003d00 <_fstat_r+0x20>)
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	602b      	str	r3, [r5, #0]
 8003cee:	f7fc fd45 	bl	800077c <_fstat>
 8003cf2:	1c43      	adds	r3, r0, #1
 8003cf4:	d102      	bne.n	8003cfc <_fstat_r+0x1c>
 8003cf6:	682b      	ldr	r3, [r5, #0]
 8003cf8:	b103      	cbz	r3, 8003cfc <_fstat_r+0x1c>
 8003cfa:	6023      	str	r3, [r4, #0]
 8003cfc:	bd38      	pop	{r3, r4, r5, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000134 	.word	0x20000134

08003d04 <_isatty_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	2300      	movs	r3, #0
 8003d08:	4d05      	ldr	r5, [pc, #20]	; (8003d20 <_isatty_r+0x1c>)
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	602b      	str	r3, [r5, #0]
 8003d10:	f7fc fd43 	bl	800079a <_isatty>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_isatty_r+0x1a>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_isatty_r+0x1a>
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	20000134 	.word	0x20000134

08003d24 <_lseek_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4604      	mov	r4, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4d05      	ldr	r5, [pc, #20]	; (8003d44 <_lseek_r+0x20>)
 8003d30:	602a      	str	r2, [r5, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f7fc fd3b 	bl	80007ae <_lseek>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_lseek_r+0x1e>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_lseek_r+0x1e>
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	20000134 	.word	0x20000134

08003d48 <memchr>:
 8003d48:	4603      	mov	r3, r0
 8003d4a:	b510      	push	{r4, lr}
 8003d4c:	b2c9      	uxtb	r1, r1
 8003d4e:	4402      	add	r2, r0
 8003d50:	4293      	cmp	r3, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	d101      	bne.n	8003d5a <memchr+0x12>
 8003d56:	2000      	movs	r0, #0
 8003d58:	e003      	b.n	8003d62 <memchr+0x1a>
 8003d5a:	7804      	ldrb	r4, [r0, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	428c      	cmp	r4, r1
 8003d60:	d1f6      	bne.n	8003d50 <memchr+0x8>
 8003d62:	bd10      	pop	{r4, pc}

08003d64 <__malloc_lock>:
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <__malloc_lock+0x8>)
 8003d66:	f7ff bb13 	b.w	8003390 <__retarget_lock_acquire_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	20000128 	.word	0x20000128

08003d70 <__malloc_unlock>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__malloc_unlock+0x8>)
 8003d72:	f7ff bb0e 	b.w	8003392 <__retarget_lock_release_recursive>
 8003d76:	bf00      	nop
 8003d78:	20000128 	.word	0x20000128

08003d7c <_read_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	2200      	movs	r2, #0
 8003d86:	4d05      	ldr	r5, [pc, #20]	; (8003d9c <_read_r+0x20>)
 8003d88:	602a      	str	r2, [r5, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f7fc fcb2 	bl	80006f4 <_read>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d102      	bne.n	8003d9a <_read_r+0x1e>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	b103      	cbz	r3, 8003d9a <_read_r+0x1e>
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	bd38      	pop	{r3, r4, r5, pc}
 8003d9c:	20000134 	.word	0x20000134

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
