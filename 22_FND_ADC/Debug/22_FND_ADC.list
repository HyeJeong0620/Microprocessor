
22_FND_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a8  080040a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080040a8  080040a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040a8  080040a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08004120  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004120  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5b9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002139  00000000  00000000  0002e652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00030790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00031570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e58  00000000  00000000  00032278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f34b  00000000  00000000  0004b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bf6  00000000  00000000  0005a41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004198  00000000  00000000  000eb064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fa4 	.word	0x08003fa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003fa4 	.word	0x08003fa4

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	2364      	movs	r3, #100	; 0x64
 8000158:	2201      	movs	r2, #1
 800015a:	4809      	ldr	r0, [pc, #36]	; (8000180 <__io_putchar+0x34>)
 800015c:	f002 fddc 	bl	8002d18 <HAL_UART_Transmit>
	if(ch =='\n') {
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b0a      	cmp	r3, #10
 8000164:	d106      	bne.n	8000174 <__io_putchar+0x28>
		HAL_UART_Transmit(&huart2, (uint8_t *)'/r', 1, 100);
 8000166:	2364      	movs	r3, #100	; 0x64
 8000168:	2201      	movs	r2, #1
 800016a:	f642 7172 	movw	r1, #12146	; 0x2f72
 800016e:	4804      	ldr	r0, [pc, #16]	; (8000180 <__io_putchar+0x34>)
 8000170:	f002 fdd2 	bl	8002d18 <HAL_UART_Transmit>
	}
	return ch;
 8000174:	687b      	ldr	r3, [r7, #4]
}
 8000176:	4618      	mov	r0, r3
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	20000104 	.word	0x20000104

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000188:	f000 fc0e 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018c:	f000 f816 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000190:	f000 f91e 	bl	80003d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000194:	f000 f868 	bl	8000268 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000198:	f000 f8a4 	bl	80002e4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800019c:	f000 f8ee 	bl	800037c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <main+0x30>)
 80001a2:	f001 f897 	bl	80012d4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 80001a6:	4803      	ldr	r0, [pc, #12]	; (80001b4 <main+0x30>)
 80001a8:	f000 fe3e 	bl	8000e28 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80001ac:	4802      	ldr	r0, [pc, #8]	; (80001b8 <main+0x34>)
 80001ae:	f002 f9b5 	bl	800251c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b2:	e7fe      	b.n	80001b2 <main+0x2e>
 80001b4:	2000008c 	.word	0x2000008c
 80001b8:	200000bc 	.word	0x200000bc

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	; 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 ff4e 	bl	800306c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ec:	2302      	movs	r3, #2
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f4:	2310      	movs	r3, #16
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f8:	2302      	movs	r3, #2
 80001fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fc:	2300      	movs	r3, #0
 80001fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000200:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000204:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fbba 	bl	8001984 <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000216:	f000 f9e7 	bl	80005e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fe27 	bl	8001e88 <HAL_RCC_ClockConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000240:	f000 f9d2 	bl	80005e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000244:	2302      	movs	r3, #2
 8000246:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f001 ffa8 	bl	80021a4 <HAL_RCCEx_PeriphCLKConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800025a:	f000 f9c5 	bl	80005e8 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3750      	adds	r7, #80	; 0x50
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_ADC1_Init+0x74>)
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <MX_ADC1_Init+0x78>)
 800027c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_ADC1_Init+0x74>)
 8000286:	2201      	movs	r2, #1
 8000288:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_ADC1_Init+0x74>)
 8000292:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a6:	f000 fbe1 	bl	8000a6c <HAL_ADC_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f99a 	bl	80005e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002bc:	2302      	movs	r3, #2
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_ADC1_Init+0x74>)
 80002c6:	f000 fe71 	bl	8000fac <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f98a 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000008c 	.word	0x2000008c
 80002e0:	40012400 	.word	0x40012400

080002e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000300:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <MX_TIM2_Init+0x94>)
 8000302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_TIM2_Init+0x94>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_TIM2_Init+0x94>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_TIM2_Init+0x94>)
 8000316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800031a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_TIM2_Init+0x94>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_TIM2_Init+0x94>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000328:	4813      	ldr	r0, [pc, #76]	; (8000378 <MX_TIM2_Init+0x94>)
 800032a:	f002 f8a7 	bl	800247c <HAL_TIM_Base_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000334:	f000 f958 	bl	80005e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033e:	f107 0308 	add.w	r3, r7, #8
 8000342:	4619      	mov	r1, r3
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <MX_TIM2_Init+0x94>)
 8000346:	f002 fa43 	bl	80027d0 <HAL_TIM_ConfigClockSource>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000350:	f000 f94a 	bl	80005e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035c:	463b      	mov	r3, r7
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_TIM2_Init+0x94>)
 8000362:	f002 fc19 	bl	8002b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800036c:	f000 f93c 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	200000bc 	.word	0x200000bc

0800037c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000382:	4a12      	ldr	r2, [pc, #72]	; (80003cc <MX_USART2_UART_Init+0x50>)
 8000384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800038c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003b4:	f002 fc60 	bl	8002c78 <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003be:	f000 f913 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000104 	.word	0x20000104
 80003cc:	40004400 	.word	0x40004400

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e4:	4b37      	ldr	r3, [pc, #220]	; (80004c4 <MX_GPIO_Init+0xf4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a36      	ldr	r2, [pc, #216]	; (80004c4 <MX_GPIO_Init+0xf4>)
 80003ea:	f043 0310 	orr.w	r3, r3, #16
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <MX_GPIO_Init+0xf4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0310 	and.w	r3, r3, #16
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <MX_GPIO_Init+0xf4>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <MX_GPIO_Init+0xf4>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <MX_GPIO_Init+0xf4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <MX_GPIO_Init+0xf4>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <MX_GPIO_Init+0xf4>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <MX_GPIO_Init+0xf4>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <MX_GPIO_Init+0xf4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <MX_GPIO_Init+0xf4>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_GPIO_Init+0xf4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	603b      	str	r3, [r7, #0]
 8000442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2118      	movs	r1, #24
 8000448:	481f      	ldr	r0, [pc, #124]	; (80004c8 <MX_GPIO_Init+0xf8>)
 800044a:	f001 fa83 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800044e:	2200      	movs	r2, #0
 8000450:	21ff      	movs	r1, #255	; 0xff
 8000452:	481e      	ldr	r0, [pc, #120]	; (80004cc <MX_GPIO_Init+0xfc>)
 8000454:	f001 fa7e 	bl	8001954 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800045e:	481c      	ldr	r0, [pc, #112]	; (80004d0 <MX_GPIO_Init+0x100>)
 8000460:	f001 fa78 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000464:	2318      	movs	r3, #24
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2302      	movs	r3, #2
 8000472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	4619      	mov	r1, r3
 800047a:	4813      	ldr	r0, [pc, #76]	; (80004c8 <MX_GPIO_Init+0xf8>)
 800047c:	f001 f8e6 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000480:	23ff      	movs	r3, #255	; 0xff
 8000482:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2302      	movs	r3, #2
 800048e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <MX_GPIO_Init+0xfc>)
 8000498:	f001 f8d8 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800049c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	4806      	ldr	r0, [pc, #24]	; (80004d0 <MX_GPIO_Init+0x100>)
 80004b6:	f001 f8c9 	bl	800164c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ba:	bf00      	nop
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40011000 	.word	0x40011000
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	40010800 	.word	0x40010800

080004d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a37      	ldr	r2, [pc, #220]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d167      	bne.n	80005b4 <HAL_TIM_PeriodElapsedCallback+0xe0>
		if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 80004e4:	210a      	movs	r1, #10
 80004e6:	4836      	ldr	r0, [pc, #216]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80004e8:	f000 fb98 	bl	8000c1c <HAL_ADC_PollForConversion>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d160      	bne.n	80005b4 <HAL_TIM_PeriodElapsedCallback+0xe0>
			adc_value = HAL_ADC_GetValue(&hadc1);
 80004f2:	4833      	ldr	r0, [pc, #204]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80004f4:	f000 fd4e 	bl	8000f94 <HAL_ADC_GetValue>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80004fe:	601a      	str	r2, [r3, #0]
			printf("ADC_VALUE : %d\n\n", adc_value);
 8000500:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	4830      	ldr	r0, [pc, #192]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000508:	f002 fdb8 	bl	800307c <iprintf>
			ADC_1000 = adc_value /1000;
 800050c:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a2e      	ldr	r2, [pc, #184]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000512:	fb82 1203 	smull	r1, r2, r2, r3
 8000516:	1192      	asrs	r2, r2, #6
 8000518:	17db      	asrs	r3, r3, #31
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	4a2c      	ldr	r2, [pc, #176]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800051e:	6013      	str	r3, [r2, #0]
			ADC_100 = (adc_value %1000) / 100;
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000526:	fb83 1302 	smull	r1, r3, r3, r2
 800052a:	1199      	asrs	r1, r3, #6
 800052c:	17d3      	asrs	r3, r2, #31
 800052e:	1acb      	subs	r3, r1, r3
 8000530:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000534:	fb01 f303 	mul.w	r3, r1, r3
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800053c:	fb82 1203 	smull	r1, r2, r2, r3
 8000540:	1152      	asrs	r2, r2, #5
 8000542:	17db      	asrs	r3, r3, #31
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	4a24      	ldr	r2, [pc, #144]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000548:	6013      	str	r3, [r2, #0]
			ADC_10 = ((adc_value %1000) / 100) / 10;
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000550:	fb83 1302 	smull	r1, r3, r3, r2
 8000554:	1199      	asrs	r1, r3, #6
 8000556:	17d3      	asrs	r3, r2, #31
 8000558:	1acb      	subs	r3, r1, r3
 800055a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800055e:	fb01 f303 	mul.w	r3, r1, r3
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000566:	fb82 1203 	smull	r1, r2, r2, r3
 800056a:	1192      	asrs	r2, r2, #6
 800056c:	17db      	asrs	r3, r3, #31
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000572:	6013      	str	r3, [r2, #0]
			ADC_1 = ((adc_value %1000) / 100) % 10;
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800057a:	fb83 1302 	smull	r1, r3, r3, r2
 800057e:	1199      	asrs	r1, r3, #6
 8000580:	17d3      	asrs	r3, r2, #31
 8000582:	1acb      	subs	r3, r1, r3
 8000584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000588:	fb01 f303 	mul.w	r3, r1, r3
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000590:	fb82 1203 	smull	r1, r2, r2, r3
 8000594:	1152      	asrs	r2, r2, #5
 8000596:	17db      	asrs	r3, r3, #31
 8000598:	1ad1      	subs	r1, r2, r3
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800059c:	fb83 2301 	smull	r2, r3, r3, r1
 80005a0:	109a      	asrs	r2, r3, #2
 80005a2:	17cb      	asrs	r3, r1, #31
 80005a4:	1ad2      	subs	r2, r2, r3
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	1aca      	subs	r2, r1, r3
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80005b2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000bc 	.word	0x200000bc
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	2000014c 	.word	0x2000014c
 80005c8:	08003fbc 	.word	0x08003fbc
 80005cc:	10624dd3 	.word	0x10624dd3
 80005d0:	20000150 	.word	0x20000150
 80005d4:	51eb851f 	.word	0x51eb851f
 80005d8:	20000154 	.word	0x20000154
 80005dc:	20000158 	.word	0x20000158
 80005e0:	66666667 	.word	0x66666667
 80005e4:	2000015c 	.word	0x2000015c

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <HAL_MspInit+0x5c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_MspInit+0x5c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_MspInit+0x60>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_MspInit+0x60>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_ADC_MspInit+0x6c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d121      	bne.n	80006bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x70>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <HAL_ADC_MspInit+0x70>)
 800067e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_ADC_MspInit+0x70>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_ADC_MspInit+0x70>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x70>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_ADC_MspInit+0x70>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a8:	2301      	movs	r3, #1
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x74>)
 80006b8:	f000 ffc8 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40012400 	.word	0x40012400
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800

080006d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e0:	d113      	bne.n	800070a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_TIM_Base_MspInit+0x44>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <HAL_TIM_Base_MspInit+0x44>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_TIM_Base_MspInit+0x44>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	201c      	movs	r0, #28
 8000700:	f000 ff6d 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000704:	201c      	movs	r0, #28
 8000706:	f000 ff86 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d12f      	bne.n	8000798 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <HAL_UART_MspInit+0x8c>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <HAL_UART_MspInit+0x8c>)
 800073e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000742:	61d3      	str	r3, [r2, #28]
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <HAL_UART_MspInit+0x8c>)
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <HAL_UART_MspInit+0x8c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <HAL_UART_MspInit+0x8c>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <HAL_UART_MspInit+0x8c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000768:	2304      	movs	r3, #4
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <HAL_UART_MspInit+0x90>)
 800077c:	f000 ff66 	bl	800164c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000780:	2308      	movs	r3, #8
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <HAL_UART_MspInit+0x90>)
 8000794:	f000 ff5a 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40004400 	.word	0x40004400
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 f91f 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <TIM2_IRQHandler+0x10>)
 8000802:	f001 fedd 	bl	80025c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000bc 	.word	0x200000bc

08000810 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	e00a      	b.n	8000838 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000822:	f3af 8000 	nop.w
 8000826:	4601      	mov	r1, r0
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	60ba      	str	r2, [r7, #8]
 800082e:	b2ca      	uxtb	r2, r1
 8000830:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbf0      	blt.n	8000822 <_read+0x12>
  }

  return len;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	e009      	b.n	8000870 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fc71 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	dbf1      	blt.n	800085c <_write+0x12>
  }
  return len;
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_close>:

int _close(int file)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a8:	605a      	str	r2, [r3, #4]
  return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
	...

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f002 fb80 	bl	8003018 <__errno>
 8000918:	4603      	mov	r3, r0
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20005000 	.word	0x20005000
 8000944:	00000400 	.word	0x00000400
 8000948:	20000160 	.word	0x20000160
 800094c:	20000178 	.word	0x20000178

08000950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800095c:	f7ff fff8 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000962:	490c      	ldr	r1, [pc, #48]	; (8000994 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a09      	ldr	r2, [pc, #36]	; (800099c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000978:	4c09      	ldr	r4, [pc, #36]	; (80009a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f002 fb4d 	bl	8003024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fbfb 	bl	8000184 <main>
  bx lr
 800098e:	4770      	bx	lr
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000998:	080040b0 	.word	0x080040b0
  ldr r2, =_sbss
 800099c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009a0:	20000178 	.word	0x20000178

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 fe05 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff fe16 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fe1d 	bl	8001632 <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 fde5 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x20>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <HAL_IncTick+0x20>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000164 	.word	0x20000164

08000a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	20000164 	.word	0x20000164

08000a6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e0be      	b.n	8000c0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff fdd4 	bl	8000658 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 fbcd 	bl	8001250 <ADC_ConversionStop_Disable>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 8099 	bne.w	8000bfa <HAL_ADC_Init+0x18e>
 8000ac8:	7dfb      	ldrb	r3, [r7, #23]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f040 8095 	bne.w	8000bfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ad8:	f023 0302 	bic.w	r3, r3, #2
 8000adc:	f043 0202 	orr.w	r2, r3, #2
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7b1b      	ldrb	r3, [r3, #12]
 8000af2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000af4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b04:	d003      	beq.n	8000b0e <HAL_ADC_Init+0xa2>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d102      	bne.n	8000b14 <HAL_ADC_Init+0xa8>
 8000b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b12:	e000      	b.n	8000b16 <HAL_ADC_Init+0xaa>
 8000b14:	2300      	movs	r3, #0
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7d1b      	ldrb	r3, [r3, #20]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d119      	bne.n	8000b58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7b1b      	ldrb	r3, [r3, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d109      	bne.n	8000b40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	035a      	lsls	r2, r3, #13
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	e00b      	b.n	8000b58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	f043 0220 	orr.w	r2, r3, #32
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b50:	f043 0201 	orr.w	r2, r3, #1
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_ADC_Init+0x1a8>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b88:	d003      	beq.n	8000b92 <HAL_ADC_Init+0x126>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d104      	bne.n	8000b9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	051b      	lsls	r3, r3, #20
 8000b9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_ADC_Init+0x1ac>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d10b      	bne.n	8000bd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	f023 0303 	bic.w	r3, r3, #3
 8000bce:	f043 0201 	orr.w	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bd6:	e018      	b.n	8000c0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	f023 0312 	bic.w	r3, r3, #18
 8000be0:	f043 0210 	orr.w	r2, r3, #16
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	f043 0201 	orr.w	r2, r3, #1
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf8:	e007      	b.n	8000c0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f043 0210 	orr.w	r2, r3, #16
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	ffe1f7fd 	.word	0xffe1f7fd
 8000c18:	ff1f0efe 	.word	0xff1f0efe

08000c1c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000c32:	f7ff ff11 	bl	8000a58 <HAL_GetTick>
 8000c36:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	f043 0220 	orr.w	r2, r3, #32
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e0d3      	b.n	8000e06 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d131      	bne.n	8000cd0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d12a      	bne.n	8000cd0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c7a:	e021      	b.n	8000cc0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c82:	d01d      	beq.n	8000cc0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <HAL_ADC_PollForConversion+0x7e>
 8000c8a:	f7ff fee5 	bl	8000a58 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d212      	bcs.n	8000cc0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10b      	bne.n	8000cc0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	f043 0204 	orr.w	r2, r3, #4
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e0a2      	b.n	8000e06 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0d6      	beq.n	8000c7c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000cce:	e070      	b.n	8000db2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000cd0:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <HAL_ADC_PollForConversion+0x1f4>)
 8000cd2:	681c      	ldr	r4, [r3, #0]
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f001 fb1b 	bl	8002310 <HAL_RCCEx_GetPeriphCLKFreq>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6919      	ldr	r1, [r3, #16]
 8000ce6:	4b4b      	ldr	r3, [pc, #300]	; (8000e14 <HAL_ADC_PollForConversion+0x1f8>)
 8000ce8:	400b      	ands	r3, r1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d118      	bne.n	8000d20 <HAL_ADC_PollForConversion+0x104>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68d9      	ldr	r1, [r3, #12]
 8000cf4:	4b48      	ldr	r3, [pc, #288]	; (8000e18 <HAL_ADC_PollForConversion+0x1fc>)
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d111      	bne.n	8000d20 <HAL_ADC_PollForConversion+0x104>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6919      	ldr	r1, [r3, #16]
 8000d02:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <HAL_ADC_PollForConversion+0x200>)
 8000d04:	400b      	ands	r3, r1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d108      	bne.n	8000d1c <HAL_ADC_PollForConversion+0x100>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68d9      	ldr	r1, [r3, #12]
 8000d10:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_ADC_PollForConversion+0x204>)
 8000d12:	400b      	ands	r3, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <HAL_ADC_PollForConversion+0x100>
 8000d18:	2314      	movs	r3, #20
 8000d1a:	e020      	b.n	8000d5e <HAL_ADC_PollForConversion+0x142>
 8000d1c:	2329      	movs	r3, #41	; 0x29
 8000d1e:	e01e      	b.n	8000d5e <HAL_ADC_PollForConversion+0x142>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6919      	ldr	r1, [r3, #16]
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <HAL_ADC_PollForConversion+0x200>)
 8000d28:	400b      	ands	r3, r1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d106      	bne.n	8000d3c <HAL_ADC_PollForConversion+0x120>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68d9      	ldr	r1, [r3, #12]
 8000d34:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <HAL_ADC_PollForConversion+0x204>)
 8000d36:	400b      	ands	r3, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00d      	beq.n	8000d58 <HAL_ADC_PollForConversion+0x13c>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6919      	ldr	r1, [r3, #16]
 8000d42:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <HAL_ADC_PollForConversion+0x208>)
 8000d44:	400b      	ands	r3, r1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d108      	bne.n	8000d5c <HAL_ADC_PollForConversion+0x140>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68d9      	ldr	r1, [r3, #12]
 8000d50:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <HAL_ADC_PollForConversion+0x208>)
 8000d52:	400b      	ands	r3, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <HAL_ADC_PollForConversion+0x140>
 8000d58:	2354      	movs	r3, #84	; 0x54
 8000d5a:	e000      	b.n	8000d5e <HAL_ADC_PollForConversion+0x142>
 8000d5c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d64:	e021      	b.n	8000daa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d01a      	beq.n	8000da4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d007      	beq.n	8000d84 <HAL_ADC_PollForConversion+0x168>
 8000d74:	f7ff fe70 	bl	8000a58 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d20f      	bcs.n	8000da4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d90b      	bls.n	8000da4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	f043 0204 	orr.w	r2, r3, #4
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e030      	b.n	8000e06 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3301      	adds	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d8d9      	bhi.n	8000d66 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f06f 0212 	mvn.w	r2, #18
 8000dba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dd6:	d115      	bne.n	8000e04 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d111      	bne.n	8000e04 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd90      	pop	{r4, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000000 	.word	0x20000000
 8000e14:	24924924 	.word	0x24924924
 8000e18:	00924924 	.word	0x00924924
 8000e1c:	12492492 	.word	0x12492492
 8000e20:	00492492 	.word	0x00492492
 8000e24:	00249249 	.word	0x00249249

08000e28 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <HAL_ADC_Start_IT+0x1a>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e0a0      	b.n	8000f84 <HAL_ADC_Start_IT+0x15c>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f9a6 	bl	800119c <ADC_Enable>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 808f 	bne.w	8000f7a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a45      	ldr	r2, [pc, #276]	; (8000f8c <HAL_ADC_Start_IT+0x164>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d105      	bne.n	8000e86 <HAL_ADC_Start_IT+0x5e>
 8000e7a:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <HAL_ADC_Start_IT+0x168>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d115      	bne.n	8000eb2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d026      	beq.n	8000eee <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ea8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eb0:	e01d      	b.n	8000eee <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <HAL_ADC_Start_IT+0x168>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d004      	beq.n	8000ed2 <HAL_ADC_Start_IT+0xaa>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <HAL_ADC_Start_IT+0x164>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d10d      	bne.n	8000eee <HAL_ADC_Start_IT+0xc6>
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <HAL_ADC_Start_IT+0x168>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	f023 0206 	bic.w	r2, r3, #6
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f06:	e002      	b.n	8000f0e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f06f 0202 	mvn.w	r2, #2
 8000f1e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0220 	orr.w	r2, r2, #32
 8000f2e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f3e:	d113      	bne.n	8000f68 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f44:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_ADC_Start_IT+0x164>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d105      	bne.n	8000f56 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_ADC_Start_IT+0x168>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d108      	bne.n	8000f68 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	e00c      	b.n	8000f82 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	e003      	b.n	8000f82 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012800 	.word	0x40012800
 8000f90:	40012400 	.word	0x40012400

08000f94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x20>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e0dc      	b.n	8001186 <HAL_ADC_ConfigChannel+0x1da>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	d81c      	bhi.n	8001016 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	3b05      	subs	r3, #5
 8000fee:	221f      	movs	r2, #31
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4019      	ands	r1, r3
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	3b05      	subs	r3, #5
 8001008:	fa00 f203 	lsl.w	r2, r0, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	635a      	str	r2, [r3, #52]	; 0x34
 8001014:	e03c      	b.n	8001090 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b0c      	cmp	r3, #12
 800101c:	d81c      	bhi.n	8001058 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	3b23      	subs	r3, #35	; 0x23
 8001030:	221f      	movs	r2, #31
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	4019      	ands	r1, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	3b23      	subs	r3, #35	; 0x23
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
 8001056:	e01b      	b.n	8001090 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	3b41      	subs	r3, #65	; 0x41
 800106a:	221f      	movs	r2, #31
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	4019      	ands	r1, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b41      	subs	r3, #65	; 0x41
 8001084:	fa00 f203 	lsl.w	r2, r0, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b09      	cmp	r3, #9
 8001096:	d91c      	bls.n	80010d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68d9      	ldr	r1, [r3, #12]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	3b1e      	subs	r3, #30
 80010aa:	2207      	movs	r2, #7
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4019      	ands	r1, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	3b1e      	subs	r3, #30
 80010c4:	fa00 f203 	lsl.w	r2, r0, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	e019      	b.n	8001106 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6919      	ldr	r1, [r3, #16]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	2207      	movs	r2, #7
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4019      	ands	r1, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	6898      	ldr	r0, [r3, #8]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	fa00 f203 	lsl.w	r2, r0, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b10      	cmp	r3, #16
 800110c:	d003      	beq.n	8001116 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001112:	2b11      	cmp	r3, #17
 8001114:	d132      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_ADC_ConfigChannel+0x1e4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d125      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d126      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800113c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b10      	cmp	r3, #16
 8001144:	d11a      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_ADC_ConfigChannel+0x1e8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_ADC_ConfigChannel+0x1ec>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	0c9a      	lsrs	r2, r3, #18
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800115c:	e002      	b.n	8001164 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3b01      	subs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f9      	bne.n	800115e <HAL_ADC_ConfigChannel+0x1b2>
 800116a:	e007      	b.n	800117c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	f043 0220 	orr.w	r2, r3, #32
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	40012400 	.word	0x40012400
 8001194:	20000000 	.word	0x20000000
 8001198:	431bde83 	.word	0x431bde83

0800119c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d040      	beq.n	800123c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0201 	orr.w	r2, r2, #1
 80011c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <ADC_Enable+0xac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <ADC_Enable+0xb0>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	0c9b      	lsrs	r3, r3, #18
 80011d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011d8:	e002      	b.n	80011e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011e6:	f7ff fc37 	bl	8000a58 <HAL_GetTick>
 80011ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011ec:	e01f      	b.n	800122e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011ee:	f7ff fc33 	bl	8000a58 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d918      	bls.n	800122e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b01      	cmp	r3, #1
 8001208:	d011      	beq.n	800122e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	f043 0210 	orr.w	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e007      	b.n	800123e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b01      	cmp	r3, #1
 800123a:	d1d8      	bne.n	80011ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000
 800124c:	431bde83 	.word	0x431bde83

08001250 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d12e      	bne.n	80012c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800127a:	f7ff fbed 	bl	8000a58 <HAL_GetTick>
 800127e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001280:	e01b      	b.n	80012ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001282:	f7ff fbe9 	bl	8000a58 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d914      	bls.n	80012ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10d      	bne.n	80012ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	f043 0210 	orr.w	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e007      	b.n	80012ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d0dc      	beq.n	8001282 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e097      	b.n	8001422 <HAL_ADCEx_Calibration_Start+0x14e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa8 	bl	8001250 <ADC_ConversionStop_Disable>
 8001300:	4603      	mov	r3, r0
 8001302:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff49 	bl	800119c <ADC_Enable>
 800130a:	4603      	mov	r3, r0
 800130c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f040 8081 	bne.w	8001418 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800131e:	f023 0302 	bic.w	r3, r3, #2
 8001322:	f043 0202 	orr.w	r2, r3, #2
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800132a:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_ADCEx_Calibration_Start+0x158>)
 800132c:	681c      	ldr	r4, [r3, #0]
 800132e:	2002      	movs	r0, #2
 8001330:	f000 ffee 	bl	8002310 <HAL_RCCEx_GetPeriphCLKFreq>
 8001334:	4603      	mov	r3, r0
 8001336:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800133a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800133c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800133e:	e002      	b.n	8001346 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3b01      	subs	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f9      	bne.n	8001340 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0208 	orr.w	r2, r2, #8
 800135a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800135c:	f7ff fb7c 	bl	8000a58 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001362:	e01b      	b.n	800139c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001364:	f7ff fb78 	bl	8000a58 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b0a      	cmp	r3, #10
 8001370:	d914      	bls.n	800139c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00d      	beq.n	800139c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	f023 0312 	bic.w	r3, r3, #18
 8001388:	f043 0210 	orr.w	r2, r3, #16
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e042      	b.n	8001422 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1dc      	bne.n	8001364 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0204 	orr.w	r2, r2, #4
 80013b8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80013ba:	f7ff fb4d 	bl	8000a58 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013c0:	e01b      	b.n	80013fa <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013c2:	f7ff fb49 	bl	8000a58 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b0a      	cmp	r3, #10
 80013ce:	d914      	bls.n	80013fa <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00d      	beq.n	80013fa <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	f023 0312 	bic.w	r3, r3, #18
 80013e6:	f043 0210 	orr.w	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e013      	b.n	8001422 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1dc      	bne.n	80013c2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f023 0303 	bic.w	r3, r3, #3
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001420:	7dfb      	ldrb	r3, [r7, #23]
}
 8001422:	4618      	mov	r0, r3
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4906      	ldr	r1, [pc, #24]	; (80014c8 <__NVIC_EnableIRQ+0x34>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff90 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff2d 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff42 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff90 	bl	8001520 <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5f 	bl	80014cc <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff35 	bl	8001494 <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b08b      	sub	sp, #44	; 0x2c
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e169      	b.n	8001934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001660:	2201      	movs	r2, #1
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	429a      	cmp	r2, r3
 800167a:	f040 8158 	bne.w	800192e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4a9a      	ldr	r2, [pc, #616]	; (80018ec <HAL_GPIO_Init+0x2a0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d05e      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 8001688:	4a98      	ldr	r2, [pc, #608]	; (80018ec <HAL_GPIO_Init+0x2a0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d875      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 800168e:	4a98      	ldr	r2, [pc, #608]	; (80018f0 <HAL_GPIO_Init+0x2a4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d058      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 8001694:	4a96      	ldr	r2, [pc, #600]	; (80018f0 <HAL_GPIO_Init+0x2a4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d86f      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 800169a:	4a96      	ldr	r2, [pc, #600]	; (80018f4 <HAL_GPIO_Init+0x2a8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d052      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016a0:	4a94      	ldr	r2, [pc, #592]	; (80018f4 <HAL_GPIO_Init+0x2a8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d869      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016a6:	4a94      	ldr	r2, [pc, #592]	; (80018f8 <HAL_GPIO_Init+0x2ac>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d04c      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016ac:	4a92      	ldr	r2, [pc, #584]	; (80018f8 <HAL_GPIO_Init+0x2ac>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d863      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016b2:	4a92      	ldr	r2, [pc, #584]	; (80018fc <HAL_GPIO_Init+0x2b0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d046      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016b8:	4a90      	ldr	r2, [pc, #576]	; (80018fc <HAL_GPIO_Init+0x2b0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d85d      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d82a      	bhi.n	8001718 <HAL_GPIO_Init+0xcc>
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d859      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016c6:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <HAL_GPIO_Init+0x80>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	08001747 	.word	0x08001747
 80016d0:	08001721 	.word	0x08001721
 80016d4:	08001733 	.word	0x08001733
 80016d8:	08001775 	.word	0x08001775
 80016dc:	0800177b 	.word	0x0800177b
 80016e0:	0800177b 	.word	0x0800177b
 80016e4:	0800177b 	.word	0x0800177b
 80016e8:	0800177b 	.word	0x0800177b
 80016ec:	0800177b 	.word	0x0800177b
 80016f0:	0800177b 	.word	0x0800177b
 80016f4:	0800177b 	.word	0x0800177b
 80016f8:	0800177b 	.word	0x0800177b
 80016fc:	0800177b 	.word	0x0800177b
 8001700:	0800177b 	.word	0x0800177b
 8001704:	0800177b 	.word	0x0800177b
 8001708:	0800177b 	.word	0x0800177b
 800170c:	0800177b 	.word	0x0800177b
 8001710:	08001729 	.word	0x08001729
 8001714:	0800173d 	.word	0x0800173d
 8001718:	4a79      	ldr	r2, [pc, #484]	; (8001900 <HAL_GPIO_Init+0x2b4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800171e:	e02c      	b.n	800177a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e029      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	3304      	adds	r3, #4
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e024      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	3308      	adds	r3, #8
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e01f      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	330c      	adds	r3, #12
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e01a      	b.n	800177c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174e:	2304      	movs	r3, #4
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e013      	b.n	800177c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	611a      	str	r2, [r3, #16]
          break;
 8001766:	e009      	b.n	800177c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001768:	2308      	movs	r3, #8
 800176a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	615a      	str	r2, [r3, #20]
          break;
 8001772:	e003      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x130>
          break;
 800177a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d801      	bhi.n	8001786 <HAL_GPIO_Init+0x13a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	e001      	b.n	800178a <HAL_GPIO_Init+0x13e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2bff      	cmp	r3, #255	; 0xff
 8001790:	d802      	bhi.n	8001798 <HAL_GPIO_Init+0x14c>
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	e002      	b.n	800179e <HAL_GPIO_Init+0x152>
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	3b08      	subs	r3, #8
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	210f      	movs	r1, #15
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	6a39      	ldr	r1, [r7, #32]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80b1 	beq.w	800192e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017cc:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <HAL_GPIO_Init+0x2b8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <HAL_GPIO_Init+0x2b8>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <HAL_GPIO_Init+0x2b8>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e4:	4a48      	ldr	r2, [pc, #288]	; (8001908 <HAL_GPIO_Init+0x2bc>)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a40      	ldr	r2, [pc, #256]	; (800190c <HAL_GPIO_Init+0x2c0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <HAL_GPIO_Init+0x1ec>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a3f      	ldr	r2, [pc, #252]	; (8001910 <HAL_GPIO_Init+0x2c4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00d      	beq.n	8001834 <HAL_GPIO_Init+0x1e8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3e      	ldr	r2, [pc, #248]	; (8001914 <HAL_GPIO_Init+0x2c8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x1e4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3d      	ldr	r2, [pc, #244]	; (8001918 <HAL_GPIO_Init+0x2cc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_GPIO_Init+0x1e0>
 8001828:	2303      	movs	r3, #3
 800182a:	e006      	b.n	800183a <HAL_GPIO_Init+0x1ee>
 800182c:	2304      	movs	r3, #4
 800182e:	e004      	b.n	800183a <HAL_GPIO_Init+0x1ee>
 8001830:	2302      	movs	r3, #2
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x1ee>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_GPIO_Init+0x1ee>
 8001838:	2300      	movs	r3, #0
 800183a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183c:	f002 0203 	and.w	r2, r2, #3
 8001840:	0092      	lsls	r2, r2, #2
 8001842:	4093      	lsls	r3, r2
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800184a:	492f      	ldr	r1, [pc, #188]	; (8001908 <HAL_GPIO_Init+0x2bc>)
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_GPIO_Init+0x2d0>)
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	492c      	ldr	r1, [pc, #176]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_GPIO_Init+0x2d0>)
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	43db      	mvns	r3, r3
 800187a:	4928      	ldr	r1, [pc, #160]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800187c:	4013      	ands	r3, r2
 800187e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	4922      	ldr	r1, [pc, #136]	; (800191c <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	491e      	ldr	r1, [pc, #120]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4914      	ldr	r1, [pc, #80]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d021      	beq.n	8001920 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	490e      	ldr	r1, [pc, #56]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e021      	b.n	800192e <HAL_GPIO_Init+0x2e2>
 80018ea:	bf00      	nop
 80018ec:	10320000 	.word	0x10320000
 80018f0:	10310000 	.word	0x10310000
 80018f4:	10220000 	.word	0x10220000
 80018f8:	10210000 	.word	0x10210000
 80018fc:	10120000 	.word	0x10120000
 8001900:	10110000 	.word	0x10110000
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000
 800190c:	40010800 	.word	0x40010800
 8001910:	40010c00 	.word	0x40010c00
 8001914:	40011000 	.word	0x40011000
 8001918:	40011400 	.word	0x40011400
 800191c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	43db      	mvns	r3, r3
 8001928:	4909      	ldr	r1, [pc, #36]	; (8001950 <HAL_GPIO_Init+0x304>)
 800192a:	4013      	ands	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	3301      	adds	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	fa22 f303 	lsr.w	r3, r2, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	f47f ae8e 	bne.w	8001660 <HAL_GPIO_Init+0x14>
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	372c      	adds	r7, #44	; 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	041a      	lsls	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	611a      	str	r2, [r3, #16]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e272      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8087 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a4:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d00c      	beq.n	80019ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b0:	4b8f      	ldr	r3, [pc, #572]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d112      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5e>
 80019bc:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d10b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d06c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x12c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d168      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e24c      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x76>
 80019ec:	4b80      	ldr	r3, [pc, #512]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a7f      	ldr	r2, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e02e      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x98>
 8001a02:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e01d      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0xbc>
 8001a26:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a71      	ldr	r2, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0xd4>
 8001a40:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7fe fffa 	bl	8000a58 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7fe fff6 	bl	8000a58 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e200      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0xe4>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7fe ffe6 	bl	8000a58 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7fe ffe2 	bl	8000a58 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1ec      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x10c>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d063      	beq.n	8001b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x18c>
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d116      	bne.n	8001b10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_RCC_OscConfig+0x176>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e1c0      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4939      	ldr	r1, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	e03a      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7fe ff9b 	bl	8000a58 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7fe ff97 	bl	8000a58 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1a1      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe ff7a 	bl	8000a58 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7fe ff76 	bl	8000a58 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e180      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d03a      	beq.n	8001c08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d019      	beq.n	8001bce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7fe ff5a 	bl	8000a58 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7fe ff56 	bl	8000a58 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e160      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 face 	bl	8002168 <RCC_Delay>
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7fe ff40 	bl	8000a58 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bda:	e00f      	b.n	8001bfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7fe ff3c 	bl	8000a58 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d908      	bls.n	8001bfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e146      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	42420000 	.word	0x42420000
 8001bf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e9      	bne.n	8001bdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a6 	beq.w	8001d62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b82      	ldr	r3, [pc, #520]	; (8001e4c <HAL_RCC_OscConfig+0x4c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x4c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7e      	ldr	r2, [pc, #504]	; (8001e4c <HAL_RCC_OscConfig+0x4c8>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7fe fefd 	bl	8000a58 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7fe fef9 	bl	8000a58 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e103      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <HAL_RCC_OscConfig+0x4c8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x312>
 8001c88:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6213      	str	r3, [r2, #32]
 8001c94:	e02d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x334>
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4a66      	ldr	r2, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6213      	str	r3, [r2, #32]
 8001cb6:	e01c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x356>
 8001cc0:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a60      	ldr	r2, [pc, #384]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4a5d      	ldr	r2, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6213      	str	r3, [r2, #32]
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x36e>
 8001cda:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a5a      	ldr	r2, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d015      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe fead 	bl	8000a58 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe fea9 	bl	8000a58 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0b1      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCC_OscConfig+0x37e>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7fe fe97 	bl	8000a58 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7fe fe93 	bl	8000a58 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e09b      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8087 	beq.w	8001e7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d061      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d146      	bne.n	8001e0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7fe fe67 	bl	8000a58 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7fe fe63 	bl	8000a58 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e06d      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d108      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	4921      	ldr	r1, [pc, #132]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a19      	ldr	r1, [r3, #32]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	491b      	ldr	r1, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe fe37 	bl	8000a58 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe fe33 	bl	8000a58 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e03d      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x46a>
 8001e0c:	e035      	b.n	8001e7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fe20 	bl	8000a58 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe fe1c 	bl	8000a58 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e026      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x498>
 8001e3a:	e01e      	b.n	8001e7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d107      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e019      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x500>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d0      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d115      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e073      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fd6e 	bl	8000a58 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7fe fd6a 	bl	8000a58 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e053      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d210      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4922      	ldr	r1, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490a      	ldr	r1, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fccc 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	08003fd0 	.word	0x08003fd0
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b04      	cmp	r3, #4
 8002084:	d002      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x30>
 8002086:	2b08      	cmp	r3, #8
 8002088:	d003      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x36>
 800208a:	e027      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800208e:	613b      	str	r3, [r7, #16]
      break;
 8002090:	e027      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0c9b      	lsrs	r3, r3, #18
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	0c5b      	lsrs	r3, r3, #17
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	4a11      	ldr	r2, [pc, #68]	; (80020fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020be:	fb03 f202 	mul.w	r2, r3, r2
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e004      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020d0:	fb02 f303 	mul.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	613b      	str	r3, [r7, #16]
      break;
 80020da:	e002      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020de:	613b      	str	r3, [r7, #16]
      break;
 80020e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e2:	693b      	ldr	r3, [r7, #16]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	007a1200 	.word	0x007a1200
 80020f8:	08003fe8 	.word	0x08003fe8
 80020fc:	08003ff8 	.word	0x08003ff8
 8002100:	003d0900 	.word	0x003d0900

08002104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <HAL_RCC_GetHCLKFreq+0x10>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20000000 	.word	0x20000000

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800211c:	f7ff fff2 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	08003fe0 	.word	0x08003fe0

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002144:	f7ff ffde 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0adb      	lsrs	r3, r3, #11
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	08003fe0 	.word	0x08003fe0

08002168 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <RCC_Delay+0x34>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <RCC_Delay+0x38>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a5b      	lsrs	r3, r3, #9
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002184:	bf00      	nop
  }
  while (Delay --);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e5a      	subs	r2, r3, #1
 800218a:	60fa      	str	r2, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f9      	bne.n	8002184 <RCC_Delay+0x1c>
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	20000000 	.word	0x20000000
 80021a0:	10624dd3 	.word	0x10624dd3

080021a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d07d      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c4:	4b4f      	ldr	r3, [pc, #316]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10d      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021da:	61d3      	str	r3, [r2, #28]
 80021dc:	4b49      	ldr	r3, [pc, #292]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e8:	2301      	movs	r3, #1
 80021ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d118      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a42      	ldr	r2, [pc, #264]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002202:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002204:	f7fe fc28 	bl	8000a58 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	e008      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220c:	f7fe fc24 	bl	8000a58 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e06d      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002232:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d02e      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d027      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002250:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800225e:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d014      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fbf3 	bl	8000a58 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe fbef 	bl	8000a58 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e036      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ee      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4917      	ldr	r1, [pc, #92]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4a13      	ldr	r2, [pc, #76]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	490b      	ldr	r1, [pc, #44]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4904      	ldr	r1, [pc, #16]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	42420440 	.word	0x42420440

08002310 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b10      	cmp	r3, #16
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b10      	cmp	r3, #16
 8002336:	f200 808a 	bhi.w	800244e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d045      	beq.n	80023cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d075      	beq.n	8002432 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002346:	e082      	b.n	800244e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800234e:	4b45      	ldr	r3, [pc, #276]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d07b      	beq.n	8002452 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	0c9b      	lsrs	r3, r3, #18
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a41      	ldr	r2, [pc, #260]	; (8002468 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d015      	beq.n	800239e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002372:	4b3c      	ldr	r3, [pc, #240]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0c5b      	lsrs	r3, r3, #17
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	4a3b      	ldr	r2, [pc, #236]	; (800246c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00d      	beq.n	80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fbb2 f2f3 	udiv	r2, r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	e004      	b.n	80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4a34      	ldr	r2, [pc, #208]	; (8002474 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80023a8:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b4:	d102      	bne.n	80023bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	61bb      	str	r3, [r7, #24]
      break;
 80023ba:	e04a      	b.n	8002452 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4a2d      	ldr	r2, [pc, #180]	; (8002478 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	085b      	lsrs	r3, r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
      break;
 80023ca:	e042      	b.n	8002452 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023dc:	d108      	bne.n	80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80023e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	e01f      	b.n	8002430 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fa:	d109      	bne.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002408:	f649 4340 	movw	r3, #40000	; 0x9c40
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e00f      	b.n	8002430 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800241a:	d11c      	bne.n	8002456 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d016      	beq.n	8002456 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002428:	f24f 4324 	movw	r3, #62500	; 0xf424
 800242c:	61bb      	str	r3, [r7, #24]
      break;
 800242e:	e012      	b.n	8002456 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002430:	e011      	b.n	8002456 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002432:	f7ff fe85 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0b9b      	lsrs	r3, r3, #14
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	3301      	adds	r3, #1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	61bb      	str	r3, [r7, #24]
      break;
 800244c:	e004      	b.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800244e:	bf00      	nop
 8002450:	e002      	b.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002456:	bf00      	nop
    }
  }
  return (frequency);
 8002458:	69bb      	ldr	r3, [r7, #24]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	08003ffc 	.word	0x08003ffc
 800246c:	0800400c 	.word	0x0800400c
 8002470:	007a1200 	.word	0x007a1200
 8002474:	003d0900 	.word	0x003d0900
 8002478:	aaaaaaab 	.word	0xaaaaaaab

0800247c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e041      	b.n	8002512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7fe f914 	bl	80006d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f000 fa74 	bl	80029a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d001      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e03a      	b.n	80025aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_TIM_Base_Start_IT+0x98>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255e:	d009      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_TIM_Base_Start_IT+0xa0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d111      	bne.n	8002598 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d010      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002596:	e007      	b.n	80025a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40000800 	.word	0x40000800

080025c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d122      	bne.n	800261c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d11b      	bne.n	800261c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0202 	mvn.w	r2, #2
 80025ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f9b4 	bl	8002970 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f9a7 	bl	800295e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f9b6 	bl	8002982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b04      	cmp	r3, #4
 8002628:	d122      	bne.n	8002670 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b04      	cmp	r3, #4
 8002636:	d11b      	bne.n	8002670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0204 	mvn.w	r2, #4
 8002640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f98a 	bl	8002970 <HAL_TIM_IC_CaptureCallback>
 800265c:	e005      	b.n	800266a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f97d 	bl	800295e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f98c 	bl	8002982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b08      	cmp	r3, #8
 800267c:	d122      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b08      	cmp	r3, #8
 800268a:	d11b      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0208 	mvn.w	r2, #8
 8002694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2204      	movs	r2, #4
 800269a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f960 	bl	8002970 <HAL_TIM_IC_CaptureCallback>
 80026b0:	e005      	b.n	80026be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f953 	bl	800295e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f962 	bl	8002982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d122      	bne.n	8002718 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d11b      	bne.n	8002718 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0210 	mvn.w	r2, #16
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2208      	movs	r2, #8
 80026ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f936 	bl	8002970 <HAL_TIM_IC_CaptureCallback>
 8002704:	e005      	b.n	8002712 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f929 	bl	800295e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f938 	bl	8002982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d10e      	bne.n	8002744 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0201 	mvn.w	r2, #1
 800273c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fd fec8 	bl	80004d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274e:	2b80      	cmp	r3, #128	; 0x80
 8002750:	d10e      	bne.n	8002770 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275c:	2b80      	cmp	r3, #128	; 0x80
 800275e:	d107      	bne.n	8002770 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa7b 	bl	8002c66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d10e      	bne.n	800279c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d107      	bne.n	800279c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f8fc 	bl	8002994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d10e      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d107      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0220 	mvn.w	r2, #32
 80027c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa46 	bl	8002c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIM_ConfigClockSource+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0b4      	b.n	8002956 <HAL_TIM_ConfigClockSource+0x186>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800280a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002824:	d03e      	beq.n	80028a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282a:	f200 8087 	bhi.w	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	f000 8086 	beq.w	8002942 <HAL_TIM_ConfigClockSource+0x172>
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283a:	d87f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d01a      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xa6>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d87b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d050      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0x11a>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d877      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d03c      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xfa>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d873      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d058      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x13a>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d86f      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d064      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d86b      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d060      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d867      	bhi.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05c      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	2b10      	cmp	r3, #16
 8002872:	d05a      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	e062      	b.n	800293c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f000 f968 	bl	8002b5a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	609a      	str	r2, [r3, #8]
      break;
 80028a2:	e04f      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f000 f951 	bl	8002b5a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c6:	609a      	str	r2, [r3, #8]
      break;
 80028c8:	e03c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f000 f8c8 	bl	8002a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2150      	movs	r1, #80	; 0x50
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f91f 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 80028e8:	e02c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 f8e6 	bl	8002ac8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2160      	movs	r1, #96	; 0x60
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f90f 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 8002908:	e01c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	461a      	mov	r2, r3
 8002918:	f000 f8a8 	bl	8002a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f8ff 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 8002928:	e00c      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f000 f8f6 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 800293a:	e003      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e000      	b.n	8002944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
	...

080029a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <TIM_Base_SetConfig+0xb8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00b      	beq.n	80029d8 <TIM_Base_SetConfig+0x30>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c6:	d007      	beq.n	80029d8 <TIM_Base_SetConfig+0x30>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <TIM_Base_SetConfig+0xbc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_Base_SetConfig+0x30>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <TIM_Base_SetConfig+0xc0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d108      	bne.n	80029ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <TIM_Base_SetConfig+0xb8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00b      	beq.n	8002a0a <TIM_Base_SetConfig+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d007      	beq.n	8002a0a <TIM_Base_SetConfig+0x62>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <TIM_Base_SetConfig+0xbc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d003      	beq.n	8002a0a <TIM_Base_SetConfig+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <TIM_Base_SetConfig+0xc0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d108      	bne.n	8002a1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <TIM_Base_SetConfig+0xb8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d103      	bne.n	8002a50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	615a      	str	r2, [r3, #20]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	40012c00 	.word	0x40012c00
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40000800 	.word	0x40000800

08002a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0201 	bic.w	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 030a 	bic.w	r3, r3, #10
 8002aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0210 	bic.w	r2, r3, #16
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	031b      	lsls	r3, r3, #12
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	621a      	str	r2, [r3, #32]
}
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f043 0307 	orr.w	r3, r3, #7
 8002b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b087      	sub	sp, #28
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	021a      	lsls	r2, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	609a      	str	r2, [r3, #8]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e046      	b.n	8002c3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00e      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfc:	d009      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10c      	bne.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800

08002c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e042      	b.n	8002d10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fd fd3a 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2224      	movs	r2, #36	; 0x24
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f91d 	bl	8002efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d16d      	bne.n	8002e14 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_UART_Transmit+0x2c>
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e066      	b.n	8002e16 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2221      	movs	r2, #33	; 0x21
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d56:	f7fd fe7f 	bl	8000a58 <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	88fa      	ldrh	r2, [r7, #6]
 8002d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	88fa      	ldrh	r2, [r7, #6]
 8002d66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d70:	d108      	bne.n	8002d84 <HAL_UART_Transmit+0x6c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	e003      	b.n	8002d8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d8c:	e02a      	b.n	8002de4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f840 	bl	8002e1e <UART_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e036      	b.n	8002e16 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e007      	b.n	8002dd6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1cf      	bne.n	8002d8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2140      	movs	r1, #64	; 0x40
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f810 	bl	8002e1e <UART_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e006      	b.n	8002e16 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b090      	sub	sp, #64	; 0x40
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2e:	e050      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d04c      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e3e:	f7fd fe0b 	bl	8000a58 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d241      	bcs.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e6e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e5      	bne.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3314      	adds	r3, #20
 8002e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	613b      	str	r3, [r7, #16]
   return(result);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ea2:	623a      	str	r2, [r7, #32]
 8002ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	69f9      	ldr	r1, [r7, #28]
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e5      	bne.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e00f      	b.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4013      	ands	r3, r2
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d09f      	beq.n	8002e30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3740      	adds	r7, #64	; 0x40
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f36:	f023 030c 	bic.w	r3, r3, #12
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2c      	ldr	r2, [pc, #176]	; (8003010 <UART_SetConfig+0x114>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f64:	f7ff f8ec 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	e002      	b.n	8002f72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f7ff f8d4 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002f70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009a      	lsls	r2, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	4a22      	ldr	r2, [pc, #136]	; (8003014 <UART_SetConfig+0x118>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	0119      	lsls	r1, r3, #4
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009a      	lsls	r2, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <UART_SetConfig+0x118>)
 8002faa:	fba3 0302 	umull	r0, r3, r3, r2
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2064      	movs	r0, #100	; 0x64
 8002fb2:	fb00 f303 	mul.w	r3, r0, r3
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	3332      	adds	r3, #50	; 0x32
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <UART_SetConfig+0x118>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc8:	4419      	add	r1, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009a      	lsls	r2, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <UART_SetConfig+0x118>)
 8002fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	2064      	movs	r0, #100	; 0x64
 8002fea:	fb00 f303 	mul.w	r3, r0, r3
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	3332      	adds	r3, #50	; 0x32
 8002ff4:	4a07      	ldr	r2, [pc, #28]	; (8003014 <UART_SetConfig+0x118>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	f003 020f 	and.w	r2, r3, #15
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	440a      	add	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40013800 	.word	0x40013800
 8003014:	51eb851f 	.word	0x51eb851f

08003018 <__errno>:
 8003018:	4b01      	ldr	r3, [pc, #4]	; (8003020 <__errno+0x8>)
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	2000000c 	.word	0x2000000c

08003024 <__libc_init_array>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	2600      	movs	r6, #0
 8003028:	4d0c      	ldr	r5, [pc, #48]	; (800305c <__libc_init_array+0x38>)
 800302a:	4c0d      	ldr	r4, [pc, #52]	; (8003060 <__libc_init_array+0x3c>)
 800302c:	1b64      	subs	r4, r4, r5
 800302e:	10a4      	asrs	r4, r4, #2
 8003030:	42a6      	cmp	r6, r4
 8003032:	d109      	bne.n	8003048 <__libc_init_array+0x24>
 8003034:	f000 ffb6 	bl	8003fa4 <_init>
 8003038:	2600      	movs	r6, #0
 800303a:	4d0a      	ldr	r5, [pc, #40]	; (8003064 <__libc_init_array+0x40>)
 800303c:	4c0a      	ldr	r4, [pc, #40]	; (8003068 <__libc_init_array+0x44>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	42a6      	cmp	r6, r4
 8003044:	d105      	bne.n	8003052 <__libc_init_array+0x2e>
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	f855 3b04 	ldr.w	r3, [r5], #4
 800304c:	4798      	blx	r3
 800304e:	3601      	adds	r6, #1
 8003050:	e7ee      	b.n	8003030 <__libc_init_array+0xc>
 8003052:	f855 3b04 	ldr.w	r3, [r5], #4
 8003056:	4798      	blx	r3
 8003058:	3601      	adds	r6, #1
 800305a:	e7f2      	b.n	8003042 <__libc_init_array+0x1e>
 800305c:	080040a8 	.word	0x080040a8
 8003060:	080040a8 	.word	0x080040a8
 8003064:	080040a8 	.word	0x080040a8
 8003068:	080040ac 	.word	0x080040ac

0800306c <memset>:
 800306c:	4603      	mov	r3, r0
 800306e:	4402      	add	r2, r0
 8003070:	4293      	cmp	r3, r2
 8003072:	d100      	bne.n	8003076 <memset+0xa>
 8003074:	4770      	bx	lr
 8003076:	f803 1b01 	strb.w	r1, [r3], #1
 800307a:	e7f9      	b.n	8003070 <memset+0x4>

0800307c <iprintf>:
 800307c:	b40f      	push	{r0, r1, r2, r3}
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <iprintf+0x2c>)
 8003080:	b513      	push	{r0, r1, r4, lr}
 8003082:	681c      	ldr	r4, [r3, #0]
 8003084:	b124      	cbz	r4, 8003090 <iprintf+0x14>
 8003086:	69a3      	ldr	r3, [r4, #24]
 8003088:	b913      	cbnz	r3, 8003090 <iprintf+0x14>
 800308a:	4620      	mov	r0, r4
 800308c:	f000 f866 	bl	800315c <__sinit>
 8003090:	ab05      	add	r3, sp, #20
 8003092:	4620      	mov	r0, r4
 8003094:	9a04      	ldr	r2, [sp, #16]
 8003096:	68a1      	ldr	r1, [r4, #8]
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	f000 f9bb 	bl	8003414 <_vfiprintf_r>
 800309e:	b002      	add	sp, #8
 80030a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030a4:	b004      	add	sp, #16
 80030a6:	4770      	bx	lr
 80030a8:	2000000c 	.word	0x2000000c

080030ac <std>:
 80030ac:	2300      	movs	r3, #0
 80030ae:	b510      	push	{r4, lr}
 80030b0:	4604      	mov	r4, r0
 80030b2:	e9c0 3300 	strd	r3, r3, [r0]
 80030b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ba:	6083      	str	r3, [r0, #8]
 80030bc:	8181      	strh	r1, [r0, #12]
 80030be:	6643      	str	r3, [r0, #100]	; 0x64
 80030c0:	81c2      	strh	r2, [r0, #14]
 80030c2:	6183      	str	r3, [r0, #24]
 80030c4:	4619      	mov	r1, r3
 80030c6:	2208      	movs	r2, #8
 80030c8:	305c      	adds	r0, #92	; 0x5c
 80030ca:	f7ff ffcf 	bl	800306c <memset>
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <std+0x38>)
 80030d0:	6224      	str	r4, [r4, #32]
 80030d2:	6263      	str	r3, [r4, #36]	; 0x24
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <std+0x3c>)
 80030d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <std+0x40>)
 80030da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <std+0x44>)
 80030de:	6323      	str	r3, [r4, #48]	; 0x30
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	bf00      	nop
 80030e4:	080039c1 	.word	0x080039c1
 80030e8:	080039e3 	.word	0x080039e3
 80030ec:	08003a1b 	.word	0x08003a1b
 80030f0:	08003a3f 	.word	0x08003a3f

080030f4 <_cleanup_r>:
 80030f4:	4901      	ldr	r1, [pc, #4]	; (80030fc <_cleanup_r+0x8>)
 80030f6:	f000 b8af 	b.w	8003258 <_fwalk_reent>
 80030fa:	bf00      	nop
 80030fc:	08003d11 	.word	0x08003d11

08003100 <__sfmoreglue>:
 8003100:	2268      	movs	r2, #104	; 0x68
 8003102:	b570      	push	{r4, r5, r6, lr}
 8003104:	1e4d      	subs	r5, r1, #1
 8003106:	4355      	muls	r5, r2
 8003108:	460e      	mov	r6, r1
 800310a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800310e:	f000 f8e5 	bl	80032dc <_malloc_r>
 8003112:	4604      	mov	r4, r0
 8003114:	b140      	cbz	r0, 8003128 <__sfmoreglue+0x28>
 8003116:	2100      	movs	r1, #0
 8003118:	e9c0 1600 	strd	r1, r6, [r0]
 800311c:	300c      	adds	r0, #12
 800311e:	60a0      	str	r0, [r4, #8]
 8003120:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003124:	f7ff ffa2 	bl	800306c <memset>
 8003128:	4620      	mov	r0, r4
 800312a:	bd70      	pop	{r4, r5, r6, pc}

0800312c <__sfp_lock_acquire>:
 800312c:	4801      	ldr	r0, [pc, #4]	; (8003134 <__sfp_lock_acquire+0x8>)
 800312e:	f000 b8b3 	b.w	8003298 <__retarget_lock_acquire_recursive>
 8003132:	bf00      	nop
 8003134:	20000169 	.word	0x20000169

08003138 <__sfp_lock_release>:
 8003138:	4801      	ldr	r0, [pc, #4]	; (8003140 <__sfp_lock_release+0x8>)
 800313a:	f000 b8ae 	b.w	800329a <__retarget_lock_release_recursive>
 800313e:	bf00      	nop
 8003140:	20000169 	.word	0x20000169

08003144 <__sinit_lock_acquire>:
 8003144:	4801      	ldr	r0, [pc, #4]	; (800314c <__sinit_lock_acquire+0x8>)
 8003146:	f000 b8a7 	b.w	8003298 <__retarget_lock_acquire_recursive>
 800314a:	bf00      	nop
 800314c:	2000016a 	.word	0x2000016a

08003150 <__sinit_lock_release>:
 8003150:	4801      	ldr	r0, [pc, #4]	; (8003158 <__sinit_lock_release+0x8>)
 8003152:	f000 b8a2 	b.w	800329a <__retarget_lock_release_recursive>
 8003156:	bf00      	nop
 8003158:	2000016a 	.word	0x2000016a

0800315c <__sinit>:
 800315c:	b510      	push	{r4, lr}
 800315e:	4604      	mov	r4, r0
 8003160:	f7ff fff0 	bl	8003144 <__sinit_lock_acquire>
 8003164:	69a3      	ldr	r3, [r4, #24]
 8003166:	b11b      	cbz	r3, 8003170 <__sinit+0x14>
 8003168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800316c:	f7ff bff0 	b.w	8003150 <__sinit_lock_release>
 8003170:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003174:	6523      	str	r3, [r4, #80]	; 0x50
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <__sinit+0x68>)
 8003178:	4a13      	ldr	r2, [pc, #76]	; (80031c8 <__sinit+0x6c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	62a2      	str	r2, [r4, #40]	; 0x28
 800317e:	42a3      	cmp	r3, r4
 8003180:	bf08      	it	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	4620      	mov	r0, r4
 8003186:	bf08      	it	eq
 8003188:	61a3      	streq	r3, [r4, #24]
 800318a:	f000 f81f 	bl	80031cc <__sfp>
 800318e:	6060      	str	r0, [r4, #4]
 8003190:	4620      	mov	r0, r4
 8003192:	f000 f81b 	bl	80031cc <__sfp>
 8003196:	60a0      	str	r0, [r4, #8]
 8003198:	4620      	mov	r0, r4
 800319a:	f000 f817 	bl	80031cc <__sfp>
 800319e:	2200      	movs	r2, #0
 80031a0:	2104      	movs	r1, #4
 80031a2:	60e0      	str	r0, [r4, #12]
 80031a4:	6860      	ldr	r0, [r4, #4]
 80031a6:	f7ff ff81 	bl	80030ac <std>
 80031aa:	2201      	movs	r2, #1
 80031ac:	2109      	movs	r1, #9
 80031ae:	68a0      	ldr	r0, [r4, #8]
 80031b0:	f7ff ff7c 	bl	80030ac <std>
 80031b4:	2202      	movs	r2, #2
 80031b6:	2112      	movs	r1, #18
 80031b8:	68e0      	ldr	r0, [r4, #12]
 80031ba:	f7ff ff77 	bl	80030ac <std>
 80031be:	2301      	movs	r3, #1
 80031c0:	61a3      	str	r3, [r4, #24]
 80031c2:	e7d1      	b.n	8003168 <__sinit+0xc>
 80031c4:	08004010 	.word	0x08004010
 80031c8:	080030f5 	.word	0x080030f5

080031cc <__sfp>:
 80031cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ce:	4607      	mov	r7, r0
 80031d0:	f7ff ffac 	bl	800312c <__sfp_lock_acquire>
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <__sfp+0x84>)
 80031d6:	681e      	ldr	r6, [r3, #0]
 80031d8:	69b3      	ldr	r3, [r6, #24]
 80031da:	b913      	cbnz	r3, 80031e2 <__sfp+0x16>
 80031dc:	4630      	mov	r0, r6
 80031de:	f7ff ffbd 	bl	800315c <__sinit>
 80031e2:	3648      	adds	r6, #72	; 0x48
 80031e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	d503      	bpl.n	80031f4 <__sfp+0x28>
 80031ec:	6833      	ldr	r3, [r6, #0]
 80031ee:	b30b      	cbz	r3, 8003234 <__sfp+0x68>
 80031f0:	6836      	ldr	r6, [r6, #0]
 80031f2:	e7f7      	b.n	80031e4 <__sfp+0x18>
 80031f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031f8:	b9d5      	cbnz	r5, 8003230 <__sfp+0x64>
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <__sfp+0x88>)
 80031fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003200:	60e3      	str	r3, [r4, #12]
 8003202:	6665      	str	r5, [r4, #100]	; 0x64
 8003204:	f000 f847 	bl	8003296 <__retarget_lock_init_recursive>
 8003208:	f7ff ff96 	bl	8003138 <__sfp_lock_release>
 800320c:	2208      	movs	r2, #8
 800320e:	4629      	mov	r1, r5
 8003210:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003214:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003218:	6025      	str	r5, [r4, #0]
 800321a:	61a5      	str	r5, [r4, #24]
 800321c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003220:	f7ff ff24 	bl	800306c <memset>
 8003224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003228:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800322c:	4620      	mov	r0, r4
 800322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003230:	3468      	adds	r4, #104	; 0x68
 8003232:	e7d9      	b.n	80031e8 <__sfp+0x1c>
 8003234:	2104      	movs	r1, #4
 8003236:	4638      	mov	r0, r7
 8003238:	f7ff ff62 	bl	8003100 <__sfmoreglue>
 800323c:	4604      	mov	r4, r0
 800323e:	6030      	str	r0, [r6, #0]
 8003240:	2800      	cmp	r0, #0
 8003242:	d1d5      	bne.n	80031f0 <__sfp+0x24>
 8003244:	f7ff ff78 	bl	8003138 <__sfp_lock_release>
 8003248:	230c      	movs	r3, #12
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	e7ee      	b.n	800322c <__sfp+0x60>
 800324e:	bf00      	nop
 8003250:	08004010 	.word	0x08004010
 8003254:	ffff0001 	.word	0xffff0001

08003258 <_fwalk_reent>:
 8003258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800325c:	4606      	mov	r6, r0
 800325e:	4688      	mov	r8, r1
 8003260:	2700      	movs	r7, #0
 8003262:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003266:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800326a:	f1b9 0901 	subs.w	r9, r9, #1
 800326e:	d505      	bpl.n	800327c <_fwalk_reent+0x24>
 8003270:	6824      	ldr	r4, [r4, #0]
 8003272:	2c00      	cmp	r4, #0
 8003274:	d1f7      	bne.n	8003266 <_fwalk_reent+0xe>
 8003276:	4638      	mov	r0, r7
 8003278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800327c:	89ab      	ldrh	r3, [r5, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d907      	bls.n	8003292 <_fwalk_reent+0x3a>
 8003282:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003286:	3301      	adds	r3, #1
 8003288:	d003      	beq.n	8003292 <_fwalk_reent+0x3a>
 800328a:	4629      	mov	r1, r5
 800328c:	4630      	mov	r0, r6
 800328e:	47c0      	blx	r8
 8003290:	4307      	orrs	r7, r0
 8003292:	3568      	adds	r5, #104	; 0x68
 8003294:	e7e9      	b.n	800326a <_fwalk_reent+0x12>

08003296 <__retarget_lock_init_recursive>:
 8003296:	4770      	bx	lr

08003298 <__retarget_lock_acquire_recursive>:
 8003298:	4770      	bx	lr

0800329a <__retarget_lock_release_recursive>:
 800329a:	4770      	bx	lr

0800329c <sbrk_aligned>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4e0e      	ldr	r6, [pc, #56]	; (80032d8 <sbrk_aligned+0x3c>)
 80032a0:	460c      	mov	r4, r1
 80032a2:	6831      	ldr	r1, [r6, #0]
 80032a4:	4605      	mov	r5, r0
 80032a6:	b911      	cbnz	r1, 80032ae <sbrk_aligned+0x12>
 80032a8:	f000 fb7a 	bl	80039a0 <_sbrk_r>
 80032ac:	6030      	str	r0, [r6, #0]
 80032ae:	4621      	mov	r1, r4
 80032b0:	4628      	mov	r0, r5
 80032b2:	f000 fb75 	bl	80039a0 <_sbrk_r>
 80032b6:	1c43      	adds	r3, r0, #1
 80032b8:	d00a      	beq.n	80032d0 <sbrk_aligned+0x34>
 80032ba:	1cc4      	adds	r4, r0, #3
 80032bc:	f024 0403 	bic.w	r4, r4, #3
 80032c0:	42a0      	cmp	r0, r4
 80032c2:	d007      	beq.n	80032d4 <sbrk_aligned+0x38>
 80032c4:	1a21      	subs	r1, r4, r0
 80032c6:	4628      	mov	r0, r5
 80032c8:	f000 fb6a 	bl	80039a0 <_sbrk_r>
 80032cc:	3001      	adds	r0, #1
 80032ce:	d101      	bne.n	80032d4 <sbrk_aligned+0x38>
 80032d0:	f04f 34ff 	mov.w	r4, #4294967295
 80032d4:	4620      	mov	r0, r4
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	20000170 	.word	0x20000170

080032dc <_malloc_r>:
 80032dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e0:	1ccd      	adds	r5, r1, #3
 80032e2:	f025 0503 	bic.w	r5, r5, #3
 80032e6:	3508      	adds	r5, #8
 80032e8:	2d0c      	cmp	r5, #12
 80032ea:	bf38      	it	cc
 80032ec:	250c      	movcc	r5, #12
 80032ee:	2d00      	cmp	r5, #0
 80032f0:	4607      	mov	r7, r0
 80032f2:	db01      	blt.n	80032f8 <_malloc_r+0x1c>
 80032f4:	42a9      	cmp	r1, r5
 80032f6:	d905      	bls.n	8003304 <_malloc_r+0x28>
 80032f8:	230c      	movs	r3, #12
 80032fa:	2600      	movs	r6, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4630      	mov	r0, r6
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	4e2e      	ldr	r6, [pc, #184]	; (80033c0 <_malloc_r+0xe4>)
 8003306:	f000 fdc5 	bl	8003e94 <__malloc_lock>
 800330a:	6833      	ldr	r3, [r6, #0]
 800330c:	461c      	mov	r4, r3
 800330e:	bb34      	cbnz	r4, 800335e <_malloc_r+0x82>
 8003310:	4629      	mov	r1, r5
 8003312:	4638      	mov	r0, r7
 8003314:	f7ff ffc2 	bl	800329c <sbrk_aligned>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	4604      	mov	r4, r0
 800331c:	d14d      	bne.n	80033ba <_malloc_r+0xde>
 800331e:	6834      	ldr	r4, [r6, #0]
 8003320:	4626      	mov	r6, r4
 8003322:	2e00      	cmp	r6, #0
 8003324:	d140      	bne.n	80033a8 <_malloc_r+0xcc>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	4631      	mov	r1, r6
 800332a:	4638      	mov	r0, r7
 800332c:	eb04 0803 	add.w	r8, r4, r3
 8003330:	f000 fb36 	bl	80039a0 <_sbrk_r>
 8003334:	4580      	cmp	r8, r0
 8003336:	d13a      	bne.n	80033ae <_malloc_r+0xd2>
 8003338:	6821      	ldr	r1, [r4, #0]
 800333a:	3503      	adds	r5, #3
 800333c:	1a6d      	subs	r5, r5, r1
 800333e:	f025 0503 	bic.w	r5, r5, #3
 8003342:	3508      	adds	r5, #8
 8003344:	2d0c      	cmp	r5, #12
 8003346:	bf38      	it	cc
 8003348:	250c      	movcc	r5, #12
 800334a:	4638      	mov	r0, r7
 800334c:	4629      	mov	r1, r5
 800334e:	f7ff ffa5 	bl	800329c <sbrk_aligned>
 8003352:	3001      	adds	r0, #1
 8003354:	d02b      	beq.n	80033ae <_malloc_r+0xd2>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	442b      	add	r3, r5
 800335a:	6023      	str	r3, [r4, #0]
 800335c:	e00e      	b.n	800337c <_malloc_r+0xa0>
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	1b52      	subs	r2, r2, r5
 8003362:	d41e      	bmi.n	80033a2 <_malloc_r+0xc6>
 8003364:	2a0b      	cmp	r2, #11
 8003366:	d916      	bls.n	8003396 <_malloc_r+0xba>
 8003368:	1961      	adds	r1, r4, r5
 800336a:	42a3      	cmp	r3, r4
 800336c:	6025      	str	r5, [r4, #0]
 800336e:	bf18      	it	ne
 8003370:	6059      	strne	r1, [r3, #4]
 8003372:	6863      	ldr	r3, [r4, #4]
 8003374:	bf08      	it	eq
 8003376:	6031      	streq	r1, [r6, #0]
 8003378:	5162      	str	r2, [r4, r5]
 800337a:	604b      	str	r3, [r1, #4]
 800337c:	4638      	mov	r0, r7
 800337e:	f104 060b 	add.w	r6, r4, #11
 8003382:	f000 fd8d 	bl	8003ea0 <__malloc_unlock>
 8003386:	f026 0607 	bic.w	r6, r6, #7
 800338a:	1d23      	adds	r3, r4, #4
 800338c:	1af2      	subs	r2, r6, r3
 800338e:	d0b6      	beq.n	80032fe <_malloc_r+0x22>
 8003390:	1b9b      	subs	r3, r3, r6
 8003392:	50a3      	str	r3, [r4, r2]
 8003394:	e7b3      	b.n	80032fe <_malloc_r+0x22>
 8003396:	6862      	ldr	r2, [r4, #4]
 8003398:	42a3      	cmp	r3, r4
 800339a:	bf0c      	ite	eq
 800339c:	6032      	streq	r2, [r6, #0]
 800339e:	605a      	strne	r2, [r3, #4]
 80033a0:	e7ec      	b.n	800337c <_malloc_r+0xa0>
 80033a2:	4623      	mov	r3, r4
 80033a4:	6864      	ldr	r4, [r4, #4]
 80033a6:	e7b2      	b.n	800330e <_malloc_r+0x32>
 80033a8:	4634      	mov	r4, r6
 80033aa:	6876      	ldr	r6, [r6, #4]
 80033ac:	e7b9      	b.n	8003322 <_malloc_r+0x46>
 80033ae:	230c      	movs	r3, #12
 80033b0:	4638      	mov	r0, r7
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	f000 fd74 	bl	8003ea0 <__malloc_unlock>
 80033b8:	e7a1      	b.n	80032fe <_malloc_r+0x22>
 80033ba:	6025      	str	r5, [r4, #0]
 80033bc:	e7de      	b.n	800337c <_malloc_r+0xa0>
 80033be:	bf00      	nop
 80033c0:	2000016c 	.word	0x2000016c

080033c4 <__sfputc_r>:
 80033c4:	6893      	ldr	r3, [r2, #8]
 80033c6:	b410      	push	{r4}
 80033c8:	3b01      	subs	r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	6093      	str	r3, [r2, #8]
 80033ce:	da07      	bge.n	80033e0 <__sfputc_r+0x1c>
 80033d0:	6994      	ldr	r4, [r2, #24]
 80033d2:	42a3      	cmp	r3, r4
 80033d4:	db01      	blt.n	80033da <__sfputc_r+0x16>
 80033d6:	290a      	cmp	r1, #10
 80033d8:	d102      	bne.n	80033e0 <__sfputc_r+0x1c>
 80033da:	bc10      	pop	{r4}
 80033dc:	f000 bb34 	b.w	8003a48 <__swbuf_r>
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	1c58      	adds	r0, r3, #1
 80033e4:	6010      	str	r0, [r2, #0]
 80033e6:	7019      	strb	r1, [r3, #0]
 80033e8:	4608      	mov	r0, r1
 80033ea:	bc10      	pop	{r4}
 80033ec:	4770      	bx	lr

080033ee <__sfputs_r>:
 80033ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f0:	4606      	mov	r6, r0
 80033f2:	460f      	mov	r7, r1
 80033f4:	4614      	mov	r4, r2
 80033f6:	18d5      	adds	r5, r2, r3
 80033f8:	42ac      	cmp	r4, r5
 80033fa:	d101      	bne.n	8003400 <__sfputs_r+0x12>
 80033fc:	2000      	movs	r0, #0
 80033fe:	e007      	b.n	8003410 <__sfputs_r+0x22>
 8003400:	463a      	mov	r2, r7
 8003402:	4630      	mov	r0, r6
 8003404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003408:	f7ff ffdc 	bl	80033c4 <__sfputc_r>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d1f3      	bne.n	80033f8 <__sfputs_r+0xa>
 8003410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003414 <_vfiprintf_r>:
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	460d      	mov	r5, r1
 800341a:	4614      	mov	r4, r2
 800341c:	4698      	mov	r8, r3
 800341e:	4606      	mov	r6, r0
 8003420:	b09d      	sub	sp, #116	; 0x74
 8003422:	b118      	cbz	r0, 800342c <_vfiprintf_r+0x18>
 8003424:	6983      	ldr	r3, [r0, #24]
 8003426:	b90b      	cbnz	r3, 800342c <_vfiprintf_r+0x18>
 8003428:	f7ff fe98 	bl	800315c <__sinit>
 800342c:	4b89      	ldr	r3, [pc, #548]	; (8003654 <_vfiprintf_r+0x240>)
 800342e:	429d      	cmp	r5, r3
 8003430:	d11b      	bne.n	800346a <_vfiprintf_r+0x56>
 8003432:	6875      	ldr	r5, [r6, #4]
 8003434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003436:	07d9      	lsls	r1, r3, #31
 8003438:	d405      	bmi.n	8003446 <_vfiprintf_r+0x32>
 800343a:	89ab      	ldrh	r3, [r5, #12]
 800343c:	059a      	lsls	r2, r3, #22
 800343e:	d402      	bmi.n	8003446 <_vfiprintf_r+0x32>
 8003440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003442:	f7ff ff29 	bl	8003298 <__retarget_lock_acquire_recursive>
 8003446:	89ab      	ldrh	r3, [r5, #12]
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	d501      	bpl.n	8003450 <_vfiprintf_r+0x3c>
 800344c:	692b      	ldr	r3, [r5, #16]
 800344e:	b9eb      	cbnz	r3, 800348c <_vfiprintf_r+0x78>
 8003450:	4629      	mov	r1, r5
 8003452:	4630      	mov	r0, r6
 8003454:	f000 fb5c 	bl	8003b10 <__swsetup_r>
 8003458:	b1c0      	cbz	r0, 800348c <_vfiprintf_r+0x78>
 800345a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800345c:	07dc      	lsls	r4, r3, #31
 800345e:	d50e      	bpl.n	800347e <_vfiprintf_r+0x6a>
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	b01d      	add	sp, #116	; 0x74
 8003466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346a:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <_vfiprintf_r+0x244>)
 800346c:	429d      	cmp	r5, r3
 800346e:	d101      	bne.n	8003474 <_vfiprintf_r+0x60>
 8003470:	68b5      	ldr	r5, [r6, #8]
 8003472:	e7df      	b.n	8003434 <_vfiprintf_r+0x20>
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <_vfiprintf_r+0x248>)
 8003476:	429d      	cmp	r5, r3
 8003478:	bf08      	it	eq
 800347a:	68f5      	ldreq	r5, [r6, #12]
 800347c:	e7da      	b.n	8003434 <_vfiprintf_r+0x20>
 800347e:	89ab      	ldrh	r3, [r5, #12]
 8003480:	0598      	lsls	r0, r3, #22
 8003482:	d4ed      	bmi.n	8003460 <_vfiprintf_r+0x4c>
 8003484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003486:	f7ff ff08 	bl	800329a <__retarget_lock_release_recursive>
 800348a:	e7e9      	b.n	8003460 <_vfiprintf_r+0x4c>
 800348c:	2300      	movs	r3, #0
 800348e:	9309      	str	r3, [sp, #36]	; 0x24
 8003490:	2320      	movs	r3, #32
 8003492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003496:	2330      	movs	r3, #48	; 0x30
 8003498:	f04f 0901 	mov.w	r9, #1
 800349c:	f8cd 800c 	str.w	r8, [sp, #12]
 80034a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003660 <_vfiprintf_r+0x24c>
 80034a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034a8:	4623      	mov	r3, r4
 80034aa:	469a      	mov	sl, r3
 80034ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034b0:	b10a      	cbz	r2, 80034b6 <_vfiprintf_r+0xa2>
 80034b2:	2a25      	cmp	r2, #37	; 0x25
 80034b4:	d1f9      	bne.n	80034aa <_vfiprintf_r+0x96>
 80034b6:	ebba 0b04 	subs.w	fp, sl, r4
 80034ba:	d00b      	beq.n	80034d4 <_vfiprintf_r+0xc0>
 80034bc:	465b      	mov	r3, fp
 80034be:	4622      	mov	r2, r4
 80034c0:	4629      	mov	r1, r5
 80034c2:	4630      	mov	r0, r6
 80034c4:	f7ff ff93 	bl	80033ee <__sfputs_r>
 80034c8:	3001      	adds	r0, #1
 80034ca:	f000 80aa 	beq.w	8003622 <_vfiprintf_r+0x20e>
 80034ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034d0:	445a      	add	r2, fp
 80034d2:	9209      	str	r2, [sp, #36]	; 0x24
 80034d4:	f89a 3000 	ldrb.w	r3, [sl]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a2 	beq.w	8003622 <_vfiprintf_r+0x20e>
 80034de:	2300      	movs	r3, #0
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034e8:	f10a 0a01 	add.w	sl, sl, #1
 80034ec:	9304      	str	r3, [sp, #16]
 80034ee:	9307      	str	r3, [sp, #28]
 80034f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034f4:	931a      	str	r3, [sp, #104]	; 0x68
 80034f6:	4654      	mov	r4, sl
 80034f8:	2205      	movs	r2, #5
 80034fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034fe:	4858      	ldr	r0, [pc, #352]	; (8003660 <_vfiprintf_r+0x24c>)
 8003500:	f000 fcba 	bl	8003e78 <memchr>
 8003504:	9a04      	ldr	r2, [sp, #16]
 8003506:	b9d8      	cbnz	r0, 8003540 <_vfiprintf_r+0x12c>
 8003508:	06d1      	lsls	r1, r2, #27
 800350a:	bf44      	itt	mi
 800350c:	2320      	movmi	r3, #32
 800350e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003512:	0713      	lsls	r3, r2, #28
 8003514:	bf44      	itt	mi
 8003516:	232b      	movmi	r3, #43	; 0x2b
 8003518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800351c:	f89a 3000 	ldrb.w	r3, [sl]
 8003520:	2b2a      	cmp	r3, #42	; 0x2a
 8003522:	d015      	beq.n	8003550 <_vfiprintf_r+0x13c>
 8003524:	4654      	mov	r4, sl
 8003526:	2000      	movs	r0, #0
 8003528:	f04f 0c0a 	mov.w	ip, #10
 800352c:	9a07      	ldr	r2, [sp, #28]
 800352e:	4621      	mov	r1, r4
 8003530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003534:	3b30      	subs	r3, #48	; 0x30
 8003536:	2b09      	cmp	r3, #9
 8003538:	d94e      	bls.n	80035d8 <_vfiprintf_r+0x1c4>
 800353a:	b1b0      	cbz	r0, 800356a <_vfiprintf_r+0x156>
 800353c:	9207      	str	r2, [sp, #28]
 800353e:	e014      	b.n	800356a <_vfiprintf_r+0x156>
 8003540:	eba0 0308 	sub.w	r3, r0, r8
 8003544:	fa09 f303 	lsl.w	r3, r9, r3
 8003548:	4313      	orrs	r3, r2
 800354a:	46a2      	mov	sl, r4
 800354c:	9304      	str	r3, [sp, #16]
 800354e:	e7d2      	b.n	80034f6 <_vfiprintf_r+0xe2>
 8003550:	9b03      	ldr	r3, [sp, #12]
 8003552:	1d19      	adds	r1, r3, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	9103      	str	r1, [sp, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	bfbb      	ittet	lt
 800355c:	425b      	neglt	r3, r3
 800355e:	f042 0202 	orrlt.w	r2, r2, #2
 8003562:	9307      	strge	r3, [sp, #28]
 8003564:	9307      	strlt	r3, [sp, #28]
 8003566:	bfb8      	it	lt
 8003568:	9204      	strlt	r2, [sp, #16]
 800356a:	7823      	ldrb	r3, [r4, #0]
 800356c:	2b2e      	cmp	r3, #46	; 0x2e
 800356e:	d10c      	bne.n	800358a <_vfiprintf_r+0x176>
 8003570:	7863      	ldrb	r3, [r4, #1]
 8003572:	2b2a      	cmp	r3, #42	; 0x2a
 8003574:	d135      	bne.n	80035e2 <_vfiprintf_r+0x1ce>
 8003576:	9b03      	ldr	r3, [sp, #12]
 8003578:	3402      	adds	r4, #2
 800357a:	1d1a      	adds	r2, r3, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	9203      	str	r2, [sp, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	bfb8      	it	lt
 8003584:	f04f 33ff 	movlt.w	r3, #4294967295
 8003588:	9305      	str	r3, [sp, #20]
 800358a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003664 <_vfiprintf_r+0x250>
 800358e:	2203      	movs	r2, #3
 8003590:	4650      	mov	r0, sl
 8003592:	7821      	ldrb	r1, [r4, #0]
 8003594:	f000 fc70 	bl	8003e78 <memchr>
 8003598:	b140      	cbz	r0, 80035ac <_vfiprintf_r+0x198>
 800359a:	2340      	movs	r3, #64	; 0x40
 800359c:	eba0 000a 	sub.w	r0, r0, sl
 80035a0:	fa03 f000 	lsl.w	r0, r3, r0
 80035a4:	9b04      	ldr	r3, [sp, #16]
 80035a6:	3401      	adds	r4, #1
 80035a8:	4303      	orrs	r3, r0
 80035aa:	9304      	str	r3, [sp, #16]
 80035ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b0:	2206      	movs	r2, #6
 80035b2:	482d      	ldr	r0, [pc, #180]	; (8003668 <_vfiprintf_r+0x254>)
 80035b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035b8:	f000 fc5e 	bl	8003e78 <memchr>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d03f      	beq.n	8003640 <_vfiprintf_r+0x22c>
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <_vfiprintf_r+0x258>)
 80035c2:	bb1b      	cbnz	r3, 800360c <_vfiprintf_r+0x1f8>
 80035c4:	9b03      	ldr	r3, [sp, #12]
 80035c6:	3307      	adds	r3, #7
 80035c8:	f023 0307 	bic.w	r3, r3, #7
 80035cc:	3308      	adds	r3, #8
 80035ce:	9303      	str	r3, [sp, #12]
 80035d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035d2:	443b      	add	r3, r7
 80035d4:	9309      	str	r3, [sp, #36]	; 0x24
 80035d6:	e767      	b.n	80034a8 <_vfiprintf_r+0x94>
 80035d8:	460c      	mov	r4, r1
 80035da:	2001      	movs	r0, #1
 80035dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80035e0:	e7a5      	b.n	800352e <_vfiprintf_r+0x11a>
 80035e2:	2300      	movs	r3, #0
 80035e4:	f04f 0c0a 	mov.w	ip, #10
 80035e8:	4619      	mov	r1, r3
 80035ea:	3401      	adds	r4, #1
 80035ec:	9305      	str	r3, [sp, #20]
 80035ee:	4620      	mov	r0, r4
 80035f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035f4:	3a30      	subs	r2, #48	; 0x30
 80035f6:	2a09      	cmp	r2, #9
 80035f8:	d903      	bls.n	8003602 <_vfiprintf_r+0x1ee>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0c5      	beq.n	800358a <_vfiprintf_r+0x176>
 80035fe:	9105      	str	r1, [sp, #20]
 8003600:	e7c3      	b.n	800358a <_vfiprintf_r+0x176>
 8003602:	4604      	mov	r4, r0
 8003604:	2301      	movs	r3, #1
 8003606:	fb0c 2101 	mla	r1, ip, r1, r2
 800360a:	e7f0      	b.n	80035ee <_vfiprintf_r+0x1da>
 800360c:	ab03      	add	r3, sp, #12
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	462a      	mov	r2, r5
 8003612:	4630      	mov	r0, r6
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <_vfiprintf_r+0x25c>)
 8003616:	a904      	add	r1, sp, #16
 8003618:	f3af 8000 	nop.w
 800361c:	4607      	mov	r7, r0
 800361e:	1c78      	adds	r0, r7, #1
 8003620:	d1d6      	bne.n	80035d0 <_vfiprintf_r+0x1bc>
 8003622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003624:	07d9      	lsls	r1, r3, #31
 8003626:	d405      	bmi.n	8003634 <_vfiprintf_r+0x220>
 8003628:	89ab      	ldrh	r3, [r5, #12]
 800362a:	059a      	lsls	r2, r3, #22
 800362c:	d402      	bmi.n	8003634 <_vfiprintf_r+0x220>
 800362e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003630:	f7ff fe33 	bl	800329a <__retarget_lock_release_recursive>
 8003634:	89ab      	ldrh	r3, [r5, #12]
 8003636:	065b      	lsls	r3, r3, #25
 8003638:	f53f af12 	bmi.w	8003460 <_vfiprintf_r+0x4c>
 800363c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800363e:	e711      	b.n	8003464 <_vfiprintf_r+0x50>
 8003640:	ab03      	add	r3, sp, #12
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	462a      	mov	r2, r5
 8003646:	4630      	mov	r0, r6
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <_vfiprintf_r+0x25c>)
 800364a:	a904      	add	r1, sp, #16
 800364c:	f000 f882 	bl	8003754 <_printf_i>
 8003650:	e7e4      	b.n	800361c <_vfiprintf_r+0x208>
 8003652:	bf00      	nop
 8003654:	08004034 	.word	0x08004034
 8003658:	08004054 	.word	0x08004054
 800365c:	08004014 	.word	0x08004014
 8003660:	08004074 	.word	0x08004074
 8003664:	0800407a 	.word	0x0800407a
 8003668:	0800407e 	.word	0x0800407e
 800366c:	00000000 	.word	0x00000000
 8003670:	080033ef 	.word	0x080033ef

08003674 <_printf_common>:
 8003674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003678:	4616      	mov	r6, r2
 800367a:	4699      	mov	r9, r3
 800367c:	688a      	ldr	r2, [r1, #8]
 800367e:	690b      	ldr	r3, [r1, #16]
 8003680:	4607      	mov	r7, r0
 8003682:	4293      	cmp	r3, r2
 8003684:	bfb8      	it	lt
 8003686:	4613      	movlt	r3, r2
 8003688:	6033      	str	r3, [r6, #0]
 800368a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800368e:	460c      	mov	r4, r1
 8003690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003694:	b10a      	cbz	r2, 800369a <_printf_common+0x26>
 8003696:	3301      	adds	r3, #1
 8003698:	6033      	str	r3, [r6, #0]
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	0699      	lsls	r1, r3, #26
 800369e:	bf42      	ittt	mi
 80036a0:	6833      	ldrmi	r3, [r6, #0]
 80036a2:	3302      	addmi	r3, #2
 80036a4:	6033      	strmi	r3, [r6, #0]
 80036a6:	6825      	ldr	r5, [r4, #0]
 80036a8:	f015 0506 	ands.w	r5, r5, #6
 80036ac:	d106      	bne.n	80036bc <_printf_common+0x48>
 80036ae:	f104 0a19 	add.w	sl, r4, #25
 80036b2:	68e3      	ldr	r3, [r4, #12]
 80036b4:	6832      	ldr	r2, [r6, #0]
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	42ab      	cmp	r3, r5
 80036ba:	dc28      	bgt.n	800370e <_printf_common+0x9a>
 80036bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036c0:	1e13      	subs	r3, r2, #0
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	bf18      	it	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	0692      	lsls	r2, r2, #26
 80036ca:	d42d      	bmi.n	8003728 <_printf_common+0xb4>
 80036cc:	4649      	mov	r1, r9
 80036ce:	4638      	mov	r0, r7
 80036d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036d4:	47c0      	blx	r8
 80036d6:	3001      	adds	r0, #1
 80036d8:	d020      	beq.n	800371c <_printf_common+0xa8>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	68e5      	ldr	r5, [r4, #12]
 80036de:	f003 0306 	and.w	r3, r3, #6
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	bf18      	it	ne
 80036e6:	2500      	movne	r5, #0
 80036e8:	6832      	ldr	r2, [r6, #0]
 80036ea:	f04f 0600 	mov.w	r6, #0
 80036ee:	68a3      	ldr	r3, [r4, #8]
 80036f0:	bf08      	it	eq
 80036f2:	1aad      	subeq	r5, r5, r2
 80036f4:	6922      	ldr	r2, [r4, #16]
 80036f6:	bf08      	it	eq
 80036f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bfc4      	itt	gt
 8003700:	1a9b      	subgt	r3, r3, r2
 8003702:	18ed      	addgt	r5, r5, r3
 8003704:	341a      	adds	r4, #26
 8003706:	42b5      	cmp	r5, r6
 8003708:	d11a      	bne.n	8003740 <_printf_common+0xcc>
 800370a:	2000      	movs	r0, #0
 800370c:	e008      	b.n	8003720 <_printf_common+0xac>
 800370e:	2301      	movs	r3, #1
 8003710:	4652      	mov	r2, sl
 8003712:	4649      	mov	r1, r9
 8003714:	4638      	mov	r0, r7
 8003716:	47c0      	blx	r8
 8003718:	3001      	adds	r0, #1
 800371a:	d103      	bne.n	8003724 <_printf_common+0xb0>
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003724:	3501      	adds	r5, #1
 8003726:	e7c4      	b.n	80036b2 <_printf_common+0x3e>
 8003728:	2030      	movs	r0, #48	; 0x30
 800372a:	18e1      	adds	r1, r4, r3
 800372c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003736:	4422      	add	r2, r4
 8003738:	3302      	adds	r3, #2
 800373a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800373e:	e7c5      	b.n	80036cc <_printf_common+0x58>
 8003740:	2301      	movs	r3, #1
 8003742:	4622      	mov	r2, r4
 8003744:	4649      	mov	r1, r9
 8003746:	4638      	mov	r0, r7
 8003748:	47c0      	blx	r8
 800374a:	3001      	adds	r0, #1
 800374c:	d0e6      	beq.n	800371c <_printf_common+0xa8>
 800374e:	3601      	adds	r6, #1
 8003750:	e7d9      	b.n	8003706 <_printf_common+0x92>
	...

08003754 <_printf_i>:
 8003754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003758:	7e0f      	ldrb	r7, [r1, #24]
 800375a:	4691      	mov	r9, r2
 800375c:	2f78      	cmp	r7, #120	; 0x78
 800375e:	4680      	mov	r8, r0
 8003760:	460c      	mov	r4, r1
 8003762:	469a      	mov	sl, r3
 8003764:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800376a:	d807      	bhi.n	800377c <_printf_i+0x28>
 800376c:	2f62      	cmp	r7, #98	; 0x62
 800376e:	d80a      	bhi.n	8003786 <_printf_i+0x32>
 8003770:	2f00      	cmp	r7, #0
 8003772:	f000 80d9 	beq.w	8003928 <_printf_i+0x1d4>
 8003776:	2f58      	cmp	r7, #88	; 0x58
 8003778:	f000 80a4 	beq.w	80038c4 <_printf_i+0x170>
 800377c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003784:	e03a      	b.n	80037fc <_printf_i+0xa8>
 8003786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800378a:	2b15      	cmp	r3, #21
 800378c:	d8f6      	bhi.n	800377c <_printf_i+0x28>
 800378e:	a101      	add	r1, pc, #4	; (adr r1, 8003794 <_printf_i+0x40>)
 8003790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003794:	080037ed 	.word	0x080037ed
 8003798:	08003801 	.word	0x08003801
 800379c:	0800377d 	.word	0x0800377d
 80037a0:	0800377d 	.word	0x0800377d
 80037a4:	0800377d 	.word	0x0800377d
 80037a8:	0800377d 	.word	0x0800377d
 80037ac:	08003801 	.word	0x08003801
 80037b0:	0800377d 	.word	0x0800377d
 80037b4:	0800377d 	.word	0x0800377d
 80037b8:	0800377d 	.word	0x0800377d
 80037bc:	0800377d 	.word	0x0800377d
 80037c0:	0800390f 	.word	0x0800390f
 80037c4:	08003831 	.word	0x08003831
 80037c8:	080038f1 	.word	0x080038f1
 80037cc:	0800377d 	.word	0x0800377d
 80037d0:	0800377d 	.word	0x0800377d
 80037d4:	08003931 	.word	0x08003931
 80037d8:	0800377d 	.word	0x0800377d
 80037dc:	08003831 	.word	0x08003831
 80037e0:	0800377d 	.word	0x0800377d
 80037e4:	0800377d 	.word	0x0800377d
 80037e8:	080038f9 	.word	0x080038f9
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	602a      	str	r2, [r5, #0]
 80037f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0a4      	b.n	800394a <_printf_i+0x1f6>
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	6829      	ldr	r1, [r5, #0]
 8003804:	0606      	lsls	r6, r0, #24
 8003806:	f101 0304 	add.w	r3, r1, #4
 800380a:	d50a      	bpl.n	8003822 <_printf_i+0xce>
 800380c:	680e      	ldr	r6, [r1, #0]
 800380e:	602b      	str	r3, [r5, #0]
 8003810:	2e00      	cmp	r6, #0
 8003812:	da03      	bge.n	800381c <_printf_i+0xc8>
 8003814:	232d      	movs	r3, #45	; 0x2d
 8003816:	4276      	negs	r6, r6
 8003818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800381c:	230a      	movs	r3, #10
 800381e:	485e      	ldr	r0, [pc, #376]	; (8003998 <_printf_i+0x244>)
 8003820:	e019      	b.n	8003856 <_printf_i+0x102>
 8003822:	680e      	ldr	r6, [r1, #0]
 8003824:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003828:	602b      	str	r3, [r5, #0]
 800382a:	bf18      	it	ne
 800382c:	b236      	sxthne	r6, r6
 800382e:	e7ef      	b.n	8003810 <_printf_i+0xbc>
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	6820      	ldr	r0, [r4, #0]
 8003834:	1d19      	adds	r1, r3, #4
 8003836:	6029      	str	r1, [r5, #0]
 8003838:	0601      	lsls	r1, r0, #24
 800383a:	d501      	bpl.n	8003840 <_printf_i+0xec>
 800383c:	681e      	ldr	r6, [r3, #0]
 800383e:	e002      	b.n	8003846 <_printf_i+0xf2>
 8003840:	0646      	lsls	r6, r0, #25
 8003842:	d5fb      	bpl.n	800383c <_printf_i+0xe8>
 8003844:	881e      	ldrh	r6, [r3, #0]
 8003846:	2f6f      	cmp	r7, #111	; 0x6f
 8003848:	bf0c      	ite	eq
 800384a:	2308      	moveq	r3, #8
 800384c:	230a      	movne	r3, #10
 800384e:	4852      	ldr	r0, [pc, #328]	; (8003998 <_printf_i+0x244>)
 8003850:	2100      	movs	r1, #0
 8003852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003856:	6865      	ldr	r5, [r4, #4]
 8003858:	2d00      	cmp	r5, #0
 800385a:	bfa8      	it	ge
 800385c:	6821      	ldrge	r1, [r4, #0]
 800385e:	60a5      	str	r5, [r4, #8]
 8003860:	bfa4      	itt	ge
 8003862:	f021 0104 	bicge.w	r1, r1, #4
 8003866:	6021      	strge	r1, [r4, #0]
 8003868:	b90e      	cbnz	r6, 800386e <_printf_i+0x11a>
 800386a:	2d00      	cmp	r5, #0
 800386c:	d04d      	beq.n	800390a <_printf_i+0x1b6>
 800386e:	4615      	mov	r5, r2
 8003870:	fbb6 f1f3 	udiv	r1, r6, r3
 8003874:	fb03 6711 	mls	r7, r3, r1, r6
 8003878:	5dc7      	ldrb	r7, [r0, r7]
 800387a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800387e:	4637      	mov	r7, r6
 8003880:	42bb      	cmp	r3, r7
 8003882:	460e      	mov	r6, r1
 8003884:	d9f4      	bls.n	8003870 <_printf_i+0x11c>
 8003886:	2b08      	cmp	r3, #8
 8003888:	d10b      	bne.n	80038a2 <_printf_i+0x14e>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	07de      	lsls	r6, r3, #31
 800388e:	d508      	bpl.n	80038a2 <_printf_i+0x14e>
 8003890:	6923      	ldr	r3, [r4, #16]
 8003892:	6861      	ldr	r1, [r4, #4]
 8003894:	4299      	cmp	r1, r3
 8003896:	bfde      	ittt	le
 8003898:	2330      	movle	r3, #48	; 0x30
 800389a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800389e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038a2:	1b52      	subs	r2, r2, r5
 80038a4:	6122      	str	r2, [r4, #16]
 80038a6:	464b      	mov	r3, r9
 80038a8:	4621      	mov	r1, r4
 80038aa:	4640      	mov	r0, r8
 80038ac:	f8cd a000 	str.w	sl, [sp]
 80038b0:	aa03      	add	r2, sp, #12
 80038b2:	f7ff fedf 	bl	8003674 <_printf_common>
 80038b6:	3001      	adds	r0, #1
 80038b8:	d14c      	bne.n	8003954 <_printf_i+0x200>
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295
 80038be:	b004      	add	sp, #16
 80038c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c4:	4834      	ldr	r0, [pc, #208]	; (8003998 <_printf_i+0x244>)
 80038c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038ca:	6829      	ldr	r1, [r5, #0]
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80038d2:	6029      	str	r1, [r5, #0]
 80038d4:	061d      	lsls	r5, r3, #24
 80038d6:	d514      	bpl.n	8003902 <_printf_i+0x1ae>
 80038d8:	07df      	lsls	r7, r3, #31
 80038da:	bf44      	itt	mi
 80038dc:	f043 0320 	orrmi.w	r3, r3, #32
 80038e0:	6023      	strmi	r3, [r4, #0]
 80038e2:	b91e      	cbnz	r6, 80038ec <_printf_i+0x198>
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	f023 0320 	bic.w	r3, r3, #32
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	2310      	movs	r3, #16
 80038ee:	e7af      	b.n	8003850 <_printf_i+0xfc>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	f043 0320 	orr.w	r3, r3, #32
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	2378      	movs	r3, #120	; 0x78
 80038fa:	4828      	ldr	r0, [pc, #160]	; (800399c <_printf_i+0x248>)
 80038fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003900:	e7e3      	b.n	80038ca <_printf_i+0x176>
 8003902:	0659      	lsls	r1, r3, #25
 8003904:	bf48      	it	mi
 8003906:	b2b6      	uxthmi	r6, r6
 8003908:	e7e6      	b.n	80038d8 <_printf_i+0x184>
 800390a:	4615      	mov	r5, r2
 800390c:	e7bb      	b.n	8003886 <_printf_i+0x132>
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	6826      	ldr	r6, [r4, #0]
 8003912:	1d18      	adds	r0, r3, #4
 8003914:	6961      	ldr	r1, [r4, #20]
 8003916:	6028      	str	r0, [r5, #0]
 8003918:	0635      	lsls	r5, r6, #24
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	d501      	bpl.n	8003922 <_printf_i+0x1ce>
 800391e:	6019      	str	r1, [r3, #0]
 8003920:	e002      	b.n	8003928 <_printf_i+0x1d4>
 8003922:	0670      	lsls	r0, r6, #25
 8003924:	d5fb      	bpl.n	800391e <_printf_i+0x1ca>
 8003926:	8019      	strh	r1, [r3, #0]
 8003928:	2300      	movs	r3, #0
 800392a:	4615      	mov	r5, r2
 800392c:	6123      	str	r3, [r4, #16]
 800392e:	e7ba      	b.n	80038a6 <_printf_i+0x152>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	2100      	movs	r1, #0
 8003934:	1d1a      	adds	r2, r3, #4
 8003936:	602a      	str	r2, [r5, #0]
 8003938:	681d      	ldr	r5, [r3, #0]
 800393a:	6862      	ldr	r2, [r4, #4]
 800393c:	4628      	mov	r0, r5
 800393e:	f000 fa9b 	bl	8003e78 <memchr>
 8003942:	b108      	cbz	r0, 8003948 <_printf_i+0x1f4>
 8003944:	1b40      	subs	r0, r0, r5
 8003946:	6060      	str	r0, [r4, #4]
 8003948:	6863      	ldr	r3, [r4, #4]
 800394a:	6123      	str	r3, [r4, #16]
 800394c:	2300      	movs	r3, #0
 800394e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003952:	e7a8      	b.n	80038a6 <_printf_i+0x152>
 8003954:	462a      	mov	r2, r5
 8003956:	4649      	mov	r1, r9
 8003958:	4640      	mov	r0, r8
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	47d0      	blx	sl
 800395e:	3001      	adds	r0, #1
 8003960:	d0ab      	beq.n	80038ba <_printf_i+0x166>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	079b      	lsls	r3, r3, #30
 8003966:	d413      	bmi.n	8003990 <_printf_i+0x23c>
 8003968:	68e0      	ldr	r0, [r4, #12]
 800396a:	9b03      	ldr	r3, [sp, #12]
 800396c:	4298      	cmp	r0, r3
 800396e:	bfb8      	it	lt
 8003970:	4618      	movlt	r0, r3
 8003972:	e7a4      	b.n	80038be <_printf_i+0x16a>
 8003974:	2301      	movs	r3, #1
 8003976:	4632      	mov	r2, r6
 8003978:	4649      	mov	r1, r9
 800397a:	4640      	mov	r0, r8
 800397c:	47d0      	blx	sl
 800397e:	3001      	adds	r0, #1
 8003980:	d09b      	beq.n	80038ba <_printf_i+0x166>
 8003982:	3501      	adds	r5, #1
 8003984:	68e3      	ldr	r3, [r4, #12]
 8003986:	9903      	ldr	r1, [sp, #12]
 8003988:	1a5b      	subs	r3, r3, r1
 800398a:	42ab      	cmp	r3, r5
 800398c:	dcf2      	bgt.n	8003974 <_printf_i+0x220>
 800398e:	e7eb      	b.n	8003968 <_printf_i+0x214>
 8003990:	2500      	movs	r5, #0
 8003992:	f104 0619 	add.w	r6, r4, #25
 8003996:	e7f5      	b.n	8003984 <_printf_i+0x230>
 8003998:	08004085 	.word	0x08004085
 800399c:	08004096 	.word	0x08004096

080039a0 <_sbrk_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	2300      	movs	r3, #0
 80039a4:	4d05      	ldr	r5, [pc, #20]	; (80039bc <_sbrk_r+0x1c>)
 80039a6:	4604      	mov	r4, r0
 80039a8:	4608      	mov	r0, r1
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	f7fc ff9a 	bl	80008e4 <_sbrk>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_sbrk_r+0x1a>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_sbrk_r+0x1a>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	20000174 	.word	0x20000174

080039c0 <__sread>:
 80039c0:	b510      	push	{r4, lr}
 80039c2:	460c      	mov	r4, r1
 80039c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c8:	f000 fab8 	bl	8003f3c <_read_r>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	bfab      	itete	ge
 80039d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039d2:	89a3      	ldrhlt	r3, [r4, #12]
 80039d4:	181b      	addge	r3, r3, r0
 80039d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039da:	bfac      	ite	ge
 80039dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80039de:	81a3      	strhlt	r3, [r4, #12]
 80039e0:	bd10      	pop	{r4, pc}

080039e2 <__swrite>:
 80039e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e6:	461f      	mov	r7, r3
 80039e8:	898b      	ldrh	r3, [r1, #12]
 80039ea:	4605      	mov	r5, r0
 80039ec:	05db      	lsls	r3, r3, #23
 80039ee:	460c      	mov	r4, r1
 80039f0:	4616      	mov	r6, r2
 80039f2:	d505      	bpl.n	8003a00 <__swrite+0x1e>
 80039f4:	2302      	movs	r3, #2
 80039f6:	2200      	movs	r2, #0
 80039f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039fc:	f000 f9c4 	bl	8003d88 <_lseek_r>
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	4632      	mov	r2, r6
 8003a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a08:	81a3      	strh	r3, [r4, #12]
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a16:	f000 b869 	b.w	8003aec <_write_r>

08003a1a <__sseek>:
 8003a1a:	b510      	push	{r4, lr}
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a22:	f000 f9b1 	bl	8003d88 <_lseek_r>
 8003a26:	1c43      	adds	r3, r0, #1
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	bf15      	itete	ne
 8003a2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a36:	81a3      	strheq	r3, [r4, #12]
 8003a38:	bf18      	it	ne
 8003a3a:	81a3      	strhne	r3, [r4, #12]
 8003a3c:	bd10      	pop	{r4, pc}

08003a3e <__sclose>:
 8003a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a42:	f000 b8d3 	b.w	8003bec <_close_r>
	...

08003a48 <__swbuf_r>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	460e      	mov	r6, r1
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	4605      	mov	r5, r0
 8003a50:	b118      	cbz	r0, 8003a5a <__swbuf_r+0x12>
 8003a52:	6983      	ldr	r3, [r0, #24]
 8003a54:	b90b      	cbnz	r3, 8003a5a <__swbuf_r+0x12>
 8003a56:	f7ff fb81 	bl	800315c <__sinit>
 8003a5a:	4b21      	ldr	r3, [pc, #132]	; (8003ae0 <__swbuf_r+0x98>)
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	d12b      	bne.n	8003ab8 <__swbuf_r+0x70>
 8003a60:	686c      	ldr	r4, [r5, #4]
 8003a62:	69a3      	ldr	r3, [r4, #24]
 8003a64:	60a3      	str	r3, [r4, #8]
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	071a      	lsls	r2, r3, #28
 8003a6a:	d52f      	bpl.n	8003acc <__swbuf_r+0x84>
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	b36b      	cbz	r3, 8003acc <__swbuf_r+0x84>
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	b2f6      	uxtb	r6, r6
 8003a76:	1ac0      	subs	r0, r0, r3
 8003a78:	6963      	ldr	r3, [r4, #20]
 8003a7a:	4637      	mov	r7, r6
 8003a7c:	4283      	cmp	r3, r0
 8003a7e:	dc04      	bgt.n	8003a8a <__swbuf_r+0x42>
 8003a80:	4621      	mov	r1, r4
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 f944 	bl	8003d10 <_fflush_r>
 8003a88:	bb30      	cbnz	r0, 8003ad8 <__swbuf_r+0x90>
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	60a3      	str	r3, [r4, #8]
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	6022      	str	r2, [r4, #0]
 8003a98:	701e      	strb	r6, [r3, #0]
 8003a9a:	6963      	ldr	r3, [r4, #20]
 8003a9c:	4283      	cmp	r3, r0
 8003a9e:	d004      	beq.n	8003aaa <__swbuf_r+0x62>
 8003aa0:	89a3      	ldrh	r3, [r4, #12]
 8003aa2:	07db      	lsls	r3, r3, #31
 8003aa4:	d506      	bpl.n	8003ab4 <__swbuf_r+0x6c>
 8003aa6:	2e0a      	cmp	r6, #10
 8003aa8:	d104      	bne.n	8003ab4 <__swbuf_r+0x6c>
 8003aaa:	4621      	mov	r1, r4
 8003aac:	4628      	mov	r0, r5
 8003aae:	f000 f92f 	bl	8003d10 <_fflush_r>
 8003ab2:	b988      	cbnz	r0, 8003ad8 <__swbuf_r+0x90>
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <__swbuf_r+0x9c>)
 8003aba:	429c      	cmp	r4, r3
 8003abc:	d101      	bne.n	8003ac2 <__swbuf_r+0x7a>
 8003abe:	68ac      	ldr	r4, [r5, #8]
 8003ac0:	e7cf      	b.n	8003a62 <__swbuf_r+0x1a>
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <__swbuf_r+0xa0>)
 8003ac4:	429c      	cmp	r4, r3
 8003ac6:	bf08      	it	eq
 8003ac8:	68ec      	ldreq	r4, [r5, #12]
 8003aca:	e7ca      	b.n	8003a62 <__swbuf_r+0x1a>
 8003acc:	4621      	mov	r1, r4
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 f81e 	bl	8003b10 <__swsetup_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d0cb      	beq.n	8003a70 <__swbuf_r+0x28>
 8003ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8003adc:	e7ea      	b.n	8003ab4 <__swbuf_r+0x6c>
 8003ade:	bf00      	nop
 8003ae0:	08004034 	.word	0x08004034
 8003ae4:	08004054 	.word	0x08004054
 8003ae8:	08004014 	.word	0x08004014

08003aec <_write_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	2200      	movs	r2, #0
 8003af6:	4d05      	ldr	r5, [pc, #20]	; (8003b0c <_write_r+0x20>)
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fc fea5 	bl	800084a <_write>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_write_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_write_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20000174 	.word	0x20000174

08003b10 <__swsetup_r>:
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <__swsetup_r+0xcc>)
 8003b12:	b570      	push	{r4, r5, r6, lr}
 8003b14:	681d      	ldr	r5, [r3, #0]
 8003b16:	4606      	mov	r6, r0
 8003b18:	460c      	mov	r4, r1
 8003b1a:	b125      	cbz	r5, 8003b26 <__swsetup_r+0x16>
 8003b1c:	69ab      	ldr	r3, [r5, #24]
 8003b1e:	b913      	cbnz	r3, 8003b26 <__swsetup_r+0x16>
 8003b20:	4628      	mov	r0, r5
 8003b22:	f7ff fb1b 	bl	800315c <__sinit>
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <__swsetup_r+0xd0>)
 8003b28:	429c      	cmp	r4, r3
 8003b2a:	d10f      	bne.n	8003b4c <__swsetup_r+0x3c>
 8003b2c:	686c      	ldr	r4, [r5, #4]
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b34:	0719      	lsls	r1, r3, #28
 8003b36:	d42c      	bmi.n	8003b92 <__swsetup_r+0x82>
 8003b38:	06dd      	lsls	r5, r3, #27
 8003b3a:	d411      	bmi.n	8003b60 <__swsetup_r+0x50>
 8003b3c:	2309      	movs	r3, #9
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	e03e      	b.n	8003bca <__swsetup_r+0xba>
 8003b4c:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <__swsetup_r+0xd4>)
 8003b4e:	429c      	cmp	r4, r3
 8003b50:	d101      	bne.n	8003b56 <__swsetup_r+0x46>
 8003b52:	68ac      	ldr	r4, [r5, #8]
 8003b54:	e7eb      	b.n	8003b2e <__swsetup_r+0x1e>
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <__swsetup_r+0xd8>)
 8003b58:	429c      	cmp	r4, r3
 8003b5a:	bf08      	it	eq
 8003b5c:	68ec      	ldreq	r4, [r5, #12]
 8003b5e:	e7e6      	b.n	8003b2e <__swsetup_r+0x1e>
 8003b60:	0758      	lsls	r0, r3, #29
 8003b62:	d512      	bpl.n	8003b8a <__swsetup_r+0x7a>
 8003b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b66:	b141      	cbz	r1, 8003b7a <__swsetup_r+0x6a>
 8003b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b6c:	4299      	cmp	r1, r3
 8003b6e:	d002      	beq.n	8003b76 <__swsetup_r+0x66>
 8003b70:	4630      	mov	r0, r6
 8003b72:	f000 f99b 	bl	8003eac <_free_r>
 8003b76:	2300      	movs	r3, #0
 8003b78:	6363      	str	r3, [r4, #52]	; 0x34
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	2300      	movs	r3, #0
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	6923      	ldr	r3, [r4, #16]
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	f043 0308 	orr.w	r3, r3, #8
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	6923      	ldr	r3, [r4, #16]
 8003b94:	b94b      	cbnz	r3, 8003baa <__swsetup_r+0x9a>
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba0:	d003      	beq.n	8003baa <__swsetup_r+0x9a>
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f000 f927 	bl	8003df8 <__smakebuf_r>
 8003baa:	89a0      	ldrh	r0, [r4, #12]
 8003bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bb0:	f010 0301 	ands.w	r3, r0, #1
 8003bb4:	d00a      	beq.n	8003bcc <__swsetup_r+0xbc>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60a3      	str	r3, [r4, #8]
 8003bba:	6963      	ldr	r3, [r4, #20]
 8003bbc:	425b      	negs	r3, r3
 8003bbe:	61a3      	str	r3, [r4, #24]
 8003bc0:	6923      	ldr	r3, [r4, #16]
 8003bc2:	b943      	cbnz	r3, 8003bd6 <__swsetup_r+0xc6>
 8003bc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bc8:	d1ba      	bne.n	8003b40 <__swsetup_r+0x30>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	0781      	lsls	r1, r0, #30
 8003bce:	bf58      	it	pl
 8003bd0:	6963      	ldrpl	r3, [r4, #20]
 8003bd2:	60a3      	str	r3, [r4, #8]
 8003bd4:	e7f4      	b.n	8003bc0 <__swsetup_r+0xb0>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	e7f7      	b.n	8003bca <__swsetup_r+0xba>
 8003bda:	bf00      	nop
 8003bdc:	2000000c 	.word	0x2000000c
 8003be0:	08004034 	.word	0x08004034
 8003be4:	08004054 	.word	0x08004054
 8003be8:	08004014 	.word	0x08004014

08003bec <_close_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	2300      	movs	r3, #0
 8003bf0:	4d05      	ldr	r5, [pc, #20]	; (8003c08 <_close_r+0x1c>)
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	f7fc fe43 	bl	8000882 <_close>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_close_r+0x1a>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_close_r+0x1a>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	20000174 	.word	0x20000174

08003c0c <__sflush_r>:
 8003c0c:	898a      	ldrh	r2, [r1, #12]
 8003c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c10:	4605      	mov	r5, r0
 8003c12:	0710      	lsls	r0, r2, #28
 8003c14:	460c      	mov	r4, r1
 8003c16:	d457      	bmi.n	8003cc8 <__sflush_r+0xbc>
 8003c18:	684b      	ldr	r3, [r1, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dc04      	bgt.n	8003c28 <__sflush_r+0x1c>
 8003c1e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	dc01      	bgt.n	8003c28 <__sflush_r+0x1c>
 8003c24:	2000      	movs	r0, #0
 8003c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c2a:	2e00      	cmp	r6, #0
 8003c2c:	d0fa      	beq.n	8003c24 <__sflush_r+0x18>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c34:	682f      	ldr	r7, [r5, #0]
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	d032      	beq.n	8003ca0 <__sflush_r+0x94>
 8003c3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	075a      	lsls	r2, r3, #29
 8003c40:	d505      	bpl.n	8003c4e <__sflush_r+0x42>
 8003c42:	6863      	ldr	r3, [r4, #4]
 8003c44:	1ac0      	subs	r0, r0, r3
 8003c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c48:	b10b      	cbz	r3, 8003c4e <__sflush_r+0x42>
 8003c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c4c:	1ac0      	subs	r0, r0, r3
 8003c4e:	2300      	movs	r3, #0
 8003c50:	4602      	mov	r2, r0
 8003c52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c54:	4628      	mov	r0, r5
 8003c56:	6a21      	ldr	r1, [r4, #32]
 8003c58:	47b0      	blx	r6
 8003c5a:	1c43      	adds	r3, r0, #1
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	d106      	bne.n	8003c6e <__sflush_r+0x62>
 8003c60:	6829      	ldr	r1, [r5, #0]
 8003c62:	291d      	cmp	r1, #29
 8003c64:	d82c      	bhi.n	8003cc0 <__sflush_r+0xb4>
 8003c66:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <__sflush_r+0x100>)
 8003c68:	40ca      	lsrs	r2, r1
 8003c6a:	07d6      	lsls	r6, r2, #31
 8003c6c:	d528      	bpl.n	8003cc0 <__sflush_r+0xb4>
 8003c6e:	2200      	movs	r2, #0
 8003c70:	6062      	str	r2, [r4, #4]
 8003c72:	6922      	ldr	r2, [r4, #16]
 8003c74:	04d9      	lsls	r1, r3, #19
 8003c76:	6022      	str	r2, [r4, #0]
 8003c78:	d504      	bpl.n	8003c84 <__sflush_r+0x78>
 8003c7a:	1c42      	adds	r2, r0, #1
 8003c7c:	d101      	bne.n	8003c82 <__sflush_r+0x76>
 8003c7e:	682b      	ldr	r3, [r5, #0]
 8003c80:	b903      	cbnz	r3, 8003c84 <__sflush_r+0x78>
 8003c82:	6560      	str	r0, [r4, #84]	; 0x54
 8003c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c86:	602f      	str	r7, [r5, #0]
 8003c88:	2900      	cmp	r1, #0
 8003c8a:	d0cb      	beq.n	8003c24 <__sflush_r+0x18>
 8003c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c90:	4299      	cmp	r1, r3
 8003c92:	d002      	beq.n	8003c9a <__sflush_r+0x8e>
 8003c94:	4628      	mov	r0, r5
 8003c96:	f000 f909 	bl	8003eac <_free_r>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	6360      	str	r0, [r4, #52]	; 0x34
 8003c9e:	e7c2      	b.n	8003c26 <__sflush_r+0x1a>
 8003ca0:	6a21      	ldr	r1, [r4, #32]
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	47b0      	blx	r6
 8003ca8:	1c41      	adds	r1, r0, #1
 8003caa:	d1c7      	bne.n	8003c3c <__sflush_r+0x30>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0c4      	beq.n	8003c3c <__sflush_r+0x30>
 8003cb2:	2b1d      	cmp	r3, #29
 8003cb4:	d001      	beq.n	8003cba <__sflush_r+0xae>
 8003cb6:	2b16      	cmp	r3, #22
 8003cb8:	d101      	bne.n	8003cbe <__sflush_r+0xb2>
 8003cba:	602f      	str	r7, [r5, #0]
 8003cbc:	e7b2      	b.n	8003c24 <__sflush_r+0x18>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc4:	81a3      	strh	r3, [r4, #12]
 8003cc6:	e7ae      	b.n	8003c26 <__sflush_r+0x1a>
 8003cc8:	690f      	ldr	r7, [r1, #16]
 8003cca:	2f00      	cmp	r7, #0
 8003ccc:	d0aa      	beq.n	8003c24 <__sflush_r+0x18>
 8003cce:	0793      	lsls	r3, r2, #30
 8003cd0:	bf18      	it	ne
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	680e      	ldr	r6, [r1, #0]
 8003cd6:	bf08      	it	eq
 8003cd8:	694b      	ldreq	r3, [r1, #20]
 8003cda:	1bf6      	subs	r6, r6, r7
 8003cdc:	600f      	str	r7, [r1, #0]
 8003cde:	608b      	str	r3, [r1, #8]
 8003ce0:	2e00      	cmp	r6, #0
 8003ce2:	dd9f      	ble.n	8003c24 <__sflush_r+0x18>
 8003ce4:	4633      	mov	r3, r6
 8003ce6:	463a      	mov	r2, r7
 8003ce8:	4628      	mov	r0, r5
 8003cea:	6a21      	ldr	r1, [r4, #32]
 8003cec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003cf0:	47e0      	blx	ip
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	dc06      	bgt.n	8003d04 <__sflush_r+0xf8>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	e790      	b.n	8003c26 <__sflush_r+0x1a>
 8003d04:	4407      	add	r7, r0
 8003d06:	1a36      	subs	r6, r6, r0
 8003d08:	e7ea      	b.n	8003ce0 <__sflush_r+0xd4>
 8003d0a:	bf00      	nop
 8003d0c:	20400001 	.word	0x20400001

08003d10 <_fflush_r>:
 8003d10:	b538      	push	{r3, r4, r5, lr}
 8003d12:	690b      	ldr	r3, [r1, #16]
 8003d14:	4605      	mov	r5, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	b913      	cbnz	r3, 8003d20 <_fflush_r+0x10>
 8003d1a:	2500      	movs	r5, #0
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	b118      	cbz	r0, 8003d2a <_fflush_r+0x1a>
 8003d22:	6983      	ldr	r3, [r0, #24]
 8003d24:	b90b      	cbnz	r3, 8003d2a <_fflush_r+0x1a>
 8003d26:	f7ff fa19 	bl	800315c <__sinit>
 8003d2a:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <_fflush_r+0x6c>)
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	d11b      	bne.n	8003d68 <_fflush_r+0x58>
 8003d30:	686c      	ldr	r4, [r5, #4]
 8003d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0ef      	beq.n	8003d1a <_fflush_r+0xa>
 8003d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d3c:	07d0      	lsls	r0, r2, #31
 8003d3e:	d404      	bmi.n	8003d4a <_fflush_r+0x3a>
 8003d40:	0599      	lsls	r1, r3, #22
 8003d42:	d402      	bmi.n	8003d4a <_fflush_r+0x3a>
 8003d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d46:	f7ff faa7 	bl	8003298 <__retarget_lock_acquire_recursive>
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	f7ff ff5d 	bl	8003c0c <__sflush_r>
 8003d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d54:	4605      	mov	r5, r0
 8003d56:	07da      	lsls	r2, r3, #31
 8003d58:	d4e0      	bmi.n	8003d1c <_fflush_r+0xc>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	059b      	lsls	r3, r3, #22
 8003d5e:	d4dd      	bmi.n	8003d1c <_fflush_r+0xc>
 8003d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d62:	f7ff fa9a 	bl	800329a <__retarget_lock_release_recursive>
 8003d66:	e7d9      	b.n	8003d1c <_fflush_r+0xc>
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <_fflush_r+0x70>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d101      	bne.n	8003d72 <_fflush_r+0x62>
 8003d6e:	68ac      	ldr	r4, [r5, #8]
 8003d70:	e7df      	b.n	8003d32 <_fflush_r+0x22>
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <_fflush_r+0x74>)
 8003d74:	429c      	cmp	r4, r3
 8003d76:	bf08      	it	eq
 8003d78:	68ec      	ldreq	r4, [r5, #12]
 8003d7a:	e7da      	b.n	8003d32 <_fflush_r+0x22>
 8003d7c:	08004034 	.word	0x08004034
 8003d80:	08004054 	.word	0x08004054
 8003d84:	08004014 	.word	0x08004014

08003d88 <_lseek_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	2200      	movs	r2, #0
 8003d92:	4d05      	ldr	r5, [pc, #20]	; (8003da8 <_lseek_r+0x20>)
 8003d94:	602a      	str	r2, [r5, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7fc fd97 	bl	80008ca <_lseek>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_lseek_r+0x1e>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_lseek_r+0x1e>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000174 	.word	0x20000174

08003dac <__swhatbuf_r>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	460e      	mov	r6, r1
 8003db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db4:	4614      	mov	r4, r2
 8003db6:	2900      	cmp	r1, #0
 8003db8:	461d      	mov	r5, r3
 8003dba:	b096      	sub	sp, #88	; 0x58
 8003dbc:	da08      	bge.n	8003dd0 <__swhatbuf_r+0x24>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003dc4:	602a      	str	r2, [r5, #0]
 8003dc6:	061a      	lsls	r2, r3, #24
 8003dc8:	d410      	bmi.n	8003dec <__swhatbuf_r+0x40>
 8003dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dce:	e00e      	b.n	8003dee <__swhatbuf_r+0x42>
 8003dd0:	466a      	mov	r2, sp
 8003dd2:	f000 f8c5 	bl	8003f60 <_fstat_r>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	dbf1      	blt.n	8003dbe <__swhatbuf_r+0x12>
 8003dda:	9a01      	ldr	r2, [sp, #4]
 8003ddc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003de0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003de4:	425a      	negs	r2, r3
 8003de6:	415a      	adcs	r2, r3
 8003de8:	602a      	str	r2, [r5, #0]
 8003dea:	e7ee      	b.n	8003dca <__swhatbuf_r+0x1e>
 8003dec:	2340      	movs	r3, #64	; 0x40
 8003dee:	2000      	movs	r0, #0
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	b016      	add	sp, #88	; 0x58
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003df8 <__smakebuf_r>:
 8003df8:	898b      	ldrh	r3, [r1, #12]
 8003dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003dfc:	079d      	lsls	r5, r3, #30
 8003dfe:	4606      	mov	r6, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	d507      	bpl.n	8003e14 <__smakebuf_r+0x1c>
 8003e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	6123      	str	r3, [r4, #16]
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	6163      	str	r3, [r4, #20]
 8003e10:	b002      	add	sp, #8
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	466a      	mov	r2, sp
 8003e16:	ab01      	add	r3, sp, #4
 8003e18:	f7ff ffc8 	bl	8003dac <__swhatbuf_r>
 8003e1c:	9900      	ldr	r1, [sp, #0]
 8003e1e:	4605      	mov	r5, r0
 8003e20:	4630      	mov	r0, r6
 8003e22:	f7ff fa5b 	bl	80032dc <_malloc_r>
 8003e26:	b948      	cbnz	r0, 8003e3c <__smakebuf_r+0x44>
 8003e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e2c:	059a      	lsls	r2, r3, #22
 8003e2e:	d4ef      	bmi.n	8003e10 <__smakebuf_r+0x18>
 8003e30:	f023 0303 	bic.w	r3, r3, #3
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	81a3      	strh	r3, [r4, #12]
 8003e3a:	e7e3      	b.n	8003e04 <__smakebuf_r+0xc>
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <__smakebuf_r+0x7c>)
 8003e3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	6020      	str	r0, [r4, #0]
 8003e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e48:	81a3      	strh	r3, [r4, #12]
 8003e4a:	9b00      	ldr	r3, [sp, #0]
 8003e4c:	6120      	str	r0, [r4, #16]
 8003e4e:	6163      	str	r3, [r4, #20]
 8003e50:	9b01      	ldr	r3, [sp, #4]
 8003e52:	b15b      	cbz	r3, 8003e6c <__smakebuf_r+0x74>
 8003e54:	4630      	mov	r0, r6
 8003e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5a:	f000 f893 	bl	8003f84 <_isatty_r>
 8003e5e:	b128      	cbz	r0, 8003e6c <__smakebuf_r+0x74>
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	81a3      	strh	r3, [r4, #12]
 8003e6c:	89a0      	ldrh	r0, [r4, #12]
 8003e6e:	4305      	orrs	r5, r0
 8003e70:	81a5      	strh	r5, [r4, #12]
 8003e72:	e7cd      	b.n	8003e10 <__smakebuf_r+0x18>
 8003e74:	080030f5 	.word	0x080030f5

08003e78 <memchr>:
 8003e78:	4603      	mov	r3, r0
 8003e7a:	b510      	push	{r4, lr}
 8003e7c:	b2c9      	uxtb	r1, r1
 8003e7e:	4402      	add	r2, r0
 8003e80:	4293      	cmp	r3, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	d101      	bne.n	8003e8a <memchr+0x12>
 8003e86:	2000      	movs	r0, #0
 8003e88:	e003      	b.n	8003e92 <memchr+0x1a>
 8003e8a:	7804      	ldrb	r4, [r0, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	428c      	cmp	r4, r1
 8003e90:	d1f6      	bne.n	8003e80 <memchr+0x8>
 8003e92:	bd10      	pop	{r4, pc}

08003e94 <__malloc_lock>:
 8003e94:	4801      	ldr	r0, [pc, #4]	; (8003e9c <__malloc_lock+0x8>)
 8003e96:	f7ff b9ff 	b.w	8003298 <__retarget_lock_acquire_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	20000168 	.word	0x20000168

08003ea0 <__malloc_unlock>:
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <__malloc_unlock+0x8>)
 8003ea2:	f7ff b9fa 	b.w	800329a <__retarget_lock_release_recursive>
 8003ea6:	bf00      	nop
 8003ea8:	20000168 	.word	0x20000168

08003eac <_free_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4605      	mov	r5, r0
 8003eb0:	2900      	cmp	r1, #0
 8003eb2:	d040      	beq.n	8003f36 <_free_r+0x8a>
 8003eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb8:	1f0c      	subs	r4, r1, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bfb8      	it	lt
 8003ebe:	18e4      	addlt	r4, r4, r3
 8003ec0:	f7ff ffe8 	bl	8003e94 <__malloc_lock>
 8003ec4:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <_free_r+0x8c>)
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	b933      	cbnz	r3, 8003ed8 <_free_r+0x2c>
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	6014      	str	r4, [r2, #0]
 8003ece:	4628      	mov	r0, r5
 8003ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ed4:	f7ff bfe4 	b.w	8003ea0 <__malloc_unlock>
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d908      	bls.n	8003eee <_free_r+0x42>
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	1821      	adds	r1, r4, r0
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	bf01      	itttt	eq
 8003ee4:	6819      	ldreq	r1, [r3, #0]
 8003ee6:	685b      	ldreq	r3, [r3, #4]
 8003ee8:	1809      	addeq	r1, r1, r0
 8003eea:	6021      	streq	r1, [r4, #0]
 8003eec:	e7ed      	b.n	8003eca <_free_r+0x1e>
 8003eee:	461a      	mov	r2, r3
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b10b      	cbz	r3, 8003ef8 <_free_r+0x4c>
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d9fa      	bls.n	8003eee <_free_r+0x42>
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	1850      	adds	r0, r2, r1
 8003efc:	42a0      	cmp	r0, r4
 8003efe:	d10b      	bne.n	8003f18 <_free_r+0x6c>
 8003f00:	6820      	ldr	r0, [r4, #0]
 8003f02:	4401      	add	r1, r0
 8003f04:	1850      	adds	r0, r2, r1
 8003f06:	4283      	cmp	r3, r0
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	d1e0      	bne.n	8003ece <_free_r+0x22>
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4401      	add	r1, r0
 8003f12:	6011      	str	r1, [r2, #0]
 8003f14:	6053      	str	r3, [r2, #4]
 8003f16:	e7da      	b.n	8003ece <_free_r+0x22>
 8003f18:	d902      	bls.n	8003f20 <_free_r+0x74>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	e7d6      	b.n	8003ece <_free_r+0x22>
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	1821      	adds	r1, r4, r0
 8003f24:	428b      	cmp	r3, r1
 8003f26:	bf01      	itttt	eq
 8003f28:	6819      	ldreq	r1, [r3, #0]
 8003f2a:	685b      	ldreq	r3, [r3, #4]
 8003f2c:	1809      	addeq	r1, r1, r0
 8003f2e:	6021      	streq	r1, [r4, #0]
 8003f30:	6063      	str	r3, [r4, #4]
 8003f32:	6054      	str	r4, [r2, #4]
 8003f34:	e7cb      	b.n	8003ece <_free_r+0x22>
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	2000016c 	.word	0x2000016c

08003f3c <_read_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	2200      	movs	r2, #0
 8003f46:	4d05      	ldr	r5, [pc, #20]	; (8003f5c <_read_r+0x20>)
 8003f48:	602a      	str	r2, [r5, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f7fc fc60 	bl	8000810 <_read>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_read_r+0x1e>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_read_r+0x1e>
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	20000174 	.word	0x20000174

08003f60 <_fstat_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	2300      	movs	r3, #0
 8003f64:	4d06      	ldr	r5, [pc, #24]	; (8003f80 <_fstat_r+0x20>)
 8003f66:	4604      	mov	r4, r0
 8003f68:	4608      	mov	r0, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	f7fc fc93 	bl	8000898 <_fstat>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	d102      	bne.n	8003f7c <_fstat_r+0x1c>
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	b103      	cbz	r3, 8003f7c <_fstat_r+0x1c>
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	bd38      	pop	{r3, r4, r5, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000174 	.word	0x20000174

08003f84 <_isatty_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	2300      	movs	r3, #0
 8003f88:	4d05      	ldr	r5, [pc, #20]	; (8003fa0 <_isatty_r+0x1c>)
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	f7fc fc91 	bl	80008b6 <_isatty>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_isatty_r+0x1a>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_isatty_r+0x1a>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	20000174 	.word	0x20000174

08003fa4 <_init>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr

08003fb0 <_fini>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	bf00      	nop
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr
