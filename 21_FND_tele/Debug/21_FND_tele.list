
21_FND_tele.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002624  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800289c  0800289c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800289c  0800289c  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800289c  0800289c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800289c  0800289c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080028a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200000dc  08002980  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002980  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003752  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001113  00000000  00000000  00023857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  00024970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  00024e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171b7  00000000  00000000  00025228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005446  00000000  00000000  0003c3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080f93  00000000  00000000  00041825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c27b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a48  00000000  00000000  000c2808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002718 	.word	0x08002718

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08002718 	.word	0x08002718

0800014c <display_fnd>:
FND sel[4] ={
		{GPIOA, GPIO_PIN_10}, {GPIOA, GPIO_PIN_11},
		{GPIOC, GPIO_PIN_4}, {GPIOC, GPIO_PIN_3}
};

void display_fnd(uint8_t data, uint8_t position, uint32_t time) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	603a      	str	r2, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	460b      	mov	r3, r1
 800015a:	71bb      	strb	r3, [r7, #6]
   int i;
   for(i = 0; i < 4; i++) {
 800015c:	2300      	movs	r3, #0
 800015e:	60fb      	str	r3, [r7, #12]
 8000160:	e021      	b.n	80001a6 <display_fnd+0x5a>
      if(i == position) {
 8000162:	79bb      	ldrb	r3, [r7, #6]
 8000164:	68fa      	ldr	r2, [r7, #12]
 8000166:	429a      	cmp	r2, r3
 8000168:	d10d      	bne.n	8000186 <display_fnd+0x3a>
         HAL_GPIO_WritePin(sel[i].port, sel[i].pin, GPIO_PIN_SET);
 800016a:	4a2a      	ldr	r2, [pc, #168]	; (8000214 <display_fnd+0xc8>)
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000172:	4a28      	ldr	r2, [pc, #160]	; (8000214 <display_fnd+0xc8>)
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	00db      	lsls	r3, r3, #3
 8000178:	4413      	add	r3, r2
 800017a:	889b      	ldrh	r3, [r3, #4]
 800017c:	2201      	movs	r2, #1
 800017e:	4619      	mov	r1, r3
 8000180:	f000 fe4b 	bl	8000e1a <HAL_GPIO_WritePin>
 8000184:	e00c      	b.n	80001a0 <display_fnd+0x54>
      } else {
         HAL_GPIO_WritePin(sel[i].port, sel[i].pin, GPIO_PIN_RESET);
 8000186:	4a23      	ldr	r2, [pc, #140]	; (8000214 <display_fnd+0xc8>)
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800018e:	4a21      	ldr	r2, [pc, #132]	; (8000214 <display_fnd+0xc8>)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	00db      	lsls	r3, r3, #3
 8000194:	4413      	add	r3, r2
 8000196:	889b      	ldrh	r3, [r3, #4]
 8000198:	2200      	movs	r2, #0
 800019a:	4619      	mov	r1, r3
 800019c:	f000 fe3d 	bl	8000e1a <HAL_GPIO_WritePin>
   for(i = 0; i < 4; i++) {
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	3301      	adds	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	2b03      	cmp	r3, #3
 80001aa:	ddda      	ble.n	8000162 <display_fnd+0x16>
      }
   }
   for(i = 0; i < 8; i++) {
 80001ac:	2300      	movs	r3, #0
 80001ae:	60fb      	str	r3, [r7, #12]
 80001b0:	e025      	b.n	80001fe <display_fnd+0xb2>
      if((data & (1 << i)) != 0){
 80001b2:	79fa      	ldrb	r2, [r7, #7]
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	fa42 f303 	asr.w	r3, r2, r3
 80001ba:	f003 0301 	and.w	r3, r3, #1
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d00d      	beq.n	80001de <display_fnd+0x92>
         HAL_GPIO_WritePin(value[i].port, value[i].pin, GPIO_PIN_SET);
 80001c2:	4a15      	ldr	r2, [pc, #84]	; (8000218 <display_fnd+0xcc>)
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001ca:	4a13      	ldr	r2, [pc, #76]	; (8000218 <display_fnd+0xcc>)
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	889b      	ldrh	r3, [r3, #4]
 80001d4:	2201      	movs	r2, #1
 80001d6:	4619      	mov	r1, r3
 80001d8:	f000 fe1f 	bl	8000e1a <HAL_GPIO_WritePin>
 80001dc:	e00c      	b.n	80001f8 <display_fnd+0xac>
      } else {
         HAL_GPIO_WritePin(value[i].port, value[i].pin, GPIO_PIN_RESET);
 80001de:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <display_fnd+0xcc>)
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001e6:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <display_fnd+0xcc>)
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	00db      	lsls	r3, r3, #3
 80001ec:	4413      	add	r3, r2
 80001ee:	889b      	ldrh	r3, [r3, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	4619      	mov	r1, r3
 80001f4:	f000 fe11 	bl	8000e1a <HAL_GPIO_WritePin>
   for(i = 0; i < 8; i++) {
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2b07      	cmp	r3, #7
 8000202:	ddd6      	ble.n	80001b2 <display_fnd+0x66>
      }
   }
   HAL_Delay(time);
 8000204:	6838      	ldr	r0, [r7, #0]
 8000206:	f000 fb3b 	bl	8000880 <HAL_Delay>
}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000004c 	.word	0x2000004c
 8000218:	2000000c 	.word	0x2000000c

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 facc 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f882 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8bc 	bl	80003a4 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(stop_flag == 0){
 800022c:	4b38      	ldr	r3, [pc, #224]	; (8000310 <main+0xf4>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d143      	bne.n	80002bc <main+0xa0>
		  random_1000 = rand() % 10;
 8000234:	f001 fa32 	bl	800169c <rand>
 8000238:	4602      	mov	r2, r0
 800023a:	4b36      	ldr	r3, [pc, #216]	; (8000314 <main+0xf8>)
 800023c:	fb83 1302 	smull	r1, r3, r3, r2
 8000240:	1099      	asrs	r1, r3, #2
 8000242:	17d3      	asrs	r3, r2, #31
 8000244:	1ac9      	subs	r1, r1, r3
 8000246:	460b      	mov	r3, r1
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	440b      	add	r3, r1
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	1ad1      	subs	r1, r2, r3
 8000250:	b2ca      	uxtb	r2, r1
 8000252:	4b31      	ldr	r3, [pc, #196]	; (8000318 <main+0xfc>)
 8000254:	701a      	strb	r2, [r3, #0]
		  random_100 = rand() % 10;
 8000256:	f001 fa21 	bl	800169c <rand>
 800025a:	4602      	mov	r2, r0
 800025c:	4b2d      	ldr	r3, [pc, #180]	; (8000314 <main+0xf8>)
 800025e:	fb83 1302 	smull	r1, r3, r3, r2
 8000262:	1099      	asrs	r1, r3, #2
 8000264:	17d3      	asrs	r3, r2, #31
 8000266:	1ac9      	subs	r1, r1, r3
 8000268:	460b      	mov	r3, r1
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	440b      	add	r3, r1
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	1ad1      	subs	r1, r2, r3
 8000272:	b2ca      	uxtb	r2, r1
 8000274:	4b29      	ldr	r3, [pc, #164]	; (800031c <main+0x100>)
 8000276:	701a      	strb	r2, [r3, #0]
		  random_10 = rand() % 10;
 8000278:	f001 fa10 	bl	800169c <rand>
 800027c:	4602      	mov	r2, r0
 800027e:	4b25      	ldr	r3, [pc, #148]	; (8000314 <main+0xf8>)
 8000280:	fb83 1302 	smull	r1, r3, r3, r2
 8000284:	1099      	asrs	r1, r3, #2
 8000286:	17d3      	asrs	r3, r2, #31
 8000288:	1ac9      	subs	r1, r1, r3
 800028a:	460b      	mov	r3, r1
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	440b      	add	r3, r1
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	1ad1      	subs	r1, r2, r3
 8000294:	b2ca      	uxtb	r2, r1
 8000296:	4b22      	ldr	r3, [pc, #136]	; (8000320 <main+0x104>)
 8000298:	701a      	strb	r2, [r3, #0]
		  random_1 = rand() % 10;
 800029a:	f001 f9ff 	bl	800169c <rand>
 800029e:	4602      	mov	r2, r0
 80002a0:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <main+0xf8>)
 80002a2:	fb83 1302 	smull	r1, r3, r3, r2
 80002a6:	1099      	asrs	r1, r3, #2
 80002a8:	17d3      	asrs	r3, r2, #31
 80002aa:	1ac9      	subs	r1, r1, r3
 80002ac:	460b      	mov	r3, r1
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	440b      	add	r3, r1
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	1ad1      	subs	r1, r2, r3
 80002b6:	b2ca      	uxtb	r2, r1
 80002b8:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <main+0x108>)
 80002ba:	701a      	strb	r2, [r3, #0]
	  }
	  display_fnd(number[random_1000], 3, 5);
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <main+0xfc>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b19      	ldr	r3, [pc, #100]	; (8000328 <main+0x10c>)
 80002c4:	5c9b      	ldrb	r3, [r3, r2]
 80002c6:	2205      	movs	r2, #5
 80002c8:	2103      	movs	r1, #3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff3e 	bl	800014c <display_fnd>
	  display_fnd(number[random_100], 2, 5);
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <main+0x100>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <main+0x10c>)
 80002d8:	5c9b      	ldrb	r3, [r3, r2]
 80002da:	2205      	movs	r2, #5
 80002dc:	2102      	movs	r1, #2
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff34 	bl	800014c <display_fnd>
	  display_fnd(number[random_10], 1, 5);
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <main+0x104>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <main+0x10c>)
 80002ec:	5c9b      	ldrb	r3, [r3, r2]
 80002ee:	2205      	movs	r2, #5
 80002f0:	2101      	movs	r1, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff2a 	bl	800014c <display_fnd>
	  display_fnd(number[random_1], 0, 5);
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <main+0x108>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <main+0x10c>)
 8000300:	5c9b      	ldrb	r3, [r3, r2]
 8000302:	2205      	movs	r2, #5
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff20 	bl	800014c <display_fnd>
	  if(stop_flag == 0){
 800030c:	e78e      	b.n	800022c <main+0x10>
 800030e:	bf00      	nop
 8000310:	200000f8 	.word	0x200000f8
 8000314:	66666667 	.word	0x66666667
 8000318:	200000f9 	.word	0x200000f9
 800031c:	200000fa 	.word	0x200000fa
 8000320:	200000fb 	.word	0x200000fb
 8000324:	200000fc 	.word	0x200000fc
 8000328:	20000000 	.word	0x20000000

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f001 f9a6 	bl	800168c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034e:	2302      	movs	r3, #2
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	2301      	movs	r3, #1
 8000354:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000356:	2310      	movs	r3, #16
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035a:	2300      	movs	r3, #0
 800035c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fd8a 	bl	8000e7c <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800036e:	f000 f8d3 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fff8 	bl	8001380 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000396:	f000 f8bf 	bl	8000518 <Error_Handler>
  }
}
 800039a:	bf00      	nop
 800039c:	3740      	adds	r7, #64	; 0x40
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b8:	4b41      	ldr	r3, [pc, #260]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a40      	ldr	r2, [pc, #256]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	4b3b      	ldr	r3, [pc, #236]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a3a      	ldr	r2, [pc, #232]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	4b35      	ldr	r3, [pc, #212]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a34      	ldr	r2, [pc, #208]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b32      	ldr	r3, [pc, #200]	; (80004c0 <MX_GPIO_Init+0x11c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0308 	and.w	r3, r3, #8
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000400:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <MX_GPIO_Init+0x11c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a2e      	ldr	r2, [pc, #184]	; (80004c0 <MX_GPIO_Init+0x11c>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <MX_GPIO_Init+0x11c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 800041e:	4829      	ldr	r0, [pc, #164]	; (80004c4 <MX_GPIO_Init+0x120>)
 8000420:	f000 fcfb 	bl	8000e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	4827      	ldr	r0, [pc, #156]	; (80004c8 <MX_GPIO_Init+0x124>)
 800042a:	f000 fcf6 	bl	8000e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800042e:	2200      	movs	r2, #0
 8000430:	21ff      	movs	r1, #255	; 0xff
 8000432:	4826      	ldr	r0, [pc, #152]	; (80004cc <MX_GPIO_Init+0x128>)
 8000434:	f000 fcf1 	bl	8000e1a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11;
 8000438:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 800043c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2302      	movs	r3, #2
 8000448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	4619      	mov	r1, r3
 8000450:	481c      	ldr	r0, [pc, #112]	; (80004c4 <MX_GPIO_Init+0x120>)
 8000452:	f000 fb47 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000456:	2310      	movs	r3, #16
 8000458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	2301      	movs	r3, #1
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2302      	movs	r3, #2
 8000464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	4619      	mov	r1, r3
 800046c:	4816      	ldr	r0, [pc, #88]	; (80004c8 <MX_GPIO_Init+0x124>)
 800046e:	f000 fb39 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000472:	23ff      	movs	r3, #255	; 0xff
 8000474:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4810      	ldr	r0, [pc, #64]	; (80004cc <MX_GPIO_Init+0x128>)
 800048a:	f000 fb2b 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800048e:	2304      	movs	r3, #4
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_GPIO_Init+0x12c>)
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <MX_GPIO_Init+0x130>)
 80004a2:	f000 fb1f 	bl	8000ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2008      	movs	r0, #8
 80004ac:	f000 fae3 	bl	8000a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80004b0:	2008      	movs	r0, #8
 80004b2:	f000 fafc 	bl	8000aae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b6:	bf00      	nop
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010800 	.word	0x40010800
 80004c8:	40011000 	.word	0x40011000
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	10210000 	.word	0x10210000
 80004d4:	40011400 	.word	0x40011400

080004d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	80fb      	strh	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 80004e2:	2104      	movs	r1, #4
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <HAL_GPIO_EXTI_Callback+0x38>)
 80004e6:	f000 fc81 	bl	8000dec <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d10a      	bne.n	8000506 <HAL_GPIO_EXTI_Callback+0x2e>
		if(stop_flag == 1){
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_GPIO_EXTI_Callback+0x3c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d103      	bne.n	8000500 <HAL_GPIO_EXTI_Callback+0x28>
			stop_flag = 0;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_GPIO_EXTI_Callback+0x3c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
		} else {
			stop_flag = 1;
		}
	}
}
 80004fe:	e002      	b.n	8000506 <HAL_GPIO_EXTI_Callback+0x2e>
			stop_flag = 1;
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40011400 	.word	0x40011400
 8000514:	200000f8 	.word	0x200000f8

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <HAL_MspInit+0x5c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a14      	ldr	r2, [pc, #80]	; (8000580 <HAL_MspInit+0x5c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x5c>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x5c>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_MspInit+0x60>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_MspInit+0x60>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ce:	f000 f93b 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80005da:	2004      	movs	r0, #4
 80005dc:	f000 fc36 	bl	8000e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return 1;
 80005e8:	2301      	movs	r3, #1
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <_kill>:

int _kill(int pid, int sig)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80005fc:	f001 f81c 	bl	8001638 <__errno>
 8000600:	4603      	mov	r3, r0
 8000602:	2216      	movs	r2, #22
 8000604:	601a      	str	r2, [r3, #0]
  return -1;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_exit>:

void _exit (int status)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800061a:	f04f 31ff 	mov.w	r1, #4294967295
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ffe7 	bl	80005f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000624:	e7fe      	b.n	8000624 <_exit+0x12>

08000626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b086      	sub	sp, #24
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e00a      	b.n	800064e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000638:	f3af 8000 	nop.w
 800063c:	4601      	mov	r1, r0
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	1c5a      	adds	r2, r3, #1
 8000642:	60ba      	str	r2, [r7, #8]
 8000644:	b2ca      	uxtb	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	dbf0      	blt.n	8000638 <_read+0x12>
  }

  return len;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	e009      	b.n	8000686 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	60ba      	str	r2, [r7, #8]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	dbf1      	blt.n	8000672 <_write+0x12>
  }
  return len;
 800068e:	687b      	ldr	r3, [r7, #4]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <_close>:

int _close(int file)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006be:	605a      	str	r2, [r3, #4]
  return 0;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <_isatty>:

int _isatty(int file)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006d4:	2301      	movs	r3, #1
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <_sbrk+0x5c>)
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <_sbrk+0x60>)
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <_sbrk+0x64>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <_sbrk+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	429a      	cmp	r2, r3
 8000726:	d207      	bcs.n	8000738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000728:	f000 ff86 	bl	8001638 <__errno>
 800072c:	4603      	mov	r3, r0
 800072e:	220c      	movs	r2, #12
 8000730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	e009      	b.n	800074c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <_sbrk+0x64>)
 8000748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20005000 	.word	0x20005000
 8000758:	00000400 	.word	0x00000400
 800075c:	20000100 	.word	0x20000100
 8000760:	20000118 	.word	0x20000118

08000764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000770:	f7ff fff8 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000776:	490c      	ldr	r1, [pc, #48]	; (80007a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800078c:	4c09      	ldr	r4, [pc, #36]	; (80007b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079a:	f000 ff53 	bl	8001644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079e:	f7ff fd3d 	bl	800021c <main>
  bx lr
 80007a2:	4770      	bx	lr
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80007ac:	080028a4 	.word	0x080028a4
  ldr r2, =_sbss
 80007b0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80007b4:	20000118 	.word	0x20000118

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>
	...

080007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_Init+0x28>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <HAL_Init+0x28>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f947 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f808 	bl	80007e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f7ff fea4 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0x54>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f95f 	bl	8000aca <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e00e      	b.n	8000834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d80a      	bhi.n	8000832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f000 f927 	bl	8000a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_InitTick+0x5c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000006c 	.word	0x2000006c
 8000840:	20000074 	.word	0x20000074
 8000844:	20000070 	.word	0x20000070

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_IncTick+0x1c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a03      	ldr	r2, [pc, #12]	; (8000868 <HAL_IncTick+0x20>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000074 	.word	0x20000074
 8000868:	20000104 	.word	0x20000104

0800086c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <HAL_GetTick+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	20000104 	.word	0x20000104

08000880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000888:	f7ff fff0 	bl	800086c <HAL_GetTick>
 800088c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d005      	beq.n	80008a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_Delay+0x44>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a6:	bf00      	nop
 80008a8:	f7ff ffe0 	bl	800086c <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d8f7      	bhi.n	80008a8 <HAL_Delay+0x28>
  {
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000074 	.word	0x20000074

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <__NVIC_EnableIRQ+0x34>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f7ff ff90 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff2d 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff42 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff90 	bl	80009b8 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5f 	bl	8000964 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff35 	bl	800092c <__NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffa2 	bl	8000a1c <SysTick_Config>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b08b      	sub	sp, #44	; 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af6:	e169      	b.n	8000dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af8:	2201      	movs	r2, #1
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f040 8158 	bne.w	8000dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4a9a      	ldr	r2, [pc, #616]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d05e      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b20:	4a98      	ldr	r2, [pc, #608]	; (8000d84 <HAL_GPIO_Init+0x2a0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d875      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b26:	4a98      	ldr	r2, [pc, #608]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d058      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b2c:	4a96      	ldr	r2, [pc, #600]	; (8000d88 <HAL_GPIO_Init+0x2a4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d86f      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b32:	4a96      	ldr	r2, [pc, #600]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d052      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b38:	4a94      	ldr	r2, [pc, #592]	; (8000d8c <HAL_GPIO_Init+0x2a8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d869      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a94      	ldr	r2, [pc, #592]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d04c      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b44:	4a92      	ldr	r2, [pc, #584]	; (8000d90 <HAL_GPIO_Init+0x2ac>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d863      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b4a:	4a92      	ldr	r2, [pc, #584]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d046      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
 8000b50:	4a90      	ldr	r2, [pc, #576]	; (8000d94 <HAL_GPIO_Init+0x2b0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d85d      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d82a      	bhi.n	8000bb0 <HAL_GPIO_Init+0xcc>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d859      	bhi.n	8000c12 <HAL_GPIO_Init+0x12e>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <HAL_GPIO_Init+0x80>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000bdf 	.word	0x08000bdf
 8000b68:	08000bb9 	.word	0x08000bb9
 8000b6c:	08000bcb 	.word	0x08000bcb
 8000b70:	08000c0d 	.word	0x08000c0d
 8000b74:	08000c13 	.word	0x08000c13
 8000b78:	08000c13 	.word	0x08000c13
 8000b7c:	08000c13 	.word	0x08000c13
 8000b80:	08000c13 	.word	0x08000c13
 8000b84:	08000c13 	.word	0x08000c13
 8000b88:	08000c13 	.word	0x08000c13
 8000b8c:	08000c13 	.word	0x08000c13
 8000b90:	08000c13 	.word	0x08000c13
 8000b94:	08000c13 	.word	0x08000c13
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000c13 	.word	0x08000c13
 8000ba0:	08000c13 	.word	0x08000c13
 8000ba4:	08000c13 	.word	0x08000c13
 8000ba8:	08000bc1 	.word	0x08000bc1
 8000bac:	08000bd5 	.word	0x08000bd5
 8000bb0:	4a79      	ldr	r2, [pc, #484]	; (8000d98 <HAL_GPIO_Init+0x2b4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb6:	e02c      	b.n	8000c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	623b      	str	r3, [r7, #32]
          break;
 8000bbe:	e029      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	623b      	str	r3, [r7, #32]
          break;
 8000bc8:	e024      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	3308      	adds	r3, #8
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e01f      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	330c      	adds	r3, #12
 8000bda:	623b      	str	r3, [r7, #32]
          break;
 8000bdc:	e01a      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be6:	2304      	movs	r3, #4
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e013      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d105      	bne.n	8000c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	611a      	str	r2, [r3, #16]
          break;
 8000bfe:	e009      	b.n	8000c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	615a      	str	r2, [r3, #20]
          break;
 8000c0a:	e003      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x130>
          break;
 8000c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2bff      	cmp	r3, #255	; 0xff
 8000c18:	d801      	bhi.n	8000c1e <HAL_GPIO_Init+0x13a>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	e001      	b.n	8000c22 <HAL_GPIO_Init+0x13e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3304      	adds	r3, #4
 8000c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2bff      	cmp	r3, #255	; 0xff
 8000c28:	d802      	bhi.n	8000c30 <HAL_GPIO_Init+0x14c>
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	e002      	b.n	8000c36 <HAL_GPIO_Init+0x152>
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3b08      	subs	r3, #8
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	401a      	ands	r2, r3
 8000c48:	6a39      	ldr	r1, [r7, #32]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	431a      	orrs	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80b1 	beq.w	8000dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c64:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a4c      	ldr	r2, [pc, #304]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <HAL_GPIO_Init+0x2b8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c7c:	4a48      	ldr	r2, [pc, #288]	; (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a40      	ldr	r2, [pc, #256]	; (8000da4 <HAL_GPIO_Init+0x2c0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d013      	beq.n	8000cd0 <HAL_GPIO_Init+0x1ec>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a3f      	ldr	r2, [pc, #252]	; (8000da8 <HAL_GPIO_Init+0x2c4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d00d      	beq.n	8000ccc <HAL_GPIO_Init+0x1e8>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <HAL_GPIO_Init+0x2c8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d007      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e4>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3d      	ldr	r2, [pc, #244]	; (8000db0 <HAL_GPIO_Init+0x2cc>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d101      	bne.n	8000cc4 <HAL_GPIO_Init+0x1e0>
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e004      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd4:	f002 0203 	and.w	r2, r2, #3
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4093      	lsls	r3, r2
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce2:	492f      	ldr	r1, [pc, #188]	; (8000da0 <HAL_GPIO_Init+0x2bc>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	492c      	ldr	r1, [pc, #176]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	608b      	str	r3, [r1, #8]
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4928      	ldr	r1, [pc, #160]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	4922      	ldr	r1, [pc, #136]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60cb      	str	r3, [r1, #12]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	491e      	ldr	r1, [pc, #120]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4918      	ldr	r1, [pc, #96]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4914      	ldr	r1, [pc, #80]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d021      	beq.n	8000db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	490e      	ldr	r1, [pc, #56]	; (8000db4 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e021      	b.n	8000dc6 <HAL_GPIO_Init+0x2e2>
 8000d82:	bf00      	nop
 8000d84:	10320000 	.word	0x10320000
 8000d88:	10310000 	.word	0x10310000
 8000d8c:	10220000 	.word	0x10220000
 8000d90:	10210000 	.word	0x10210000
 8000d94:	10120000 	.word	0x10120000
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40010800 	.word	0x40010800
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40011400 	.word	0x40011400
 8000db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_GPIO_Init+0x304>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4909      	ldr	r1, [pc, #36]	; (8000de8 <HAL_GPIO_Init+0x304>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	3301      	adds	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f47f ae8e 	bne.w	8000af8 <HAL_GPIO_Init+0x14>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	372c      	adds	r7, #44	; 0x2c
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40010400 	.word	0x40010400

08000dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e001      	b.n	8000e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	807b      	strh	r3, [r7, #2]
 8000e26:	4613      	mov	r3, r2
 8000e28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2a:	787b      	ldrb	r3, [r7, #1]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e30:	887a      	ldrh	r2, [r7, #2]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e36:	e003      	b.n	8000e40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	041a      	lsls	r2, r3, #16
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	611a      	str	r2, [r3, #16]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb34 	bl	80004d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e272      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8087 	beq.w	8000faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e9c:	4b92      	ldr	r3, [pc, #584]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d00c      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea8:	4b8f      	ldr	r3, [pc, #572]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d112      	bne.n	8000eda <HAL_RCC_OscConfig+0x5e>
 8000eb4:	4b8c      	ldr	r3, [pc, #560]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec0:	d10b      	bne.n	8000eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec2:	4b89      	ldr	r3, [pc, #548]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d06c      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x12c>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d168      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e24c      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x76>
 8000ee4:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a7f      	ldr	r2, [pc, #508]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e02e      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x98>
 8000efa:	4b7b      	ldr	r3, [pc, #492]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a7a      	ldr	r2, [pc, #488]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a77      	ldr	r2, [pc, #476]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e01d      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0xbc>
 8000f1e:	4b72      	ldr	r3, [pc, #456]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a71      	ldr	r2, [pc, #452]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a6e      	ldr	r2, [pc, #440]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e00b      	b.n	8000f50 <HAL_RCC_OscConfig+0xd4>
 8000f38:	4b6b      	ldr	r3, [pc, #428]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a6a      	ldr	r2, [pc, #424]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a67      	ldr	r2, [pc, #412]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fc88 	bl	800086c <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fc84 	bl	800086c <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e200      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f0      	beq.n	8000f60 <HAL_RCC_OscConfig+0xe4>
 8000f7e:	e014      	b.n	8000faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fc74 	bl	800086c <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fc70 	bl	800086c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1ec      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x10c>
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d063      	beq.n	800107e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00b      	beq.n	8000fda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fc2:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d11c      	bne.n	8001008 <HAL_RCC_OscConfig+0x18c>
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d116      	bne.n	8001008 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x176>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d001      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e1c0      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4939      	ldr	r1, [pc, #228]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	e03a      	b.n	800107e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d020      	beq.n	8001052 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <HAL_RCC_OscConfig+0x270>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fc29 	bl	800086c <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101e:	f7ff fc25 	bl	800086c <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e1a1      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4927      	ldr	r1, [pc, #156]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 800104c:	4313      	orrs	r3, r2
 800104e:	600b      	str	r3, [r1, #0]
 8001050:	e015      	b.n	800107e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_RCC_OscConfig+0x270>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fc08 	bl	800086c <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001060:	f7ff fc04 	bl	800086c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e180      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d03a      	beq.n	8001100 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d019      	beq.n	80010c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_RCC_OscConfig+0x274>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001098:	f7ff fbe8 	bl	800086c <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a0:	f7ff fbe4 	bl	800086c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e160      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 fa9c 	bl	80015fc <RCC_Delay>
 80010c4:	e01c      	b.n	8001100 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_RCC_OscConfig+0x274>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010cc:	f7ff fbce 	bl	800086c <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d2:	e00f      	b.n	80010f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d4:	f7ff fbca 	bl	800086c <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d908      	bls.n	80010f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e146      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	42420000 	.word	0x42420000
 80010f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f4:	4b92      	ldr	r3, [pc, #584]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e9      	bne.n	80010d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a6 	beq.w	800125a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001112:	4b8b      	ldr	r3, [pc, #556]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10d      	bne.n	800113a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b88      	ldr	r3, [pc, #544]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a87      	ldr	r2, [pc, #540]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b85      	ldr	r3, [pc, #532]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001136:	2301      	movs	r3, #1
 8001138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113a:	4b82      	ldr	r3, [pc, #520]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d118      	bne.n	8001178 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001146:	4b7f      	ldr	r3, [pc, #508]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7e      	ldr	r2, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001152:	f7ff fb8b 	bl	800086c <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115a:	f7ff fb87 	bl	800086c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b64      	cmp	r3, #100	; 0x64
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e103      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	4b75      	ldr	r3, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x4c8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d106      	bne.n	800118e <HAL_RCC_OscConfig+0x312>
 8001180:	4b6f      	ldr	r3, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a6e      	ldr	r2, [pc, #440]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6213      	str	r3, [r2, #32]
 800118c:	e02d      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x334>
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a69      	ldr	r2, [pc, #420]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a66      	ldr	r2, [pc, #408]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	e01c      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d10c      	bne.n	80011d2 <HAL_RCC_OscConfig+0x356>
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a60      	ldr	r2, [pc, #384]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	4b5e      	ldr	r3, [pc, #376]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a5d      	ldr	r2, [pc, #372]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	e00b      	b.n	80011ea <HAL_RCC_OscConfig+0x36e>
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6213      	str	r3, [r2, #32]
 80011de:	4b58      	ldr	r3, [pc, #352]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a57      	ldr	r2, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d015      	beq.n	800121e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb3b 	bl	800086c <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f7ff fb37 	bl	800086c <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f241 3288 	movw	r2, #5000	; 0x1388
 8001208:	4293      	cmp	r3, r2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0b1      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0ee      	beq.n	80011fa <HAL_RCC_OscConfig+0x37e>
 800121c:	e014      	b.n	8001248 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb25 	bl	800086c <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fb21 	bl	800086c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e09b      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ee      	bne.n	8001226 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124e:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a3b      	ldr	r2, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001258:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8087 	beq.w	8001372 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001264:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b08      	cmp	r3, #8
 800126e:	d061      	beq.n	8001334 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d146      	bne.n	8001306 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff faf5 	bl	800086c <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff faf1 	bl	800086c <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e06d      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d108      	bne.n	80012c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	4921      	ldr	r1, [pc, #132]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a19      	ldr	r1, [r3, #32]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	430b      	orrs	r3, r1
 80012d2:	491b      	ldr	r1, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fac5 	bl	800086c <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff fac1 	bl	800086c <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x46a>
 8001304:	e035      	b.n	8001372 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_RCC_OscConfig+0x4cc>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff faae 	bl	800086c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff faaa 	bl	800086c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e026      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x498>
 8001332:	e01e      	b.n	8001372 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d107      	bne.n	800134c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e019      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
 8001340:	40021000 	.word	0x40021000
 8001344:	40007000 	.word	0x40007000
 8001348:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x500>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	429a      	cmp	r2, r3
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0d0      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d910      	bls.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0207 	bic.w	r2, r3, #7
 80013aa:	4965      	ldr	r1, [pc, #404]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0b8      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013dc:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	494d      	ldr	r1, [pc, #308]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d040      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d115      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e07f      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e073      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06b      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f023 0203 	bic.w	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4936      	ldr	r1, [pc, #216]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff f9fc 	bl	800086c <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	e00a      	b.n	800148e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	f7ff f9f8 	bl	800086c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e053      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 020c 	and.w	r2, r3, #12
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d1eb      	bne.n	8001478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d210      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4922      	ldr	r1, [pc, #136]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e032      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4916      	ldr	r1, [pc, #88]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490e      	ldr	r1, [pc, #56]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f821 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490a      	ldr	r1, [pc, #40]	; (8001548 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1cc>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_ClockConfig+0x1d0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f95a 	bl	80007e8 <HAL_InitTick>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000
 8001544:	40021000 	.word	0x40021000
 8001548:	08002730 	.word	0x08002730
 800154c:	2000006c 	.word	0x2000006c
 8001550:	20000070 	.word	0x20000070

08001554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b04      	cmp	r3, #4
 800157c:	d002      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x30>
 800157e:	2b08      	cmp	r3, #8
 8001580:	d003      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x36>
 8001582:	e027      	b.n	80015d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001586:	613b      	str	r3, [r7, #16]
      break;
 8001588:	e027      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	0c9b      	lsrs	r3, r3, #18
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d010      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	0c5b      	lsrs	r3, r3, #17
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_RCC_GetSysClockFreq+0x98>)
 80015b6:	fb03 f202 	mul.w	r2, r3, r2
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e004      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	613b      	str	r3, [r7, #16]
      break;
 80015d2:	e002      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_RCC_GetSysClockFreq+0x98>)
 80015d6:	613b      	str	r3, [r7, #16]
      break;
 80015d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015da:	693b      	ldr	r3, [r7, #16]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	007a1200 	.word	0x007a1200
 80015f0:	08002740 	.word	0x08002740
 80015f4:	08002750 	.word	0x08002750
 80015f8:	003d0900 	.word	0x003d0900

080015fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <RCC_Delay+0x34>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <RCC_Delay+0x38>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0a5b      	lsrs	r3, r3, #9
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001618:	bf00      	nop
  }
  while (Delay --);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	60fa      	str	r2, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f9      	bne.n	8001618 <RCC_Delay+0x1c>
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	2000006c 	.word	0x2000006c
 8001634:	10624dd3 	.word	0x10624dd3

08001638 <__errno>:
 8001638:	4b01      	ldr	r3, [pc, #4]	; (8001640 <__errno+0x8>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000078 	.word	0x20000078

08001644 <__libc_init_array>:
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	2600      	movs	r6, #0
 8001648:	4d0c      	ldr	r5, [pc, #48]	; (800167c <__libc_init_array+0x38>)
 800164a:	4c0d      	ldr	r4, [pc, #52]	; (8001680 <__libc_init_array+0x3c>)
 800164c:	1b64      	subs	r4, r4, r5
 800164e:	10a4      	asrs	r4, r4, #2
 8001650:	42a6      	cmp	r6, r4
 8001652:	d109      	bne.n	8001668 <__libc_init_array+0x24>
 8001654:	f001 f860 	bl	8002718 <_init>
 8001658:	2600      	movs	r6, #0
 800165a:	4d0a      	ldr	r5, [pc, #40]	; (8001684 <__libc_init_array+0x40>)
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <__libc_init_array+0x44>)
 800165e:	1b64      	subs	r4, r4, r5
 8001660:	10a4      	asrs	r4, r4, #2
 8001662:	42a6      	cmp	r6, r4
 8001664:	d105      	bne.n	8001672 <__libc_init_array+0x2e>
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	f855 3b04 	ldr.w	r3, [r5], #4
 800166c:	4798      	blx	r3
 800166e:	3601      	adds	r6, #1
 8001670:	e7ee      	b.n	8001650 <__libc_init_array+0xc>
 8001672:	f855 3b04 	ldr.w	r3, [r5], #4
 8001676:	4798      	blx	r3
 8001678:	3601      	adds	r6, #1
 800167a:	e7f2      	b.n	8001662 <__libc_init_array+0x1e>
 800167c:	0800289c 	.word	0x0800289c
 8001680:	0800289c 	.word	0x0800289c
 8001684:	0800289c 	.word	0x0800289c
 8001688:	080028a0 	.word	0x080028a0

0800168c <memset>:
 800168c:	4603      	mov	r3, r0
 800168e:	4402      	add	r2, r0
 8001690:	4293      	cmp	r3, r2
 8001692:	d100      	bne.n	8001696 <memset+0xa>
 8001694:	4770      	bx	lr
 8001696:	f803 1b01 	strb.w	r1, [r3], #1
 800169a:	e7f9      	b.n	8001690 <memset+0x4>

0800169c <rand>:
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <rand+0x5c>)
 800169e:	b510      	push	{r4, lr}
 80016a0:	681c      	ldr	r4, [r3, #0]
 80016a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016a4:	b9b3      	cbnz	r3, 80016d4 <rand+0x38>
 80016a6:	2018      	movs	r0, #24
 80016a8:	f000 f866 	bl	8001778 <malloc>
 80016ac:	4602      	mov	r2, r0
 80016ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80016b0:	b920      	cbnz	r0, 80016bc <rand+0x20>
 80016b2:	214e      	movs	r1, #78	; 0x4e
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <rand+0x60>)
 80016b6:	4812      	ldr	r0, [pc, #72]	; (8001700 <rand+0x64>)
 80016b8:	f000 f82e 	bl	8001718 <__assert_func>
 80016bc:	4911      	ldr	r1, [pc, #68]	; (8001704 <rand+0x68>)
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <rand+0x6c>)
 80016c0:	e9c0 1300 	strd	r1, r3, [r0]
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <rand+0x70>)
 80016c6:	2100      	movs	r1, #0
 80016c8:	6083      	str	r3, [r0, #8]
 80016ca:	230b      	movs	r3, #11
 80016cc:	8183      	strh	r3, [r0, #12]
 80016ce:	2001      	movs	r0, #1
 80016d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80016d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <rand+0x74>)
 80016d8:	6920      	ldr	r0, [r4, #16]
 80016da:	6963      	ldr	r3, [r4, #20]
 80016dc:	4342      	muls	r2, r0
 80016de:	490d      	ldr	r1, [pc, #52]	; (8001714 <rand+0x78>)
 80016e0:	fb01 2203 	mla	r2, r1, r3, r2
 80016e4:	fba0 0101 	umull	r0, r1, r0, r1
 80016e8:	1c43      	adds	r3, r0, #1
 80016ea:	eb42 0001 	adc.w	r0, r2, r1
 80016ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80016f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	20000078 	.word	0x20000078
 80016fc:	08002758 	.word	0x08002758
 8001700:	0800276f 	.word	0x0800276f
 8001704:	abcd330e 	.word	0xabcd330e
 8001708:	e66d1234 	.word	0xe66d1234
 800170c:	0005deec 	.word	0x0005deec
 8001710:	5851f42d 	.word	0x5851f42d
 8001714:	4c957f2d 	.word	0x4c957f2d

08001718 <__assert_func>:
 8001718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800171a:	4614      	mov	r4, r2
 800171c:	461a      	mov	r2, r3
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <__assert_func+0x2c>)
 8001720:	4605      	mov	r5, r0
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68d8      	ldr	r0, [r3, #12]
 8001726:	b14c      	cbz	r4, 800173c <__assert_func+0x24>
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <__assert_func+0x30>)
 800172a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800172e:	9100      	str	r1, [sp, #0]
 8001730:	462b      	mov	r3, r5
 8001732:	4906      	ldr	r1, [pc, #24]	; (800174c <__assert_func+0x34>)
 8001734:	f000 f80e 	bl	8001754 <fiprintf>
 8001738:	f000 fcc0 	bl	80020bc <abort>
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__assert_func+0x38>)
 800173e:	461c      	mov	r4, r3
 8001740:	e7f3      	b.n	800172a <__assert_func+0x12>
 8001742:	bf00      	nop
 8001744:	20000078 	.word	0x20000078
 8001748:	080027ca 	.word	0x080027ca
 800174c:	080027d7 	.word	0x080027d7
 8001750:	08002805 	.word	0x08002805

08001754 <fiprintf>:
 8001754:	b40e      	push	{r1, r2, r3}
 8001756:	b503      	push	{r0, r1, lr}
 8001758:	4601      	mov	r1, r0
 800175a:	ab03      	add	r3, sp, #12
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <fiprintf+0x20>)
 800175e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001762:	6800      	ldr	r0, [r0, #0]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f000 f913 	bl	8001990 <_vfiprintf_r>
 800176a:	b002      	add	sp, #8
 800176c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001770:	b003      	add	sp, #12
 8001772:	4770      	bx	lr
 8001774:	20000078 	.word	0x20000078

08001778 <malloc>:
 8001778:	4b02      	ldr	r3, [pc, #8]	; (8001784 <malloc+0xc>)
 800177a:	4601      	mov	r1, r0
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	f000 b86b 	b.w	8001858 <_malloc_r>
 8001782:	bf00      	nop
 8001784:	20000078 	.word	0x20000078

08001788 <_free_r>:
 8001788:	b538      	push	{r3, r4, r5, lr}
 800178a:	4605      	mov	r5, r0
 800178c:	2900      	cmp	r1, #0
 800178e:	d040      	beq.n	8001812 <_free_r+0x8a>
 8001790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001794:	1f0c      	subs	r4, r1, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	bfb8      	it	lt
 800179a:	18e4      	addlt	r4, r4, r3
 800179c:	f000 fec0 	bl	8002520 <__malloc_lock>
 80017a0:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <_free_r+0x8c>)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	b933      	cbnz	r3, 80017b4 <_free_r+0x2c>
 80017a6:	6063      	str	r3, [r4, #4]
 80017a8:	6014      	str	r4, [r2, #0]
 80017aa:	4628      	mov	r0, r5
 80017ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017b0:	f000 bebc 	b.w	800252c <__malloc_unlock>
 80017b4:	42a3      	cmp	r3, r4
 80017b6:	d908      	bls.n	80017ca <_free_r+0x42>
 80017b8:	6820      	ldr	r0, [r4, #0]
 80017ba:	1821      	adds	r1, r4, r0
 80017bc:	428b      	cmp	r3, r1
 80017be:	bf01      	itttt	eq
 80017c0:	6819      	ldreq	r1, [r3, #0]
 80017c2:	685b      	ldreq	r3, [r3, #4]
 80017c4:	1809      	addeq	r1, r1, r0
 80017c6:	6021      	streq	r1, [r4, #0]
 80017c8:	e7ed      	b.n	80017a6 <_free_r+0x1e>
 80017ca:	461a      	mov	r2, r3
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	b10b      	cbz	r3, 80017d4 <_free_r+0x4c>
 80017d0:	42a3      	cmp	r3, r4
 80017d2:	d9fa      	bls.n	80017ca <_free_r+0x42>
 80017d4:	6811      	ldr	r1, [r2, #0]
 80017d6:	1850      	adds	r0, r2, r1
 80017d8:	42a0      	cmp	r0, r4
 80017da:	d10b      	bne.n	80017f4 <_free_r+0x6c>
 80017dc:	6820      	ldr	r0, [r4, #0]
 80017de:	4401      	add	r1, r0
 80017e0:	1850      	adds	r0, r2, r1
 80017e2:	4283      	cmp	r3, r0
 80017e4:	6011      	str	r1, [r2, #0]
 80017e6:	d1e0      	bne.n	80017aa <_free_r+0x22>
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4401      	add	r1, r0
 80017ee:	6011      	str	r1, [r2, #0]
 80017f0:	6053      	str	r3, [r2, #4]
 80017f2:	e7da      	b.n	80017aa <_free_r+0x22>
 80017f4:	d902      	bls.n	80017fc <_free_r+0x74>
 80017f6:	230c      	movs	r3, #12
 80017f8:	602b      	str	r3, [r5, #0]
 80017fa:	e7d6      	b.n	80017aa <_free_r+0x22>
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	1821      	adds	r1, r4, r0
 8001800:	428b      	cmp	r3, r1
 8001802:	bf01      	itttt	eq
 8001804:	6819      	ldreq	r1, [r3, #0]
 8001806:	685b      	ldreq	r3, [r3, #4]
 8001808:	1809      	addeq	r1, r1, r0
 800180a:	6021      	streq	r1, [r4, #0]
 800180c:	6063      	str	r3, [r4, #4]
 800180e:	6054      	str	r4, [r2, #4]
 8001810:	e7cb      	b.n	80017aa <_free_r+0x22>
 8001812:	bd38      	pop	{r3, r4, r5, pc}
 8001814:	20000108 	.word	0x20000108

08001818 <sbrk_aligned>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	4e0e      	ldr	r6, [pc, #56]	; (8001854 <sbrk_aligned+0x3c>)
 800181c:	460c      	mov	r4, r1
 800181e:	6831      	ldr	r1, [r6, #0]
 8001820:	4605      	mov	r5, r0
 8001822:	b911      	cbnz	r1, 800182a <sbrk_aligned+0x12>
 8001824:	f000 fb7a 	bl	8001f1c <_sbrk_r>
 8001828:	6030      	str	r0, [r6, #0]
 800182a:	4621      	mov	r1, r4
 800182c:	4628      	mov	r0, r5
 800182e:	f000 fb75 	bl	8001f1c <_sbrk_r>
 8001832:	1c43      	adds	r3, r0, #1
 8001834:	d00a      	beq.n	800184c <sbrk_aligned+0x34>
 8001836:	1cc4      	adds	r4, r0, #3
 8001838:	f024 0403 	bic.w	r4, r4, #3
 800183c:	42a0      	cmp	r0, r4
 800183e:	d007      	beq.n	8001850 <sbrk_aligned+0x38>
 8001840:	1a21      	subs	r1, r4, r0
 8001842:	4628      	mov	r0, r5
 8001844:	f000 fb6a 	bl	8001f1c <_sbrk_r>
 8001848:	3001      	adds	r0, #1
 800184a:	d101      	bne.n	8001850 <sbrk_aligned+0x38>
 800184c:	f04f 34ff 	mov.w	r4, #4294967295
 8001850:	4620      	mov	r0, r4
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	2000010c 	.word	0x2000010c

08001858 <_malloc_r>:
 8001858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800185c:	1ccd      	adds	r5, r1, #3
 800185e:	f025 0503 	bic.w	r5, r5, #3
 8001862:	3508      	adds	r5, #8
 8001864:	2d0c      	cmp	r5, #12
 8001866:	bf38      	it	cc
 8001868:	250c      	movcc	r5, #12
 800186a:	2d00      	cmp	r5, #0
 800186c:	4607      	mov	r7, r0
 800186e:	db01      	blt.n	8001874 <_malloc_r+0x1c>
 8001870:	42a9      	cmp	r1, r5
 8001872:	d905      	bls.n	8001880 <_malloc_r+0x28>
 8001874:	230c      	movs	r3, #12
 8001876:	2600      	movs	r6, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4630      	mov	r0, r6
 800187c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001880:	4e2e      	ldr	r6, [pc, #184]	; (800193c <_malloc_r+0xe4>)
 8001882:	f000 fe4d 	bl	8002520 <__malloc_lock>
 8001886:	6833      	ldr	r3, [r6, #0]
 8001888:	461c      	mov	r4, r3
 800188a:	bb34      	cbnz	r4, 80018da <_malloc_r+0x82>
 800188c:	4629      	mov	r1, r5
 800188e:	4638      	mov	r0, r7
 8001890:	f7ff ffc2 	bl	8001818 <sbrk_aligned>
 8001894:	1c43      	adds	r3, r0, #1
 8001896:	4604      	mov	r4, r0
 8001898:	d14d      	bne.n	8001936 <_malloc_r+0xde>
 800189a:	6834      	ldr	r4, [r6, #0]
 800189c:	4626      	mov	r6, r4
 800189e:	2e00      	cmp	r6, #0
 80018a0:	d140      	bne.n	8001924 <_malloc_r+0xcc>
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	4631      	mov	r1, r6
 80018a6:	4638      	mov	r0, r7
 80018a8:	eb04 0803 	add.w	r8, r4, r3
 80018ac:	f000 fb36 	bl	8001f1c <_sbrk_r>
 80018b0:	4580      	cmp	r8, r0
 80018b2:	d13a      	bne.n	800192a <_malloc_r+0xd2>
 80018b4:	6821      	ldr	r1, [r4, #0]
 80018b6:	3503      	adds	r5, #3
 80018b8:	1a6d      	subs	r5, r5, r1
 80018ba:	f025 0503 	bic.w	r5, r5, #3
 80018be:	3508      	adds	r5, #8
 80018c0:	2d0c      	cmp	r5, #12
 80018c2:	bf38      	it	cc
 80018c4:	250c      	movcc	r5, #12
 80018c6:	4638      	mov	r0, r7
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7ff ffa5 	bl	8001818 <sbrk_aligned>
 80018ce:	3001      	adds	r0, #1
 80018d0:	d02b      	beq.n	800192a <_malloc_r+0xd2>
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	442b      	add	r3, r5
 80018d6:	6023      	str	r3, [r4, #0]
 80018d8:	e00e      	b.n	80018f8 <_malloc_r+0xa0>
 80018da:	6822      	ldr	r2, [r4, #0]
 80018dc:	1b52      	subs	r2, r2, r5
 80018de:	d41e      	bmi.n	800191e <_malloc_r+0xc6>
 80018e0:	2a0b      	cmp	r2, #11
 80018e2:	d916      	bls.n	8001912 <_malloc_r+0xba>
 80018e4:	1961      	adds	r1, r4, r5
 80018e6:	42a3      	cmp	r3, r4
 80018e8:	6025      	str	r5, [r4, #0]
 80018ea:	bf18      	it	ne
 80018ec:	6059      	strne	r1, [r3, #4]
 80018ee:	6863      	ldr	r3, [r4, #4]
 80018f0:	bf08      	it	eq
 80018f2:	6031      	streq	r1, [r6, #0]
 80018f4:	5162      	str	r2, [r4, r5]
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	4638      	mov	r0, r7
 80018fa:	f104 060b 	add.w	r6, r4, #11
 80018fe:	f000 fe15 	bl	800252c <__malloc_unlock>
 8001902:	f026 0607 	bic.w	r6, r6, #7
 8001906:	1d23      	adds	r3, r4, #4
 8001908:	1af2      	subs	r2, r6, r3
 800190a:	d0b6      	beq.n	800187a <_malloc_r+0x22>
 800190c:	1b9b      	subs	r3, r3, r6
 800190e:	50a3      	str	r3, [r4, r2]
 8001910:	e7b3      	b.n	800187a <_malloc_r+0x22>
 8001912:	6862      	ldr	r2, [r4, #4]
 8001914:	42a3      	cmp	r3, r4
 8001916:	bf0c      	ite	eq
 8001918:	6032      	streq	r2, [r6, #0]
 800191a:	605a      	strne	r2, [r3, #4]
 800191c:	e7ec      	b.n	80018f8 <_malloc_r+0xa0>
 800191e:	4623      	mov	r3, r4
 8001920:	6864      	ldr	r4, [r4, #4]
 8001922:	e7b2      	b.n	800188a <_malloc_r+0x32>
 8001924:	4634      	mov	r4, r6
 8001926:	6876      	ldr	r6, [r6, #4]
 8001928:	e7b9      	b.n	800189e <_malloc_r+0x46>
 800192a:	230c      	movs	r3, #12
 800192c:	4638      	mov	r0, r7
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	f000 fdfc 	bl	800252c <__malloc_unlock>
 8001934:	e7a1      	b.n	800187a <_malloc_r+0x22>
 8001936:	6025      	str	r5, [r4, #0]
 8001938:	e7de      	b.n	80018f8 <_malloc_r+0xa0>
 800193a:	bf00      	nop
 800193c:	20000108 	.word	0x20000108

08001940 <__sfputc_r>:
 8001940:	6893      	ldr	r3, [r2, #8]
 8001942:	b410      	push	{r4}
 8001944:	3b01      	subs	r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	6093      	str	r3, [r2, #8]
 800194a:	da07      	bge.n	800195c <__sfputc_r+0x1c>
 800194c:	6994      	ldr	r4, [r2, #24]
 800194e:	42a3      	cmp	r3, r4
 8001950:	db01      	blt.n	8001956 <__sfputc_r+0x16>
 8001952:	290a      	cmp	r1, #10
 8001954:	d102      	bne.n	800195c <__sfputc_r+0x1c>
 8001956:	bc10      	pop	{r4}
 8001958:	f000 baf0 	b.w	8001f3c <__swbuf_r>
 800195c:	6813      	ldr	r3, [r2, #0]
 800195e:	1c58      	adds	r0, r3, #1
 8001960:	6010      	str	r0, [r2, #0]
 8001962:	7019      	strb	r1, [r3, #0]
 8001964:	4608      	mov	r0, r1
 8001966:	bc10      	pop	{r4}
 8001968:	4770      	bx	lr

0800196a <__sfputs_r>:
 800196a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196c:	4606      	mov	r6, r0
 800196e:	460f      	mov	r7, r1
 8001970:	4614      	mov	r4, r2
 8001972:	18d5      	adds	r5, r2, r3
 8001974:	42ac      	cmp	r4, r5
 8001976:	d101      	bne.n	800197c <__sfputs_r+0x12>
 8001978:	2000      	movs	r0, #0
 800197a:	e007      	b.n	800198c <__sfputs_r+0x22>
 800197c:	463a      	mov	r2, r7
 800197e:	4630      	mov	r0, r6
 8001980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001984:	f7ff ffdc 	bl	8001940 <__sfputc_r>
 8001988:	1c43      	adds	r3, r0, #1
 800198a:	d1f3      	bne.n	8001974 <__sfputs_r+0xa>
 800198c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001990 <_vfiprintf_r>:
 8001990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001994:	460d      	mov	r5, r1
 8001996:	4614      	mov	r4, r2
 8001998:	4698      	mov	r8, r3
 800199a:	4606      	mov	r6, r0
 800199c:	b09d      	sub	sp, #116	; 0x74
 800199e:	b118      	cbz	r0, 80019a8 <_vfiprintf_r+0x18>
 80019a0:	6983      	ldr	r3, [r0, #24]
 80019a2:	b90b      	cbnz	r3, 80019a8 <_vfiprintf_r+0x18>
 80019a4:	f000 fca8 	bl	80022f8 <__sinit>
 80019a8:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <_vfiprintf_r+0x240>)
 80019aa:	429d      	cmp	r5, r3
 80019ac:	d11b      	bne.n	80019e6 <_vfiprintf_r+0x56>
 80019ae:	6875      	ldr	r5, [r6, #4]
 80019b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019b2:	07d9      	lsls	r1, r3, #31
 80019b4:	d405      	bmi.n	80019c2 <_vfiprintf_r+0x32>
 80019b6:	89ab      	ldrh	r3, [r5, #12]
 80019b8:	059a      	lsls	r2, r3, #22
 80019ba:	d402      	bmi.n	80019c2 <_vfiprintf_r+0x32>
 80019bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019be:	f000 fd39 	bl	8002434 <__retarget_lock_acquire_recursive>
 80019c2:	89ab      	ldrh	r3, [r5, #12]
 80019c4:	071b      	lsls	r3, r3, #28
 80019c6:	d501      	bpl.n	80019cc <_vfiprintf_r+0x3c>
 80019c8:	692b      	ldr	r3, [r5, #16]
 80019ca:	b9eb      	cbnz	r3, 8001a08 <_vfiprintf_r+0x78>
 80019cc:	4629      	mov	r1, r5
 80019ce:	4630      	mov	r0, r6
 80019d0:	f000 fb06 	bl	8001fe0 <__swsetup_r>
 80019d4:	b1c0      	cbz	r0, 8001a08 <_vfiprintf_r+0x78>
 80019d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019d8:	07dc      	lsls	r4, r3, #31
 80019da:	d50e      	bpl.n	80019fa <_vfiprintf_r+0x6a>
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	b01d      	add	sp, #116	; 0x74
 80019e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e6:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <_vfiprintf_r+0x244>)
 80019e8:	429d      	cmp	r5, r3
 80019ea:	d101      	bne.n	80019f0 <_vfiprintf_r+0x60>
 80019ec:	68b5      	ldr	r5, [r6, #8]
 80019ee:	e7df      	b.n	80019b0 <_vfiprintf_r+0x20>
 80019f0:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <_vfiprintf_r+0x248>)
 80019f2:	429d      	cmp	r5, r3
 80019f4:	bf08      	it	eq
 80019f6:	68f5      	ldreq	r5, [r6, #12]
 80019f8:	e7da      	b.n	80019b0 <_vfiprintf_r+0x20>
 80019fa:	89ab      	ldrh	r3, [r5, #12]
 80019fc:	0598      	lsls	r0, r3, #22
 80019fe:	d4ed      	bmi.n	80019dc <_vfiprintf_r+0x4c>
 8001a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a02:	f000 fd18 	bl	8002436 <__retarget_lock_release_recursive>
 8001a06:	e7e9      	b.n	80019dc <_vfiprintf_r+0x4c>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a12:	2330      	movs	r3, #48	; 0x30
 8001a14:	f04f 0901 	mov.w	r9, #1
 8001a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a1c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001bdc <_vfiprintf_r+0x24c>
 8001a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a24:	4623      	mov	r3, r4
 8001a26:	469a      	mov	sl, r3
 8001a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a2c:	b10a      	cbz	r2, 8001a32 <_vfiprintf_r+0xa2>
 8001a2e:	2a25      	cmp	r2, #37	; 0x25
 8001a30:	d1f9      	bne.n	8001a26 <_vfiprintf_r+0x96>
 8001a32:	ebba 0b04 	subs.w	fp, sl, r4
 8001a36:	d00b      	beq.n	8001a50 <_vfiprintf_r+0xc0>
 8001a38:	465b      	mov	r3, fp
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f7ff ff93 	bl	800196a <__sfputs_r>
 8001a44:	3001      	adds	r0, #1
 8001a46:	f000 80aa 	beq.w	8001b9e <_vfiprintf_r+0x20e>
 8001a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a4c:	445a      	add	r2, fp
 8001a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8001a50:	f89a 3000 	ldrb.w	r3, [sl]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a2 	beq.w	8001b9e <_vfiprintf_r+0x20e>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a64:	f10a 0a01 	add.w	sl, sl, #1
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	9307      	str	r3, [sp, #28]
 8001a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a70:	931a      	str	r3, [sp, #104]	; 0x68
 8001a72:	4654      	mov	r4, sl
 8001a74:	2205      	movs	r2, #5
 8001a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a7a:	4858      	ldr	r0, [pc, #352]	; (8001bdc <_vfiprintf_r+0x24c>)
 8001a7c:	f000 fd42 	bl	8002504 <memchr>
 8001a80:	9a04      	ldr	r2, [sp, #16]
 8001a82:	b9d8      	cbnz	r0, 8001abc <_vfiprintf_r+0x12c>
 8001a84:	06d1      	lsls	r1, r2, #27
 8001a86:	bf44      	itt	mi
 8001a88:	2320      	movmi	r3, #32
 8001a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a8e:	0713      	lsls	r3, r2, #28
 8001a90:	bf44      	itt	mi
 8001a92:	232b      	movmi	r3, #43	; 0x2b
 8001a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a98:	f89a 3000 	ldrb.w	r3, [sl]
 8001a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a9e:	d015      	beq.n	8001acc <_vfiprintf_r+0x13c>
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f04f 0c0a 	mov.w	ip, #10
 8001aa8:	9a07      	ldr	r2, [sp, #28]
 8001aaa:	4621      	mov	r1, r4
 8001aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ab0:	3b30      	subs	r3, #48	; 0x30
 8001ab2:	2b09      	cmp	r3, #9
 8001ab4:	d94e      	bls.n	8001b54 <_vfiprintf_r+0x1c4>
 8001ab6:	b1b0      	cbz	r0, 8001ae6 <_vfiprintf_r+0x156>
 8001ab8:	9207      	str	r2, [sp, #28]
 8001aba:	e014      	b.n	8001ae6 <_vfiprintf_r+0x156>
 8001abc:	eba0 0308 	sub.w	r3, r0, r8
 8001ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	46a2      	mov	sl, r4
 8001ac8:	9304      	str	r3, [sp, #16]
 8001aca:	e7d2      	b.n	8001a72 <_vfiprintf_r+0xe2>
 8001acc:	9b03      	ldr	r3, [sp, #12]
 8001ace:	1d19      	adds	r1, r3, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	9103      	str	r1, [sp, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bfbb      	ittet	lt
 8001ad8:	425b      	neglt	r3, r3
 8001ada:	f042 0202 	orrlt.w	r2, r2, #2
 8001ade:	9307      	strge	r3, [sp, #28]
 8001ae0:	9307      	strlt	r3, [sp, #28]
 8001ae2:	bfb8      	it	lt
 8001ae4:	9204      	strlt	r2, [sp, #16]
 8001ae6:	7823      	ldrb	r3, [r4, #0]
 8001ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8001aea:	d10c      	bne.n	8001b06 <_vfiprintf_r+0x176>
 8001aec:	7863      	ldrb	r3, [r4, #1]
 8001aee:	2b2a      	cmp	r3, #42	; 0x2a
 8001af0:	d135      	bne.n	8001b5e <_vfiprintf_r+0x1ce>
 8001af2:	9b03      	ldr	r3, [sp, #12]
 8001af4:	3402      	adds	r4, #2
 8001af6:	1d1a      	adds	r2, r3, #4
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	9203      	str	r2, [sp, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bfb8      	it	lt
 8001b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b04:	9305      	str	r3, [sp, #20]
 8001b06:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001be0 <_vfiprintf_r+0x250>
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4650      	mov	r0, sl
 8001b0e:	7821      	ldrb	r1, [r4, #0]
 8001b10:	f000 fcf8 	bl	8002504 <memchr>
 8001b14:	b140      	cbz	r0, 8001b28 <_vfiprintf_r+0x198>
 8001b16:	2340      	movs	r3, #64	; 0x40
 8001b18:	eba0 000a 	sub.w	r0, r0, sl
 8001b1c:	fa03 f000 	lsl.w	r0, r3, r0
 8001b20:	9b04      	ldr	r3, [sp, #16]
 8001b22:	3401      	adds	r4, #1
 8001b24:	4303      	orrs	r3, r0
 8001b26:	9304      	str	r3, [sp, #16]
 8001b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b2c:	2206      	movs	r2, #6
 8001b2e:	482d      	ldr	r0, [pc, #180]	; (8001be4 <_vfiprintf_r+0x254>)
 8001b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b34:	f000 fce6 	bl	8002504 <memchr>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d03f      	beq.n	8001bbc <_vfiprintf_r+0x22c>
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <_vfiprintf_r+0x258>)
 8001b3e:	bb1b      	cbnz	r3, 8001b88 <_vfiprintf_r+0x1f8>
 8001b40:	9b03      	ldr	r3, [sp, #12]
 8001b42:	3307      	adds	r3, #7
 8001b44:	f023 0307 	bic.w	r3, r3, #7
 8001b48:	3308      	adds	r3, #8
 8001b4a:	9303      	str	r3, [sp, #12]
 8001b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b4e:	443b      	add	r3, r7
 8001b50:	9309      	str	r3, [sp, #36]	; 0x24
 8001b52:	e767      	b.n	8001a24 <_vfiprintf_r+0x94>
 8001b54:	460c      	mov	r4, r1
 8001b56:	2001      	movs	r0, #1
 8001b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b5c:	e7a5      	b.n	8001aaa <_vfiprintf_r+0x11a>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f04f 0c0a 	mov.w	ip, #10
 8001b64:	4619      	mov	r1, r3
 8001b66:	3401      	adds	r4, #1
 8001b68:	9305      	str	r3, [sp, #20]
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b70:	3a30      	subs	r2, #48	; 0x30
 8001b72:	2a09      	cmp	r2, #9
 8001b74:	d903      	bls.n	8001b7e <_vfiprintf_r+0x1ee>
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0c5      	beq.n	8001b06 <_vfiprintf_r+0x176>
 8001b7a:	9105      	str	r1, [sp, #20]
 8001b7c:	e7c3      	b.n	8001b06 <_vfiprintf_r+0x176>
 8001b7e:	4604      	mov	r4, r0
 8001b80:	2301      	movs	r3, #1
 8001b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b86:	e7f0      	b.n	8001b6a <_vfiprintf_r+0x1da>
 8001b88:	ab03      	add	r3, sp, #12
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	462a      	mov	r2, r5
 8001b8e:	4630      	mov	r0, r6
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <_vfiprintf_r+0x25c>)
 8001b92:	a904      	add	r1, sp, #16
 8001b94:	f3af 8000 	nop.w
 8001b98:	4607      	mov	r7, r0
 8001b9a:	1c78      	adds	r0, r7, #1
 8001b9c:	d1d6      	bne.n	8001b4c <_vfiprintf_r+0x1bc>
 8001b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ba0:	07d9      	lsls	r1, r3, #31
 8001ba2:	d405      	bmi.n	8001bb0 <_vfiprintf_r+0x220>
 8001ba4:	89ab      	ldrh	r3, [r5, #12]
 8001ba6:	059a      	lsls	r2, r3, #22
 8001ba8:	d402      	bmi.n	8001bb0 <_vfiprintf_r+0x220>
 8001baa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bac:	f000 fc43 	bl	8002436 <__retarget_lock_release_recursive>
 8001bb0:	89ab      	ldrh	r3, [r5, #12]
 8001bb2:	065b      	lsls	r3, r3, #25
 8001bb4:	f53f af12 	bmi.w	80019dc <_vfiprintf_r+0x4c>
 8001bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bba:	e711      	b.n	80019e0 <_vfiprintf_r+0x50>
 8001bbc:	ab03      	add	r3, sp, #12
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	462a      	mov	r2, r5
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <_vfiprintf_r+0x25c>)
 8001bc6:	a904      	add	r1, sp, #16
 8001bc8:	f000 f882 	bl	8001cd0 <_printf_i>
 8001bcc:	e7e4      	b.n	8001b98 <_vfiprintf_r+0x208>
 8001bce:	bf00      	nop
 8001bd0:	0800285c 	.word	0x0800285c
 8001bd4:	0800287c 	.word	0x0800287c
 8001bd8:	0800283c 	.word	0x0800283c
 8001bdc:	08002806 	.word	0x08002806
 8001be0:	0800280c 	.word	0x0800280c
 8001be4:	08002810 	.word	0x08002810
 8001be8:	00000000 	.word	0x00000000
 8001bec:	0800196b 	.word	0x0800196b

08001bf0 <_printf_common>:
 8001bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf4:	4616      	mov	r6, r2
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	688a      	ldr	r2, [r1, #8]
 8001bfa:	690b      	ldr	r3, [r1, #16]
 8001bfc:	4607      	mov	r7, r0
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	bfb8      	it	lt
 8001c02:	4613      	movlt	r3, r2
 8001c04:	6033      	str	r3, [r6, #0]
 8001c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c10:	b10a      	cbz	r2, 8001c16 <_printf_common+0x26>
 8001c12:	3301      	adds	r3, #1
 8001c14:	6033      	str	r3, [r6, #0]
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	0699      	lsls	r1, r3, #26
 8001c1a:	bf42      	ittt	mi
 8001c1c:	6833      	ldrmi	r3, [r6, #0]
 8001c1e:	3302      	addmi	r3, #2
 8001c20:	6033      	strmi	r3, [r6, #0]
 8001c22:	6825      	ldr	r5, [r4, #0]
 8001c24:	f015 0506 	ands.w	r5, r5, #6
 8001c28:	d106      	bne.n	8001c38 <_printf_common+0x48>
 8001c2a:	f104 0a19 	add.w	sl, r4, #25
 8001c2e:	68e3      	ldr	r3, [r4, #12]
 8001c30:	6832      	ldr	r2, [r6, #0]
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	42ab      	cmp	r3, r5
 8001c36:	dc28      	bgt.n	8001c8a <_printf_common+0x9a>
 8001c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c3c:	1e13      	subs	r3, r2, #0
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	bf18      	it	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	0692      	lsls	r2, r2, #26
 8001c46:	d42d      	bmi.n	8001ca4 <_printf_common+0xb4>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	4638      	mov	r0, r7
 8001c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c50:	47c0      	blx	r8
 8001c52:	3001      	adds	r0, #1
 8001c54:	d020      	beq.n	8001c98 <_printf_common+0xa8>
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	68e5      	ldr	r5, [r4, #12]
 8001c5a:	f003 0306 	and.w	r3, r3, #6
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf18      	it	ne
 8001c62:	2500      	movne	r5, #0
 8001c64:	6832      	ldr	r2, [r6, #0]
 8001c66:	f04f 0600 	mov.w	r6, #0
 8001c6a:	68a3      	ldr	r3, [r4, #8]
 8001c6c:	bf08      	it	eq
 8001c6e:	1aad      	subeq	r5, r5, r2
 8001c70:	6922      	ldr	r2, [r4, #16]
 8001c72:	bf08      	it	eq
 8001c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	bfc4      	itt	gt
 8001c7c:	1a9b      	subgt	r3, r3, r2
 8001c7e:	18ed      	addgt	r5, r5, r3
 8001c80:	341a      	adds	r4, #26
 8001c82:	42b5      	cmp	r5, r6
 8001c84:	d11a      	bne.n	8001cbc <_printf_common+0xcc>
 8001c86:	2000      	movs	r0, #0
 8001c88:	e008      	b.n	8001c9c <_printf_common+0xac>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	4652      	mov	r2, sl
 8001c8e:	4649      	mov	r1, r9
 8001c90:	4638      	mov	r0, r7
 8001c92:	47c0      	blx	r8
 8001c94:	3001      	adds	r0, #1
 8001c96:	d103      	bne.n	8001ca0 <_printf_common+0xb0>
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ca0:	3501      	adds	r5, #1
 8001ca2:	e7c4      	b.n	8001c2e <_printf_common+0x3e>
 8001ca4:	2030      	movs	r0, #48	; 0x30
 8001ca6:	18e1      	adds	r1, r4, r3
 8001ca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001cb2:	4422      	add	r2, r4
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cba:	e7c5      	b.n	8001c48 <_printf_common+0x58>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	4638      	mov	r0, r7
 8001cc4:	47c0      	blx	r8
 8001cc6:	3001      	adds	r0, #1
 8001cc8:	d0e6      	beq.n	8001c98 <_printf_common+0xa8>
 8001cca:	3601      	adds	r6, #1
 8001ccc:	e7d9      	b.n	8001c82 <_printf_common+0x92>
	...

08001cd0 <_printf_i>:
 8001cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd4:	7e0f      	ldrb	r7, [r1, #24]
 8001cd6:	4691      	mov	r9, r2
 8001cd8:	2f78      	cmp	r7, #120	; 0x78
 8001cda:	4680      	mov	r8, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	469a      	mov	sl, r3
 8001ce0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ce6:	d807      	bhi.n	8001cf8 <_printf_i+0x28>
 8001ce8:	2f62      	cmp	r7, #98	; 0x62
 8001cea:	d80a      	bhi.n	8001d02 <_printf_i+0x32>
 8001cec:	2f00      	cmp	r7, #0
 8001cee:	f000 80d9 	beq.w	8001ea4 <_printf_i+0x1d4>
 8001cf2:	2f58      	cmp	r7, #88	; 0x58
 8001cf4:	f000 80a4 	beq.w	8001e40 <_printf_i+0x170>
 8001cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d00:	e03a      	b.n	8001d78 <_printf_i+0xa8>
 8001d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d06:	2b15      	cmp	r3, #21
 8001d08:	d8f6      	bhi.n	8001cf8 <_printf_i+0x28>
 8001d0a:	a101      	add	r1, pc, #4	; (adr r1, 8001d10 <_printf_i+0x40>)
 8001d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d10:	08001d69 	.word	0x08001d69
 8001d14:	08001d7d 	.word	0x08001d7d
 8001d18:	08001cf9 	.word	0x08001cf9
 8001d1c:	08001cf9 	.word	0x08001cf9
 8001d20:	08001cf9 	.word	0x08001cf9
 8001d24:	08001cf9 	.word	0x08001cf9
 8001d28:	08001d7d 	.word	0x08001d7d
 8001d2c:	08001cf9 	.word	0x08001cf9
 8001d30:	08001cf9 	.word	0x08001cf9
 8001d34:	08001cf9 	.word	0x08001cf9
 8001d38:	08001cf9 	.word	0x08001cf9
 8001d3c:	08001e8b 	.word	0x08001e8b
 8001d40:	08001dad 	.word	0x08001dad
 8001d44:	08001e6d 	.word	0x08001e6d
 8001d48:	08001cf9 	.word	0x08001cf9
 8001d4c:	08001cf9 	.word	0x08001cf9
 8001d50:	08001ead 	.word	0x08001ead
 8001d54:	08001cf9 	.word	0x08001cf9
 8001d58:	08001dad 	.word	0x08001dad
 8001d5c:	08001cf9 	.word	0x08001cf9
 8001d60:	08001cf9 	.word	0x08001cf9
 8001d64:	08001e75 	.word	0x08001e75
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	1d1a      	adds	r2, r3, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	602a      	str	r2, [r5, #0]
 8001d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0a4      	b.n	8001ec6 <_printf_i+0x1f6>
 8001d7c:	6820      	ldr	r0, [r4, #0]
 8001d7e:	6829      	ldr	r1, [r5, #0]
 8001d80:	0606      	lsls	r6, r0, #24
 8001d82:	f101 0304 	add.w	r3, r1, #4
 8001d86:	d50a      	bpl.n	8001d9e <_printf_i+0xce>
 8001d88:	680e      	ldr	r6, [r1, #0]
 8001d8a:	602b      	str	r3, [r5, #0]
 8001d8c:	2e00      	cmp	r6, #0
 8001d8e:	da03      	bge.n	8001d98 <_printf_i+0xc8>
 8001d90:	232d      	movs	r3, #45	; 0x2d
 8001d92:	4276      	negs	r6, r6
 8001d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d98:	230a      	movs	r3, #10
 8001d9a:	485e      	ldr	r0, [pc, #376]	; (8001f14 <_printf_i+0x244>)
 8001d9c:	e019      	b.n	8001dd2 <_printf_i+0x102>
 8001d9e:	680e      	ldr	r6, [r1, #0]
 8001da0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001da4:	602b      	str	r3, [r5, #0]
 8001da6:	bf18      	it	ne
 8001da8:	b236      	sxthne	r6, r6
 8001daa:	e7ef      	b.n	8001d8c <_printf_i+0xbc>
 8001dac:	682b      	ldr	r3, [r5, #0]
 8001dae:	6820      	ldr	r0, [r4, #0]
 8001db0:	1d19      	adds	r1, r3, #4
 8001db2:	6029      	str	r1, [r5, #0]
 8001db4:	0601      	lsls	r1, r0, #24
 8001db6:	d501      	bpl.n	8001dbc <_printf_i+0xec>
 8001db8:	681e      	ldr	r6, [r3, #0]
 8001dba:	e002      	b.n	8001dc2 <_printf_i+0xf2>
 8001dbc:	0646      	lsls	r6, r0, #25
 8001dbe:	d5fb      	bpl.n	8001db8 <_printf_i+0xe8>
 8001dc0:	881e      	ldrh	r6, [r3, #0]
 8001dc2:	2f6f      	cmp	r7, #111	; 0x6f
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2308      	moveq	r3, #8
 8001dc8:	230a      	movne	r3, #10
 8001dca:	4852      	ldr	r0, [pc, #328]	; (8001f14 <_printf_i+0x244>)
 8001dcc:	2100      	movs	r1, #0
 8001dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001dd2:	6865      	ldr	r5, [r4, #4]
 8001dd4:	2d00      	cmp	r5, #0
 8001dd6:	bfa8      	it	ge
 8001dd8:	6821      	ldrge	r1, [r4, #0]
 8001dda:	60a5      	str	r5, [r4, #8]
 8001ddc:	bfa4      	itt	ge
 8001dde:	f021 0104 	bicge.w	r1, r1, #4
 8001de2:	6021      	strge	r1, [r4, #0]
 8001de4:	b90e      	cbnz	r6, 8001dea <_printf_i+0x11a>
 8001de6:	2d00      	cmp	r5, #0
 8001de8:	d04d      	beq.n	8001e86 <_printf_i+0x1b6>
 8001dea:	4615      	mov	r5, r2
 8001dec:	fbb6 f1f3 	udiv	r1, r6, r3
 8001df0:	fb03 6711 	mls	r7, r3, r1, r6
 8001df4:	5dc7      	ldrb	r7, [r0, r7]
 8001df6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001dfa:	4637      	mov	r7, r6
 8001dfc:	42bb      	cmp	r3, r7
 8001dfe:	460e      	mov	r6, r1
 8001e00:	d9f4      	bls.n	8001dec <_printf_i+0x11c>
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d10b      	bne.n	8001e1e <_printf_i+0x14e>
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	07de      	lsls	r6, r3, #31
 8001e0a:	d508      	bpl.n	8001e1e <_printf_i+0x14e>
 8001e0c:	6923      	ldr	r3, [r4, #16]
 8001e0e:	6861      	ldr	r1, [r4, #4]
 8001e10:	4299      	cmp	r1, r3
 8001e12:	bfde      	ittt	le
 8001e14:	2330      	movle	r3, #48	; 0x30
 8001e16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e1e:	1b52      	subs	r2, r2, r5
 8001e20:	6122      	str	r2, [r4, #16]
 8001e22:	464b      	mov	r3, r9
 8001e24:	4621      	mov	r1, r4
 8001e26:	4640      	mov	r0, r8
 8001e28:	f8cd a000 	str.w	sl, [sp]
 8001e2c:	aa03      	add	r2, sp, #12
 8001e2e:	f7ff fedf 	bl	8001bf0 <_printf_common>
 8001e32:	3001      	adds	r0, #1
 8001e34:	d14c      	bne.n	8001ed0 <_printf_i+0x200>
 8001e36:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3a:	b004      	add	sp, #16
 8001e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e40:	4834      	ldr	r0, [pc, #208]	; (8001f14 <_printf_i+0x244>)
 8001e42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001e46:	6829      	ldr	r1, [r5, #0]
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e4e:	6029      	str	r1, [r5, #0]
 8001e50:	061d      	lsls	r5, r3, #24
 8001e52:	d514      	bpl.n	8001e7e <_printf_i+0x1ae>
 8001e54:	07df      	lsls	r7, r3, #31
 8001e56:	bf44      	itt	mi
 8001e58:	f043 0320 	orrmi.w	r3, r3, #32
 8001e5c:	6023      	strmi	r3, [r4, #0]
 8001e5e:	b91e      	cbnz	r6, 8001e68 <_printf_i+0x198>
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	f023 0320 	bic.w	r3, r3, #32
 8001e66:	6023      	str	r3, [r4, #0]
 8001e68:	2310      	movs	r3, #16
 8001e6a:	e7af      	b.n	8001dcc <_printf_i+0xfc>
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	f043 0320 	orr.w	r3, r3, #32
 8001e72:	6023      	str	r3, [r4, #0]
 8001e74:	2378      	movs	r3, #120	; 0x78
 8001e76:	4828      	ldr	r0, [pc, #160]	; (8001f18 <_printf_i+0x248>)
 8001e78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e7c:	e7e3      	b.n	8001e46 <_printf_i+0x176>
 8001e7e:	0659      	lsls	r1, r3, #25
 8001e80:	bf48      	it	mi
 8001e82:	b2b6      	uxthmi	r6, r6
 8001e84:	e7e6      	b.n	8001e54 <_printf_i+0x184>
 8001e86:	4615      	mov	r5, r2
 8001e88:	e7bb      	b.n	8001e02 <_printf_i+0x132>
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	6826      	ldr	r6, [r4, #0]
 8001e8e:	1d18      	adds	r0, r3, #4
 8001e90:	6961      	ldr	r1, [r4, #20]
 8001e92:	6028      	str	r0, [r5, #0]
 8001e94:	0635      	lsls	r5, r6, #24
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	d501      	bpl.n	8001e9e <_printf_i+0x1ce>
 8001e9a:	6019      	str	r1, [r3, #0]
 8001e9c:	e002      	b.n	8001ea4 <_printf_i+0x1d4>
 8001e9e:	0670      	lsls	r0, r6, #25
 8001ea0:	d5fb      	bpl.n	8001e9a <_printf_i+0x1ca>
 8001ea2:	8019      	strh	r1, [r3, #0]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4615      	mov	r5, r2
 8001ea8:	6123      	str	r3, [r4, #16]
 8001eaa:	e7ba      	b.n	8001e22 <_printf_i+0x152>
 8001eac:	682b      	ldr	r3, [r5, #0]
 8001eae:	2100      	movs	r1, #0
 8001eb0:	1d1a      	adds	r2, r3, #4
 8001eb2:	602a      	str	r2, [r5, #0]
 8001eb4:	681d      	ldr	r5, [r3, #0]
 8001eb6:	6862      	ldr	r2, [r4, #4]
 8001eb8:	4628      	mov	r0, r5
 8001eba:	f000 fb23 	bl	8002504 <memchr>
 8001ebe:	b108      	cbz	r0, 8001ec4 <_printf_i+0x1f4>
 8001ec0:	1b40      	subs	r0, r0, r5
 8001ec2:	6060      	str	r0, [r4, #4]
 8001ec4:	6863      	ldr	r3, [r4, #4]
 8001ec6:	6123      	str	r3, [r4, #16]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ece:	e7a8      	b.n	8001e22 <_printf_i+0x152>
 8001ed0:	462a      	mov	r2, r5
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	4640      	mov	r0, r8
 8001ed6:	6923      	ldr	r3, [r4, #16]
 8001ed8:	47d0      	blx	sl
 8001eda:	3001      	adds	r0, #1
 8001edc:	d0ab      	beq.n	8001e36 <_printf_i+0x166>
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	079b      	lsls	r3, r3, #30
 8001ee2:	d413      	bmi.n	8001f0c <_printf_i+0x23c>
 8001ee4:	68e0      	ldr	r0, [r4, #12]
 8001ee6:	9b03      	ldr	r3, [sp, #12]
 8001ee8:	4298      	cmp	r0, r3
 8001eea:	bfb8      	it	lt
 8001eec:	4618      	movlt	r0, r3
 8001eee:	e7a4      	b.n	8001e3a <_printf_i+0x16a>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	4632      	mov	r2, r6
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	47d0      	blx	sl
 8001efa:	3001      	adds	r0, #1
 8001efc:	d09b      	beq.n	8001e36 <_printf_i+0x166>
 8001efe:	3501      	adds	r5, #1
 8001f00:	68e3      	ldr	r3, [r4, #12]
 8001f02:	9903      	ldr	r1, [sp, #12]
 8001f04:	1a5b      	subs	r3, r3, r1
 8001f06:	42ab      	cmp	r3, r5
 8001f08:	dcf2      	bgt.n	8001ef0 <_printf_i+0x220>
 8001f0a:	e7eb      	b.n	8001ee4 <_printf_i+0x214>
 8001f0c:	2500      	movs	r5, #0
 8001f0e:	f104 0619 	add.w	r6, r4, #25
 8001f12:	e7f5      	b.n	8001f00 <_printf_i+0x230>
 8001f14:	08002817 	.word	0x08002817
 8001f18:	08002828 	.word	0x08002828

08001f1c <_sbrk_r>:
 8001f1c:	b538      	push	{r3, r4, r5, lr}
 8001f1e:	2300      	movs	r3, #0
 8001f20:	4d05      	ldr	r5, [pc, #20]	; (8001f38 <_sbrk_r+0x1c>)
 8001f22:	4604      	mov	r4, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	602b      	str	r3, [r5, #0]
 8001f28:	f7fe fbe6 	bl	80006f8 <_sbrk>
 8001f2c:	1c43      	adds	r3, r0, #1
 8001f2e:	d102      	bne.n	8001f36 <_sbrk_r+0x1a>
 8001f30:	682b      	ldr	r3, [r5, #0]
 8001f32:	b103      	cbz	r3, 8001f36 <_sbrk_r+0x1a>
 8001f34:	6023      	str	r3, [r4, #0]
 8001f36:	bd38      	pop	{r3, r4, r5, pc}
 8001f38:	20000114 	.word	0x20000114

08001f3c <__swbuf_r>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	460e      	mov	r6, r1
 8001f40:	4614      	mov	r4, r2
 8001f42:	4605      	mov	r5, r0
 8001f44:	b118      	cbz	r0, 8001f4e <__swbuf_r+0x12>
 8001f46:	6983      	ldr	r3, [r0, #24]
 8001f48:	b90b      	cbnz	r3, 8001f4e <__swbuf_r+0x12>
 8001f4a:	f000 f9d5 	bl	80022f8 <__sinit>
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <__swbuf_r+0x98>)
 8001f50:	429c      	cmp	r4, r3
 8001f52:	d12b      	bne.n	8001fac <__swbuf_r+0x70>
 8001f54:	686c      	ldr	r4, [r5, #4]
 8001f56:	69a3      	ldr	r3, [r4, #24]
 8001f58:	60a3      	str	r3, [r4, #8]
 8001f5a:	89a3      	ldrh	r3, [r4, #12]
 8001f5c:	071a      	lsls	r2, r3, #28
 8001f5e:	d52f      	bpl.n	8001fc0 <__swbuf_r+0x84>
 8001f60:	6923      	ldr	r3, [r4, #16]
 8001f62:	b36b      	cbz	r3, 8001fc0 <__swbuf_r+0x84>
 8001f64:	6923      	ldr	r3, [r4, #16]
 8001f66:	6820      	ldr	r0, [r4, #0]
 8001f68:	b2f6      	uxtb	r6, r6
 8001f6a:	1ac0      	subs	r0, r0, r3
 8001f6c:	6963      	ldr	r3, [r4, #20]
 8001f6e:	4637      	mov	r7, r6
 8001f70:	4283      	cmp	r3, r0
 8001f72:	dc04      	bgt.n	8001f7e <__swbuf_r+0x42>
 8001f74:	4621      	mov	r1, r4
 8001f76:	4628      	mov	r0, r5
 8001f78:	f000 f92a 	bl	80021d0 <_fflush_r>
 8001f7c:	bb30      	cbnz	r0, 8001fcc <__swbuf_r+0x90>
 8001f7e:	68a3      	ldr	r3, [r4, #8]
 8001f80:	3001      	adds	r0, #1
 8001f82:	3b01      	subs	r3, #1
 8001f84:	60a3      	str	r3, [r4, #8]
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	6022      	str	r2, [r4, #0]
 8001f8c:	701e      	strb	r6, [r3, #0]
 8001f8e:	6963      	ldr	r3, [r4, #20]
 8001f90:	4283      	cmp	r3, r0
 8001f92:	d004      	beq.n	8001f9e <__swbuf_r+0x62>
 8001f94:	89a3      	ldrh	r3, [r4, #12]
 8001f96:	07db      	lsls	r3, r3, #31
 8001f98:	d506      	bpl.n	8001fa8 <__swbuf_r+0x6c>
 8001f9a:	2e0a      	cmp	r6, #10
 8001f9c:	d104      	bne.n	8001fa8 <__swbuf_r+0x6c>
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f000 f915 	bl	80021d0 <_fflush_r>
 8001fa6:	b988      	cbnz	r0, 8001fcc <__swbuf_r+0x90>
 8001fa8:	4638      	mov	r0, r7
 8001faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <__swbuf_r+0x9c>)
 8001fae:	429c      	cmp	r4, r3
 8001fb0:	d101      	bne.n	8001fb6 <__swbuf_r+0x7a>
 8001fb2:	68ac      	ldr	r4, [r5, #8]
 8001fb4:	e7cf      	b.n	8001f56 <__swbuf_r+0x1a>
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <__swbuf_r+0xa0>)
 8001fb8:	429c      	cmp	r4, r3
 8001fba:	bf08      	it	eq
 8001fbc:	68ec      	ldreq	r4, [r5, #12]
 8001fbe:	e7ca      	b.n	8001f56 <__swbuf_r+0x1a>
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	f000 f80c 	bl	8001fe0 <__swsetup_r>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d0cb      	beq.n	8001f64 <__swbuf_r+0x28>
 8001fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8001fd0:	e7ea      	b.n	8001fa8 <__swbuf_r+0x6c>
 8001fd2:	bf00      	nop
 8001fd4:	0800285c 	.word	0x0800285c
 8001fd8:	0800287c 	.word	0x0800287c
 8001fdc:	0800283c 	.word	0x0800283c

08001fe0 <__swsetup_r>:
 8001fe0:	4b32      	ldr	r3, [pc, #200]	; (80020ac <__swsetup_r+0xcc>)
 8001fe2:	b570      	push	{r4, r5, r6, lr}
 8001fe4:	681d      	ldr	r5, [r3, #0]
 8001fe6:	4606      	mov	r6, r0
 8001fe8:	460c      	mov	r4, r1
 8001fea:	b125      	cbz	r5, 8001ff6 <__swsetup_r+0x16>
 8001fec:	69ab      	ldr	r3, [r5, #24]
 8001fee:	b913      	cbnz	r3, 8001ff6 <__swsetup_r+0x16>
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f000 f981 	bl	80022f8 <__sinit>
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <__swsetup_r+0xd0>)
 8001ff8:	429c      	cmp	r4, r3
 8001ffa:	d10f      	bne.n	800201c <__swsetup_r+0x3c>
 8001ffc:	686c      	ldr	r4, [r5, #4]
 8001ffe:	89a3      	ldrh	r3, [r4, #12]
 8002000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002004:	0719      	lsls	r1, r3, #28
 8002006:	d42c      	bmi.n	8002062 <__swsetup_r+0x82>
 8002008:	06dd      	lsls	r5, r3, #27
 800200a:	d411      	bmi.n	8002030 <__swsetup_r+0x50>
 800200c:	2309      	movs	r3, #9
 800200e:	6033      	str	r3, [r6, #0]
 8002010:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	81a3      	strh	r3, [r4, #12]
 800201a:	e03e      	b.n	800209a <__swsetup_r+0xba>
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <__swsetup_r+0xd4>)
 800201e:	429c      	cmp	r4, r3
 8002020:	d101      	bne.n	8002026 <__swsetup_r+0x46>
 8002022:	68ac      	ldr	r4, [r5, #8]
 8002024:	e7eb      	b.n	8001ffe <__swsetup_r+0x1e>
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <__swsetup_r+0xd8>)
 8002028:	429c      	cmp	r4, r3
 800202a:	bf08      	it	eq
 800202c:	68ec      	ldreq	r4, [r5, #12]
 800202e:	e7e6      	b.n	8001ffe <__swsetup_r+0x1e>
 8002030:	0758      	lsls	r0, r3, #29
 8002032:	d512      	bpl.n	800205a <__swsetup_r+0x7a>
 8002034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002036:	b141      	cbz	r1, 800204a <__swsetup_r+0x6a>
 8002038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800203c:	4299      	cmp	r1, r3
 800203e:	d002      	beq.n	8002046 <__swsetup_r+0x66>
 8002040:	4630      	mov	r0, r6
 8002042:	f7ff fba1 	bl	8001788 <_free_r>
 8002046:	2300      	movs	r3, #0
 8002048:	6363      	str	r3, [r4, #52]	; 0x34
 800204a:	89a3      	ldrh	r3, [r4, #12]
 800204c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002050:	81a3      	strh	r3, [r4, #12]
 8002052:	2300      	movs	r3, #0
 8002054:	6063      	str	r3, [r4, #4]
 8002056:	6923      	ldr	r3, [r4, #16]
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	89a3      	ldrh	r3, [r4, #12]
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	81a3      	strh	r3, [r4, #12]
 8002062:	6923      	ldr	r3, [r4, #16]
 8002064:	b94b      	cbnz	r3, 800207a <__swsetup_r+0x9a>
 8002066:	89a3      	ldrh	r3, [r4, #12]
 8002068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800206c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002070:	d003      	beq.n	800207a <__swsetup_r+0x9a>
 8002072:	4621      	mov	r1, r4
 8002074:	4630      	mov	r0, r6
 8002076:	f000 fa05 	bl	8002484 <__smakebuf_r>
 800207a:	89a0      	ldrh	r0, [r4, #12]
 800207c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002080:	f010 0301 	ands.w	r3, r0, #1
 8002084:	d00a      	beq.n	800209c <__swsetup_r+0xbc>
 8002086:	2300      	movs	r3, #0
 8002088:	60a3      	str	r3, [r4, #8]
 800208a:	6963      	ldr	r3, [r4, #20]
 800208c:	425b      	negs	r3, r3
 800208e:	61a3      	str	r3, [r4, #24]
 8002090:	6923      	ldr	r3, [r4, #16]
 8002092:	b943      	cbnz	r3, 80020a6 <__swsetup_r+0xc6>
 8002094:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002098:	d1ba      	bne.n	8002010 <__swsetup_r+0x30>
 800209a:	bd70      	pop	{r4, r5, r6, pc}
 800209c:	0781      	lsls	r1, r0, #30
 800209e:	bf58      	it	pl
 80020a0:	6963      	ldrpl	r3, [r4, #20]
 80020a2:	60a3      	str	r3, [r4, #8]
 80020a4:	e7f4      	b.n	8002090 <__swsetup_r+0xb0>
 80020a6:	2000      	movs	r0, #0
 80020a8:	e7f7      	b.n	800209a <__swsetup_r+0xba>
 80020aa:	bf00      	nop
 80020ac:	20000078 	.word	0x20000078
 80020b0:	0800285c 	.word	0x0800285c
 80020b4:	0800287c 	.word	0x0800287c
 80020b8:	0800283c 	.word	0x0800283c

080020bc <abort>:
 80020bc:	2006      	movs	r0, #6
 80020be:	b508      	push	{r3, lr}
 80020c0:	f000 fa62 	bl	8002588 <raise>
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7fe faa4 	bl	8000612 <_exit>
	...

080020cc <__sflush_r>:
 80020cc:	898a      	ldrh	r2, [r1, #12]
 80020ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d0:	4605      	mov	r5, r0
 80020d2:	0710      	lsls	r0, r2, #28
 80020d4:	460c      	mov	r4, r1
 80020d6:	d457      	bmi.n	8002188 <__sflush_r+0xbc>
 80020d8:	684b      	ldr	r3, [r1, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	dc04      	bgt.n	80020e8 <__sflush_r+0x1c>
 80020de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	dc01      	bgt.n	80020e8 <__sflush_r+0x1c>
 80020e4:	2000      	movs	r0, #0
 80020e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020ea:	2e00      	cmp	r6, #0
 80020ec:	d0fa      	beq.n	80020e4 <__sflush_r+0x18>
 80020ee:	2300      	movs	r3, #0
 80020f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020f4:	682f      	ldr	r7, [r5, #0]
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	d032      	beq.n	8002160 <__sflush_r+0x94>
 80020fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020fc:	89a3      	ldrh	r3, [r4, #12]
 80020fe:	075a      	lsls	r2, r3, #29
 8002100:	d505      	bpl.n	800210e <__sflush_r+0x42>
 8002102:	6863      	ldr	r3, [r4, #4]
 8002104:	1ac0      	subs	r0, r0, r3
 8002106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002108:	b10b      	cbz	r3, 800210e <__sflush_r+0x42>
 800210a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800210c:	1ac0      	subs	r0, r0, r3
 800210e:	2300      	movs	r3, #0
 8002110:	4602      	mov	r2, r0
 8002112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002114:	4628      	mov	r0, r5
 8002116:	6a21      	ldr	r1, [r4, #32]
 8002118:	47b0      	blx	r6
 800211a:	1c43      	adds	r3, r0, #1
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	d106      	bne.n	800212e <__sflush_r+0x62>
 8002120:	6829      	ldr	r1, [r5, #0]
 8002122:	291d      	cmp	r1, #29
 8002124:	d82c      	bhi.n	8002180 <__sflush_r+0xb4>
 8002126:	4a29      	ldr	r2, [pc, #164]	; (80021cc <__sflush_r+0x100>)
 8002128:	40ca      	lsrs	r2, r1
 800212a:	07d6      	lsls	r6, r2, #31
 800212c:	d528      	bpl.n	8002180 <__sflush_r+0xb4>
 800212e:	2200      	movs	r2, #0
 8002130:	6062      	str	r2, [r4, #4]
 8002132:	6922      	ldr	r2, [r4, #16]
 8002134:	04d9      	lsls	r1, r3, #19
 8002136:	6022      	str	r2, [r4, #0]
 8002138:	d504      	bpl.n	8002144 <__sflush_r+0x78>
 800213a:	1c42      	adds	r2, r0, #1
 800213c:	d101      	bne.n	8002142 <__sflush_r+0x76>
 800213e:	682b      	ldr	r3, [r5, #0]
 8002140:	b903      	cbnz	r3, 8002144 <__sflush_r+0x78>
 8002142:	6560      	str	r0, [r4, #84]	; 0x54
 8002144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002146:	602f      	str	r7, [r5, #0]
 8002148:	2900      	cmp	r1, #0
 800214a:	d0cb      	beq.n	80020e4 <__sflush_r+0x18>
 800214c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002150:	4299      	cmp	r1, r3
 8002152:	d002      	beq.n	800215a <__sflush_r+0x8e>
 8002154:	4628      	mov	r0, r5
 8002156:	f7ff fb17 	bl	8001788 <_free_r>
 800215a:	2000      	movs	r0, #0
 800215c:	6360      	str	r0, [r4, #52]	; 0x34
 800215e:	e7c2      	b.n	80020e6 <__sflush_r+0x1a>
 8002160:	6a21      	ldr	r1, [r4, #32]
 8002162:	2301      	movs	r3, #1
 8002164:	4628      	mov	r0, r5
 8002166:	47b0      	blx	r6
 8002168:	1c41      	adds	r1, r0, #1
 800216a:	d1c7      	bne.n	80020fc <__sflush_r+0x30>
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0c4      	beq.n	80020fc <__sflush_r+0x30>
 8002172:	2b1d      	cmp	r3, #29
 8002174:	d001      	beq.n	800217a <__sflush_r+0xae>
 8002176:	2b16      	cmp	r3, #22
 8002178:	d101      	bne.n	800217e <__sflush_r+0xb2>
 800217a:	602f      	str	r7, [r5, #0]
 800217c:	e7b2      	b.n	80020e4 <__sflush_r+0x18>
 800217e:	89a3      	ldrh	r3, [r4, #12]
 8002180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002184:	81a3      	strh	r3, [r4, #12]
 8002186:	e7ae      	b.n	80020e6 <__sflush_r+0x1a>
 8002188:	690f      	ldr	r7, [r1, #16]
 800218a:	2f00      	cmp	r7, #0
 800218c:	d0aa      	beq.n	80020e4 <__sflush_r+0x18>
 800218e:	0793      	lsls	r3, r2, #30
 8002190:	bf18      	it	ne
 8002192:	2300      	movne	r3, #0
 8002194:	680e      	ldr	r6, [r1, #0]
 8002196:	bf08      	it	eq
 8002198:	694b      	ldreq	r3, [r1, #20]
 800219a:	1bf6      	subs	r6, r6, r7
 800219c:	600f      	str	r7, [r1, #0]
 800219e:	608b      	str	r3, [r1, #8]
 80021a0:	2e00      	cmp	r6, #0
 80021a2:	dd9f      	ble.n	80020e4 <__sflush_r+0x18>
 80021a4:	4633      	mov	r3, r6
 80021a6:	463a      	mov	r2, r7
 80021a8:	4628      	mov	r0, r5
 80021aa:	6a21      	ldr	r1, [r4, #32]
 80021ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80021b0:	47e0      	blx	ip
 80021b2:	2800      	cmp	r0, #0
 80021b4:	dc06      	bgt.n	80021c4 <__sflush_r+0xf8>
 80021b6:	89a3      	ldrh	r3, [r4, #12]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c0:	81a3      	strh	r3, [r4, #12]
 80021c2:	e790      	b.n	80020e6 <__sflush_r+0x1a>
 80021c4:	4407      	add	r7, r0
 80021c6:	1a36      	subs	r6, r6, r0
 80021c8:	e7ea      	b.n	80021a0 <__sflush_r+0xd4>
 80021ca:	bf00      	nop
 80021cc:	20400001 	.word	0x20400001

080021d0 <_fflush_r>:
 80021d0:	b538      	push	{r3, r4, r5, lr}
 80021d2:	690b      	ldr	r3, [r1, #16]
 80021d4:	4605      	mov	r5, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	b913      	cbnz	r3, 80021e0 <_fflush_r+0x10>
 80021da:	2500      	movs	r5, #0
 80021dc:	4628      	mov	r0, r5
 80021de:	bd38      	pop	{r3, r4, r5, pc}
 80021e0:	b118      	cbz	r0, 80021ea <_fflush_r+0x1a>
 80021e2:	6983      	ldr	r3, [r0, #24]
 80021e4:	b90b      	cbnz	r3, 80021ea <_fflush_r+0x1a>
 80021e6:	f000 f887 	bl	80022f8 <__sinit>
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <_fflush_r+0x6c>)
 80021ec:	429c      	cmp	r4, r3
 80021ee:	d11b      	bne.n	8002228 <_fflush_r+0x58>
 80021f0:	686c      	ldr	r4, [r5, #4]
 80021f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ef      	beq.n	80021da <_fflush_r+0xa>
 80021fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021fc:	07d0      	lsls	r0, r2, #31
 80021fe:	d404      	bmi.n	800220a <_fflush_r+0x3a>
 8002200:	0599      	lsls	r1, r3, #22
 8002202:	d402      	bmi.n	800220a <_fflush_r+0x3a>
 8002204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002206:	f000 f915 	bl	8002434 <__retarget_lock_acquire_recursive>
 800220a:	4628      	mov	r0, r5
 800220c:	4621      	mov	r1, r4
 800220e:	f7ff ff5d 	bl	80020cc <__sflush_r>
 8002212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002214:	4605      	mov	r5, r0
 8002216:	07da      	lsls	r2, r3, #31
 8002218:	d4e0      	bmi.n	80021dc <_fflush_r+0xc>
 800221a:	89a3      	ldrh	r3, [r4, #12]
 800221c:	059b      	lsls	r3, r3, #22
 800221e:	d4dd      	bmi.n	80021dc <_fflush_r+0xc>
 8002220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002222:	f000 f908 	bl	8002436 <__retarget_lock_release_recursive>
 8002226:	e7d9      	b.n	80021dc <_fflush_r+0xc>
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <_fflush_r+0x70>)
 800222a:	429c      	cmp	r4, r3
 800222c:	d101      	bne.n	8002232 <_fflush_r+0x62>
 800222e:	68ac      	ldr	r4, [r5, #8]
 8002230:	e7df      	b.n	80021f2 <_fflush_r+0x22>
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <_fflush_r+0x74>)
 8002234:	429c      	cmp	r4, r3
 8002236:	bf08      	it	eq
 8002238:	68ec      	ldreq	r4, [r5, #12]
 800223a:	e7da      	b.n	80021f2 <_fflush_r+0x22>
 800223c:	0800285c 	.word	0x0800285c
 8002240:	0800287c 	.word	0x0800287c
 8002244:	0800283c 	.word	0x0800283c

08002248 <std>:
 8002248:	2300      	movs	r3, #0
 800224a:	b510      	push	{r4, lr}
 800224c:	4604      	mov	r4, r0
 800224e:	e9c0 3300 	strd	r3, r3, [r0]
 8002252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002256:	6083      	str	r3, [r0, #8]
 8002258:	8181      	strh	r1, [r0, #12]
 800225a:	6643      	str	r3, [r0, #100]	; 0x64
 800225c:	81c2      	strh	r2, [r0, #14]
 800225e:	6183      	str	r3, [r0, #24]
 8002260:	4619      	mov	r1, r3
 8002262:	2208      	movs	r2, #8
 8002264:	305c      	adds	r0, #92	; 0x5c
 8002266:	f7ff fa11 	bl	800168c <memset>
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <std+0x38>)
 800226c:	6224      	str	r4, [r4, #32]
 800226e:	6263      	str	r3, [r4, #36]	; 0x24
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <std+0x3c>)
 8002272:	62a3      	str	r3, [r4, #40]	; 0x28
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <std+0x40>)
 8002276:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <std+0x44>)
 800227a:	6323      	str	r3, [r4, #48]	; 0x30
 800227c:	bd10      	pop	{r4, pc}
 800227e:	bf00      	nop
 8002280:	080025c1 	.word	0x080025c1
 8002284:	080025e3 	.word	0x080025e3
 8002288:	0800261b 	.word	0x0800261b
 800228c:	0800263f 	.word	0x0800263f

08002290 <_cleanup_r>:
 8002290:	4901      	ldr	r1, [pc, #4]	; (8002298 <_cleanup_r+0x8>)
 8002292:	f000 b8af 	b.w	80023f4 <_fwalk_reent>
 8002296:	bf00      	nop
 8002298:	080021d1 	.word	0x080021d1

0800229c <__sfmoreglue>:
 800229c:	2268      	movs	r2, #104	; 0x68
 800229e:	b570      	push	{r4, r5, r6, lr}
 80022a0:	1e4d      	subs	r5, r1, #1
 80022a2:	4355      	muls	r5, r2
 80022a4:	460e      	mov	r6, r1
 80022a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80022aa:	f7ff fad5 	bl	8001858 <_malloc_r>
 80022ae:	4604      	mov	r4, r0
 80022b0:	b140      	cbz	r0, 80022c4 <__sfmoreglue+0x28>
 80022b2:	2100      	movs	r1, #0
 80022b4:	e9c0 1600 	strd	r1, r6, [r0]
 80022b8:	300c      	adds	r0, #12
 80022ba:	60a0      	str	r0, [r4, #8]
 80022bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022c0:	f7ff f9e4 	bl	800168c <memset>
 80022c4:	4620      	mov	r0, r4
 80022c6:	bd70      	pop	{r4, r5, r6, pc}

080022c8 <__sfp_lock_acquire>:
 80022c8:	4801      	ldr	r0, [pc, #4]	; (80022d0 <__sfp_lock_acquire+0x8>)
 80022ca:	f000 b8b3 	b.w	8002434 <__retarget_lock_acquire_recursive>
 80022ce:	bf00      	nop
 80022d0:	20000111 	.word	0x20000111

080022d4 <__sfp_lock_release>:
 80022d4:	4801      	ldr	r0, [pc, #4]	; (80022dc <__sfp_lock_release+0x8>)
 80022d6:	f000 b8ae 	b.w	8002436 <__retarget_lock_release_recursive>
 80022da:	bf00      	nop
 80022dc:	20000111 	.word	0x20000111

080022e0 <__sinit_lock_acquire>:
 80022e0:	4801      	ldr	r0, [pc, #4]	; (80022e8 <__sinit_lock_acquire+0x8>)
 80022e2:	f000 b8a7 	b.w	8002434 <__retarget_lock_acquire_recursive>
 80022e6:	bf00      	nop
 80022e8:	20000112 	.word	0x20000112

080022ec <__sinit_lock_release>:
 80022ec:	4801      	ldr	r0, [pc, #4]	; (80022f4 <__sinit_lock_release+0x8>)
 80022ee:	f000 b8a2 	b.w	8002436 <__retarget_lock_release_recursive>
 80022f2:	bf00      	nop
 80022f4:	20000112 	.word	0x20000112

080022f8 <__sinit>:
 80022f8:	b510      	push	{r4, lr}
 80022fa:	4604      	mov	r4, r0
 80022fc:	f7ff fff0 	bl	80022e0 <__sinit_lock_acquire>
 8002300:	69a3      	ldr	r3, [r4, #24]
 8002302:	b11b      	cbz	r3, 800230c <__sinit+0x14>
 8002304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002308:	f7ff bff0 	b.w	80022ec <__sinit_lock_release>
 800230c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002310:	6523      	str	r3, [r4, #80]	; 0x50
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <__sinit+0x68>)
 8002314:	4a13      	ldr	r2, [pc, #76]	; (8002364 <__sinit+0x6c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	62a2      	str	r2, [r4, #40]	; 0x28
 800231a:	42a3      	cmp	r3, r4
 800231c:	bf08      	it	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	4620      	mov	r0, r4
 8002322:	bf08      	it	eq
 8002324:	61a3      	streq	r3, [r4, #24]
 8002326:	f000 f81f 	bl	8002368 <__sfp>
 800232a:	6060      	str	r0, [r4, #4]
 800232c:	4620      	mov	r0, r4
 800232e:	f000 f81b 	bl	8002368 <__sfp>
 8002332:	60a0      	str	r0, [r4, #8]
 8002334:	4620      	mov	r0, r4
 8002336:	f000 f817 	bl	8002368 <__sfp>
 800233a:	2200      	movs	r2, #0
 800233c:	2104      	movs	r1, #4
 800233e:	60e0      	str	r0, [r4, #12]
 8002340:	6860      	ldr	r0, [r4, #4]
 8002342:	f7ff ff81 	bl	8002248 <std>
 8002346:	2201      	movs	r2, #1
 8002348:	2109      	movs	r1, #9
 800234a:	68a0      	ldr	r0, [r4, #8]
 800234c:	f7ff ff7c 	bl	8002248 <std>
 8002350:	2202      	movs	r2, #2
 8002352:	2112      	movs	r1, #18
 8002354:	68e0      	ldr	r0, [r4, #12]
 8002356:	f7ff ff77 	bl	8002248 <std>
 800235a:	2301      	movs	r3, #1
 800235c:	61a3      	str	r3, [r4, #24]
 800235e:	e7d1      	b.n	8002304 <__sinit+0xc>
 8002360:	08002754 	.word	0x08002754
 8002364:	08002291 	.word	0x08002291

08002368 <__sfp>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	4607      	mov	r7, r0
 800236c:	f7ff ffac 	bl	80022c8 <__sfp_lock_acquire>
 8002370:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <__sfp+0x84>)
 8002372:	681e      	ldr	r6, [r3, #0]
 8002374:	69b3      	ldr	r3, [r6, #24]
 8002376:	b913      	cbnz	r3, 800237e <__sfp+0x16>
 8002378:	4630      	mov	r0, r6
 800237a:	f7ff ffbd 	bl	80022f8 <__sinit>
 800237e:	3648      	adds	r6, #72	; 0x48
 8002380:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002384:	3b01      	subs	r3, #1
 8002386:	d503      	bpl.n	8002390 <__sfp+0x28>
 8002388:	6833      	ldr	r3, [r6, #0]
 800238a:	b30b      	cbz	r3, 80023d0 <__sfp+0x68>
 800238c:	6836      	ldr	r6, [r6, #0]
 800238e:	e7f7      	b.n	8002380 <__sfp+0x18>
 8002390:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002394:	b9d5      	cbnz	r5, 80023cc <__sfp+0x64>
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <__sfp+0x88>)
 8002398:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800239c:	60e3      	str	r3, [r4, #12]
 800239e:	6665      	str	r5, [r4, #100]	; 0x64
 80023a0:	f000 f847 	bl	8002432 <__retarget_lock_init_recursive>
 80023a4:	f7ff ff96 	bl	80022d4 <__sfp_lock_release>
 80023a8:	2208      	movs	r2, #8
 80023aa:	4629      	mov	r1, r5
 80023ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80023b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80023b4:	6025      	str	r5, [r4, #0]
 80023b6:	61a5      	str	r5, [r4, #24]
 80023b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023bc:	f7ff f966 	bl	800168c <memset>
 80023c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023c8:	4620      	mov	r0, r4
 80023ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023cc:	3468      	adds	r4, #104	; 0x68
 80023ce:	e7d9      	b.n	8002384 <__sfp+0x1c>
 80023d0:	2104      	movs	r1, #4
 80023d2:	4638      	mov	r0, r7
 80023d4:	f7ff ff62 	bl	800229c <__sfmoreglue>
 80023d8:	4604      	mov	r4, r0
 80023da:	6030      	str	r0, [r6, #0]
 80023dc:	2800      	cmp	r0, #0
 80023de:	d1d5      	bne.n	800238c <__sfp+0x24>
 80023e0:	f7ff ff78 	bl	80022d4 <__sfp_lock_release>
 80023e4:	230c      	movs	r3, #12
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	e7ee      	b.n	80023c8 <__sfp+0x60>
 80023ea:	bf00      	nop
 80023ec:	08002754 	.word	0x08002754
 80023f0:	ffff0001 	.word	0xffff0001

080023f4 <_fwalk_reent>:
 80023f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023f8:	4606      	mov	r6, r0
 80023fa:	4688      	mov	r8, r1
 80023fc:	2700      	movs	r7, #0
 80023fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002402:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002406:	f1b9 0901 	subs.w	r9, r9, #1
 800240a:	d505      	bpl.n	8002418 <_fwalk_reent+0x24>
 800240c:	6824      	ldr	r4, [r4, #0]
 800240e:	2c00      	cmp	r4, #0
 8002410:	d1f7      	bne.n	8002402 <_fwalk_reent+0xe>
 8002412:	4638      	mov	r0, r7
 8002414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002418:	89ab      	ldrh	r3, [r5, #12]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d907      	bls.n	800242e <_fwalk_reent+0x3a>
 800241e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002422:	3301      	adds	r3, #1
 8002424:	d003      	beq.n	800242e <_fwalk_reent+0x3a>
 8002426:	4629      	mov	r1, r5
 8002428:	4630      	mov	r0, r6
 800242a:	47c0      	blx	r8
 800242c:	4307      	orrs	r7, r0
 800242e:	3568      	adds	r5, #104	; 0x68
 8002430:	e7e9      	b.n	8002406 <_fwalk_reent+0x12>

08002432 <__retarget_lock_init_recursive>:
 8002432:	4770      	bx	lr

08002434 <__retarget_lock_acquire_recursive>:
 8002434:	4770      	bx	lr

08002436 <__retarget_lock_release_recursive>:
 8002436:	4770      	bx	lr

08002438 <__swhatbuf_r>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	460e      	mov	r6, r1
 800243c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002440:	4614      	mov	r4, r2
 8002442:	2900      	cmp	r1, #0
 8002444:	461d      	mov	r5, r3
 8002446:	b096      	sub	sp, #88	; 0x58
 8002448:	da08      	bge.n	800245c <__swhatbuf_r+0x24>
 800244a:	2200      	movs	r2, #0
 800244c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002450:	602a      	str	r2, [r5, #0]
 8002452:	061a      	lsls	r2, r3, #24
 8002454:	d410      	bmi.n	8002478 <__swhatbuf_r+0x40>
 8002456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800245a:	e00e      	b.n	800247a <__swhatbuf_r+0x42>
 800245c:	466a      	mov	r2, sp
 800245e:	f000 f915 	bl	800268c <_fstat_r>
 8002462:	2800      	cmp	r0, #0
 8002464:	dbf1      	blt.n	800244a <__swhatbuf_r+0x12>
 8002466:	9a01      	ldr	r2, [sp, #4]
 8002468:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800246c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002470:	425a      	negs	r2, r3
 8002472:	415a      	adcs	r2, r3
 8002474:	602a      	str	r2, [r5, #0]
 8002476:	e7ee      	b.n	8002456 <__swhatbuf_r+0x1e>
 8002478:	2340      	movs	r3, #64	; 0x40
 800247a:	2000      	movs	r0, #0
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	b016      	add	sp, #88	; 0x58
 8002480:	bd70      	pop	{r4, r5, r6, pc}
	...

08002484 <__smakebuf_r>:
 8002484:	898b      	ldrh	r3, [r1, #12]
 8002486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002488:	079d      	lsls	r5, r3, #30
 800248a:	4606      	mov	r6, r0
 800248c:	460c      	mov	r4, r1
 800248e:	d507      	bpl.n	80024a0 <__smakebuf_r+0x1c>
 8002490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002494:	6023      	str	r3, [r4, #0]
 8002496:	6123      	str	r3, [r4, #16]
 8002498:	2301      	movs	r3, #1
 800249a:	6163      	str	r3, [r4, #20]
 800249c:	b002      	add	sp, #8
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	466a      	mov	r2, sp
 80024a2:	ab01      	add	r3, sp, #4
 80024a4:	f7ff ffc8 	bl	8002438 <__swhatbuf_r>
 80024a8:	9900      	ldr	r1, [sp, #0]
 80024aa:	4605      	mov	r5, r0
 80024ac:	4630      	mov	r0, r6
 80024ae:	f7ff f9d3 	bl	8001858 <_malloc_r>
 80024b2:	b948      	cbnz	r0, 80024c8 <__smakebuf_r+0x44>
 80024b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024b8:	059a      	lsls	r2, r3, #22
 80024ba:	d4ef      	bmi.n	800249c <__smakebuf_r+0x18>
 80024bc:	f023 0303 	bic.w	r3, r3, #3
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	81a3      	strh	r3, [r4, #12]
 80024c6:	e7e3      	b.n	8002490 <__smakebuf_r+0xc>
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <__smakebuf_r+0x7c>)
 80024ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80024cc:	89a3      	ldrh	r3, [r4, #12]
 80024ce:	6020      	str	r0, [r4, #0]
 80024d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d4:	81a3      	strh	r3, [r4, #12]
 80024d6:	9b00      	ldr	r3, [sp, #0]
 80024d8:	6120      	str	r0, [r4, #16]
 80024da:	6163      	str	r3, [r4, #20]
 80024dc:	9b01      	ldr	r3, [sp, #4]
 80024de:	b15b      	cbz	r3, 80024f8 <__smakebuf_r+0x74>
 80024e0:	4630      	mov	r0, r6
 80024e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024e6:	f000 f8e3 	bl	80026b0 <_isatty_r>
 80024ea:	b128      	cbz	r0, 80024f8 <__smakebuf_r+0x74>
 80024ec:	89a3      	ldrh	r3, [r4, #12]
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	81a3      	strh	r3, [r4, #12]
 80024f8:	89a0      	ldrh	r0, [r4, #12]
 80024fa:	4305      	orrs	r5, r0
 80024fc:	81a5      	strh	r5, [r4, #12]
 80024fe:	e7cd      	b.n	800249c <__smakebuf_r+0x18>
 8002500:	08002291 	.word	0x08002291

08002504 <memchr>:
 8002504:	4603      	mov	r3, r0
 8002506:	b510      	push	{r4, lr}
 8002508:	b2c9      	uxtb	r1, r1
 800250a:	4402      	add	r2, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	4618      	mov	r0, r3
 8002510:	d101      	bne.n	8002516 <memchr+0x12>
 8002512:	2000      	movs	r0, #0
 8002514:	e003      	b.n	800251e <memchr+0x1a>
 8002516:	7804      	ldrb	r4, [r0, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	428c      	cmp	r4, r1
 800251c:	d1f6      	bne.n	800250c <memchr+0x8>
 800251e:	bd10      	pop	{r4, pc}

08002520 <__malloc_lock>:
 8002520:	4801      	ldr	r0, [pc, #4]	; (8002528 <__malloc_lock+0x8>)
 8002522:	f7ff bf87 	b.w	8002434 <__retarget_lock_acquire_recursive>
 8002526:	bf00      	nop
 8002528:	20000110 	.word	0x20000110

0800252c <__malloc_unlock>:
 800252c:	4801      	ldr	r0, [pc, #4]	; (8002534 <__malloc_unlock+0x8>)
 800252e:	f7ff bf82 	b.w	8002436 <__retarget_lock_release_recursive>
 8002532:	bf00      	nop
 8002534:	20000110 	.word	0x20000110

08002538 <_raise_r>:
 8002538:	291f      	cmp	r1, #31
 800253a:	b538      	push	{r3, r4, r5, lr}
 800253c:	4604      	mov	r4, r0
 800253e:	460d      	mov	r5, r1
 8002540:	d904      	bls.n	800254c <_raise_r+0x14>
 8002542:	2316      	movs	r3, #22
 8002544:	6003      	str	r3, [r0, #0]
 8002546:	f04f 30ff 	mov.w	r0, #4294967295
 800254a:	bd38      	pop	{r3, r4, r5, pc}
 800254c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800254e:	b112      	cbz	r2, 8002556 <_raise_r+0x1e>
 8002550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002554:	b94b      	cbnz	r3, 800256a <_raise_r+0x32>
 8002556:	4620      	mov	r0, r4
 8002558:	f000 f830 	bl	80025bc <_getpid_r>
 800255c:	462a      	mov	r2, r5
 800255e:	4601      	mov	r1, r0
 8002560:	4620      	mov	r0, r4
 8002562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002566:	f000 b817 	b.w	8002598 <_kill_r>
 800256a:	2b01      	cmp	r3, #1
 800256c:	d00a      	beq.n	8002584 <_raise_r+0x4c>
 800256e:	1c59      	adds	r1, r3, #1
 8002570:	d103      	bne.n	800257a <_raise_r+0x42>
 8002572:	2316      	movs	r3, #22
 8002574:	6003      	str	r3, [r0, #0]
 8002576:	2001      	movs	r0, #1
 8002578:	e7e7      	b.n	800254a <_raise_r+0x12>
 800257a:	2400      	movs	r4, #0
 800257c:	4628      	mov	r0, r5
 800257e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002582:	4798      	blx	r3
 8002584:	2000      	movs	r0, #0
 8002586:	e7e0      	b.n	800254a <_raise_r+0x12>

08002588 <raise>:
 8002588:	4b02      	ldr	r3, [pc, #8]	; (8002594 <raise+0xc>)
 800258a:	4601      	mov	r1, r0
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	f7ff bfd3 	b.w	8002538 <_raise_r>
 8002592:	bf00      	nop
 8002594:	20000078 	.word	0x20000078

08002598 <_kill_r>:
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	2300      	movs	r3, #0
 800259c:	4d06      	ldr	r5, [pc, #24]	; (80025b8 <_kill_r+0x20>)
 800259e:	4604      	mov	r4, r0
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	602b      	str	r3, [r5, #0]
 80025a6:	f7fe f824 	bl	80005f2 <_kill>
 80025aa:	1c43      	adds	r3, r0, #1
 80025ac:	d102      	bne.n	80025b4 <_kill_r+0x1c>
 80025ae:	682b      	ldr	r3, [r5, #0]
 80025b0:	b103      	cbz	r3, 80025b4 <_kill_r+0x1c>
 80025b2:	6023      	str	r3, [r4, #0]
 80025b4:	bd38      	pop	{r3, r4, r5, pc}
 80025b6:	bf00      	nop
 80025b8:	20000114 	.word	0x20000114

080025bc <_getpid_r>:
 80025bc:	f7fe b812 	b.w	80005e4 <_getpid>

080025c0 <__sread>:
 80025c0:	b510      	push	{r4, lr}
 80025c2:	460c      	mov	r4, r1
 80025c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c8:	f000 f894 	bl	80026f4 <_read_r>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	bfab      	itete	ge
 80025d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025d2:	89a3      	ldrhlt	r3, [r4, #12]
 80025d4:	181b      	addge	r3, r3, r0
 80025d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025da:	bfac      	ite	ge
 80025dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80025de:	81a3      	strhlt	r3, [r4, #12]
 80025e0:	bd10      	pop	{r4, pc}

080025e2 <__swrite>:
 80025e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e6:	461f      	mov	r7, r3
 80025e8:	898b      	ldrh	r3, [r1, #12]
 80025ea:	4605      	mov	r5, r0
 80025ec:	05db      	lsls	r3, r3, #23
 80025ee:	460c      	mov	r4, r1
 80025f0:	4616      	mov	r6, r2
 80025f2:	d505      	bpl.n	8002600 <__swrite+0x1e>
 80025f4:	2302      	movs	r3, #2
 80025f6:	2200      	movs	r2, #0
 80025f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025fc:	f000 f868 	bl	80026d0 <_lseek_r>
 8002600:	89a3      	ldrh	r3, [r4, #12]
 8002602:	4632      	mov	r2, r6
 8002604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002608:	81a3      	strh	r3, [r4, #12]
 800260a:	4628      	mov	r0, r5
 800260c:	463b      	mov	r3, r7
 800260e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002616:	f000 b817 	b.w	8002648 <_write_r>

0800261a <__sseek>:
 800261a:	b510      	push	{r4, lr}
 800261c:	460c      	mov	r4, r1
 800261e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002622:	f000 f855 	bl	80026d0 <_lseek_r>
 8002626:	1c43      	adds	r3, r0, #1
 8002628:	89a3      	ldrh	r3, [r4, #12]
 800262a:	bf15      	itete	ne
 800262c:	6560      	strne	r0, [r4, #84]	; 0x54
 800262e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002636:	81a3      	strheq	r3, [r4, #12]
 8002638:	bf18      	it	ne
 800263a:	81a3      	strhne	r3, [r4, #12]
 800263c:	bd10      	pop	{r4, pc}

0800263e <__sclose>:
 800263e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002642:	f000 b813 	b.w	800266c <_close_r>
	...

08002648 <_write_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4604      	mov	r4, r0
 800264c:	4608      	mov	r0, r1
 800264e:	4611      	mov	r1, r2
 8002650:	2200      	movs	r2, #0
 8002652:	4d05      	ldr	r5, [pc, #20]	; (8002668 <_write_r+0x20>)
 8002654:	602a      	str	r2, [r5, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	f7fe f802 	bl	8000660 <_write>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d102      	bne.n	8002666 <_write_r+0x1e>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	b103      	cbz	r3, 8002666 <_write_r+0x1e>
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	20000114 	.word	0x20000114

0800266c <_close_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	2300      	movs	r3, #0
 8002670:	4d05      	ldr	r5, [pc, #20]	; (8002688 <_close_r+0x1c>)
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	f7fe f80e 	bl	8000698 <_close>
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	d102      	bne.n	8002686 <_close_r+0x1a>
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	b103      	cbz	r3, 8002686 <_close_r+0x1a>
 8002684:	6023      	str	r3, [r4, #0]
 8002686:	bd38      	pop	{r3, r4, r5, pc}
 8002688:	20000114 	.word	0x20000114

0800268c <_fstat_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	2300      	movs	r3, #0
 8002690:	4d06      	ldr	r5, [pc, #24]	; (80026ac <_fstat_r+0x20>)
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	602b      	str	r3, [r5, #0]
 800269a:	f7fe f808 	bl	80006ae <_fstat>
 800269e:	1c43      	adds	r3, r0, #1
 80026a0:	d102      	bne.n	80026a8 <_fstat_r+0x1c>
 80026a2:	682b      	ldr	r3, [r5, #0]
 80026a4:	b103      	cbz	r3, 80026a8 <_fstat_r+0x1c>
 80026a6:	6023      	str	r3, [r4, #0]
 80026a8:	bd38      	pop	{r3, r4, r5, pc}
 80026aa:	bf00      	nop
 80026ac:	20000114 	.word	0x20000114

080026b0 <_isatty_r>:
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	2300      	movs	r3, #0
 80026b4:	4d05      	ldr	r5, [pc, #20]	; (80026cc <_isatty_r+0x1c>)
 80026b6:	4604      	mov	r4, r0
 80026b8:	4608      	mov	r0, r1
 80026ba:	602b      	str	r3, [r5, #0]
 80026bc:	f7fe f806 	bl	80006cc <_isatty>
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	d102      	bne.n	80026ca <_isatty_r+0x1a>
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	b103      	cbz	r3, 80026ca <_isatty_r+0x1a>
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	20000114 	.word	0x20000114

080026d0 <_lseek_r>:
 80026d0:	b538      	push	{r3, r4, r5, lr}
 80026d2:	4604      	mov	r4, r0
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	4d05      	ldr	r5, [pc, #20]	; (80026f0 <_lseek_r+0x20>)
 80026dc:	602a      	str	r2, [r5, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	f7fd fffe 	bl	80006e0 <_lseek>
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d102      	bne.n	80026ee <_lseek_r+0x1e>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	b103      	cbz	r3, 80026ee <_lseek_r+0x1e>
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
 80026f0:	20000114 	.word	0x20000114

080026f4 <_read_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	2200      	movs	r2, #0
 80026fe:	4d05      	ldr	r5, [pc, #20]	; (8002714 <_read_r+0x20>)
 8002700:	602a      	str	r2, [r5, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	f7fd ff8f 	bl	8000626 <_read>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_read_r+0x1e>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	b103      	cbz	r3, 8002712 <_read_r+0x1e>
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	20000114 	.word	0x20000114

08002718 <_init>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr

08002724 <_fini>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	bf00      	nop
 8002728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272a:	bc08      	pop	{r3}
 800272c:	469e      	mov	lr, r3
 800272e:	4770      	bx	lr
